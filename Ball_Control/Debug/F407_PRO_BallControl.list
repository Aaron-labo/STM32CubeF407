
F407_PRO_BallControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d600  0800f588  0800f588  0001f588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cb88  0801cb88  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801cb88  0801cb88  0002cb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cb90  0801cb90  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cb90  0801cb90  0002cb90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cb94  0801cb94  0002cb94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0801cb98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200001e8  0801cd80  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  0801cd80  000305f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c509  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c7b  00000000  00000000  0004c721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  000503a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  000517b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002567d  00000000  00000000  00052a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a684  00000000  00000000  000780cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d35f2  00000000  00000000  00092751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165d43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006848  00000000  00000000  00165d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f56c 	.word	0x0800f56c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800f56c 	.word	0x0800f56c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <keyboard_scan>:
 *      Author: Francis
 */

#include "keyboard.h"

uint8_t keyboard_scan(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	uint8_t i, keynum = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	71bb      	strb	r3, [r7, #6]
	static uint8_t lastnum = 0;
	if (Row1_INPUT_Read == GPIO_PIN_RESET) {			//当有按键按下
 8000f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8e:	48b8      	ldr	r0, [pc, #736]	; (8001270 <keyboard_scan+0x2f0>)
 8000f90:	f006 ff46 	bl	8007e20 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d167      	bne.n	800106a <keyboard_scan+0xea>
		HAL_Delay(20);
 8000f9a:	2014      	movs	r0, #20
 8000f9c:	f006 f86c 	bl	8007078 <HAL_Delay>
		if (Row1_INPUT_Read == GPIO_PIN_RESET) { //消抖
 8000fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa4:	48b2      	ldr	r0, [pc, #712]	; (8001270 <keyboard_scan+0x2f0>)
 8000fa6:	f006 ff3b 	bl	8007e20 <HAL_GPIO_ReadPin>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f040 81c7 	bne.w	8001340 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	e054      	b.n	8001062 <keyboard_scan+0xe2>
				if (i == 1)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d105      	bne.n	8000fca <keyboard_scan+0x4a>
					Column1_OUT_High;		//逐个拉低每列的IO
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	48ab      	ldr	r0, [pc, #684]	; (8001270 <keyboard_scan+0x2f0>)
 8000fc4:	f006 ff44 	bl	8007e50 <HAL_GPIO_WritePin>
 8000fc8:	e01a      	b.n	8001000 <keyboard_scan+0x80>
				else if (i == 2)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d105      	bne.n	8000fdc <keyboard_scan+0x5c>
					Column2_OUT_High;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	48a6      	ldr	r0, [pc, #664]	; (8001270 <keyboard_scan+0x2f0>)
 8000fd6:	f006 ff3b 	bl	8007e50 <HAL_GPIO_WritePin>
 8000fda:	e011      	b.n	8001000 <keyboard_scan+0x80>
				else if (i == 3)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d105      	bne.n	8000fee <keyboard_scan+0x6e>
					Column3_OUT_High;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	48a2      	ldr	r0, [pc, #648]	; (8001270 <keyboard_scan+0x2f0>)
 8000fe8:	f006 ff32 	bl	8007e50 <HAL_GPIO_WritePin>
 8000fec:	e008      	b.n	8001000 <keyboard_scan+0x80>
				else if (i == 4)
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	d105      	bne.n	8001000 <keyboard_scan+0x80>
					Column4_OUT_High;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffa:	489d      	ldr	r0, [pc, #628]	; (8001270 <keyboard_scan+0x2f0>)
 8000ffc:	f006 ff28 	bl	8007e50 <HAL_GPIO_WritePin>

				if (Row1_INPUT_Read == GPIO_PIN_SET) //如果检测到行IO电平跟着变化，则判断为该按键按下
 8001000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001004:	489a      	ldr	r0, [pc, #616]	; (8001270 <keyboard_scan+0x2f0>)
 8001006:	f006 ff0b 	bl	8007e20 <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
 800100c:	2b01      	cmp	r3, #1
 800100e:	d101      	bne.n	8001014 <keyboard_scan+0x94>
					keynum = i;
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d105      	bne.n	8001026 <keyboard_scan+0xa6>
					Column1_OUT_Low;
 800101a:	2200      	movs	r2, #0
 800101c:	2108      	movs	r1, #8
 800101e:	4894      	ldr	r0, [pc, #592]	; (8001270 <keyboard_scan+0x2f0>)
 8001020:	f006 ff16 	bl	8007e50 <HAL_GPIO_WritePin>
 8001024:	e01a      	b.n	800105c <keyboard_scan+0xdc>
				else if (i == 2)
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d105      	bne.n	8001038 <keyboard_scan+0xb8>
					Column2_OUT_Low;
 800102c:	2200      	movs	r2, #0
 800102e:	2120      	movs	r1, #32
 8001030:	488f      	ldr	r0, [pc, #572]	; (8001270 <keyboard_scan+0x2f0>)
 8001032:	f006 ff0d 	bl	8007e50 <HAL_GPIO_WritePin>
 8001036:	e011      	b.n	800105c <keyboard_scan+0xdc>
				else if (i == 3)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d105      	bne.n	800104a <keyboard_scan+0xca>
					Column3_OUT_Low;	//每次列IO电平操作之后记得复原
 800103e:	2200      	movs	r2, #0
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	488b      	ldr	r0, [pc, #556]	; (8001270 <keyboard_scan+0x2f0>)
 8001044:	f006 ff04 	bl	8007e50 <HAL_GPIO_WritePin>
 8001048:	e008      	b.n	800105c <keyboard_scan+0xdc>
				else if (i == 4)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b04      	cmp	r3, #4
 800104e:	d105      	bne.n	800105c <keyboard_scan+0xdc>
					Column4_OUT_Low;
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001056:	4886      	ldr	r0, [pc, #536]	; (8001270 <keyboard_scan+0x2f0>)
 8001058:	f006 fefa 	bl	8007e50 <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	3301      	adds	r3, #1
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b04      	cmp	r3, #4
 8001066:	d9a7      	bls.n	8000fb8 <keyboard_scan+0x38>
 8001068:	e16a      	b.n	8001340 <keyboard_scan+0x3c0>
			}
		}
	} else if (Row2_INPUT_Read == GPIO_PIN_RESET) {
 800106a:	2140      	movs	r1, #64	; 0x40
 800106c:	4880      	ldr	r0, [pc, #512]	; (8001270 <keyboard_scan+0x2f0>)
 800106e:	f006 fed7 	bl	8007e20 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d166      	bne.n	8001146 <keyboard_scan+0x1c6>
		HAL_Delay(20);
 8001078:	2014      	movs	r0, #20
 800107a:	f005 fffd 	bl	8007078 <HAL_Delay>
		if (Row2_INPUT_Read == GPIO_PIN_RESET) { //消抖
 800107e:	2140      	movs	r1, #64	; 0x40
 8001080:	487b      	ldr	r0, [pc, #492]	; (8001270 <keyboard_scan+0x2f0>)
 8001082:	f006 fecd 	bl	8007e20 <HAL_GPIO_ReadPin>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	f040 8159 	bne.w	8001340 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 800108e:	2301      	movs	r3, #1
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	e054      	b.n	800113e <keyboard_scan+0x1be>
				if (i == 1)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d105      	bne.n	80010a6 <keyboard_scan+0x126>
					Column1_OUT_High;
 800109a:	2201      	movs	r2, #1
 800109c:	2108      	movs	r1, #8
 800109e:	4874      	ldr	r0, [pc, #464]	; (8001270 <keyboard_scan+0x2f0>)
 80010a0:	f006 fed6 	bl	8007e50 <HAL_GPIO_WritePin>
 80010a4:	e01a      	b.n	80010dc <keyboard_scan+0x15c>
				else if (i == 2)
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d105      	bne.n	80010b8 <keyboard_scan+0x138>
					Column2_OUT_High;
 80010ac:	2201      	movs	r2, #1
 80010ae:	2120      	movs	r1, #32
 80010b0:	486f      	ldr	r0, [pc, #444]	; (8001270 <keyboard_scan+0x2f0>)
 80010b2:	f006 fecd 	bl	8007e50 <HAL_GPIO_WritePin>
 80010b6:	e011      	b.n	80010dc <keyboard_scan+0x15c>
				else if (i == 3)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d105      	bne.n	80010ca <keyboard_scan+0x14a>
					Column3_OUT_High;
 80010be:	2201      	movs	r2, #1
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	486b      	ldr	r0, [pc, #428]	; (8001270 <keyboard_scan+0x2f0>)
 80010c4:	f006 fec4 	bl	8007e50 <HAL_GPIO_WritePin>
 80010c8:	e008      	b.n	80010dc <keyboard_scan+0x15c>
				else if (i == 4)
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d105      	bne.n	80010dc <keyboard_scan+0x15c>
					Column4_OUT_High;
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d6:	4866      	ldr	r0, [pc, #408]	; (8001270 <keyboard_scan+0x2f0>)
 80010d8:	f006 feba 	bl	8007e50 <HAL_GPIO_WritePin>

				if (Row2_INPUT_Read == GPIO_PIN_SET)
 80010dc:	2140      	movs	r1, #64	; 0x40
 80010de:	4864      	ldr	r0, [pc, #400]	; (8001270 <keyboard_scan+0x2f0>)
 80010e0:	f006 fe9e 	bl	8007e20 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d102      	bne.n	80010f0 <keyboard_scan+0x170>
					keynum = i + 4;
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	3304      	adds	r3, #4
 80010ee:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d105      	bne.n	8001102 <keyboard_scan+0x182>
					Column1_OUT_Low;
 80010f6:	2200      	movs	r2, #0
 80010f8:	2108      	movs	r1, #8
 80010fa:	485d      	ldr	r0, [pc, #372]	; (8001270 <keyboard_scan+0x2f0>)
 80010fc:	f006 fea8 	bl	8007e50 <HAL_GPIO_WritePin>
 8001100:	e01a      	b.n	8001138 <keyboard_scan+0x1b8>
				else if (i == 2)
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d105      	bne.n	8001114 <keyboard_scan+0x194>
					Column2_OUT_Low;
 8001108:	2200      	movs	r2, #0
 800110a:	2120      	movs	r1, #32
 800110c:	4858      	ldr	r0, [pc, #352]	; (8001270 <keyboard_scan+0x2f0>)
 800110e:	f006 fe9f 	bl	8007e50 <HAL_GPIO_WritePin>
 8001112:	e011      	b.n	8001138 <keyboard_scan+0x1b8>
				else if (i == 3)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d105      	bne.n	8001126 <keyboard_scan+0x1a6>
					Column3_OUT_Low;
 800111a:	2200      	movs	r2, #0
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	4854      	ldr	r0, [pc, #336]	; (8001270 <keyboard_scan+0x2f0>)
 8001120:	f006 fe96 	bl	8007e50 <HAL_GPIO_WritePin>
 8001124:	e008      	b.n	8001138 <keyboard_scan+0x1b8>
				else if (i == 4)
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b04      	cmp	r3, #4
 800112a:	d105      	bne.n	8001138 <keyboard_scan+0x1b8>
					Column4_OUT_Low;
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001132:	484f      	ldr	r0, [pc, #316]	; (8001270 <keyboard_scan+0x2f0>)
 8001134:	f006 fe8c 	bl	8007e50 <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	3301      	adds	r3, #1
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b04      	cmp	r3, #4
 8001142:	d9a7      	bls.n	8001094 <keyboard_scan+0x114>
 8001144:	e0fc      	b.n	8001340 <keyboard_scan+0x3c0>

			}
		}
	} else if (Row3_INPUT_Read == GPIO_PIN_RESET) {
 8001146:	2110      	movs	r1, #16
 8001148:	4849      	ldr	r0, [pc, #292]	; (8001270 <keyboard_scan+0x2f0>)
 800114a:	f006 fe69 	bl	8007e20 <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d166      	bne.n	8001222 <keyboard_scan+0x2a2>
		HAL_Delay(20);
 8001154:	2014      	movs	r0, #20
 8001156:	f005 ff8f 	bl	8007078 <HAL_Delay>
		if (Row3_INPUT_Read == GPIO_PIN_RESET) { //消抖
 800115a:	2110      	movs	r1, #16
 800115c:	4844      	ldr	r0, [pc, #272]	; (8001270 <keyboard_scan+0x2f0>)
 800115e:	f006 fe5f 	bl	8007e20 <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	f040 80eb 	bne.w	8001340 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 800116a:	2301      	movs	r3, #1
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	e054      	b.n	800121a <keyboard_scan+0x29a>
				if (i == 1)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d105      	bne.n	8001182 <keyboard_scan+0x202>
					Column1_OUT_High;
 8001176:	2201      	movs	r2, #1
 8001178:	2108      	movs	r1, #8
 800117a:	483d      	ldr	r0, [pc, #244]	; (8001270 <keyboard_scan+0x2f0>)
 800117c:	f006 fe68 	bl	8007e50 <HAL_GPIO_WritePin>
 8001180:	e01a      	b.n	80011b8 <keyboard_scan+0x238>
				else if (i == 2)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d105      	bne.n	8001194 <keyboard_scan+0x214>
					Column2_OUT_High;
 8001188:	2201      	movs	r2, #1
 800118a:	2120      	movs	r1, #32
 800118c:	4838      	ldr	r0, [pc, #224]	; (8001270 <keyboard_scan+0x2f0>)
 800118e:	f006 fe5f 	bl	8007e50 <HAL_GPIO_WritePin>
 8001192:	e011      	b.n	80011b8 <keyboard_scan+0x238>
				else if (i == 3)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d105      	bne.n	80011a6 <keyboard_scan+0x226>
					Column3_OUT_High;
 800119a:	2201      	movs	r2, #1
 800119c:	2180      	movs	r1, #128	; 0x80
 800119e:	4834      	ldr	r0, [pc, #208]	; (8001270 <keyboard_scan+0x2f0>)
 80011a0:	f006 fe56 	bl	8007e50 <HAL_GPIO_WritePin>
 80011a4:	e008      	b.n	80011b8 <keyboard_scan+0x238>
				else if (i == 4)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d105      	bne.n	80011b8 <keyboard_scan+0x238>
					Column4_OUT_High;
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b2:	482f      	ldr	r0, [pc, #188]	; (8001270 <keyboard_scan+0x2f0>)
 80011b4:	f006 fe4c 	bl	8007e50 <HAL_GPIO_WritePin>

				if (Row3_INPUT_Read == GPIO_PIN_SET)
 80011b8:	2110      	movs	r1, #16
 80011ba:	482d      	ldr	r0, [pc, #180]	; (8001270 <keyboard_scan+0x2f0>)
 80011bc:	f006 fe30 	bl	8007e20 <HAL_GPIO_ReadPin>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d102      	bne.n	80011cc <keyboard_scan+0x24c>
					keynum = i + 8;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	3308      	adds	r3, #8
 80011ca:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d105      	bne.n	80011de <keyboard_scan+0x25e>
					Column1_OUT_Low;
 80011d2:	2200      	movs	r2, #0
 80011d4:	2108      	movs	r1, #8
 80011d6:	4826      	ldr	r0, [pc, #152]	; (8001270 <keyboard_scan+0x2f0>)
 80011d8:	f006 fe3a 	bl	8007e50 <HAL_GPIO_WritePin>
 80011dc:	e01a      	b.n	8001214 <keyboard_scan+0x294>
				else if (i == 2)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d105      	bne.n	80011f0 <keyboard_scan+0x270>
					Column2_OUT_Low;
 80011e4:	2200      	movs	r2, #0
 80011e6:	2120      	movs	r1, #32
 80011e8:	4821      	ldr	r0, [pc, #132]	; (8001270 <keyboard_scan+0x2f0>)
 80011ea:	f006 fe31 	bl	8007e50 <HAL_GPIO_WritePin>
 80011ee:	e011      	b.n	8001214 <keyboard_scan+0x294>
				else if (i == 3)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d105      	bne.n	8001202 <keyboard_scan+0x282>
					Column3_OUT_Low;
 80011f6:	2200      	movs	r2, #0
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	481d      	ldr	r0, [pc, #116]	; (8001270 <keyboard_scan+0x2f0>)
 80011fc:	f006 fe28 	bl	8007e50 <HAL_GPIO_WritePin>
 8001200:	e008      	b.n	8001214 <keyboard_scan+0x294>
				else if (i == 4)
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b04      	cmp	r3, #4
 8001206:	d105      	bne.n	8001214 <keyboard_scan+0x294>
					Column4_OUT_Low;
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800120e:	4818      	ldr	r0, [pc, #96]	; (8001270 <keyboard_scan+0x2f0>)
 8001210:	f006 fe1e 	bl	8007e50 <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	3301      	adds	r3, #1
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b04      	cmp	r3, #4
 800121e:	d9a7      	bls.n	8001170 <keyboard_scan+0x1f0>
 8001220:	e08e      	b.n	8001340 <keyboard_scan+0x3c0>

			}
		}
	} else if (Row4_INPUT_Read == GPIO_PIN_RESET) {
 8001222:	2104      	movs	r1, #4
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <keyboard_scan+0x2f0>)
 8001226:	f006 fdfb 	bl	8007e20 <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d168      	bne.n	8001302 <keyboard_scan+0x382>
		HAL_Delay(20);
 8001230:	2014      	movs	r0, #20
 8001232:	f005 ff21 	bl	8007078 <HAL_Delay>
		if (Row4_INPUT_Read == GPIO_PIN_RESET) { //消抖
 8001236:	2104      	movs	r1, #4
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <keyboard_scan+0x2f0>)
 800123a:	f006 fdf1 	bl	8007e20 <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d17d      	bne.n	8001340 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 8001244:	2301      	movs	r3, #1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	e057      	b.n	80012fa <keyboard_scan+0x37a>
				if (i == 1)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d105      	bne.n	800125c <keyboard_scan+0x2dc>
					Column1_OUT_High;
 8001250:	2201      	movs	r2, #1
 8001252:	2108      	movs	r1, #8
 8001254:	4806      	ldr	r0, [pc, #24]	; (8001270 <keyboard_scan+0x2f0>)
 8001256:	f006 fdfb 	bl	8007e50 <HAL_GPIO_WritePin>
 800125a:	e01d      	b.n	8001298 <keyboard_scan+0x318>
				else if (i == 2)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d108      	bne.n	8001274 <keyboard_scan+0x2f4>
					Column2_OUT_High;
 8001262:	2201      	movs	r2, #1
 8001264:	2120      	movs	r1, #32
 8001266:	4802      	ldr	r0, [pc, #8]	; (8001270 <keyboard_scan+0x2f0>)
 8001268:	f006 fdf2 	bl	8007e50 <HAL_GPIO_WritePin>
 800126c:	e014      	b.n	8001298 <keyboard_scan+0x318>
 800126e:	bf00      	nop
 8001270:	40021800 	.word	0x40021800
				else if (i == 3)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d105      	bne.n	8001286 <keyboard_scan+0x306>
					Column3_OUT_High;
 800127a:	2201      	movs	r2, #1
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	483a      	ldr	r0, [pc, #232]	; (8001368 <keyboard_scan+0x3e8>)
 8001280:	f006 fde6 	bl	8007e50 <HAL_GPIO_WritePin>
 8001284:	e008      	b.n	8001298 <keyboard_scan+0x318>
				else if (i == 4)
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b04      	cmp	r3, #4
 800128a:	d105      	bne.n	8001298 <keyboard_scan+0x318>
					Column4_OUT_High;
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001292:	4835      	ldr	r0, [pc, #212]	; (8001368 <keyboard_scan+0x3e8>)
 8001294:	f006 fddc 	bl	8007e50 <HAL_GPIO_WritePin>

				if (Row4_INPUT_Read == GPIO_PIN_SET)
 8001298:	2104      	movs	r1, #4
 800129a:	4833      	ldr	r0, [pc, #204]	; (8001368 <keyboard_scan+0x3e8>)
 800129c:	f006 fdc0 	bl	8007e20 <HAL_GPIO_ReadPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d102      	bne.n	80012ac <keyboard_scan+0x32c>
					keynum = i + 12;
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	330c      	adds	r3, #12
 80012aa:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d105      	bne.n	80012be <keyboard_scan+0x33e>
					Column1_OUT_Low;
 80012b2:	2200      	movs	r2, #0
 80012b4:	2108      	movs	r1, #8
 80012b6:	482c      	ldr	r0, [pc, #176]	; (8001368 <keyboard_scan+0x3e8>)
 80012b8:	f006 fdca 	bl	8007e50 <HAL_GPIO_WritePin>
 80012bc:	e01a      	b.n	80012f4 <keyboard_scan+0x374>
				else if (i == 2)
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d105      	bne.n	80012d0 <keyboard_scan+0x350>
					Column2_OUT_Low;
 80012c4:	2200      	movs	r2, #0
 80012c6:	2120      	movs	r1, #32
 80012c8:	4827      	ldr	r0, [pc, #156]	; (8001368 <keyboard_scan+0x3e8>)
 80012ca:	f006 fdc1 	bl	8007e50 <HAL_GPIO_WritePin>
 80012ce:	e011      	b.n	80012f4 <keyboard_scan+0x374>
				else if (i == 3)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d105      	bne.n	80012e2 <keyboard_scan+0x362>
					Column3_OUT_Low;
 80012d6:	2200      	movs	r2, #0
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	4823      	ldr	r0, [pc, #140]	; (8001368 <keyboard_scan+0x3e8>)
 80012dc:	f006 fdb8 	bl	8007e50 <HAL_GPIO_WritePin>
 80012e0:	e008      	b.n	80012f4 <keyboard_scan+0x374>
				else if (i == 4)
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d105      	bne.n	80012f4 <keyboard_scan+0x374>
					Column4_OUT_Low;
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ee:	481e      	ldr	r0, [pc, #120]	; (8001368 <keyboard_scan+0x3e8>)
 80012f0:	f006 fdae 	bl	8007e50 <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	3301      	adds	r3, #1
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d9a4      	bls.n	800124a <keyboard_scan+0x2ca>
 8001300:	e01e      	b.n	8001340 <keyboard_scan+0x3c0>

			}
		}
	} else if (Row1_INPUT_Read == GPIO_PIN_SET
 8001302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001306:	4818      	ldr	r0, [pc, #96]	; (8001368 <keyboard_scan+0x3e8>)
 8001308:	f006 fd8a 	bl	8007e20 <HAL_GPIO_ReadPin>
 800130c:	4603      	mov	r3, r0
 800130e:	2b01      	cmp	r3, #1
 8001310:	d116      	bne.n	8001340 <keyboard_scan+0x3c0>
			&& Row2_INPUT_Read == GPIO_PIN_RESET
 8001312:	2140      	movs	r1, #64	; 0x40
 8001314:	4814      	ldr	r0, [pc, #80]	; (8001368 <keyboard_scan+0x3e8>)
 8001316:	f006 fd83 	bl	8007e20 <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10f      	bne.n	8001340 <keyboard_scan+0x3c0>
			&& Row3_INPUT_Read == GPIO_PIN_RESET
 8001320:	2110      	movs	r1, #16
 8001322:	4811      	ldr	r0, [pc, #68]	; (8001368 <keyboard_scan+0x3e8>)
 8001324:	f006 fd7c 	bl	8007e20 <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d108      	bne.n	8001340 <keyboard_scan+0x3c0>
			&& Row4_INPUT_Read == GPIO_PIN_RESET) {
 800132e:	2104      	movs	r1, #4
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <keyboard_scan+0x3e8>)
 8001332:	f006 fd75 	bl	8007e20 <HAL_GPIO_ReadPin>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <keyboard_scan+0x3c0>
		return NOPRES;
 800133c:	2300      	movs	r3, #0
 800133e:	e00f      	b.n	8001360 <keyboard_scan+0x3e0>
	}

	if(lastnum == keynum)
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <keyboard_scan+0x3ec>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	79ba      	ldrb	r2, [r7, #6]
 8001346:	429a      	cmp	r2, r3
 8001348:	d101      	bne.n	800134e <keyboard_scan+0x3ce>
	{
		return NOPRES;
 800134a:	2300      	movs	r3, #0
 800134c:	e008      	b.n	8001360 <keyboard_scan+0x3e0>
	}
	lastnum = keynum;
 800134e:	4a07      	ldr	r2, [pc, #28]	; (800136c <keyboard_scan+0x3ec>)
 8001350:	79bb      	ldrb	r3, [r7, #6]
 8001352:	7013      	strb	r3, [r2, #0]

	ShowMode(keynum, 0xff);
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	21ff      	movs	r1, #255	; 0xff
 8001358:	4618      	mov	r0, r3
 800135a:	f004 f807 	bl	800536c <ShowMode>

	return keynum;
 800135e:	79bb      	ldrb	r3, [r7, #6]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021800 	.word	0x40021800
 800136c:	20000204 	.word	0x20000204

08001370 <LCD_WR_REG>:
_lcd_dev lcddev;

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(__IO uint16_t regval)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
	regval=regval;		//使用-O2优化的时候,必须插入的延时
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	b29b      	uxth	r3, r3
 800137e:	80fb      	strh	r3, [r7, #6]
	TFT_LCD->LCD_REG=regval;//写入要写的寄存器序号
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <LCD_WR_REG+0x24>)
 8001382:	88fa      	ldrh	r2, [r7, #6]
 8001384:	b292      	uxth	r2, r2
 8001386:	801a      	strh	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	6c00007e 	.word	0x6c00007e

08001398 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(__IO uint16_t data)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
	data=data;			//使用-O2优化的时候,必须插入的延时
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	80fb      	strh	r3, [r7, #6]
	TFT_LCD->LCD_RAM=data;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <LCD_WR_DATA+0x24>)
 80013aa:	88fa      	ldrh	r2, [r7, #6]
 80013ac:	b292      	uxth	r2, r2
 80013ae:	805a      	strh	r2, [r3, #2]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	6c00007e 	.word	0x6c00007e

080013c0 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//防止被优化
	ram=TFT_LCD->LCD_RAM;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <LCD_RD_DATA+0x20>)
 80013c8:	885b      	ldrh	r3, [r3, #2]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	80fb      	strh	r3, [r7, #6]
	return ram;
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	b29b      	uxth	r3, r3
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	6c00007e 	.word	0x6c00007e

080013e4 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	460a      	mov	r2, r1
 80013ee:	80fb      	strh	r3, [r7, #6]
 80013f0:	4613      	mov	r3, r2
 80013f2:	80bb      	strh	r3, [r7, #4]
	TFT_LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 80013f4:	4a05      	ldr	r2, [pc, #20]	; (800140c <LCD_WriteReg+0x28>)
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	8013      	strh	r3, [r2, #0]
	TFT_LCD->LCD_RAM = LCD_RegValue;//写入数据
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <LCD_WriteReg+0x28>)
 80013fc:	88bb      	ldrh	r3, [r7, #4]
 80013fe:	8053      	strh	r3, [r2, #2]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	6c00007e 	.word	0x6c00007e

08001410 <opt_delay>:

//当mdk -O1时间优化时需要设置
//延时i
void opt_delay(uint8_t i)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	while(i--);
 800141a:	bf00      	nop
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	71fa      	strb	r2, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1fa      	bne.n	800141c <opt_delay+0xc>
}
 8001426:	bf00      	nop
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LCD_WriteRAM_Prepare>:
	opt_delay(5);
	return LCD_RD_DATA();		//返回读到的值
}
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
 	TFT_LCD->LCD_REG=lcddev.wramcmd;
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <LCD_WriteRAM_Prepare+0x18>)
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <LCD_WriteRAM_Prepare+0x1c>)
 800143c:	8912      	ldrh	r2, [r2, #8]
 800143e:	801a      	strh	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	6c00007e 	.word	0x6c00007e
 8001450:	20000310 	.word	0x20000310

08001454 <LCD_SetCursor>:
}
//设置光标位置(对RGB屏无效)
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	460a      	mov	r2, r1
 800145e:	80fb      	strh	r3, [r7, #6]
 8001460:	4613      	mov	r3, r2
 8001462:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001464:	4b6b      	ldr	r3, [pc, #428]	; (8001614 <LCD_SetCursor+0x1c0>)
 8001466:	889b      	ldrh	r3, [r3, #4]
 8001468:	f249 3241 	movw	r2, #37697	; 0x9341
 800146c:	4293      	cmp	r3, r2
 800146e:	d005      	beq.n	800147c <LCD_SetCursor+0x28>
 8001470:	4b68      	ldr	r3, [pc, #416]	; (8001614 <LCD_SetCursor+0x1c0>)
 8001472:	889b      	ldrh	r3, [r3, #4]
 8001474:	f245 3210 	movw	r2, #21264	; 0x5310
 8001478:	4293      	cmp	r3, r2
 800147a:	d122      	bne.n	80014c2 <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 800147c:	4b65      	ldr	r3, [pc, #404]	; (8001614 <LCD_SetCursor+0x1c0>)
 800147e:	895b      	ldrh	r3, [r3, #10]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff75 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff83 	bl	8001398 <LCD_WR_DATA>
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff7d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800149e:	4b5d      	ldr	r3, [pc, #372]	; (8001614 <LCD_SetCursor+0x1c0>)
 80014a0:	899b      	ldrh	r3, [r3, #12]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff64 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 80014a8:	88bb      	ldrh	r3, [r7, #4]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff72 	bl	8001398 <LCD_WR_DATA>
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff6c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
	}
}
 80014c0:	e0a3      	b.n	800160a <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X1963)
 80014c2:	4b54      	ldr	r3, [pc, #336]	; (8001614 <LCD_SetCursor+0x1c0>)
 80014c4:	889b      	ldrh	r3, [r3, #4]
 80014c6:	f641 1263 	movw	r2, #6499	; 0x1963
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d167      	bne.n	800159e <LCD_SetCursor+0x14a>
		if(lcddev.dir==0)//x坐标需要变换
 80014ce:	4b51      	ldr	r3, [pc, #324]	; (8001614 <LCD_SetCursor+0x1c0>)
 80014d0:	799b      	ldrb	r3, [r3, #6]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d11e      	bne.n	8001514 <LCD_SetCursor+0xc0>
			Xpos=lcddev.width-1-Xpos;
 80014d6:	4b4f      	ldr	r3, [pc, #316]	; (8001614 <LCD_SetCursor+0x1c0>)
 80014d8:	881a      	ldrh	r2, [r3, #0]
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	b29b      	uxth	r3, r3
 80014e0:	3b01      	subs	r3, #1
 80014e2:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 80014e4:	4b4b      	ldr	r3, [pc, #300]	; (8001614 <LCD_SetCursor+0x1c0>)
 80014e6:	895b      	ldrh	r3, [r3, #10]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff41 	bl	8001370 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff ff52 	bl	8001398 <LCD_WR_DATA>
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff ff4f 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff49 	bl	8001398 <LCD_WR_DATA>
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff43 	bl	8001398 <LCD_WR_DATA>
 8001512:	e021      	b.n	8001558 <LCD_SetCursor+0x104>
			LCD_WR_REG(lcddev.setxcmd);
 8001514:	4b3f      	ldr	r3, [pc, #252]	; (8001614 <LCD_SetCursor+0x1c0>)
 8001516:	895b      	ldrh	r3, [r3, #10]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff29 	bl	8001370 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	b29b      	uxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff37 	bl	8001398 <LCD_WR_DATA>
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	b29b      	uxth	r3, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff31 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001536:	4b37      	ldr	r3, [pc, #220]	; (8001614 <LCD_SetCursor+0x1c0>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	3b01      	subs	r3, #1
 800153c:	121b      	asrs	r3, r3, #8
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff29 	bl	8001398 <LCD_WR_DATA>
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <LCD_SetCursor+0x1c0>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	3b01      	subs	r3, #1
 800154c:	b29b      	uxth	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	b29b      	uxth	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff20 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <LCD_SetCursor+0x1c0>)
 800155a:	899b      	ldrh	r3, [r3, #12]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff07 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8001562:	88bb      	ldrh	r3, [r7, #4]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	b29b      	uxth	r3, r3
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff15 	bl	8001398 <LCD_WR_DATA>
 800156e:	88bb      	ldrh	r3, [r7, #4]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	b29b      	uxth	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff0f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 800157a:	4b26      	ldr	r3, [pc, #152]	; (8001614 <LCD_SetCursor+0x1c0>)
 800157c:	885b      	ldrh	r3, [r3, #2]
 800157e:	3b01      	subs	r3, #1
 8001580:	121b      	asrs	r3, r3, #8
 8001582:	b29b      	uxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff07 	bl	8001398 <LCD_WR_DATA>
 800158a:	4b22      	ldr	r3, [pc, #136]	; (8001614 <LCD_SetCursor+0x1c0>)
 800158c:	885b      	ldrh	r3, [r3, #2]
 800158e:	3b01      	subs	r3, #1
 8001590:	b29b      	uxth	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fefe 	bl	8001398 <LCD_WR_DATA>
}
 800159c:	e035      	b.n	800160a <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X5510)
 800159e:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <LCD_SetCursor+0x1c0>)
 80015a0:	889b      	ldrh	r3, [r3, #4]
 80015a2:	f245 5210 	movw	r2, #21776	; 0x5510
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d12f      	bne.n	800160a <LCD_SetCursor+0x1b6>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <LCD_SetCursor+0x1c0>)
 80015ac:	895b      	ldrh	r3, [r3, #10]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fede 	bl	8001370 <LCD_WR_REG>
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff feec 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <LCD_SetCursor+0x1c0>)
 80015c2:	895b      	ldrh	r3, [r3, #10]
 80015c4:	3301      	adds	r3, #1
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fed1 	bl	8001370 <LCD_WR_REG>
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fedf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <LCD_SetCursor+0x1c0>)
 80015dc:	899b      	ldrh	r3, [r3, #12]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fec6 	bl	8001370 <LCD_WR_REG>
 80015e4:	88bb      	ldrh	r3, [r7, #4]
 80015e6:	0a1b      	lsrs	r3, r3, #8
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fed4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <LCD_SetCursor+0x1c0>)
 80015f2:	899b      	ldrh	r3, [r3, #12]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff feb9 	bl	8001370 <LCD_WR_REG>
 80015fe:	88bb      	ldrh	r3, [r7, #4]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	b29b      	uxth	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fec7 	bl	8001398 <LCD_WR_DATA>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000310 	.word	0x20000310

08001618 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 8001622:	2300      	movs	r3, #0
 8001624:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 8001626:	2300      	movs	r3, #0
 8001628:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对1963不改变扫描方向！竖屏时1963改变方向
 800162a:	4ba9      	ldr	r3, [pc, #676]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800162c:	799b      	ldrb	r3, [r3, #6]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d105      	bne.n	800163e <LCD_Scan_Dir+0x26>
 8001632:	4ba7      	ldr	r3, [pc, #668]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001634:	889b      	ldrh	r3, [r3, #4]
 8001636:	f641 1263 	movw	r2, #6499	; 0x1963
 800163a:	4293      	cmp	r3, r2
 800163c:	d109      	bne.n	8001652 <LCD_Scan_Dir+0x3a>
 800163e:	4ba4      	ldr	r3, [pc, #656]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001640:	799b      	ldrb	r3, [r3, #6]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d134      	bne.n	80016b0 <LCD_Scan_Dir+0x98>
 8001646:	4ba2      	ldr	r3, [pc, #648]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001648:	889b      	ldrh	r3, [r3, #4]
 800164a:	f641 1263 	movw	r2, #6499	; 0x1963
 800164e:	4293      	cmp	r3, r2
 8001650:	d12e      	bne.n	80016b0 <LCD_Scan_Dir+0x98>
	{
		switch(dir)//方向转换
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b07      	cmp	r3, #7
 8001656:	d82c      	bhi.n	80016b2 <LCD_Scan_Dir+0x9a>
 8001658:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <LCD_Scan_Dir+0x48>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	08001681 	.word	0x08001681
 8001664:	08001687 	.word	0x08001687
 8001668:	0800168d 	.word	0x0800168d
 800166c:	08001693 	.word	0x08001693
 8001670:	08001699 	.word	0x08001699
 8001674:	0800169f 	.word	0x0800169f
 8001678:	080016a5 	.word	0x080016a5
 800167c:	080016ab 	.word	0x080016ab
		{
			case 0:dir=6;break;
 8001680:	2306      	movs	r3, #6
 8001682:	71fb      	strb	r3, [r7, #7]
 8001684:	e015      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
			case 1:dir=7;break;
 8001686:	2307      	movs	r3, #7
 8001688:	71fb      	strb	r3, [r7, #7]
 800168a:	e012      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
			case 2:dir=4;break;
 800168c:	2304      	movs	r3, #4
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	e00f      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
			case 3:dir=5;break;
 8001692:	2305      	movs	r3, #5
 8001694:	71fb      	strb	r3, [r7, #7]
 8001696:	e00c      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
			case 4:dir=1;break;
 8001698:	2301      	movs	r3, #1
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	e009      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
			case 5:dir=0;break;
 800169e:	2300      	movs	r3, #0
 80016a0:	71fb      	strb	r3, [r7, #7]
 80016a2:	e006      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
			case 6:dir=3;break;
 80016a4:	2303      	movs	r3, #3
 80016a6:	71fb      	strb	r3, [r7, #7]
 80016a8:	e003      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
			case 7:dir=2;break;
 80016aa:	2302      	movs	r3, #2
 80016ac:	71fb      	strb	r3, [r7, #7]
 80016ae:	e000      	b.n	80016b2 <LCD_Scan_Dir+0x9a>
		}
	}
 80016b0:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/5310/5510/1963,特殊处理
 80016b2:	4b87      	ldr	r3, [pc, #540]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80016b4:	889b      	ldrh	r3, [r3, #4]
 80016b6:	f249 3241 	movw	r2, #37697	; 0x9341
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d012      	beq.n	80016e4 <LCD_Scan_Dir+0xcc>
 80016be:	4b84      	ldr	r3, [pc, #528]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80016c0:	889b      	ldrh	r3, [r3, #4]
 80016c2:	f245 3210 	movw	r2, #21264	; 0x5310
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00c      	beq.n	80016e4 <LCD_Scan_Dir+0xcc>
 80016ca:	4b81      	ldr	r3, [pc, #516]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80016cc:	889b      	ldrh	r3, [r3, #4]
 80016ce:	f245 5210 	movw	r2, #21776	; 0x5510
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d006      	beq.n	80016e4 <LCD_Scan_Dir+0xcc>
 80016d6:	4b7e      	ldr	r3, [pc, #504]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80016d8:	889b      	ldrh	r3, [r3, #4]
 80016da:	f641 1263 	movw	r2, #6499	; 0x1963
 80016de:	4293      	cmp	r3, r2
 80016e0:	f040 8130 	bne.w	8001944 <LCD_Scan_Dir+0x32c>
	{
		switch(dir)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	2b07      	cmp	r3, #7
 80016e8:	d835      	bhi.n	8001756 <LCD_Scan_Dir+0x13e>
 80016ea:	a201      	add	r2, pc, #4	; (adr r2, 80016f0 <LCD_Scan_Dir+0xd8>)
 80016ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f0:	08001757 	.word	0x08001757
 80016f4:	08001711 	.word	0x08001711
 80016f8:	0800171b 	.word	0x0800171b
 80016fc:	08001725 	.word	0x08001725
 8001700:	0800172f 	.word	0x0800172f
 8001704:	08001739 	.word	0x08001739
 8001708:	08001743 	.word	0x08001743
 800170c:	0800174d 	.word	0x0800174d
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 8001710:	89fb      	ldrh	r3, [r7, #14]
 8001712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001716:	81fb      	strh	r3, [r7, #14]
				break;
 8001718:	e01d      	b.n	8001756 <LCD_Scan_Dir+0x13e>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 800171a:	89fb      	ldrh	r3, [r7, #14]
 800171c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001720:	81fb      	strh	r3, [r7, #14]
				break;
 8001722:	e018      	b.n	8001756 <LCD_Scan_Dir+0x13e>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 8001724:	89fb      	ldrh	r3, [r7, #14]
 8001726:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800172a:	81fb      	strh	r3, [r7, #14]
				break;
 800172c:	e013      	b.n	8001756 <LCD_Scan_Dir+0x13e>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	f043 0320 	orr.w	r3, r3, #32
 8001734:	81fb      	strh	r3, [r7, #14]
				break;
 8001736:	e00e      	b.n	8001756 <LCD_Scan_Dir+0x13e>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 8001738:	89fb      	ldrh	r3, [r7, #14]
 800173a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800173e:	81fb      	strh	r3, [r7, #14]
				break;
 8001740:	e009      	b.n	8001756 <LCD_Scan_Dir+0x13e>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 8001742:	89fb      	ldrh	r3, [r7, #14]
 8001744:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001748:	81fb      	strh	r3, [r7, #14]
				break;
 800174a:	e004      	b.n	8001756 <LCD_Scan_Dir+0x13e>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 800174c:	89fb      	ldrh	r3, [r7, #14]
 800174e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001752:	81fb      	strh	r3, [r7, #14]
				break;
 8001754:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 8001756:	4b5e      	ldr	r3, [pc, #376]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001758:	889b      	ldrh	r3, [r3, #4]
 800175a:	f245 5210 	movw	r2, #21776	; 0x5510
 800175e:	4293      	cmp	r3, r2
 8001760:	d103      	bne.n	800176a <LCD_Scan_Dir+0x152>
 8001762:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001766:	81bb      	strh	r3, [r7, #12]
 8001768:	e001      	b.n	800176e <LCD_Scan_Dir+0x156>
		else dirreg=0X36;
 800176a:	2336      	movs	r3, #54	; 0x36
 800176c:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 800176e:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001770:	889b      	ldrh	r3, [r3, #4]
 8001772:	f245 3210 	movw	r2, #21264	; 0x5310
 8001776:	4293      	cmp	r3, r2
 8001778:	d00f      	beq.n	800179a <LCD_Scan_Dir+0x182>
 800177a:	4b55      	ldr	r3, [pc, #340]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800177c:	889b      	ldrh	r3, [r3, #4]
 800177e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001782:	4293      	cmp	r3, r2
 8001784:	d009      	beq.n	800179a <LCD_Scan_Dir+0x182>
 8001786:	4b52      	ldr	r3, [pc, #328]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001788:	889b      	ldrh	r3, [r3, #4]
 800178a:	f641 1263 	movw	r2, #6499	; 0x1963
 800178e:	4293      	cmp	r3, r2
 8001790:	d003      	beq.n	800179a <LCD_Scan_Dir+0x182>
 8001792:	89fb      	ldrh	r3, [r7, #14]
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	81fb      	strh	r3, [r7, #14]
 		LCD_WriteReg(dirreg,regval);
 800179a:	89fa      	ldrh	r2, [r7, #14]
 800179c:	89bb      	ldrh	r3, [r7, #12]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fe1f 	bl	80013e4 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 80017a6:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017a8:	889b      	ldrh	r3, [r3, #4]
 80017aa:	f641 1263 	movw	r2, #6499	; 0x1963
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d025      	beq.n	80017fe <LCD_Scan_Dir+0x1e6>
		{
			if(regval&0X20)
 80017b2:	89fb      	ldrh	r3, [r7, #14]
 80017b4:	f003 0320 	and.w	r3, r3, #32
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d010      	beq.n	80017de <LCD_Scan_Dir+0x1c6>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 80017bc:	4b44      	ldr	r3, [pc, #272]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017be:	881a      	ldrh	r2, [r3, #0]
 80017c0:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017c2:	885b      	ldrh	r3, [r3, #2]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d21a      	bcs.n	80017fe <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 80017c8:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 80017ce:	4b40      	ldr	r3, [pc, #256]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017d0:	885a      	ldrh	r2, [r3, #2]
 80017d2:	4b3f      	ldr	r3, [pc, #252]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017d4:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80017d6:	4a3e      	ldr	r2, [pc, #248]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017d8:	897b      	ldrh	r3, [r7, #10]
 80017da:	8053      	strh	r3, [r2, #2]
 80017dc:	e00f      	b.n	80017fe <LCD_Scan_Dir+0x1e6>
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 80017de:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017e0:	881a      	ldrh	r2, [r3, #0]
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017e4:	885b      	ldrh	r3, [r3, #2]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d909      	bls.n	80017fe <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 80017ea:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 80017f0:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017f2:	885a      	ldrh	r2, [r3, #2]
 80017f4:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017f6:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80017f8:	4a35      	ldr	r2, [pc, #212]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80017fa:	897b      	ldrh	r3, [r7, #10]
 80017fc:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 80017fe:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001800:	889b      	ldrh	r3, [r3, #4]
 8001802:	f245 5210 	movw	r2, #21776	; 0x5510
 8001806:	4293      	cmp	r3, r2
 8001808:	d164      	bne.n	80018d4 <LCD_Scan_Dir+0x2bc>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 800180a:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800180c:	895b      	ldrh	r3, [r3, #10]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fdae 	bl	8001370 <LCD_WR_REG>
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff fdbf 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800181c:	895b      	ldrh	r3, [r3, #10]
 800181e:	3301      	adds	r3, #1
 8001820:	b29b      	uxth	r3, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fda4 	bl	8001370 <LCD_WR_REG>
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fdb5 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 800182e:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001830:	895b      	ldrh	r3, [r3, #10]
 8001832:	3302      	adds	r3, #2
 8001834:	b29b      	uxth	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fd9a 	bl	8001370 <LCD_WR_REG>
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	3b01      	subs	r3, #1
 8001842:	121b      	asrs	r3, r3, #8
 8001844:	b29b      	uxth	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fda6 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 800184c:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800184e:	895b      	ldrh	r3, [r3, #10]
 8001850:	3303      	adds	r3, #3
 8001852:	b29b      	uxth	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fd8b 	bl	8001370 <LCD_WR_REG>
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	3b01      	subs	r3, #1
 8001860:	b29b      	uxth	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	b29b      	uxth	r3, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fd96 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800186e:	899b      	ldrh	r3, [r3, #12]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fd7d 	bl	8001370 <LCD_WR_REG>
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff fd8e 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 800187e:	899b      	ldrh	r3, [r3, #12]
 8001880:	3301      	adds	r3, #1
 8001882:	b29b      	uxth	r3, r3
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fd73 	bl	8001370 <LCD_WR_REG>
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fd84 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 8001892:	899b      	ldrh	r3, [r3, #12]
 8001894:	3302      	adds	r3, #2
 8001896:	b29b      	uxth	r3, r3
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fd69 	bl	8001370 <LCD_WR_REG>
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80018a0:	885b      	ldrh	r3, [r3, #2]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	121b      	asrs	r3, r3, #8
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fd75 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80018b0:	899b      	ldrh	r3, [r3, #12]
 80018b2:	3303      	adds	r3, #3
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fd5a 	bl	8001370 <LCD_WR_REG>
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <LCD_Scan_Dir+0x2b8>)
 80018be:	885b      	ldrh	r3, [r3, #2]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fd65 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
			LCD_WR_DATA(0);LCD_WR_DATA(0);
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
		}
  	}
}
 80018ce:	e039      	b.n	8001944 <LCD_Scan_Dir+0x32c>
 80018d0:	20000310 	.word	0x20000310
			LCD_WR_REG(lcddev.setxcmd);
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <LCD_Scan_Dir+0x334>)
 80018d6:	895b      	ldrh	r3, [r3, #10]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fd49 	bl	8001370 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff fd5a 	bl	8001398 <LCD_WR_DATA>
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff fd57 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <LCD_Scan_Dir+0x334>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	121b      	asrs	r3, r3, #8
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fd4f 	bl	8001398 <LCD_WR_DATA>
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <LCD_Scan_Dir+0x334>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	3b01      	subs	r3, #1
 8001900:	b29b      	uxth	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	b29b      	uxth	r3, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fd46 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <LCD_Scan_Dir+0x334>)
 800190e:	899b      	ldrh	r3, [r3, #12]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fd2d 	bl	8001370 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001916:	2000      	movs	r0, #0
 8001918:	f7ff fd3e 	bl	8001398 <LCD_WR_DATA>
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff fd3b 	bl	8001398 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <LCD_Scan_Dir+0x334>)
 8001924:	885b      	ldrh	r3, [r3, #2]
 8001926:	3b01      	subs	r3, #1
 8001928:	121b      	asrs	r3, r3, #8
 800192a:	b29b      	uxth	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fd33 	bl	8001398 <LCD_WR_DATA>
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <LCD_Scan_Dir+0x334>)
 8001934:	885b      	ldrh	r3, [r3, #2]
 8001936:	3b01      	subs	r3, #1
 8001938:	b29b      	uxth	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	b29b      	uxth	r3, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fd2a 	bl	8001398 <LCD_WR_DATA>
}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000310 	.word	0x20000310

08001950 <LCD_DrawPoint>:
//画点
//x,y:坐标
//POINT_COLOR:此点的颜色
void LCD_DrawPoint(uint16_t x,uint16_t y)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	460a      	mov	r2, r1
 800195a:	80fb      	strh	r3, [r7, #6]
 800195c:	4613      	mov	r3, r2
 800195e:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);		//设置光标位置
 8001960:	88ba      	ldrh	r2, [r7, #4]
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	4611      	mov	r1, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fd74 	bl	8001454 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();	//开始写入GRAM
 800196c:	f7ff fd62 	bl	8001434 <LCD_WriteRAM_Prepare>
	TFT_LCD->LCD_RAM=POINT_COLOR;
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <LCD_DrawPoint+0x34>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <LCD_DrawPoint+0x38>)
 8001976:	b292      	uxth	r2, r2
 8001978:	805a      	strh	r2, [r3, #2]
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000
 8001988:	6c00007e 	.word	0x6c00007e

0800198c <LCD_Fast_DrawPoint>:
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint32_t color)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	603a      	str	r2, [r7, #0]
 8001996:	80fb      	strh	r3, [r7, #6]
 8001998:	460b      	mov	r3, r1
 800199a:	80bb      	strh	r3, [r7, #4]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 800199c:	4b85      	ldr	r3, [pc, #532]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 800199e:	889b      	ldrh	r3, [r3, #4]
 80019a0:	f249 3241 	movw	r2, #37697	; 0x9341
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d005      	beq.n	80019b4 <LCD_Fast_DrawPoint+0x28>
 80019a8:	4b82      	ldr	r3, [pc, #520]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 80019aa:	889b      	ldrh	r3, [r3, #4]
 80019ac:	f245 3210 	movw	r2, #21264	; 0x5310
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d122      	bne.n	80019fa <LCD_Fast_DrawPoint+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 80019b4:	4b7f      	ldr	r3, [pc, #508]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 80019b6:	895b      	ldrh	r3, [r3, #10]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fcd9 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fce7 	bl	8001398 <LCD_WR_DATA>
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fce1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80019d6:	4b77      	ldr	r3, [pc, #476]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 80019d8:	899b      	ldrh	r3, [r3, #12]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fcc8 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80019e0:	88bb      	ldrh	r3, [r7, #4]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fcd6 	bl	8001398 <LCD_WR_DATA>
 80019ec:	88bb      	ldrh	r3, [r7, #4]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fcd0 	bl	8001398 <LCD_WR_DATA>
 80019f8:	e0cf      	b.n	8001b9a <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X5510)
 80019fa:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 80019fc:	889b      	ldrh	r3, [r3, #4]
 80019fe:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d130      	bne.n	8001a68 <LCD_Fast_DrawPoint+0xdc>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 8001a06:	4b6b      	ldr	r3, [pc, #428]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a08:	895b      	ldrh	r3, [r3, #10]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fcb0 	bl	8001370 <LCD_WR_REG>
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fcbe 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 8001a1c:	4b65      	ldr	r3, [pc, #404]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a1e:	895b      	ldrh	r3, [r3, #10]
 8001a20:	3301      	adds	r3, #1
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fca3 	bl	8001370 <LCD_WR_REG>
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fcb1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8001a36:	4b5f      	ldr	r3, [pc, #380]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a38:	899b      	ldrh	r3, [r3, #12]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fc98 	bl	8001370 <LCD_WR_REG>
 8001a40:	88bb      	ldrh	r3, [r7, #4]
 8001a42:	0a1b      	lsrs	r3, r3, #8
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fca6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 8001a4c:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a4e:	899b      	ldrh	r3, [r3, #12]
 8001a50:	3301      	adds	r3, #1
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fc8b 	bl	8001370 <LCD_WR_REG>
 8001a5a:	88bb      	ldrh	r3, [r7, #4]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fc99 	bl	8001398 <LCD_WR_DATA>
 8001a66:	e098      	b.n	8001b9a <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X1963)
 8001a68:	4b52      	ldr	r3, [pc, #328]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a6a:	889b      	ldrh	r3, [r3, #4]
 8001a6c:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d145      	bne.n	8001b00 <LCD_Fast_DrawPoint+0x174>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8001a74:	4b4f      	ldr	r3, [pc, #316]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a76:	799b      	ldrb	r3, [r3, #6]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d106      	bne.n	8001a8a <LCD_Fast_DrawPoint+0xfe>
 8001a7c:	4b4d      	ldr	r3, [pc, #308]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a7e:	881a      	ldrh	r2, [r3, #0]
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001a8a:	4b4a      	ldr	r3, [pc, #296]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001a8c:	895b      	ldrh	r3, [r3, #10]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fc6e 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fc7c 	bl	8001398 <LCD_WR_DATA>
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fc76 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	0a1b      	lsrs	r3, r3, #8
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fc70 	bl	8001398 <LCD_WR_DATA>
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fc6a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001ac6:	899b      	ldrh	r3, [r3, #12]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fc51 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001ace:	88bb      	ldrh	r3, [r7, #4]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fc5f 	bl	8001398 <LCD_WR_DATA>
 8001ada:	88bb      	ldrh	r3, [r7, #4]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fc59 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001ae6:	88bb      	ldrh	r3, [r7, #4]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fc53 	bl	8001398 <LCD_WR_DATA>
 8001af2:	88bb      	ldrh	r3, [r7, #4]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fc4d 	bl	8001398 <LCD_WR_DATA>
 8001afe:	e04c      	b.n	8001b9a <LCD_Fast_DrawPoint+0x20e>
	}else if(lcddev.id==0X6804)
 8001b00:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b02:	889b      	ldrh	r3, [r3, #4]
 8001b04:	f646 0204 	movw	r2, #26628	; 0x6804
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d12d      	bne.n	8001b68 <LCD_Fast_DrawPoint+0x1dc>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b0e:	799b      	ldrb	r3, [r3, #6]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d106      	bne.n	8001b22 <LCD_Fast_DrawPoint+0x196>
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b16:	881a      	ldrh	r2, [r3, #0]
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001b22:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b24:	895b      	ldrh	r3, [r3, #10]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fc22 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fc30 	bl	8001398 <LCD_WR_DATA>
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fc2a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b46:	899b      	ldrh	r3, [r3, #12]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fc11 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001b4e:	88bb      	ldrh	r3, [r7, #4]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fc1f 	bl	8001398 <LCD_WR_DATA>
 8001b5a:	88bb      	ldrh	r3, [r7, #4]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fc19 	bl	8001398 <LCD_WR_DATA>
 8001b66:	e018      	b.n	8001b9a <LCD_Fast_DrawPoint+0x20e>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b6a:	799b      	ldrb	r3, [r3, #6]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d106      	bne.n	8001b7e <LCD_Fast_DrawPoint+0x1f2>
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b72:	881a      	ldrh	r2, [r3, #0]
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b80:	895b      	ldrh	r3, [r3, #10]
 8001b82:	88fa      	ldrh	r2, [r7, #6]
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fc2c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b8e:	899b      	ldrh	r3, [r3, #12]
 8001b90:	88ba      	ldrh	r2, [r7, #4]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fc25 	bl	80013e4 <LCD_WriteReg>
	}
	TFT_LCD->LCD_REG=lcddev.wramcmd;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <LCD_Fast_DrawPoint+0x22c>)
 8001b9c:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <LCD_Fast_DrawPoint+0x228>)
 8001b9e:	8912      	ldrh	r2, [r2, #8]
 8001ba0:	801a      	strh	r2, [r3, #0]
	TFT_LCD->LCD_RAM=color;
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <LCD_Fast_DrawPoint+0x22c>)
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	b292      	uxth	r2, r2
 8001ba8:	805a      	strh	r2, [r3, #2]
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000310 	.word	0x20000310
 8001bb8:	6c00007e 	.word	0x6c00007e
 8001bbc:	00000000 	.word	0x00000000

08001bc0 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001bca:	20be      	movs	r0, #190	; 0xbe
 8001bcc:	f7ff fbd0 	bl	8001370 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001bd0:	2005      	movs	r0, #5
 8001bd2:	f7ff fbe1 	bl	8001398 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fca3 	bl	8000524 <__aeabi_i2d>
 8001bde:	a310      	add	r3, pc, #64	; (adr r3, 8001c20 <LCD_SSD_BackLightSet+0x60>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	f7fe fd08 	bl	80005f8 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe ffda 	bl	8000ba8 <__aeabi_d2uiz>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fbcd 	bl	8001398 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f7ff fbca 	bl	8001398 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 8001c04:	20ff      	movs	r0, #255	; 0xff
 8001c06:	f7ff fbc7 	bl	8001398 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff fbc4 	bl	8001398 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff fbc1 	bl	8001398 <LCD_WR_DATA>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	66666666 	.word	0x66666666
 8001c24:	40046666 	.word	0x40046666

08001c28 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
	lcddev.dir=dir;		//竖屏/横屏
 8001c32:	4a64      	ldr	r2, [pc, #400]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	7193      	strb	r3, [r2, #6]
	if(dir==0)			//竖屏
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d15e      	bne.n	8001cfc <LCD_Display_Dir+0xd4>
	{
		lcddev.width=240;
 8001c3e:	4b61      	ldr	r3, [pc, #388]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c40:	22f0      	movs	r2, #240	; 0xf0
 8001c42:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001c44:	4b5f      	ldr	r3, [pc, #380]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c4a:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001c4c:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c4e:	889b      	ldrh	r3, [r3, #4]
 8001c50:	f249 3241 	movw	r2, #37697	; 0x9341
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d005      	beq.n	8001c64 <LCD_Display_Dir+0x3c>
 8001c58:	4b5a      	ldr	r3, [pc, #360]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c5a:	889b      	ldrh	r3, [r3, #4]
 8001c5c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d118      	bne.n	8001c96 <LCD_Display_Dir+0x6e>
		{
			lcddev.wramcmd=0X2C;
 8001c64:	4b57      	ldr	r3, [pc, #348]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c66:	222c      	movs	r2, #44	; 0x2c
 8001c68:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001c6a:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c6c:	222a      	movs	r2, #42	; 0x2a
 8001c6e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001c70:	4b54      	ldr	r3, [pc, #336]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c72:	222b      	movs	r2, #43	; 0x2b
 8001c74:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X5310)
 8001c76:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c78:	889b      	ldrh	r3, [r3, #4]
 8001c7a:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	f040 8099 	bne.w	8001db6 <LCD_Display_Dir+0x18e>
			{
				lcddev.width=320;
 8001c84:	4b4f      	ldr	r3, [pc, #316]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c86:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c8a:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 8001c8c:	4b4d      	ldr	r3, [pc, #308]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c8e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001c92:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X5310)
 8001c94:	e08f      	b.n	8001db6 <LCD_Display_Dir+0x18e>
			}
		}else if(lcddev.id==0x5510)
 8001c96:	4b4b      	ldr	r3, [pc, #300]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001c98:	889b      	ldrh	r3, [r3, #4]
 8001c9a:	f245 5210 	movw	r2, #21776	; 0x5510
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d114      	bne.n	8001ccc <LCD_Display_Dir+0xa4>
		{
			lcddev.wramcmd=0X2C00;
 8001ca2:	4b48      	ldr	r3, [pc, #288]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001ca4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001ca8:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8001caa:	4b46      	ldr	r3, [pc, #280]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cac:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001cb0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001cb2:	4b44      	ldr	r3, [pc, #272]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cb4:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001cb8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 8001cba:	4b42      	ldr	r3, [pc, #264]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cbc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001cc0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 8001cc2:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cc4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001cc8:	805a      	strh	r2, [r3, #2]
 8001cca:	e074      	b.n	8001db6 <LCD_Display_Dir+0x18e>
		}else if(lcddev.id==0X1963)
 8001ccc:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cce:	889b      	ldrh	r3, [r3, #4]
 8001cd0:	f641 1263 	movw	r2, #6499	; 0x1963
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d16e      	bne.n	8001db6 <LCD_Display_Dir+0x18e>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cda:	222c      	movs	r2, #44	; 0x2c
 8001cdc:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 8001cde:	4b39      	ldr	r3, [pc, #228]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001ce0:	222b      	movs	r2, #43	; 0x2b
 8001ce2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 8001ce4:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001ce6:	222a      	movs	r2, #42	; 0x2a
 8001ce8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001cf0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 8001cf2:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cf4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001cf8:	805a      	strh	r2, [r3, #2]
 8001cfa:	e05c      	b.n	8001db6 <LCD_Display_Dir+0x18e>
		}
	}else 				//横屏
	{
		lcddev.width=320;
 8001cfc:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001cfe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d02:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001d04:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d06:	22f0      	movs	r2, #240	; 0xf0
 8001d08:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d0c:	889b      	ldrh	r3, [r3, #4]
 8001d0e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d005      	beq.n	8001d22 <LCD_Display_Dir+0xfa>
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d18:	889b      	ldrh	r3, [r3, #4]
 8001d1a:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d109      	bne.n	8001d36 <LCD_Display_Dir+0x10e>
		{
			lcddev.wramcmd=0X2C;
 8001d22:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d24:	222c      	movs	r2, #44	; 0x2c
 8001d26:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001d28:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d2a:	222a      	movs	r2, #42	; 0x2a
 8001d2c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001d2e:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d30:	222b      	movs	r2, #43	; 0x2b
 8001d32:	819a      	strh	r2, [r3, #12]
 8001d34:	e031      	b.n	8001d9a <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0x5510)
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d38:	889b      	ldrh	r3, [r3, #4]
 8001d3a:	f245 5210 	movw	r2, #21776	; 0x5510
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d114      	bne.n	8001d6c <LCD_Display_Dir+0x144>
		{
			lcddev.wramcmd=0X2C00;
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d44:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001d48:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d4c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001d50:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d54:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001d58:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d5c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d60:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d64:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d68:	805a      	strh	r2, [r3, #2]
 8001d6a:	e016      	b.n	8001d9a <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0X1963)
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d6e:	889b      	ldrh	r3, [r3, #4]
 8001d70:	f641 1263 	movw	r2, #6499	; 0x1963
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d110      	bne.n	8001d9a <LCD_Display_Dir+0x172>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d7a:	222c      	movs	r2, #44	; 0x2c
 8001d7c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d80:	222a      	movs	r2, #42	; 0x2a
 8001d82:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d86:	222b      	movs	r2, #43	; 0x2b
 8001d88:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d8c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001d90:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d98:	805a      	strh	r2, [r3, #2]
		}
		if(lcddev.id==0X5310)
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001d9c:	889b      	ldrh	r3, [r3, #4]
 8001d9e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d107      	bne.n	8001db6 <LCD_Display_Dir+0x18e>
		{
			lcddev.width=480;
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001da8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001dac:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <LCD_Display_Dir+0x19c>)
 8001db0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001db4:	805a      	strh	r2, [r3, #2]
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff fc2e 	bl	8001618 <LCD_Scan_Dir>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000310 	.word	0x20000310

08001dc8 <TFTLCD_Init>:


//初始化lcd
//该初始化函数可以初始化各种型号的LCD(详见本.c文件最前面的描述)
void TFTLCD_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	HAL_Delay(50); // delay 50 ms
 8001dcc:	2032      	movs	r0, #50	; 0x32
 8001dce:	f005 f953 	bl	8007078 <HAL_Delay>

	//尝试9341 ID的读取
	LCD_WR_REG(0XD3);
 8001dd2:	20d3      	movs	r0, #211	; 0xd3
 8001dd4:	f7ff facc 	bl	8001370 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001dd8:	f7ff faf2 	bl	80013c0 <LCD_RD_DATA>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b5e      	ldr	r3, [pc, #376]	; (8001f5c <TFTLCD_Init+0x194>)
 8001de2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//读到0X00
 8001de4:	f7ff faec 	bl	80013c0 <LCD_RD_DATA>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b5b      	ldr	r3, [pc, #364]	; (8001f5c <TFTLCD_Init+0x194>)
 8001dee:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//读取93
 8001df0:	f7ff fae6 	bl	80013c0 <LCD_RD_DATA>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b58      	ldr	r3, [pc, #352]	; (8001f5c <TFTLCD_Init+0x194>)
 8001dfa:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001dfc:	4b57      	ldr	r3, [pc, #348]	; (8001f5c <TFTLCD_Init+0x194>)
 8001dfe:	889b      	ldrh	r3, [r3, #4]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	4b55      	ldr	r3, [pc, #340]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e06:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//读取41
 8001e08:	f7ff fada 	bl	80013c0 <LCD_RD_DATA>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b52      	ldr	r3, [pc, #328]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e12:	889b      	ldrh	r3, [r3, #4]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b50      	ldr	r3, [pc, #320]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e1a:	809a      	strh	r2, [r3, #4]
	if(lcddev.id!=0X9341)		//非9341,尝试看看是不是NT35310
 8001e1c:	4b4f      	ldr	r3, [pc, #316]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e1e:	889b      	ldrh	r3, [r3, #4]
 8001e20:	f249 3241 	movw	r2, #37697	; 0x9341
 8001e24:	4293      	cmp	r3, r2
 8001e26:	f000 808b 	beq.w	8001f40 <TFTLCD_Init+0x178>
	{
		LCD_WR_REG(0XD4);
 8001e2a:	20d4      	movs	r0, #212	; 0xd4
 8001e2c:	f7ff faa0 	bl	8001370 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();//dummy read
 8001e30:	f7ff fac6 	bl	80013c0 <LCD_RD_DATA>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b48      	ldr	r3, [pc, #288]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e3a:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X01
 8001e3c:	f7ff fac0 	bl	80013c0 <LCD_RD_DATA>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	4b45      	ldr	r3, [pc, #276]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e46:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X53
 8001e48:	f7ff faba 	bl	80013c0 <LCD_RD_DATA>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b42      	ldr	r3, [pc, #264]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e52:	809a      	strh	r2, [r3, #4]
		lcddev.id<<=8;
 8001e54:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e56:	889b      	ldrh	r3, [r3, #4]
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	4b3f      	ldr	r3, [pc, #252]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e5e:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 8001e60:	f7ff faae 	bl	80013c0 <LCD_RD_DATA>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e6a:	889b      	ldrh	r3, [r3, #4]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b3a      	ldr	r3, [pc, #232]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e72:	809a      	strh	r2, [r3, #4]
		if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e76:	889b      	ldrh	r3, [r3, #4]
 8001e78:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d05f      	beq.n	8001f40 <TFTLCD_Init+0x178>
		{
			LCD_WR_REG(0XDA00);
 8001e80:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001e84:	f7ff fa74 	bl	8001370 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X00
 8001e88:	f7ff fa9a 	bl	80013c0 <LCD_RD_DATA>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <TFTLCD_Init+0x194>)
 8001e92:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDB00);
 8001e94:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001e98:	f7ff fa6a 	bl	8001370 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X80
 8001e9c:	f7ff fa90 	bl	80013c0 <LCD_RD_DATA>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <TFTLCD_Init+0x194>)
 8001ea6:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 8001ea8:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <TFTLCD_Init+0x194>)
 8001eaa:	889b      	ldrh	r3, [r3, #4]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <TFTLCD_Init+0x194>)
 8001eb2:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDC00);
 8001eb4:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001eb8:	f7ff fa5a 	bl	8001370 <LCD_WR_REG>
			lcddev.id|=LCD_RD_DATA();		//读回0X00
 8001ebc:	f7ff fa80 	bl	80013c0 <LCD_RD_DATA>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <TFTLCD_Init+0x194>)
 8001ec6:	889b      	ldrh	r3, [r3, #4]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <TFTLCD_Init+0x194>)
 8001ece:	809a      	strh	r2, [r3, #4]
			if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8001ed0:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <TFTLCD_Init+0x194>)
 8001ed2:	889b      	ldrh	r3, [r3, #4]
 8001ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ed8:	d103      	bne.n	8001ee2 <TFTLCD_Init+0x11a>
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <TFTLCD_Init+0x194>)
 8001edc:	f245 5210 	movw	r2, #21776	; 0x5510
 8001ee0:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <TFTLCD_Init+0x194>)
 8001ee4:	889b      	ldrh	r3, [r3, #4]
 8001ee6:	f245 5210 	movw	r2, #21776	; 0x5510
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d028      	beq.n	8001f40 <TFTLCD_Init+0x178>
			{
				LCD_WR_REG(0XA1);
 8001eee:	20a1      	movs	r0, #161	; 0xa1
 8001ef0:	f7ff fa3e 	bl	8001370 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();
 8001ef4:	f7ff fa64 	bl	80013c0 <LCD_RD_DATA>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <TFTLCD_Init+0x194>)
 8001efe:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();	//读回0X57
 8001f00:	f7ff fa5e 	bl	80013c0 <LCD_RD_DATA>
 8001f04:	4603      	mov	r3, r0
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f0a:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f0e:	889b      	ldrh	r3, [r3, #4]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f16:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//读回0X61
 8001f18:	f7ff fa52 	bl	80013c0 <LCD_RD_DATA>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f22:	889b      	ldrh	r3, [r3, #4]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f2a:	809a      	strh	r2, [r3, #4]
				if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f2e:	889b      	ldrh	r3, [r3, #4]
 8001f30:	f245 7261 	movw	r2, #22369	; 0x5761
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d103      	bne.n	8001f40 <TFTLCD_Init+0x178>
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f3a:	f641 1263 	movw	r2, #6499	; 0x1963
 8001f3e:	809a      	strh	r2, [r3, #4]
			}
		}
	}
	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f42:	889b      	ldrh	r3, [r3, #4]
 8001f44:	4619      	mov	r1, r3
 8001f46:	4806      	ldr	r0, [pc, #24]	; (8001f60 <TFTLCD_Init+0x198>)
 8001f48:	f009 feb6 	bl	800bcb8 <iprintf>
	if(lcddev.id==0X9341)	//9341初始化
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <TFTLCD_Init+0x194>)
 8001f4e:	889b      	ldrh	r3, [r3, #4]
 8001f50:	f249 3241 	movw	r2, #37697	; 0x9341
 8001f54:	4293      	cmp	r3, r2
 8001f56:	f040 811b 	bne.w	8002190 <TFTLCD_Init+0x3c8>
 8001f5a:	e003      	b.n	8001f64 <TFTLCD_Init+0x19c>
 8001f5c:	20000310 	.word	0x20000310
 8001f60:	0800f588 	.word	0x0800f588
	{
		LCD_WR_REG(0xCF);
 8001f64:	20cf      	movs	r0, #207	; 0xcf
 8001f66:	f7ff fa03 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7ff fa14 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 8001f70:	20c1      	movs	r0, #193	; 0xc1
 8001f72:	f7ff fa11 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 8001f76:	2030      	movs	r0, #48	; 0x30
 8001f78:	f7ff fa0e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 8001f7c:	20ed      	movs	r0, #237	; 0xed
 8001f7e:	f7ff f9f7 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 8001f82:	2064      	movs	r0, #100	; 0x64
 8001f84:	f7ff fa08 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f7ff fa05 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 8001f8e:	2012      	movs	r0, #18
 8001f90:	f7ff fa02 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 8001f94:	2081      	movs	r0, #129	; 0x81
 8001f96:	f7ff f9ff 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8001f9a:	20e8      	movs	r0, #232	; 0xe8
 8001f9c:	f7ff f9e8 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 8001fa0:	2085      	movs	r0, #133	; 0x85
 8001fa2:	f7ff f9f9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001fa6:	2010      	movs	r0, #16
 8001fa8:	f7ff f9f6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8001fac:	207a      	movs	r0, #122	; 0x7a
 8001fae:	f7ff f9f3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 8001fb2:	20cb      	movs	r0, #203	; 0xcb
 8001fb4:	f7ff f9dc 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8001fb8:	2039      	movs	r0, #57	; 0x39
 8001fba:	f7ff f9ed 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8001fbe:	202c      	movs	r0, #44	; 0x2c
 8001fc0:	f7ff f9ea 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f7ff f9e7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8001fca:	2034      	movs	r0, #52	; 0x34
 8001fcc:	f7ff f9e4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	f7ff f9e1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8001fd6:	20f7      	movs	r0, #247	; 0xf7
 8001fd8:	f7ff f9ca 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8001fdc:	2020      	movs	r0, #32
 8001fde:	f7ff f9db 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 8001fe2:	20ea      	movs	r0, #234	; 0xea
 8001fe4:	f7ff f9c4 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f7ff f9d5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f7ff f9d2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 8001ff4:	20c0      	movs	r0, #192	; 0xc0
 8001ff6:	f7ff f9bb 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001ffa:	201b      	movs	r0, #27
 8001ffc:	f7ff f9cc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 8002000:	20c1      	movs	r0, #193	; 0xc1
 8002002:	f7ff f9b5 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002006:	2001      	movs	r0, #1
 8002008:	f7ff f9c6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 800200c:	20c5      	movs	r0, #197	; 0xc5
 800200e:	f7ff f9af 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 8002012:	2030      	movs	r0, #48	; 0x30
 8002014:	f7ff f9c0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 8002018:	2030      	movs	r0, #48	; 0x30
 800201a:	f7ff f9bd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 800201e:	20c7      	movs	r0, #199	; 0xc7
 8002020:	f7ff f9a6 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 8002024:	20b7      	movs	r0, #183	; 0xb7
 8002026:	f7ff f9b7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 800202a:	2036      	movs	r0, #54	; 0x36
 800202c:	f7ff f9a0 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 8002030:	2048      	movs	r0, #72	; 0x48
 8002032:	f7ff f9b1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 8002036:	203a      	movs	r0, #58	; 0x3a
 8002038:	f7ff f99a 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 800203c:	2055      	movs	r0, #85	; 0x55
 800203e:	f7ff f9ab 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 8002042:	20b1      	movs	r0, #177	; 0xb1
 8002044:	f7ff f994 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002048:	2000      	movs	r0, #0
 800204a:	f7ff f9a5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 800204e:	201a      	movs	r0, #26
 8002050:	f7ff f9a2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 8002054:	20b6      	movs	r0, #182	; 0xb6
 8002056:	f7ff f98b 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 800205a:	200a      	movs	r0, #10
 800205c:	f7ff f99c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002060:	20a2      	movs	r0, #162	; 0xa2
 8002062:	f7ff f999 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002066:	20f2      	movs	r0, #242	; 0xf2
 8002068:	f7ff f982 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800206c:	2000      	movs	r0, #0
 800206e:	f7ff f993 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 8002072:	2026      	movs	r0, #38	; 0x26
 8002074:	f7ff f97c 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002078:	2001      	movs	r0, #1
 800207a:	f7ff f98d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 800207e:	20e0      	movs	r0, #224	; 0xe0
 8002080:	f7ff f976 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 8002084:	200f      	movs	r0, #15
 8002086:	f7ff f987 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 800208a:	202a      	movs	r0, #42	; 0x2a
 800208c:	f7ff f984 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 8002090:	2028      	movs	r0, #40	; 0x28
 8002092:	f7ff f981 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8002096:	2008      	movs	r0, #8
 8002098:	f7ff f97e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 800209c:	200e      	movs	r0, #14
 800209e:	f7ff f97b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 80020a2:	2008      	movs	r0, #8
 80020a4:	f7ff f978 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 80020a8:	2054      	movs	r0, #84	; 0x54
 80020aa:	f7ff f975 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 80020ae:	20a9      	movs	r0, #169	; 0xa9
 80020b0:	f7ff f972 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 80020b4:	2043      	movs	r0, #67	; 0x43
 80020b6:	f7ff f96f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 80020ba:	200a      	movs	r0, #10
 80020bc:	f7ff f96c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80020c0:	200f      	movs	r0, #15
 80020c2:	f7ff f969 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff f966 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7ff f963 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7ff f960 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020d8:	2000      	movs	r0, #0
 80020da:	f7ff f95d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 80020de:	20e1      	movs	r0, #225	; 0xe1
 80020e0:	f7ff f946 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff f957 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 80020ea:	2015      	movs	r0, #21
 80020ec:	f7ff f954 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80020f0:	2017      	movs	r0, #23
 80020f2:	f7ff f951 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 80020f6:	2007      	movs	r0, #7
 80020f8:	f7ff f94e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 80020fc:	2011      	movs	r0, #17
 80020fe:	f7ff f94b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 8002102:	2006      	movs	r0, #6
 8002104:	f7ff f948 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 8002108:	202b      	movs	r0, #43	; 0x2b
 800210a:	f7ff f945 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 800210e:	2056      	movs	r0, #86	; 0x56
 8002110:	f7ff f942 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002114:	203c      	movs	r0, #60	; 0x3c
 8002116:	f7ff f93f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 800211a:	2005      	movs	r0, #5
 800211c:	f7ff f93c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8002120:	2010      	movs	r0, #16
 8002122:	f7ff f939 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8002126:	200f      	movs	r0, #15
 8002128:	f7ff f936 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 800212c:	203f      	movs	r0, #63	; 0x3f
 800212e:	f7ff f933 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8002132:	203f      	movs	r0, #63	; 0x3f
 8002134:	f7ff f930 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8002138:	200f      	movs	r0, #15
 800213a:	f7ff f92d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 800213e:	202b      	movs	r0, #43	; 0x2b
 8002140:	f7ff f916 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002144:	2000      	movs	r0, #0
 8002146:	f7ff f927 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800214a:	2000      	movs	r0, #0
 800214c:	f7ff f924 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002150:	2001      	movs	r0, #1
 8002152:	f7ff f921 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 8002156:	203f      	movs	r0, #63	; 0x3f
 8002158:	f7ff f91e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 800215c:	202a      	movs	r0, #42	; 0x2a
 800215e:	f7ff f907 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002162:	2000      	movs	r0, #0
 8002164:	f7ff f918 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002168:	2000      	movs	r0, #0
 800216a:	f7ff f915 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800216e:	2000      	movs	r0, #0
 8002170:	f7ff f912 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 8002174:	20ef      	movs	r0, #239	; 0xef
 8002176:	f7ff f90f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 800217a:	2011      	movs	r0, #17
 800217c:	f7ff f8f8 	bl	8001370 <LCD_WR_REG>
		HAL_Delay(120);
 8002180:	2078      	movs	r0, #120	; 0x78
 8002182:	f004 ff79 	bl	8007078 <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 8002186:	2029      	movs	r0, #41	; 0x29
 8002188:	f7ff f8f2 	bl	8001370 <LCD_WR_REG>
 800218c:	f001 bfca 	b.w	8004124 <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0x5310)
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <TFTLCD_Init+0x3d8>)
 8002192:	889b      	ldrh	r3, [r3, #4]
 8002194:	f245 3210 	movw	r2, #21264	; 0x5310
 8002198:	4293      	cmp	r3, r2
 800219a:	f040 877c 	bne.w	8003096 <TFTLCD_Init+0x12ce>
 800219e:	e001      	b.n	80021a4 <TFTLCD_Init+0x3dc>
 80021a0:	20000310 	.word	0x20000310
	{
		LCD_WR_REG(0xED);
 80021a4:	20ed      	movs	r0, #237	; 0xed
 80021a6:	f7ff f8e3 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7ff f8f4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 80021b0:	20fe      	movs	r0, #254	; 0xfe
 80021b2:	f7ff f8f1 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 80021b6:	20ee      	movs	r0, #238	; 0xee
 80021b8:	f7ff f8da 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 80021bc:	20de      	movs	r0, #222	; 0xde
 80021be:	f7ff f8eb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80021c2:	2021      	movs	r0, #33	; 0x21
 80021c4:	f7ff f8e8 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 80021c8:	20f1      	movs	r0, #241	; 0xf1
 80021ca:	f7ff f8d1 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80021ce:	2001      	movs	r0, #1
 80021d0:	f7ff f8e2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 80021d4:	20df      	movs	r0, #223	; 0xdf
 80021d6:	f7ff f8cb 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 80021da:	2010      	movs	r0, #16
 80021dc:	f7ff f8dc 	bl	8001398 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80021e0:	20c4      	movs	r0, #196	; 0xc4
 80021e2:	f7ff f8c5 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 80021e6:	208f      	movs	r0, #143	; 0x8f
 80021e8:	f7ff f8d6 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 80021ec:	20c6      	movs	r0, #198	; 0xc6
 80021ee:	f7ff f8bf 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7ff f8d0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80021f8:	20e2      	movs	r0, #226	; 0xe2
 80021fa:	f7ff f8cd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80021fe:	20e2      	movs	r0, #226	; 0xe2
 8002200:	f7ff f8ca 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8002204:	20e2      	movs	r0, #226	; 0xe2
 8002206:	f7ff f8c7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 800220a:	20bf      	movs	r0, #191	; 0xbf
 800220c:	f7ff f8b0 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002210:	20aa      	movs	r0, #170	; 0xaa
 8002212:	f7ff f8c1 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 8002216:	20b0      	movs	r0, #176	; 0xb0
 8002218:	f7ff f8aa 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 800221c:	200d      	movs	r0, #13
 800221e:	f7ff f8bb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002222:	2000      	movs	r0, #0
 8002224:	f7ff f8b8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 8002228:	200d      	movs	r0, #13
 800222a:	f7ff f8b5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800222e:	2000      	movs	r0, #0
 8002230:	f7ff f8b2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8002234:	2011      	movs	r0, #17
 8002236:	f7ff f8af 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800223a:	2000      	movs	r0, #0
 800223c:	f7ff f8ac 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8002240:	2019      	movs	r0, #25
 8002242:	f7ff f8a9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002246:	2000      	movs	r0, #0
 8002248:	f7ff f8a6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 800224c:	2021      	movs	r0, #33	; 0x21
 800224e:	f7ff f8a3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002252:	2000      	movs	r0, #0
 8002254:	f7ff f8a0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8002258:	202d      	movs	r0, #45	; 0x2d
 800225a:	f7ff f89d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800225e:	2000      	movs	r0, #0
 8002260:	f7ff f89a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 8002264:	203d      	movs	r0, #61	; 0x3d
 8002266:	f7ff f897 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800226a:	2000      	movs	r0, #0
 800226c:	f7ff f894 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002270:	205d      	movs	r0, #93	; 0x5d
 8002272:	f7ff f891 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002276:	2000      	movs	r0, #0
 8002278:	f7ff f88e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 800227c:	205d      	movs	r0, #93	; 0x5d
 800227e:	f7ff f88b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002282:	2000      	movs	r0, #0
 8002284:	f7ff f888 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8002288:	20b1      	movs	r0, #177	; 0xb1
 800228a:	f7ff f871 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 800228e:	2080      	movs	r0, #128	; 0x80
 8002290:	f7ff f882 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002294:	2000      	movs	r0, #0
 8002296:	f7ff f87f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800229a:	208b      	movs	r0, #139	; 0x8b
 800229c:	f7ff f87c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7ff f879 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 80022a6:	2096      	movs	r0, #150	; 0x96
 80022a8:	f7ff f876 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7ff f873 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 80022b2:	20b2      	movs	r0, #178	; 0xb2
 80022b4:	f7ff f85c 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff f86d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022be:	2000      	movs	r0, #0
 80022c0:	f7ff f86a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 80022c4:	2002      	movs	r0, #2
 80022c6:	f7ff f867 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7ff f864 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f7ff f861 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f7ff f85e 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 80022dc:	20b3      	movs	r0, #179	; 0xb3
 80022de:	f7ff f847 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7ff f858 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7ff f855 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ee:	2000      	movs	r0, #0
 80022f0:	f7ff f852 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7ff f84f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f7ff f84c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002300:	2000      	movs	r0, #0
 8002302:	f7ff f849 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002306:	2000      	movs	r0, #0
 8002308:	f7ff f846 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff f843 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002312:	2000      	movs	r0, #0
 8002314:	f7ff f840 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002318:	2000      	movs	r0, #0
 800231a:	f7ff f83d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800231e:	2000      	movs	r0, #0
 8002320:	f7ff f83a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002324:	2000      	movs	r0, #0
 8002326:	f7ff f837 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800232a:	2000      	movs	r0, #0
 800232c:	f7ff f834 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002330:	2000      	movs	r0, #0
 8002332:	f7ff f831 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002336:	2000      	movs	r0, #0
 8002338:	f7ff f82e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800233c:	2000      	movs	r0, #0
 800233e:	f7ff f82b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002342:	2000      	movs	r0, #0
 8002344:	f7ff f828 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002348:	2000      	movs	r0, #0
 800234a:	f7ff f825 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800234e:	2000      	movs	r0, #0
 8002350:	f7ff f822 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002354:	2000      	movs	r0, #0
 8002356:	f7ff f81f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800235a:	2000      	movs	r0, #0
 800235c:	f7ff f81c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff f819 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002366:	2000      	movs	r0, #0
 8002368:	f7ff f816 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800236c:	2000      	movs	r0, #0
 800236e:	f7ff f813 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 8002372:	20b4      	movs	r0, #180	; 0xb4
 8002374:	f7fe fffc 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8002378:	208b      	movs	r0, #139	; 0x8b
 800237a:	f7ff f80d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff f80a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8002384:	2096      	movs	r0, #150	; 0x96
 8002386:	f7ff f807 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800238a:	2000      	movs	r0, #0
 800238c:	f7ff f804 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 8002390:	20a1      	movs	r0, #161	; 0xa1
 8002392:	f7ff f801 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002396:	2000      	movs	r0, #0
 8002398:	f7fe fffe 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 800239c:	20b5      	movs	r0, #181	; 0xb5
 800239e:	f7fe ffe7 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 80023a2:	2002      	movs	r0, #2
 80023a4:	f7fe fff8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7fe fff5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80023ae:	2003      	movs	r0, #3
 80023b0:	f7fe fff2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7fe ffef 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 80023ba:	2004      	movs	r0, #4
 80023bc:	f7fe ffec 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe ffe9 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 80023c6:	20b6      	movs	r0, #182	; 0xb6
 80023c8:	f7fe ffd2 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7fe ffe3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7fe ffe0 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 80023d8:	20b7      	movs	r0, #183	; 0xb7
 80023da:	f7fe ffc9 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80023de:	2000      	movs	r0, #0
 80023e0:	f7fe ffda 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7fe ffd7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80023ea:	203f      	movs	r0, #63	; 0x3f
 80023ec:	f7fe ffd4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7fe ffd1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 80023f6:	205e      	movs	r0, #94	; 0x5e
 80023f8:	f7fe ffce 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7fe ffcb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002402:	2064      	movs	r0, #100	; 0x64
 8002404:	f7fe ffc8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002408:	2000      	movs	r0, #0
 800240a:	f7fe ffc5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 800240e:	208c      	movs	r0, #140	; 0x8c
 8002410:	f7fe ffc2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002414:	2000      	movs	r0, #0
 8002416:	f7fe ffbf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 800241a:	20ac      	movs	r0, #172	; 0xac
 800241c:	f7fe ffbc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002420:	2000      	movs	r0, #0
 8002422:	f7fe ffb9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002426:	20dc      	movs	r0, #220	; 0xdc
 8002428:	f7fe ffb6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800242c:	2000      	movs	r0, #0
 800242e:	f7fe ffb3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8002432:	2070      	movs	r0, #112	; 0x70
 8002434:	f7fe ffb0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe ffad 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 800243e:	2090      	movs	r0, #144	; 0x90
 8002440:	f7fe ffaa 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002444:	2000      	movs	r0, #0
 8002446:	f7fe ffa7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 800244a:	20eb      	movs	r0, #235	; 0xeb
 800244c:	f7fe ffa4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002450:	2000      	movs	r0, #0
 8002452:	f7fe ffa1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002456:	20dc      	movs	r0, #220	; 0xdc
 8002458:	f7fe ff9e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800245c:	2000      	movs	r0, #0
 800245e:	f7fe ff9b 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 8002462:	20b8      	movs	r0, #184	; 0xb8
 8002464:	f7fe ff84 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002468:	2000      	movs	r0, #0
 800246a:	f7fe ff95 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800246e:	2000      	movs	r0, #0
 8002470:	f7fe ff92 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002474:	2000      	movs	r0, #0
 8002476:	f7fe ff8f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800247a:	2000      	movs	r0, #0
 800247c:	f7fe ff8c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002480:	2000      	movs	r0, #0
 8002482:	f7fe ff89 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002486:	2000      	movs	r0, #0
 8002488:	f7fe ff86 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800248c:	2000      	movs	r0, #0
 800248e:	f7fe ff83 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002492:	2000      	movs	r0, #0
 8002494:	f7fe ff80 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8002498:	20ba      	movs	r0, #186	; 0xba
 800249a:	f7fe ff69 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 800249e:	2024      	movs	r0, #36	; 0x24
 80024a0:	f7fe ff7a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7fe ff77 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7fe ff74 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe ff71 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 80024b6:	20c1      	movs	r0, #193	; 0xc1
 80024b8:	f7fe ff5a 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 80024bc:	2020      	movs	r0, #32
 80024be:	f7fe ff6b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe ff68 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 80024c8:	2054      	movs	r0, #84	; 0x54
 80024ca:	f7fe ff65 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7fe ff62 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 80024d4:	20ff      	movs	r0, #255	; 0xff
 80024d6:	f7fe ff5f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fe ff5c 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 80024e0:	20c2      	movs	r0, #194	; 0xc2
 80024e2:	f7fe ff45 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 80024e6:	200a      	movs	r0, #10
 80024e8:	f7fe ff56 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe ff53 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 80024f2:	2004      	movs	r0, #4
 80024f4:	f7fe ff50 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7fe ff4d 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 80024fe:	20c3      	movs	r0, #195	; 0xc3
 8002500:	f7fe ff36 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 8002504:	203c      	movs	r0, #60	; 0x3c
 8002506:	f7fe ff47 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800250a:	2000      	movs	r0, #0
 800250c:	f7fe ff44 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8002510:	203a      	movs	r0, #58	; 0x3a
 8002512:	f7fe ff41 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe ff3e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 800251c:	2039      	movs	r0, #57	; 0x39
 800251e:	f7fe ff3b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002522:	2000      	movs	r0, #0
 8002524:	f7fe ff38 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8002528:	2037      	movs	r0, #55	; 0x37
 800252a:	f7fe ff35 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe ff32 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002534:	203c      	movs	r0, #60	; 0x3c
 8002536:	f7fe ff2f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800253a:	2000      	movs	r0, #0
 800253c:	f7fe ff2c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002540:	2036      	movs	r0, #54	; 0x36
 8002542:	f7fe ff29 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe ff26 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 800254c:	2032      	movs	r0, #50	; 0x32
 800254e:	f7fe ff23 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002552:	2000      	movs	r0, #0
 8002554:	f7fe ff20 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002558:	202f      	movs	r0, #47	; 0x2f
 800255a:	f7fe ff1d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800255e:	2000      	movs	r0, #0
 8002560:	f7fe ff1a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002564:	202c      	movs	r0, #44	; 0x2c
 8002566:	f7fe ff17 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800256a:	2000      	movs	r0, #0
 800256c:	f7fe ff14 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002570:	2029      	movs	r0, #41	; 0x29
 8002572:	f7fe ff11 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002576:	2000      	movs	r0, #0
 8002578:	f7fe ff0e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 800257c:	2026      	movs	r0, #38	; 0x26
 800257e:	f7fe ff0b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002582:	2000      	movs	r0, #0
 8002584:	f7fe ff08 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002588:	2024      	movs	r0, #36	; 0x24
 800258a:	f7fe ff05 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800258e:	2000      	movs	r0, #0
 8002590:	f7fe ff02 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002594:	2024      	movs	r0, #36	; 0x24
 8002596:	f7fe feff 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe fefc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 80025a0:	2023      	movs	r0, #35	; 0x23
 80025a2:	f7fe fef9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe fef6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80025ac:	203c      	movs	r0, #60	; 0x3c
 80025ae:	f7fe fef3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7fe fef0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80025b8:	2036      	movs	r0, #54	; 0x36
 80025ba:	f7fe feed 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025be:	2000      	movs	r0, #0
 80025c0:	f7fe feea 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 80025c4:	2032      	movs	r0, #50	; 0x32
 80025c6:	f7fe fee7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7fe fee4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 80025d0:	202f      	movs	r0, #47	; 0x2f
 80025d2:	f7fe fee1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7fe fede 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 80025dc:	202c      	movs	r0, #44	; 0x2c
 80025de:	f7fe fedb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe fed8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80025e8:	2029      	movs	r0, #41	; 0x29
 80025ea:	f7fe fed5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7fe fed2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 80025f4:	2026      	movs	r0, #38	; 0x26
 80025f6:	f7fe fecf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe fecc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002600:	2024      	movs	r0, #36	; 0x24
 8002602:	f7fe fec9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002606:	2000      	movs	r0, #0
 8002608:	f7fe fec6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 800260c:	2024      	movs	r0, #36	; 0x24
 800260e:	f7fe fec3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe fec0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002618:	2023      	movs	r0, #35	; 0x23
 800261a:	f7fe febd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe feba 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8002624:	20c4      	movs	r0, #196	; 0xc4
 8002626:	f7fe fea3 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 800262a:	2062      	movs	r0, #98	; 0x62
 800262c:	f7fe feb4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002630:	2000      	movs	r0, #0
 8002632:	f7fe feb1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8002636:	2005      	movs	r0, #5
 8002638:	f7fe feae 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800263c:	2000      	movs	r0, #0
 800263e:	f7fe feab 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002642:	2084      	movs	r0, #132	; 0x84
 8002644:	f7fe fea8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002648:	2000      	movs	r0, #0
 800264a:	f7fe fea5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 800264e:	20f0      	movs	r0, #240	; 0xf0
 8002650:	f7fe fea2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002654:	2000      	movs	r0, #0
 8002656:	f7fe fe9f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 800265a:	2018      	movs	r0, #24
 800265c:	f7fe fe9c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002660:	2000      	movs	r0, #0
 8002662:	f7fe fe99 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 8002666:	20a4      	movs	r0, #164	; 0xa4
 8002668:	f7fe fe96 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe fe93 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8002672:	2018      	movs	r0, #24
 8002674:	f7fe fe90 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe fe8d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 800267e:	2050      	movs	r0, #80	; 0x50
 8002680:	f7fe fe8a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002684:	2000      	movs	r0, #0
 8002686:	f7fe fe87 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 800268a:	200c      	movs	r0, #12
 800268c:	f7fe fe84 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002690:	2000      	movs	r0, #0
 8002692:	f7fe fe81 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8002696:	2017      	movs	r0, #23
 8002698:	f7fe fe7e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800269c:	2000      	movs	r0, #0
 800269e:	f7fe fe7b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 80026a2:	2095      	movs	r0, #149	; 0x95
 80026a4:	f7fe fe78 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7fe fe75 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80026ae:	20f3      	movs	r0, #243	; 0xf3
 80026b0:	f7fe fe72 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe fe6f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 80026ba:	20e6      	movs	r0, #230	; 0xe6
 80026bc:	f7fe fe6c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe fe69 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 80026c6:	20c5      	movs	r0, #197	; 0xc5
 80026c8:	f7fe fe52 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 80026cc:	2032      	movs	r0, #50	; 0x32
 80026ce:	f7fe fe63 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7fe fe60 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80026d8:	2044      	movs	r0, #68	; 0x44
 80026da:	f7fe fe5d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7fe fe5a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 80026e4:	2065      	movs	r0, #101	; 0x65
 80026e6:	f7fe fe57 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7fe fe54 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80026f0:	2076      	movs	r0, #118	; 0x76
 80026f2:	f7fe fe51 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7fe fe4e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80026fc:	2088      	movs	r0, #136	; 0x88
 80026fe:	f7fe fe4b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe fe48 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8002708:	20c6      	movs	r0, #198	; 0xc6
 800270a:	f7fe fe31 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 800270e:	2020      	movs	r0, #32
 8002710:	f7fe fe42 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002714:	2000      	movs	r0, #0
 8002716:	f7fe fe3f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 800271a:	2017      	movs	r0, #23
 800271c:	f7fe fe3c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe fe39 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002726:	2001      	movs	r0, #1
 8002728:	f7fe fe36 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800272c:	2000      	movs	r0, #0
 800272e:	f7fe fe33 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8002732:	20c7      	movs	r0, #199	; 0xc7
 8002734:	f7fe fe1c 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002738:	2000      	movs	r0, #0
 800273a:	f7fe fe2d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800273e:	2000      	movs	r0, #0
 8002740:	f7fe fe2a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002744:	2000      	movs	r0, #0
 8002746:	f7fe fe27 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe fe24 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8002750:	20c8      	movs	r0, #200	; 0xc8
 8002752:	f7fe fe0d 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002756:	2000      	movs	r0, #0
 8002758:	f7fe fe1e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800275c:	2000      	movs	r0, #0
 800275e:	f7fe fe1b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002762:	2000      	movs	r0, #0
 8002764:	f7fe fe18 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe fe15 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 800276e:	20c9      	movs	r0, #201	; 0xc9
 8002770:	f7fe fdfe 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002774:	2000      	movs	r0, #0
 8002776:	f7fe fe0f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800277a:	2000      	movs	r0, #0
 800277c:	f7fe fe0c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002780:	2000      	movs	r0, #0
 8002782:	f7fe fe09 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002786:	2000      	movs	r0, #0
 8002788:	f7fe fe06 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800278c:	2000      	movs	r0, #0
 800278e:	f7fe fe03 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe fe00 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002798:	2000      	movs	r0, #0
 800279a:	f7fe fdfd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800279e:	2000      	movs	r0, #0
 80027a0:	f7fe fdfa 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7fe fdf7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7fe fdf4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe fdf1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7fe fdee 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7fe fdeb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7fe fde8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7fe fde5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7fe fde2 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 80027d4:	20e0      	movs	r0, #224	; 0xe0
 80027d6:	f7fe fdcb 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80027da:	2016      	movs	r0, #22
 80027dc:	f7fe fddc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe fdd9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80027e6:	201c      	movs	r0, #28
 80027e8:	f7fe fdd6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7fe fdd3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80027f2:	2021      	movs	r0, #33	; 0x21
 80027f4:	f7fe fdd0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7fe fdcd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80027fe:	2036      	movs	r0, #54	; 0x36
 8002800:	f7fe fdca 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002804:	2000      	movs	r0, #0
 8002806:	f7fe fdc7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 800280a:	2046      	movs	r0, #70	; 0x46
 800280c:	f7fe fdc4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002810:	2000      	movs	r0, #0
 8002812:	f7fe fdc1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8002816:	2052      	movs	r0, #82	; 0x52
 8002818:	f7fe fdbe 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800281c:	2000      	movs	r0, #0
 800281e:	f7fe fdbb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002822:	2064      	movs	r0, #100	; 0x64
 8002824:	f7fe fdb8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002828:	2000      	movs	r0, #0
 800282a:	f7fe fdb5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 800282e:	207a      	movs	r0, #122	; 0x7a
 8002830:	f7fe fdb2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002834:	2000      	movs	r0, #0
 8002836:	f7fe fdaf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800283a:	208b      	movs	r0, #139	; 0x8b
 800283c:	f7fe fdac 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002840:	2000      	movs	r0, #0
 8002842:	f7fe fda9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002846:	2099      	movs	r0, #153	; 0x99
 8002848:	f7fe fda6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800284c:	2000      	movs	r0, #0
 800284e:	f7fe fda3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002852:	20a8      	movs	r0, #168	; 0xa8
 8002854:	f7fe fda0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002858:	2000      	movs	r0, #0
 800285a:	f7fe fd9d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 800285e:	20b9      	movs	r0, #185	; 0xb9
 8002860:	f7fe fd9a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002864:	2000      	movs	r0, #0
 8002866:	f7fe fd97 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800286a:	20c4      	movs	r0, #196	; 0xc4
 800286c:	f7fe fd94 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002870:	2000      	movs	r0, #0
 8002872:	f7fe fd91 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002876:	20ca      	movs	r0, #202	; 0xca
 8002878:	f7fe fd8e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800287c:	2000      	movs	r0, #0
 800287e:	f7fe fd8b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002882:	20d2      	movs	r0, #210	; 0xd2
 8002884:	f7fe fd88 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002888:	2000      	movs	r0, #0
 800288a:	f7fe fd85 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 800288e:	20d9      	movs	r0, #217	; 0xd9
 8002890:	f7fe fd82 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002894:	2000      	movs	r0, #0
 8002896:	f7fe fd7f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 800289a:	20e0      	movs	r0, #224	; 0xe0
 800289c:	f7fe fd7c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7fe fd79 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80028a6:	20f3      	movs	r0, #243	; 0xf3
 80028a8:	f7fe fd76 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7fe fd73 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 80028b2:	20e1      	movs	r0, #225	; 0xe1
 80028b4:	f7fe fd5c 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80028b8:	2016      	movs	r0, #22
 80028ba:	f7fe fd6d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028be:	2000      	movs	r0, #0
 80028c0:	f7fe fd6a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80028c4:	201c      	movs	r0, #28
 80028c6:	f7fe fd67 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7fe fd64 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 80028d0:	2022      	movs	r0, #34	; 0x22
 80028d2:	f7fe fd61 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7fe fd5e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80028dc:	2036      	movs	r0, #54	; 0x36
 80028de:	f7fe fd5b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7fe fd58 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80028e8:	2045      	movs	r0, #69	; 0x45
 80028ea:	f7fe fd55 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7fe fd52 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80028f4:	2052      	movs	r0, #82	; 0x52
 80028f6:	f7fe fd4f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7fe fd4c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002900:	2064      	movs	r0, #100	; 0x64
 8002902:	f7fe fd49 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe fd46 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 800290c:	207a      	movs	r0, #122	; 0x7a
 800290e:	f7fe fd43 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002912:	2000      	movs	r0, #0
 8002914:	f7fe fd40 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8002918:	208b      	movs	r0, #139	; 0x8b
 800291a:	f7fe fd3d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800291e:	2000      	movs	r0, #0
 8002920:	f7fe fd3a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002924:	2099      	movs	r0, #153	; 0x99
 8002926:	f7fe fd37 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800292a:	2000      	movs	r0, #0
 800292c:	f7fe fd34 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002930:	20a8      	movs	r0, #168	; 0xa8
 8002932:	f7fe fd31 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002936:	2000      	movs	r0, #0
 8002938:	f7fe fd2e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 800293c:	20b9      	movs	r0, #185	; 0xb9
 800293e:	f7fe fd2b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002942:	2000      	movs	r0, #0
 8002944:	f7fe fd28 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002948:	20c4      	movs	r0, #196	; 0xc4
 800294a:	f7fe fd25 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800294e:	2000      	movs	r0, #0
 8002950:	f7fe fd22 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002954:	20ca      	movs	r0, #202	; 0xca
 8002956:	f7fe fd1f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800295a:	2000      	movs	r0, #0
 800295c:	f7fe fd1c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002960:	20d2      	movs	r0, #210	; 0xd2
 8002962:	f7fe fd19 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002966:	2000      	movs	r0, #0
 8002968:	f7fe fd16 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 800296c:	20d8      	movs	r0, #216	; 0xd8
 800296e:	f7fe fd13 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002972:	2000      	movs	r0, #0
 8002974:	f7fe fd10 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8002978:	20e0      	movs	r0, #224	; 0xe0
 800297a:	f7fe fd0d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800297e:	2000      	movs	r0, #0
 8002980:	f7fe fd0a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002984:	20f3      	movs	r0, #243	; 0xf3
 8002986:	f7fe fd07 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800298a:	2000      	movs	r0, #0
 800298c:	f7fe fd04 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 8002990:	20e2      	movs	r0, #226	; 0xe2
 8002992:	f7fe fced 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002996:	2005      	movs	r0, #5
 8002998:	f7fe fcfe 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800299c:	2000      	movs	r0, #0
 800299e:	f7fe fcfb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 80029a2:	200b      	movs	r0, #11
 80029a4:	f7fe fcf8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7fe fcf5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 80029ae:	201b      	movs	r0, #27
 80029b0:	f7fe fcf2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7fe fcef 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 80029ba:	2034      	movs	r0, #52	; 0x34
 80029bc:	f7fe fcec 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7fe fce9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80029c6:	2044      	movs	r0, #68	; 0x44
 80029c8:	f7fe fce6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7fe fce3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 80029d2:	204f      	movs	r0, #79	; 0x4f
 80029d4:	f7fe fce0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fe fcdd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 80029de:	2061      	movs	r0, #97	; 0x61
 80029e0:	f7fe fcda 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7fe fcd7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 80029ea:	2079      	movs	r0, #121	; 0x79
 80029ec:	f7fe fcd4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7fe fcd1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80029f6:	2088      	movs	r0, #136	; 0x88
 80029f8:	f7fe fcce 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7fe fccb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8002a02:	2097      	movs	r0, #151	; 0x97
 8002a04:	f7fe fcc8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fe fcc5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8002a0e:	20a6      	movs	r0, #166	; 0xa6
 8002a10:	f7fe fcc2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fe fcbf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8002a1a:	20b7      	movs	r0, #183	; 0xb7
 8002a1c:	f7fe fcbc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7fe fcb9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8002a26:	20c2      	movs	r0, #194	; 0xc2
 8002a28:	f7fe fcb6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fe fcb3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8002a32:	20c7      	movs	r0, #199	; 0xc7
 8002a34:	f7fe fcb0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fe fcad 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8002a3e:	20d1      	movs	r0, #209	; 0xd1
 8002a40:	f7fe fcaa 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fe fca7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 8002a4a:	20d6      	movs	r0, #214	; 0xd6
 8002a4c:	f7fe fca4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7fe fca1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002a56:	20dd      	movs	r0, #221	; 0xdd
 8002a58:	f7fe fc9e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fe fc9b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002a62:	20f3      	movs	r0, #243	; 0xf3
 8002a64:	f7fe fc98 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7fe fc95 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 8002a6e:	20e3      	movs	r0, #227	; 0xe3
 8002a70:	f7fe fc7e 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002a74:	2005      	movs	r0, #5
 8002a76:	f7fe fc8f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7fe fc8c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8002a80:	200a      	movs	r0, #10
 8002a82:	f7fe fc89 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fe fc86 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8002a8c:	201c      	movs	r0, #28
 8002a8e:	f7fe fc83 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f7fe fc80 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002a98:	2033      	movs	r0, #51	; 0x33
 8002a9a:	f7fe fc7d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fe fc7a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002aa4:	2044      	movs	r0, #68	; 0x44
 8002aa6:	f7fe fc77 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7fe fc74 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002ab0:	2050      	movs	r0, #80	; 0x50
 8002ab2:	f7fe fc71 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7fe fc6e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 8002abc:	2062      	movs	r0, #98	; 0x62
 8002abe:	f7fe fc6b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7fe fc68 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 8002ac8:	2078      	movs	r0, #120	; 0x78
 8002aca:	f7fe fc65 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7fe fc62 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002ad4:	2088      	movs	r0, #136	; 0x88
 8002ad6:	f7fe fc5f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fe fc5c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8002ae0:	2097      	movs	r0, #151	; 0x97
 8002ae2:	f7fe fc59 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7fe fc56 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8002aec:	20a6      	movs	r0, #166	; 0xa6
 8002aee:	f7fe fc53 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7fe fc50 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8002af8:	20b7      	movs	r0, #183	; 0xb7
 8002afa:	f7fe fc4d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7fe fc4a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8002b04:	20c2      	movs	r0, #194	; 0xc2
 8002b06:	f7fe fc47 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f7fe fc44 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8002b10:	20c7      	movs	r0, #199	; 0xc7
 8002b12:	f7fe fc41 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f7fe fc3e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8002b1c:	20d1      	movs	r0, #209	; 0xd1
 8002b1e:	f7fe fc3b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b22:	2000      	movs	r0, #0
 8002b24:	f7fe fc38 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 8002b28:	20d5      	movs	r0, #213	; 0xd5
 8002b2a:	f7fe fc35 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7fe fc32 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002b34:	20dd      	movs	r0, #221	; 0xdd
 8002b36:	f7fe fc2f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7fe fc2c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002b40:	20f3      	movs	r0, #243	; 0xf3
 8002b42:	f7fe fc29 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7fe fc26 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 8002b4c:	20e4      	movs	r0, #228	; 0xe4
 8002b4e:	f7fe fc0f 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002b52:	2001      	movs	r0, #1
 8002b54:	f7fe fc20 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7fe fc1d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002b5e:	2001      	movs	r0, #1
 8002b60:	f7fe fc1a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7fe fc17 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	f7fe fc14 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b70:	2000      	movs	r0, #0
 8002b72:	f7fe fc11 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8002b76:	202a      	movs	r0, #42	; 0x2a
 8002b78:	f7fe fc0e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7fe fc0b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002b82:	203c      	movs	r0, #60	; 0x3c
 8002b84:	f7fe fc08 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f7fe fc05 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8002b8e:	204b      	movs	r0, #75	; 0x4b
 8002b90:	f7fe fc02 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7fe fbff 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002b9a:	205d      	movs	r0, #93	; 0x5d
 8002b9c:	f7fe fbfc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7fe fbf9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002ba6:	2074      	movs	r0, #116	; 0x74
 8002ba8:	f7fe fbf6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bac:	2000      	movs	r0, #0
 8002bae:	f7fe fbf3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002bb2:	2084      	movs	r0, #132	; 0x84
 8002bb4:	f7fe fbf0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f7fe fbed 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8002bbe:	2093      	movs	r0, #147	; 0x93
 8002bc0:	f7fe fbea 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7fe fbe7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002bca:	20a2      	movs	r0, #162	; 0xa2
 8002bcc:	f7fe fbe4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7fe fbe1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8002bd6:	20b3      	movs	r0, #179	; 0xb3
 8002bd8:	f7fe fbde 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f7fe fbdb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8002be2:	20be      	movs	r0, #190	; 0xbe
 8002be4:	f7fe fbd8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002be8:	2000      	movs	r0, #0
 8002bea:	f7fe fbd5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002bee:	20c4      	movs	r0, #196	; 0xc4
 8002bf0:	f7fe fbd2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7fe fbcf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8002bfa:	20cd      	movs	r0, #205	; 0xcd
 8002bfc:	f7fe fbcc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c00:	2000      	movs	r0, #0
 8002c02:	f7fe fbc9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8002c06:	20d3      	movs	r0, #211	; 0xd3
 8002c08:	f7fe fbc6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7fe fbc3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002c12:	20dd      	movs	r0, #221	; 0xdd
 8002c14:	f7fe fbc0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7fe fbbd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002c1e:	20f3      	movs	r0, #243	; 0xf3
 8002c20:	f7fe fbba 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7fe fbb7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 8002c2a:	20e5      	movs	r0, #229	; 0xe5
 8002c2c:	f7fe fba0 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7fe fbb1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7fe fbae 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7fe fbab 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7fe fba8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f7fe fba5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f7fe fba2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002c54:	2029      	movs	r0, #41	; 0x29
 8002c56:	f7fe fb9f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7fe fb9c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002c60:	203c      	movs	r0, #60	; 0x3c
 8002c62:	f7fe fb99 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fe fb96 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8002c6c:	204b      	movs	r0, #75	; 0x4b
 8002c6e:	f7fe fb93 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7fe fb90 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002c78:	205d      	movs	r0, #93	; 0x5d
 8002c7a:	f7fe fb8d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f7fe fb8a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002c84:	2074      	movs	r0, #116	; 0x74
 8002c86:	f7fe fb87 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fe fb84 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002c90:	2084      	movs	r0, #132	; 0x84
 8002c92:	f7fe fb81 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c96:	2000      	movs	r0, #0
 8002c98:	f7fe fb7e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8002c9c:	2093      	movs	r0, #147	; 0x93
 8002c9e:	f7fe fb7b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7fe fb78 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002ca8:	20a2      	movs	r0, #162	; 0xa2
 8002caa:	f7fe fb75 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7fe fb72 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8002cb4:	20b3      	movs	r0, #179	; 0xb3
 8002cb6:	f7fe fb6f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7fe fb6c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8002cc0:	20be      	movs	r0, #190	; 0xbe
 8002cc2:	f7fe fb69 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f7fe fb66 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002ccc:	20c4      	movs	r0, #196	; 0xc4
 8002cce:	f7fe fb63 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f7fe fb60 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8002cd8:	20cd      	movs	r0, #205	; 0xcd
 8002cda:	f7fe fb5d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f7fe fb5a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8002ce4:	20d3      	movs	r0, #211	; 0xd3
 8002ce6:	f7fe fb57 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cea:	2000      	movs	r0, #0
 8002cec:	f7fe fb54 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002cf0:	20dc      	movs	r0, #220	; 0xdc
 8002cf2:	f7fe fb51 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f7fe fb4e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002cfc:	20f3      	movs	r0, #243	; 0xf3
 8002cfe:	f7fe fb4b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7fe fb48 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 8002d08:	20e6      	movs	r0, #230	; 0xe6
 8002d0a:	f7fe fb31 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 8002d0e:	2011      	movs	r0, #17
 8002d10:	f7fe fb42 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7fe fb3f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8002d1a:	2034      	movs	r0, #52	; 0x34
 8002d1c:	f7fe fb3c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d20:	2000      	movs	r0, #0
 8002d22:	f7fe fb39 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002d26:	2056      	movs	r0, #86	; 0x56
 8002d28:	f7fe fb36 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7fe fb33 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002d32:	2076      	movs	r0, #118	; 0x76
 8002d34:	f7fe fb30 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f7fe fb2d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002d3e:	2077      	movs	r0, #119	; 0x77
 8002d40:	f7fe fb2a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7fe fb27 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002d4a:	2066      	movs	r0, #102	; 0x66
 8002d4c:	f7fe fb24 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7fe fb21 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002d56:	2088      	movs	r0, #136	; 0x88
 8002d58:	f7fe fb1e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7fe fb1b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002d62:	2099      	movs	r0, #153	; 0x99
 8002d64:	f7fe fb18 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fe fb15 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002d6e:	20bb      	movs	r0, #187	; 0xbb
 8002d70:	f7fe fb12 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7fe fb0f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002d7a:	2099      	movs	r0, #153	; 0x99
 8002d7c:	f7fe fb0c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7fe fb09 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002d86:	2066      	movs	r0, #102	; 0x66
 8002d88:	f7fe fb06 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7fe fb03 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002d92:	2055      	movs	r0, #85	; 0x55
 8002d94:	f7fe fb00 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f7fe fafd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002d9e:	2055      	movs	r0, #85	; 0x55
 8002da0:	f7fe fafa 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7fe faf7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002daa:	2045      	movs	r0, #69	; 0x45
 8002dac:	f7fe faf4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f7fe faf1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8002db6:	2043      	movs	r0, #67	; 0x43
 8002db8:	f7fe faee 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f7fe faeb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002dc2:	2044      	movs	r0, #68	; 0x44
 8002dc4:	f7fe fae8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f7fe fae5 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 8002dce:	20e7      	movs	r0, #231	; 0xe7
 8002dd0:	f7fe face 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8002dd4:	2032      	movs	r0, #50	; 0x32
 8002dd6:	f7fe fadf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fe fadc 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002de0:	2055      	movs	r0, #85	; 0x55
 8002de2:	f7fe fad9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002de6:	2000      	movs	r0, #0
 8002de8:	f7fe fad6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002dec:	2076      	movs	r0, #118	; 0x76
 8002dee:	f7fe fad3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f7fe fad0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002df8:	2066      	movs	r0, #102	; 0x66
 8002dfa:	f7fe facd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7fe faca 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8002e04:	2067      	movs	r0, #103	; 0x67
 8002e06:	f7fe fac7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f7fe fac4 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8002e10:	2067      	movs	r0, #103	; 0x67
 8002e12:	f7fe fac1 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e16:	2000      	movs	r0, #0
 8002e18:	f7fe fabe 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8002e1c:	2087      	movs	r0, #135	; 0x87
 8002e1e:	f7fe fabb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7fe fab8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002e28:	2099      	movs	r0, #153	; 0x99
 8002e2a:	f7fe fab5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f7fe fab2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002e34:	20bb      	movs	r0, #187	; 0xbb
 8002e36:	f7fe faaf 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7fe faac 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002e40:	2099      	movs	r0, #153	; 0x99
 8002e42:	f7fe faa9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e46:	2000      	movs	r0, #0
 8002e48:	f7fe faa6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002e4c:	2077      	movs	r0, #119	; 0x77
 8002e4e:	f7fe faa3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e52:	2000      	movs	r0, #0
 8002e54:	f7fe faa0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002e58:	2044      	movs	r0, #68	; 0x44
 8002e5a:	f7fe fa9d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f7fe fa9a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002e64:	2056      	movs	r0, #86	; 0x56
 8002e66:	f7fe fa97 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7fe fa94 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002e70:	2023      	movs	r0, #35	; 0x23
 8002e72:	f7fe fa91 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7fe fa8e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002e7c:	2033      	movs	r0, #51	; 0x33
 8002e7e:	f7fe fa8b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f7fe fa88 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002e88:	2045      	movs	r0, #69	; 0x45
 8002e8a:	f7fe fa85 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7fe fa82 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 8002e94:	20e8      	movs	r0, #232	; 0xe8
 8002e96:	f7fe fa6b 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7fe fa7c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7fe fa79 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002ea6:	2099      	movs	r0, #153	; 0x99
 8002ea8:	f7fe fa76 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7fe fa73 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8002eb2:	2087      	movs	r0, #135	; 0x87
 8002eb4:	f7fe fa70 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f7fe fa6d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002ebe:	2088      	movs	r0, #136	; 0x88
 8002ec0:	f7fe fa6a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7fe fa67 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002eca:	2077      	movs	r0, #119	; 0x77
 8002ecc:	f7fe fa64 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7fe fa61 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002ed6:	2066      	movs	r0, #102	; 0x66
 8002ed8:	f7fe fa5e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7fe fa5b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002ee2:	2088      	movs	r0, #136	; 0x88
 8002ee4:	f7fe fa58 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7fe fa55 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 8002eee:	20aa      	movs	r0, #170	; 0xaa
 8002ef0:	f7fe fa52 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7fe fa4f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002efa:	20bb      	movs	r0, #187	; 0xbb
 8002efc:	f7fe fa4c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fe fa49 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002f06:	2099      	movs	r0, #153	; 0x99
 8002f08:	f7fe fa46 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7fe fa43 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002f12:	2066      	movs	r0, #102	; 0x66
 8002f14:	f7fe fa40 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f7fe fa3d 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002f1e:	2055      	movs	r0, #85	; 0x55
 8002f20:	f7fe fa3a 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7fe fa37 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002f2a:	2055      	movs	r0, #85	; 0x55
 8002f2c:	f7fe fa34 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f30:	2000      	movs	r0, #0
 8002f32:	f7fe fa31 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002f36:	2044      	movs	r0, #68	; 0x44
 8002f38:	f7fe fa2e 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7fe fa2b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002f42:	2044      	movs	r0, #68	; 0x44
 8002f44:	f7fe fa28 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f7fe fa25 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002f4e:	2055      	movs	r0, #85	; 0x55
 8002f50:	f7fe fa22 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7fe fa1f 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 8002f5a:	20e9      	movs	r0, #233	; 0xe9
 8002f5c:	f7fe fa08 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002f60:	20aa      	movs	r0, #170	; 0xaa
 8002f62:	f7fe fa19 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f66:	2000      	movs	r0, #0
 8002f68:	f7fe fa16 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f7fe fa13 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7fe fa10 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f7fe f9f9 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002f7e:	20aa      	movs	r0, #170	; 0xaa
 8002f80:	f7fe fa0a 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8002f84:	20cf      	movs	r0, #207	; 0xcf
 8002f86:	f7fe f9f3 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f7fe fa04 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7fe fa01 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fe f9fe 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7fe f9fb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7fe f9f8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f7fe f9f5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f7fe f9f2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f7fe f9ef 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f7fe f9ec 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f7fe f9e9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7fe f9e6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f7fe f9e3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f7fe f9e0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f7fe f9dd 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f7fe f9da 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7fe f9d7 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f7fe f9d4 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 8002ff0:	20f0      	movs	r0, #240	; 0xf0
 8002ff2:	f7fe f9bd 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f7fe f9ce 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002ffc:	2050      	movs	r0, #80	; 0x50
 8002ffe:	f7fe f9cb 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003002:	2000      	movs	r0, #0
 8003004:	f7fe f9c8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003008:	2000      	movs	r0, #0
 800300a:	f7fe f9c5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800300e:	2000      	movs	r0, #0
 8003010:	f7fe f9c2 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 8003014:	20f3      	movs	r0, #243	; 0xf3
 8003016:	f7fe f9ab 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800301a:	2000      	movs	r0, #0
 800301c:	f7fe f9bc 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 8003020:	20f9      	movs	r0, #249	; 0xf9
 8003022:	f7fe f9a5 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 8003026:	2006      	movs	r0, #6
 8003028:	f7fe f9b6 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 800302c:	2010      	movs	r0, #16
 800302e:	f7fe f9b3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8003032:	2029      	movs	r0, #41	; 0x29
 8003034:	f7fe f9b0 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003038:	2000      	movs	r0, #0
 800303a:	f7fe f9ad 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 800303e:	203a      	movs	r0, #58	; 0x3a
 8003040:	f7fe f996 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8003044:	2055      	movs	r0, #85	; 0x55
 8003046:	f7fe f9a7 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 800304a:	2011      	movs	r0, #17
 800304c:	f7fe f990 	bl	8001370 <LCD_WR_REG>
		HAL_Delay(100);
 8003050:	2064      	movs	r0, #100	; 0x64
 8003052:	f004 f811 	bl	8007078 <HAL_Delay>
		LCD_WR_REG(0x29);
 8003056:	2029      	movs	r0, #41	; 0x29
 8003058:	f7fe f98a 	bl	8001370 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 800305c:	2035      	movs	r0, #53	; 0x35
 800305e:	f7fe f987 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003062:	2000      	movs	r0, #0
 8003064:	f7fe f998 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 8003068:	2051      	movs	r0, #81	; 0x51
 800306a:	f7fe f981 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 800306e:	20ff      	movs	r0, #255	; 0xff
 8003070:	f7fe f992 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8003074:	2053      	movs	r0, #83	; 0x53
 8003076:	f7fe f97b 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 800307a:	202c      	movs	r0, #44	; 0x2c
 800307c:	f7fe f98c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8003080:	2055      	movs	r0, #85	; 0x55
 8003082:	f7fe f975 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 8003086:	2082      	movs	r0, #130	; 0x82
 8003088:	f7fe f986 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800308c:	202c      	movs	r0, #44	; 0x2c
 800308e:	f7fe f96f 	bl	8001370 <LCD_WR_REG>
 8003092:	f001 b847 	b.w	8004124 <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0x5510)
 8003096:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <TFTLCD_Init+0x12e0>)
 8003098:	889b      	ldrh	r3, [r3, #4]
 800309a:	f245 5210 	movw	r2, #21776	; 0x5510
 800309e:	4293      	cmp	r3, r2
 80030a0:	f040 8781 	bne.w	8003fa6 <TFTLCD_Init+0x21de>
 80030a4:	e002      	b.n	80030ac <TFTLCD_Init+0x12e4>
 80030a6:	bf00      	nop
 80030a8:	20000310 	.word	0x20000310
	{
		LCD_WriteReg(0xF000,0x55);
 80030ac:	2155      	movs	r1, #85	; 0x55
 80030ae:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80030b2:	f7fe f997 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 80030b6:	21aa      	movs	r1, #170	; 0xaa
 80030b8:	f24f 0001 	movw	r0, #61441	; 0xf001
 80030bc:	f7fe f992 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 80030c0:	2152      	movs	r1, #82	; 0x52
 80030c2:	f24f 0002 	movw	r0, #61442	; 0xf002
 80030c6:	f7fe f98d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 80030ca:	2108      	movs	r1, #8
 80030cc:	f24f 0003 	movw	r0, #61443	; 0xf003
 80030d0:	f7fe f988 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 80030d4:	2101      	movs	r1, #1
 80030d6:	f24f 0004 	movw	r0, #61444	; 0xf004
 80030da:	f7fe f983 	bl	80013e4 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 80030de:	210d      	movs	r1, #13
 80030e0:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80030e4:	f7fe f97e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 80030e8:	210d      	movs	r1, #13
 80030ea:	f24b 0001 	movw	r0, #45057	; 0xb001
 80030ee:	f7fe f979 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 80030f2:	210d      	movs	r1, #13
 80030f4:	f24b 0002 	movw	r0, #45058	; 0xb002
 80030f8:	f7fe f974 	bl	80013e4 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 80030fc:	2134      	movs	r1, #52	; 0x34
 80030fe:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003102:	f7fe f96f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 8003106:	2134      	movs	r1, #52	; 0x34
 8003108:	f24b 6001 	movw	r0, #46593	; 0xb601
 800310c:	f7fe f96a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 8003110:	2134      	movs	r1, #52	; 0x34
 8003112:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003116:	f7fe f965 	bl	80013e4 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 800311a:	210d      	movs	r1, #13
 800311c:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003120:	f7fe f960 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8003124:	210d      	movs	r1, #13
 8003126:	f24b 1001 	movw	r0, #45313	; 0xb101
 800312a:	f7fe f95b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 800312e:	210d      	movs	r1, #13
 8003130:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003134:	f7fe f956 	bl	80013e4 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 8003138:	2134      	movs	r1, #52	; 0x34
 800313a:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800313e:	f7fe f951 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8003142:	2134      	movs	r1, #52	; 0x34
 8003144:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003148:	f7fe f94c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 800314c:	2134      	movs	r1, #52	; 0x34
 800314e:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003152:	f7fe f947 	bl	80013e4 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8003156:	2100      	movs	r1, #0
 8003158:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 800315c:	f7fe f942 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8003160:	2100      	movs	r1, #0
 8003162:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003166:	f7fe f93d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 800316a:	2100      	movs	r1, #0
 800316c:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003170:	f7fe f938 	bl	80013e4 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8003174:	2124      	movs	r1, #36	; 0x24
 8003176:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800317a:	f7fe f933 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 800317e:	2124      	movs	r1, #36	; 0x24
 8003180:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003184:	f7fe f92e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8003188:	2124      	movs	r1, #36	; 0x24
 800318a:	f64b 0002 	movw	r0, #47106	; 0xb802
 800318e:	f7fe f929 	bl	80013e4 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 8003192:	2101      	movs	r1, #1
 8003194:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003198:	f7fe f924 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 800319c:	210f      	movs	r1, #15
 800319e:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80031a2:	f7fe f91f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 80031a6:	210f      	movs	r1, #15
 80031a8:	f24b 3001 	movw	r0, #45825	; 0xb301
 80031ac:	f7fe f91a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 80031b0:	210f      	movs	r1, #15
 80031b2:	f24b 3002 	movw	r0, #45826	; 0xb302
 80031b6:	f7fe f915 	bl	80013e4 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 80031ba:	2134      	movs	r1, #52	; 0x34
 80031bc:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80031c0:	f7fe f910 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 80031c4:	2134      	movs	r1, #52	; 0x34
 80031c6:	f64b 1001 	movw	r0, #47361	; 0xb901
 80031ca:	f7fe f90b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 80031ce:	2134      	movs	r1, #52	; 0x34
 80031d0:	f64b 1002 	movw	r0, #47362	; 0xb902
 80031d4:	f7fe f906 	bl	80013e4 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 80031d8:	2108      	movs	r1, #8
 80031da:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80031de:	f7fe f901 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 80031e2:	2108      	movs	r1, #8
 80031e4:	f24b 5001 	movw	r0, #46337	; 0xb501
 80031e8:	f7fe f8fc 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 80031ec:	2108      	movs	r1, #8
 80031ee:	f24b 5002 	movw	r0, #46338	; 0xb502
 80031f2:	f7fe f8f7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 80031f6:	2103      	movs	r1, #3
 80031f8:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80031fc:	f7fe f8f2 	bl	80013e4 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8003200:	2124      	movs	r1, #36	; 0x24
 8003202:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8003206:	f7fe f8ed 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 800320a:	2124      	movs	r1, #36	; 0x24
 800320c:	f64b 2001 	movw	r0, #47617	; 0xba01
 8003210:	f7fe f8e8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8003214:	2124      	movs	r1, #36	; 0x24
 8003216:	f64b 2002 	movw	r0, #47618	; 0xba02
 800321a:	f7fe f8e3 	bl	80013e4 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 800321e:	2100      	movs	r1, #0
 8003220:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003224:	f7fe f8de 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 8003228:	2178      	movs	r1, #120	; 0x78
 800322a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800322e:	f7fe f8d9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003232:	2100      	movs	r1, #0
 8003234:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003238:	f7fe f8d4 	bl	80013e4 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 800323c:	2100      	movs	r1, #0
 800323e:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003242:	f7fe f8cf 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 8003246:	2178      	movs	r1, #120	; 0x78
 8003248:	f64b 5001 	movw	r0, #48385	; 0xbd01
 800324c:	f7fe f8ca 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8003250:	2100      	movs	r1, #0
 8003252:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003256:	f7fe f8c5 	bl	80013e4 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 800325a:	2100      	movs	r1, #0
 800325c:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003260:	f7fe f8c0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8003264:	2164      	movs	r1, #100	; 0x64
 8003266:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800326a:	f7fe f8bb 	bl	80013e4 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 800326e:	2100      	movs	r1, #0
 8003270:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003274:	f7fe f8b6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8003278:	2133      	movs	r1, #51	; 0x33
 800327a:	f24d 1001 	movw	r0, #53505	; 0xd101
 800327e:	f7fe f8b1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 8003282:	2100      	movs	r1, #0
 8003284:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003288:	f7fe f8ac 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 800328c:	2134      	movs	r1, #52	; 0x34
 800328e:	f24d 1003 	movw	r0, #53507	; 0xd103
 8003292:	f7fe f8a7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 8003296:	2100      	movs	r1, #0
 8003298:	f24d 1004 	movw	r0, #53508	; 0xd104
 800329c:	f7fe f8a2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 80032a0:	213a      	movs	r1, #58	; 0x3a
 80032a2:	f24d 1005 	movw	r0, #53509	; 0xd105
 80032a6:	f7fe f89d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 80032aa:	2100      	movs	r1, #0
 80032ac:	f24d 1006 	movw	r0, #53510	; 0xd106
 80032b0:	f7fe f898 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 80032b4:	214a      	movs	r1, #74	; 0x4a
 80032b6:	f24d 1007 	movw	r0, #53511	; 0xd107
 80032ba:	f7fe f893 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 80032be:	2100      	movs	r1, #0
 80032c0:	f24d 1008 	movw	r0, #53512	; 0xd108
 80032c4:	f7fe f88e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 80032c8:	215c      	movs	r1, #92	; 0x5c
 80032ca:	f24d 1009 	movw	r0, #53513	; 0xd109
 80032ce:	f7fe f889 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 80032d2:	2100      	movs	r1, #0
 80032d4:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80032d8:	f7fe f884 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 80032dc:	2181      	movs	r1, #129	; 0x81
 80032de:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80032e2:	f7fe f87f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 80032e6:	2100      	movs	r1, #0
 80032e8:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80032ec:	f7fe f87a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 80032f0:	21a6      	movs	r1, #166	; 0xa6
 80032f2:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80032f6:	f7fe f875 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 80032fa:	2100      	movs	r1, #0
 80032fc:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003300:	f7fe f870 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8003304:	21e5      	movs	r1, #229	; 0xe5
 8003306:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800330a:	f7fe f86b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 800330e:	2101      	movs	r1, #1
 8003310:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003314:	f7fe f866 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8003318:	2113      	movs	r1, #19
 800331a:	f24d 1011 	movw	r0, #53521	; 0xd111
 800331e:	f7fe f861 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8003322:	2101      	movs	r1, #1
 8003324:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003328:	f7fe f85c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 800332c:	2154      	movs	r1, #84	; 0x54
 800332e:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003332:	f7fe f857 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 8003336:	2101      	movs	r1, #1
 8003338:	f24d 1014 	movw	r0, #53524	; 0xd114
 800333c:	f7fe f852 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8003340:	2182      	movs	r1, #130	; 0x82
 8003342:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003346:	f7fe f84d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 800334a:	2101      	movs	r1, #1
 800334c:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003350:	f7fe f848 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8003354:	21ca      	movs	r1, #202	; 0xca
 8003356:	f24d 1017 	movw	r0, #53527	; 0xd117
 800335a:	f7fe f843 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 800335e:	2102      	movs	r1, #2
 8003360:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003364:	f7fe f83e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8003368:	2100      	movs	r1, #0
 800336a:	f24d 1019 	movw	r0, #53529	; 0xd119
 800336e:	f7fe f839 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 8003372:	2102      	movs	r1, #2
 8003374:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003378:	f7fe f834 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 800337c:	2101      	movs	r1, #1
 800337e:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003382:	f7fe f82f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 8003386:	2102      	movs	r1, #2
 8003388:	f24d 101c 	movw	r0, #53532	; 0xd11c
 800338c:	f7fe f82a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8003390:	2134      	movs	r1, #52	; 0x34
 8003392:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003396:	f7fe f825 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 800339a:	2102      	movs	r1, #2
 800339c:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80033a0:	f7fe f820 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 80033a4:	2167      	movs	r1, #103	; 0x67
 80033a6:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80033aa:	f7fe f81b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 80033ae:	2102      	movs	r1, #2
 80033b0:	f24d 1020 	movw	r0, #53536	; 0xd120
 80033b4:	f7fe f816 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 80033b8:	2184      	movs	r1, #132	; 0x84
 80033ba:	f24d 1021 	movw	r0, #53537	; 0xd121
 80033be:	f7fe f811 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 80033c2:	2102      	movs	r1, #2
 80033c4:	f24d 1022 	movw	r0, #53538	; 0xd122
 80033c8:	f7fe f80c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 80033cc:	21a4      	movs	r1, #164	; 0xa4
 80033ce:	f24d 1023 	movw	r0, #53539	; 0xd123
 80033d2:	f7fe f807 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 80033d6:	2102      	movs	r1, #2
 80033d8:	f24d 1024 	movw	r0, #53540	; 0xd124
 80033dc:	f7fe f802 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 80033e0:	21b7      	movs	r1, #183	; 0xb7
 80033e2:	f24d 1025 	movw	r0, #53541	; 0xd125
 80033e6:	f7fd fffd 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 80033ea:	2102      	movs	r1, #2
 80033ec:	f24d 1026 	movw	r0, #53542	; 0xd126
 80033f0:	f7fd fff8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 80033f4:	21cf      	movs	r1, #207	; 0xcf
 80033f6:	f24d 1027 	movw	r0, #53543	; 0xd127
 80033fa:	f7fd fff3 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 80033fe:	2102      	movs	r1, #2
 8003400:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003404:	f7fd ffee 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 8003408:	21de      	movs	r1, #222	; 0xde
 800340a:	f24d 1029 	movw	r0, #53545	; 0xd129
 800340e:	f7fd ffe9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8003412:	2102      	movs	r1, #2
 8003414:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003418:	f7fd ffe4 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 800341c:	21f2      	movs	r1, #242	; 0xf2
 800341e:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003422:	f7fd ffdf 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 8003426:	2102      	movs	r1, #2
 8003428:	f24d 102c 	movw	r0, #53548	; 0xd12c
 800342c:	f7fd ffda 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8003430:	21fe      	movs	r1, #254	; 0xfe
 8003432:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003436:	f7fd ffd5 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 800343a:	2103      	movs	r1, #3
 800343c:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003440:	f7fd ffd0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8003444:	2110      	movs	r1, #16
 8003446:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800344a:	f7fd ffcb 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 800344e:	2103      	movs	r1, #3
 8003450:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003454:	f7fd ffc6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8003458:	2133      	movs	r1, #51	; 0x33
 800345a:	f24d 1031 	movw	r0, #53553	; 0xd131
 800345e:	f7fd ffc1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8003462:	2103      	movs	r1, #3
 8003464:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003468:	f7fd ffbc 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 800346c:	216d      	movs	r1, #109	; 0x6d
 800346e:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003472:	f7fd ffb7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 8003476:	2100      	movs	r1, #0
 8003478:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 800347c:	f7fd ffb2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8003480:	2133      	movs	r1, #51	; 0x33
 8003482:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003486:	f7fd ffad 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 800348a:	2100      	movs	r1, #0
 800348c:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003490:	f7fd ffa8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 8003494:	2134      	movs	r1, #52	; 0x34
 8003496:	f24d 2003 	movw	r0, #53763	; 0xd203
 800349a:	f7fd ffa3 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 800349e:	2100      	movs	r1, #0
 80034a0:	f24d 2004 	movw	r0, #53764	; 0xd204
 80034a4:	f7fd ff9e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 80034a8:	213a      	movs	r1, #58	; 0x3a
 80034aa:	f24d 2005 	movw	r0, #53765	; 0xd205
 80034ae:	f7fd ff99 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 80034b2:	2100      	movs	r1, #0
 80034b4:	f24d 2006 	movw	r0, #53766	; 0xd206
 80034b8:	f7fd ff94 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 80034bc:	214a      	movs	r1, #74	; 0x4a
 80034be:	f24d 2007 	movw	r0, #53767	; 0xd207
 80034c2:	f7fd ff8f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 80034c6:	2100      	movs	r1, #0
 80034c8:	f24d 2008 	movw	r0, #53768	; 0xd208
 80034cc:	f7fd ff8a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 80034d0:	215c      	movs	r1, #92	; 0x5c
 80034d2:	f24d 2009 	movw	r0, #53769	; 0xd209
 80034d6:	f7fd ff85 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 80034da:	2100      	movs	r1, #0
 80034dc:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80034e0:	f7fd ff80 	bl	80013e4 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 80034e4:	2181      	movs	r1, #129	; 0x81
 80034e6:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80034ea:	f7fd ff7b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 80034ee:	2100      	movs	r1, #0
 80034f0:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80034f4:	f7fd ff76 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 80034f8:	21a6      	movs	r1, #166	; 0xa6
 80034fa:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80034fe:	f7fd ff71 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8003502:	2100      	movs	r1, #0
 8003504:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003508:	f7fd ff6c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 800350c:	21e5      	movs	r1, #229	; 0xe5
 800350e:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003512:	f7fd ff67 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 8003516:	2101      	movs	r1, #1
 8003518:	f24d 2010 	movw	r0, #53776	; 0xd210
 800351c:	f7fd ff62 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8003520:	2113      	movs	r1, #19
 8003522:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003526:	f7fd ff5d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 800352a:	2101      	movs	r1, #1
 800352c:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003530:	f7fd ff58 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8003534:	2154      	movs	r1, #84	; 0x54
 8003536:	f24d 2013 	movw	r0, #53779	; 0xd213
 800353a:	f7fd ff53 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 800353e:	2101      	movs	r1, #1
 8003540:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003544:	f7fd ff4e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8003548:	2182      	movs	r1, #130	; 0x82
 800354a:	f24d 2015 	movw	r0, #53781	; 0xd215
 800354e:	f7fd ff49 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8003552:	2101      	movs	r1, #1
 8003554:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003558:	f7fd ff44 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 800355c:	21ca      	movs	r1, #202	; 0xca
 800355e:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003562:	f7fd ff3f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 8003566:	2102      	movs	r1, #2
 8003568:	f24d 2018 	movw	r0, #53784	; 0xd218
 800356c:	f7fd ff3a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8003570:	2100      	movs	r1, #0
 8003572:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003576:	f7fd ff35 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 800357a:	2102      	movs	r1, #2
 800357c:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003580:	f7fd ff30 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8003584:	2101      	movs	r1, #1
 8003586:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800358a:	f7fd ff2b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 800358e:	2102      	movs	r1, #2
 8003590:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003594:	f7fd ff26 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8003598:	2134      	movs	r1, #52	; 0x34
 800359a:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800359e:	f7fd ff21 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 80035a2:	2102      	movs	r1, #2
 80035a4:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80035a8:	f7fd ff1c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 80035ac:	2167      	movs	r1, #103	; 0x67
 80035ae:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80035b2:	f7fd ff17 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 80035b6:	2102      	movs	r1, #2
 80035b8:	f24d 2020 	movw	r0, #53792	; 0xd220
 80035bc:	f7fd ff12 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 80035c0:	2184      	movs	r1, #132	; 0x84
 80035c2:	f24d 2021 	movw	r0, #53793	; 0xd221
 80035c6:	f7fd ff0d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 80035ca:	2102      	movs	r1, #2
 80035cc:	f24d 2022 	movw	r0, #53794	; 0xd222
 80035d0:	f7fd ff08 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 80035d4:	21a4      	movs	r1, #164	; 0xa4
 80035d6:	f24d 2023 	movw	r0, #53795	; 0xd223
 80035da:	f7fd ff03 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 80035de:	2102      	movs	r1, #2
 80035e0:	f24d 2024 	movw	r0, #53796	; 0xd224
 80035e4:	f7fd fefe 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 80035e8:	21b7      	movs	r1, #183	; 0xb7
 80035ea:	f24d 2025 	movw	r0, #53797	; 0xd225
 80035ee:	f7fd fef9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 80035f2:	2102      	movs	r1, #2
 80035f4:	f24d 2026 	movw	r0, #53798	; 0xd226
 80035f8:	f7fd fef4 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 80035fc:	21cf      	movs	r1, #207	; 0xcf
 80035fe:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003602:	f7fd feef 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 8003606:	2102      	movs	r1, #2
 8003608:	f24d 2028 	movw	r0, #53800	; 0xd228
 800360c:	f7fd feea 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8003610:	21de      	movs	r1, #222	; 0xde
 8003612:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003616:	f7fd fee5 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 800361a:	2102      	movs	r1, #2
 800361c:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003620:	f7fd fee0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8003624:	21f2      	movs	r1, #242	; 0xf2
 8003626:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800362a:	f7fd fedb 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 800362e:	2102      	movs	r1, #2
 8003630:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003634:	f7fd fed6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8003638:	21fe      	movs	r1, #254	; 0xfe
 800363a:	f24d 202d 	movw	r0, #53805	; 0xd22d
 800363e:	f7fd fed1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8003642:	2103      	movs	r1, #3
 8003644:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003648:	f7fd fecc 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 800364c:	2110      	movs	r1, #16
 800364e:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003652:	f7fd fec7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 8003656:	2103      	movs	r1, #3
 8003658:	f24d 2030 	movw	r0, #53808	; 0xd230
 800365c:	f7fd fec2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8003660:	2133      	movs	r1, #51	; 0x33
 8003662:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003666:	f7fd febd 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 800366a:	2103      	movs	r1, #3
 800366c:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003670:	f7fd feb8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 8003674:	216d      	movs	r1, #109	; 0x6d
 8003676:	f24d 2033 	movw	r0, #53811	; 0xd233
 800367a:	f7fd feb3 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 800367e:	2100      	movs	r1, #0
 8003680:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003684:	f7fd feae 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8003688:	2133      	movs	r1, #51	; 0x33
 800368a:	f24d 3001 	movw	r0, #54017	; 0xd301
 800368e:	f7fd fea9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 8003692:	2100      	movs	r1, #0
 8003694:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003698:	f7fd fea4 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 800369c:	2134      	movs	r1, #52	; 0x34
 800369e:	f24d 3003 	movw	r0, #54019	; 0xd303
 80036a2:	f7fd fe9f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 80036a6:	2100      	movs	r1, #0
 80036a8:	f24d 3004 	movw	r0, #54020	; 0xd304
 80036ac:	f7fd fe9a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 80036b0:	213a      	movs	r1, #58	; 0x3a
 80036b2:	f24d 3005 	movw	r0, #54021	; 0xd305
 80036b6:	f7fd fe95 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 80036ba:	2100      	movs	r1, #0
 80036bc:	f24d 3006 	movw	r0, #54022	; 0xd306
 80036c0:	f7fd fe90 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 80036c4:	214a      	movs	r1, #74	; 0x4a
 80036c6:	f24d 3007 	movw	r0, #54023	; 0xd307
 80036ca:	f7fd fe8b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 80036ce:	2100      	movs	r1, #0
 80036d0:	f24d 3008 	movw	r0, #54024	; 0xd308
 80036d4:	f7fd fe86 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 80036d8:	215c      	movs	r1, #92	; 0x5c
 80036da:	f24d 3009 	movw	r0, #54025	; 0xd309
 80036de:	f7fd fe81 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 80036e2:	2100      	movs	r1, #0
 80036e4:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80036e8:	f7fd fe7c 	bl	80013e4 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 80036ec:	2181      	movs	r1, #129	; 0x81
 80036ee:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80036f2:	f7fd fe77 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 80036f6:	2100      	movs	r1, #0
 80036f8:	f24d 300c 	movw	r0, #54028	; 0xd30c
 80036fc:	f7fd fe72 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8003700:	21a6      	movs	r1, #166	; 0xa6
 8003702:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003706:	f7fd fe6d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 800370a:	2100      	movs	r1, #0
 800370c:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003710:	f7fd fe68 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 8003714:	21e5      	movs	r1, #229	; 0xe5
 8003716:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800371a:	f7fd fe63 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 800371e:	2101      	movs	r1, #1
 8003720:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003724:	f7fd fe5e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 8003728:	2113      	movs	r1, #19
 800372a:	f24d 3011 	movw	r0, #54033	; 0xd311
 800372e:	f7fd fe59 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8003732:	2101      	movs	r1, #1
 8003734:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003738:	f7fd fe54 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 800373c:	2154      	movs	r1, #84	; 0x54
 800373e:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003742:	f7fd fe4f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 8003746:	2101      	movs	r1, #1
 8003748:	f24d 3014 	movw	r0, #54036	; 0xd314
 800374c:	f7fd fe4a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8003750:	2182      	movs	r1, #130	; 0x82
 8003752:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003756:	f7fd fe45 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 800375a:	2101      	movs	r1, #1
 800375c:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003760:	f7fd fe40 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8003764:	21ca      	movs	r1, #202	; 0xca
 8003766:	f24d 3017 	movw	r0, #54039	; 0xd317
 800376a:	f7fd fe3b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 800376e:	2102      	movs	r1, #2
 8003770:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003774:	f7fd fe36 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 8003778:	2100      	movs	r1, #0
 800377a:	f24d 3019 	movw	r0, #54041	; 0xd319
 800377e:	f7fd fe31 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 8003782:	2102      	movs	r1, #2
 8003784:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003788:	f7fd fe2c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 800378c:	2101      	movs	r1, #1
 800378e:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003792:	f7fd fe27 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 8003796:	2102      	movs	r1, #2
 8003798:	f24d 301c 	movw	r0, #54044	; 0xd31c
 800379c:	f7fd fe22 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 80037a0:	2134      	movs	r1, #52	; 0x34
 80037a2:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80037a6:	f7fd fe1d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 80037aa:	2102      	movs	r1, #2
 80037ac:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80037b0:	f7fd fe18 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 80037b4:	2167      	movs	r1, #103	; 0x67
 80037b6:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80037ba:	f7fd fe13 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 80037be:	2102      	movs	r1, #2
 80037c0:	f24d 3020 	movw	r0, #54048	; 0xd320
 80037c4:	f7fd fe0e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 80037c8:	2184      	movs	r1, #132	; 0x84
 80037ca:	f24d 3021 	movw	r0, #54049	; 0xd321
 80037ce:	f7fd fe09 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 80037d2:	2102      	movs	r1, #2
 80037d4:	f24d 3022 	movw	r0, #54050	; 0xd322
 80037d8:	f7fd fe04 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 80037dc:	21a4      	movs	r1, #164	; 0xa4
 80037de:	f24d 3023 	movw	r0, #54051	; 0xd323
 80037e2:	f7fd fdff 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 80037e6:	2102      	movs	r1, #2
 80037e8:	f24d 3024 	movw	r0, #54052	; 0xd324
 80037ec:	f7fd fdfa 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 80037f0:	21b7      	movs	r1, #183	; 0xb7
 80037f2:	f24d 3025 	movw	r0, #54053	; 0xd325
 80037f6:	f7fd fdf5 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 80037fa:	2102      	movs	r1, #2
 80037fc:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003800:	f7fd fdf0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 8003804:	21cf      	movs	r1, #207	; 0xcf
 8003806:	f24d 3027 	movw	r0, #54055	; 0xd327
 800380a:	f7fd fdeb 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 800380e:	2102      	movs	r1, #2
 8003810:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003814:	f7fd fde6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 8003818:	21de      	movs	r1, #222	; 0xde
 800381a:	f24d 3029 	movw	r0, #54057	; 0xd329
 800381e:	f7fd fde1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 8003822:	2102      	movs	r1, #2
 8003824:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003828:	f7fd fddc 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 800382c:	21f2      	movs	r1, #242	; 0xf2
 800382e:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003832:	f7fd fdd7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 8003836:	2102      	movs	r1, #2
 8003838:	f24d 302c 	movw	r0, #54060	; 0xd32c
 800383c:	f7fd fdd2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8003840:	21fe      	movs	r1, #254	; 0xfe
 8003842:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003846:	f7fd fdcd 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 800384a:	2103      	movs	r1, #3
 800384c:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003850:	f7fd fdc8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8003854:	2110      	movs	r1, #16
 8003856:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800385a:	f7fd fdc3 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 800385e:	2103      	movs	r1, #3
 8003860:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003864:	f7fd fdbe 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 8003868:	2133      	movs	r1, #51	; 0x33
 800386a:	f24d 3031 	movw	r0, #54065	; 0xd331
 800386e:	f7fd fdb9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 8003872:	2103      	movs	r1, #3
 8003874:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003878:	f7fd fdb4 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 800387c:	216d      	movs	r1, #109	; 0x6d
 800387e:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003882:	f7fd fdaf 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 8003886:	2100      	movs	r1, #0
 8003888:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 800388c:	f7fd fdaa 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 8003890:	2133      	movs	r1, #51	; 0x33
 8003892:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003896:	f7fd fda5 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 800389a:	2100      	movs	r1, #0
 800389c:	f24d 4002 	movw	r0, #54274	; 0xd402
 80038a0:	f7fd fda0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 80038a4:	2134      	movs	r1, #52	; 0x34
 80038a6:	f24d 4003 	movw	r0, #54275	; 0xd403
 80038aa:	f7fd fd9b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 80038ae:	2100      	movs	r1, #0
 80038b0:	f24d 4004 	movw	r0, #54276	; 0xd404
 80038b4:	f7fd fd96 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 80038b8:	213a      	movs	r1, #58	; 0x3a
 80038ba:	f24d 4005 	movw	r0, #54277	; 0xd405
 80038be:	f7fd fd91 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 80038c2:	2100      	movs	r1, #0
 80038c4:	f24d 4006 	movw	r0, #54278	; 0xd406
 80038c8:	f7fd fd8c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 80038cc:	214a      	movs	r1, #74	; 0x4a
 80038ce:	f24d 4007 	movw	r0, #54279	; 0xd407
 80038d2:	f7fd fd87 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 80038d6:	2100      	movs	r1, #0
 80038d8:	f24d 4008 	movw	r0, #54280	; 0xd408
 80038dc:	f7fd fd82 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 80038e0:	215c      	movs	r1, #92	; 0x5c
 80038e2:	f24d 4009 	movw	r0, #54281	; 0xd409
 80038e6:	f7fd fd7d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 80038ea:	2100      	movs	r1, #0
 80038ec:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80038f0:	f7fd fd78 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 80038f4:	2181      	movs	r1, #129	; 0x81
 80038f6:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80038fa:	f7fd fd73 	bl	80013e4 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 80038fe:	2100      	movs	r1, #0
 8003900:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003904:	f7fd fd6e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 8003908:	21a6      	movs	r1, #166	; 0xa6
 800390a:	f24d 400d 	movw	r0, #54285	; 0xd40d
 800390e:	f7fd fd69 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 8003912:	2100      	movs	r1, #0
 8003914:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003918:	f7fd fd64 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 800391c:	21e5      	movs	r1, #229	; 0xe5
 800391e:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003922:	f7fd fd5f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 8003926:	2101      	movs	r1, #1
 8003928:	f24d 4010 	movw	r0, #54288	; 0xd410
 800392c:	f7fd fd5a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8003930:	2113      	movs	r1, #19
 8003932:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003936:	f7fd fd55 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 800393a:	2101      	movs	r1, #1
 800393c:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003940:	f7fd fd50 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8003944:	2154      	movs	r1, #84	; 0x54
 8003946:	f24d 4013 	movw	r0, #54291	; 0xd413
 800394a:	f7fd fd4b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 800394e:	2101      	movs	r1, #1
 8003950:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003954:	f7fd fd46 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 8003958:	2182      	movs	r1, #130	; 0x82
 800395a:	f24d 4015 	movw	r0, #54293	; 0xd415
 800395e:	f7fd fd41 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 8003962:	2101      	movs	r1, #1
 8003964:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003968:	f7fd fd3c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 800396c:	21ca      	movs	r1, #202	; 0xca
 800396e:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003972:	f7fd fd37 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 8003976:	2102      	movs	r1, #2
 8003978:	f24d 4018 	movw	r0, #54296	; 0xd418
 800397c:	f7fd fd32 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8003980:	2100      	movs	r1, #0
 8003982:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003986:	f7fd fd2d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 800398a:	2102      	movs	r1, #2
 800398c:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003990:	f7fd fd28 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 8003994:	2101      	movs	r1, #1
 8003996:	f24d 401b 	movw	r0, #54299	; 0xd41b
 800399a:	f7fd fd23 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 800399e:	2102      	movs	r1, #2
 80039a0:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80039a4:	f7fd fd1e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 80039a8:	2134      	movs	r1, #52	; 0x34
 80039aa:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80039ae:	f7fd fd19 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 80039b2:	2102      	movs	r1, #2
 80039b4:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80039b8:	f7fd fd14 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 80039bc:	2167      	movs	r1, #103	; 0x67
 80039be:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80039c2:	f7fd fd0f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 80039c6:	2102      	movs	r1, #2
 80039c8:	f24d 4020 	movw	r0, #54304	; 0xd420
 80039cc:	f7fd fd0a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 80039d0:	2184      	movs	r1, #132	; 0x84
 80039d2:	f24d 4021 	movw	r0, #54305	; 0xd421
 80039d6:	f7fd fd05 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 80039da:	2102      	movs	r1, #2
 80039dc:	f24d 4022 	movw	r0, #54306	; 0xd422
 80039e0:	f7fd fd00 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 80039e4:	21a4      	movs	r1, #164	; 0xa4
 80039e6:	f24d 4023 	movw	r0, #54307	; 0xd423
 80039ea:	f7fd fcfb 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 80039ee:	2102      	movs	r1, #2
 80039f0:	f24d 4024 	movw	r0, #54308	; 0xd424
 80039f4:	f7fd fcf6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 80039f8:	21b7      	movs	r1, #183	; 0xb7
 80039fa:	f24d 4025 	movw	r0, #54309	; 0xd425
 80039fe:	f7fd fcf1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 8003a02:	2102      	movs	r1, #2
 8003a04:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003a08:	f7fd fcec 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 8003a0c:	21cf      	movs	r1, #207	; 0xcf
 8003a0e:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003a12:	f7fd fce7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 8003a16:	2102      	movs	r1, #2
 8003a18:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003a1c:	f7fd fce2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 8003a20:	21de      	movs	r1, #222	; 0xde
 8003a22:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003a26:	f7fd fcdd 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003a30:	f7fd fcd8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 8003a34:	21f2      	movs	r1, #242	; 0xf2
 8003a36:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003a3a:	f7fd fcd3 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 8003a3e:	2102      	movs	r1, #2
 8003a40:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003a44:	f7fd fcce 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 8003a48:	21fe      	movs	r1, #254	; 0xfe
 8003a4a:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003a4e:	f7fd fcc9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8003a52:	2103      	movs	r1, #3
 8003a54:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003a58:	f7fd fcc4 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8003a5c:	2110      	movs	r1, #16
 8003a5e:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003a62:	f7fd fcbf 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 8003a66:	2103      	movs	r1, #3
 8003a68:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003a6c:	f7fd fcba 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8003a70:	2133      	movs	r1, #51	; 0x33
 8003a72:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003a76:	f7fd fcb5 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 8003a7a:	2103      	movs	r1, #3
 8003a7c:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003a80:	f7fd fcb0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8003a84:	216d      	movs	r1, #109	; 0x6d
 8003a86:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003a8a:	f7fd fcab 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 8003a8e:	2100      	movs	r1, #0
 8003a90:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003a94:	f7fd fca6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 8003a98:	2133      	movs	r1, #51	; 0x33
 8003a9a:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003a9e:	f7fd fca1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003aa8:	f7fd fc9c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 8003aac:	2134      	movs	r1, #52	; 0x34
 8003aae:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003ab2:	f7fd fc97 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003abc:	f7fd fc92 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 8003ac0:	213a      	movs	r1, #58	; 0x3a
 8003ac2:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003ac6:	f7fd fc8d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 8003aca:	2100      	movs	r1, #0
 8003acc:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003ad0:	f7fd fc88 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 8003ad4:	214a      	movs	r1, #74	; 0x4a
 8003ad6:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003ada:	f7fd fc83 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 8003ade:	2100      	movs	r1, #0
 8003ae0:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003ae4:	f7fd fc7e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 8003ae8:	215c      	movs	r1, #92	; 0x5c
 8003aea:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003aee:	f7fd fc79 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 8003af2:	2100      	movs	r1, #0
 8003af4:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003af8:	f7fd fc74 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 8003afc:	2181      	movs	r1, #129	; 0x81
 8003afe:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003b02:	f7fd fc6f 	bl	80013e4 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 8003b06:	2100      	movs	r1, #0
 8003b08:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003b0c:	f7fd fc6a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 8003b10:	21a6      	movs	r1, #166	; 0xa6
 8003b12:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003b16:	f7fd fc65 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003b20:	f7fd fc60 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 8003b24:	21e5      	movs	r1, #229	; 0xe5
 8003b26:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003b2a:	f7fd fc5b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 8003b2e:	2101      	movs	r1, #1
 8003b30:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003b34:	f7fd fc56 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 8003b38:	2113      	movs	r1, #19
 8003b3a:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003b3e:	f7fd fc51 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 8003b42:	2101      	movs	r1, #1
 8003b44:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003b48:	f7fd fc4c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8003b4c:	2154      	movs	r1, #84	; 0x54
 8003b4e:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003b52:	f7fd fc47 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 8003b56:	2101      	movs	r1, #1
 8003b58:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003b5c:	f7fd fc42 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8003b60:	2182      	movs	r1, #130	; 0x82
 8003b62:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003b66:	f7fd fc3d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003b70:	f7fd fc38 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 8003b74:	21ca      	movs	r1, #202	; 0xca
 8003b76:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003b7a:	f7fd fc33 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 8003b7e:	2102      	movs	r1, #2
 8003b80:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003b84:	f7fd fc2e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 8003b88:	2100      	movs	r1, #0
 8003b8a:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003b8e:	f7fd fc29 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 8003b92:	2102      	movs	r1, #2
 8003b94:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003b98:	f7fd fc24 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003ba2:	f7fd fc1f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003bac:	f7fd fc1a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 8003bb0:	2134      	movs	r1, #52	; 0x34
 8003bb2:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003bb6:	f7fd fc15 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 8003bba:	2102      	movs	r1, #2
 8003bbc:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003bc0:	f7fd fc10 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 8003bc4:	2167      	movs	r1, #103	; 0x67
 8003bc6:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003bca:	f7fd fc0b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 8003bce:	2102      	movs	r1, #2
 8003bd0:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003bd4:	f7fd fc06 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 8003bd8:	2184      	movs	r1, #132	; 0x84
 8003bda:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003bde:	f7fd fc01 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 8003be2:	2102      	movs	r1, #2
 8003be4:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003be8:	f7fd fbfc 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 8003bec:	21a4      	movs	r1, #164	; 0xa4
 8003bee:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003bf2:	f7fd fbf7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003bfc:	f7fd fbf2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 8003c00:	21b7      	movs	r1, #183	; 0xb7
 8003c02:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003c06:	f7fd fbed 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003c10:	f7fd fbe8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 8003c14:	21cf      	movs	r1, #207	; 0xcf
 8003c16:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003c1a:	f7fd fbe3 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 8003c1e:	2102      	movs	r1, #2
 8003c20:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003c24:	f7fd fbde 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 8003c28:	21de      	movs	r1, #222	; 0xde
 8003c2a:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003c2e:	f7fd fbd9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8003c32:	2102      	movs	r1, #2
 8003c34:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003c38:	f7fd fbd4 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8003c3c:	21f2      	movs	r1, #242	; 0xf2
 8003c3e:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003c42:	f7fd fbcf 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 8003c46:	2102      	movs	r1, #2
 8003c48:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003c4c:	f7fd fbca 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8003c50:	21fe      	movs	r1, #254	; 0xfe
 8003c52:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003c56:	f7fd fbc5 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 8003c5a:	2103      	movs	r1, #3
 8003c5c:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003c60:	f7fd fbc0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8003c64:	2110      	movs	r1, #16
 8003c66:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003c6a:	f7fd fbbb 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 8003c6e:	2103      	movs	r1, #3
 8003c70:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003c74:	f7fd fbb6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 8003c78:	2133      	movs	r1, #51	; 0x33
 8003c7a:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003c7e:	f7fd fbb1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 8003c82:	2103      	movs	r1, #3
 8003c84:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003c88:	f7fd fbac 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 8003c8c:	216d      	movs	r1, #109	; 0x6d
 8003c8e:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003c92:	f7fd fba7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 8003c96:	2100      	movs	r1, #0
 8003c98:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003c9c:	f7fd fba2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 8003ca0:	2133      	movs	r1, #51	; 0x33
 8003ca2:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003ca6:	f7fd fb9d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 8003caa:	2100      	movs	r1, #0
 8003cac:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003cb0:	f7fd fb98 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 8003cb4:	2134      	movs	r1, #52	; 0x34
 8003cb6:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003cba:	f7fd fb93 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003cc4:	f7fd fb8e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 8003cc8:	213a      	movs	r1, #58	; 0x3a
 8003cca:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003cce:	f7fd fb89 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003cd8:	f7fd fb84 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 8003cdc:	214a      	movs	r1, #74	; 0x4a
 8003cde:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003ce2:	f7fd fb7f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003cec:	f7fd fb7a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 8003cf0:	215c      	movs	r1, #92	; 0x5c
 8003cf2:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003cf6:	f7fd fb75 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003d00:	f7fd fb70 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 8003d04:	2181      	movs	r1, #129	; 0x81
 8003d06:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003d0a:	f7fd fb6b 	bl	80013e4 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 8003d0e:	2100      	movs	r1, #0
 8003d10:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003d14:	f7fd fb66 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 8003d18:	21a6      	movs	r1, #166	; 0xa6
 8003d1a:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003d1e:	f7fd fb61 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 8003d22:	2100      	movs	r1, #0
 8003d24:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003d28:	f7fd fb5c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 8003d2c:	21e5      	movs	r1, #229	; 0xe5
 8003d2e:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003d32:	f7fd fb57 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 8003d36:	2101      	movs	r1, #1
 8003d38:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003d3c:	f7fd fb52 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8003d40:	2113      	movs	r1, #19
 8003d42:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003d46:	f7fd fb4d 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003d50:	f7fd fb48 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8003d54:	2154      	movs	r1, #84	; 0x54
 8003d56:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003d5a:	f7fd fb43 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 8003d5e:	2101      	movs	r1, #1
 8003d60:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003d64:	f7fd fb3e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 8003d68:	2182      	movs	r1, #130	; 0x82
 8003d6a:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003d6e:	f7fd fb39 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 8003d72:	2101      	movs	r1, #1
 8003d74:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003d78:	f7fd fb34 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 8003d7c:	21ca      	movs	r1, #202	; 0xca
 8003d7e:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003d82:	f7fd fb2f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 8003d86:	2102      	movs	r1, #2
 8003d88:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003d8c:	f7fd fb2a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 8003d90:	2100      	movs	r1, #0
 8003d92:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003d96:	f7fd fb25 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003da0:	f7fd fb20 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 8003da4:	2101      	movs	r1, #1
 8003da6:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003daa:	f7fd fb1b 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 8003dae:	2102      	movs	r1, #2
 8003db0:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003db4:	f7fd fb16 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 8003db8:	2134      	movs	r1, #52	; 0x34
 8003dba:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8003dbe:	f7fd fb11 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003dc8:	f7fd fb0c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 8003dcc:	2167      	movs	r1, #103	; 0x67
 8003dce:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8003dd2:	f7fd fb07 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003ddc:	f7fd fb02 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 8003de0:	2184      	movs	r1, #132	; 0x84
 8003de2:	f24d 6021 	movw	r0, #54817	; 0xd621
 8003de6:	f7fd fafd 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 8003dea:	2102      	movs	r1, #2
 8003dec:	f24d 6022 	movw	r0, #54818	; 0xd622
 8003df0:	f7fd faf8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 8003df4:	21a4      	movs	r1, #164	; 0xa4
 8003df6:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003dfa:	f7fd faf3 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 8003dfe:	2102      	movs	r1, #2
 8003e00:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003e04:	f7fd faee 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 8003e08:	21b7      	movs	r1, #183	; 0xb7
 8003e0a:	f24d 6025 	movw	r0, #54821	; 0xd625
 8003e0e:	f7fd fae9 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 8003e12:	2102      	movs	r1, #2
 8003e14:	f24d 6026 	movw	r0, #54822	; 0xd626
 8003e18:	f7fd fae4 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 8003e1c:	21cf      	movs	r1, #207	; 0xcf
 8003e1e:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003e22:	f7fd fadf 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 8003e26:	2102      	movs	r1, #2
 8003e28:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003e2c:	f7fd fada 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8003e30:	21de      	movs	r1, #222	; 0xde
 8003e32:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003e36:	f7fd fad5 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003e40:	f7fd fad0 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8003e44:	21f2      	movs	r1, #242	; 0xf2
 8003e46:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003e4a:	f7fd facb 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 8003e4e:	2102      	movs	r1, #2
 8003e50:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003e54:	f7fd fac6 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 8003e58:	21fe      	movs	r1, #254	; 0xfe
 8003e5a:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003e5e:	f7fd fac1 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 8003e62:	2103      	movs	r1, #3
 8003e64:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003e68:	f7fd fabc 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 8003e6c:	2110      	movs	r1, #16
 8003e6e:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003e72:	f7fd fab7 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 8003e76:	2103      	movs	r1, #3
 8003e78:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003e7c:	f7fd fab2 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 8003e80:	2133      	movs	r1, #51	; 0x33
 8003e82:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003e86:	f7fd faad 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 8003e8a:	2103      	movs	r1, #3
 8003e8c:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003e90:	f7fd faa8 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 8003e94:	216d      	movs	r1, #109	; 0x6d
 8003e96:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003e9a:	f7fd faa3 	bl	80013e4 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 8003e9e:	2155      	movs	r1, #85	; 0x55
 8003ea0:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003ea4:	f7fd fa9e 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8003ea8:	21aa      	movs	r1, #170	; 0xaa
 8003eaa:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003eae:	f7fd fa99 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8003eb2:	2152      	movs	r1, #82	; 0x52
 8003eb4:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003eb8:	f7fd fa94 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8003ebc:	2108      	movs	r1, #8
 8003ebe:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003ec2:	f7fd fa8f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003ecc:	f7fd fa8a 	bl	80013e4 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8003ed0:	21cc      	movs	r1, #204	; 0xcc
 8003ed2:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003ed6:	f7fd fa85 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8003eda:	2100      	movs	r1, #0
 8003edc:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003ee0:	f7fd fa80 	bl	80013e4 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 8003ee4:	2105      	movs	r1, #5
 8003ee6:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003eea:	f7fd fa7b 	bl	80013e4 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 8003eee:	2170      	movs	r1, #112	; 0x70
 8003ef0:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003ef4:	f7fd fa76 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 8003ef8:	2170      	movs	r1, #112	; 0x70
 8003efa:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003efe:	f7fd fa71 	bl	80013e4 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 8003f02:	2101      	movs	r1, #1
 8003f04:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003f08:	f7fd fa6c 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 8003f0c:	2103      	movs	r1, #3
 8003f0e:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003f12:	f7fd fa67 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 8003f16:	2103      	movs	r1, #3
 8003f18:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003f1c:	f7fd fa62 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8003f20:	2103      	movs	r1, #3
 8003f22:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003f26:	f7fd fa5d 	bl	80013e4 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003f30:	f7fd fa58 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8003f34:	2100      	movs	r1, #0
 8003f36:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003f3a:	f7fd fa53 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003f3e:	2100      	movs	r1, #0
 8003f40:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003f44:	f7fd fa4e 	bl	80013e4 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 8003f48:	21d0      	movs	r1, #208	; 0xd0
 8003f4a:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003f4e:	f7fd fa49 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8003f52:	2102      	movs	r1, #2
 8003f54:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003f58:	f7fd fa44 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8003f5c:	2150      	movs	r1, #80	; 0x50
 8003f5e:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003f62:	f7fd fa3f 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 8003f66:	2150      	movs	r1, #80	; 0x50
 8003f68:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003f6c:	f7fd fa3a 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8003f70:	2150      	movs	r1, #80	; 0x50
 8003f72:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003f76:	f7fd fa35 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003f80:	f7fd fa30 	bl	80013e4 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8003f84:	2155      	movs	r1, #85	; 0x55
 8003f86:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003f8a:	f7fd fa2b 	bl	80013e4 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8003f8e:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003f92:	f7fd f9ed 	bl	8001370 <LCD_WR_REG>
		opt_delay(120);
 8003f96:	2078      	movs	r0, #120	; 0x78
 8003f98:	f7fd fa3a 	bl	8001410 <opt_delay>
		LCD_WR_REG(0x2900);
 8003f9c:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003fa0:	f7fd f9e6 	bl	8001370 <LCD_WR_REG>
 8003fa4:	e0be      	b.n	8004124 <TFTLCD_Init+0x235c>
	}else if(lcddev.id==0X1963)
 8003fa6:	4b7f      	ldr	r3, [pc, #508]	; (80041a4 <TFTLCD_Init+0x23dc>)
 8003fa8:	889b      	ldrh	r3, [r3, #4]
 8003faa:	f641 1263 	movw	r2, #6499	; 0x1963
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	f040 80b8 	bne.w	8004124 <TFTLCD_Init+0x235c>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8003fb4:	20e2      	movs	r0, #226	; 0xe2
 8003fb6:	f7fd f9db 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 8003fba:	201d      	movs	r0, #29
 8003fbc:	f7fd f9ec 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8003fc0:	2002      	movs	r0, #2
 8003fc2:	f7fd f9e9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 8003fc6:	2004      	movs	r0, #4
 8003fc8:	f7fd f9e6 	bl	8001398 <LCD_WR_DATA>
		opt_delay(100);
 8003fcc:	2064      	movs	r0, #100	; 0x64
 8003fce:	f7fd fa1f 	bl	8001410 <opt_delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8003fd2:	20e0      	movs	r0, #224	; 0xe0
 8003fd4:	f7fd f9cc 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8003fd8:	2001      	movs	r0, #1
 8003fda:	f7fd f9dd 	bl	8001398 <LCD_WR_DATA>
		HAL_Delay(10);
 8003fde:	200a      	movs	r0, #10
 8003fe0:	f003 f84a 	bl	8007078 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8003fe4:	20e0      	movs	r0, #224	; 0xe0
 8003fe6:	f7fd f9c3 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8003fea:	2003      	movs	r0, #3
 8003fec:	f7fd f9d4 	bl	8001398 <LCD_WR_DATA>
		HAL_Delay(12);
 8003ff0:	200c      	movs	r0, #12
 8003ff2:	f003 f841 	bl	8007078 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	f7fd f9ba 	bl	8001370 <LCD_WR_REG>
		HAL_Delay(10);
 8003ffc:	200a      	movs	r0, #10
 8003ffe:	f003 f83b 	bl	8007078 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8004002:	20e6      	movs	r0, #230	; 0xe6
 8004004:	f7fd f9b4 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8004008:	202f      	movs	r0, #47	; 0x2f
 800400a:	f7fd f9c5 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 800400e:	20ff      	movs	r0, #255	; 0xff
 8004010:	f7fd f9c2 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8004014:	20ff      	movs	r0, #255	; 0xff
 8004016:	f7fd f9bf 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 800401a:	20b0      	movs	r0, #176	; 0xb0
 800401c:	f7fd f9a8 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8004020:	2020      	movs	r0, #32
 8004022:	f7fd f9b9 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 8004026:	2000      	movs	r0, #0
 8004028:	f7fd f9b6 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 800402c:	2003      	movs	r0, #3
 800402e:	f7fd f9b3 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8004032:	f240 301f 	movw	r0, #799	; 0x31f
 8004036:	f7fd f9af 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 800403a:	2001      	movs	r0, #1
 800403c:	f7fd f9ac 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8004040:	f240 10df 	movw	r0, #479	; 0x1df
 8004044:	f7fd f9a8 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 8004048:	2000      	movs	r0, #0
 800404a:	f7fd f9a5 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 800404e:	20b4      	movs	r0, #180	; 0xb4
 8004050:	f7fd f98e 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8004054:	2004      	movs	r0, #4
 8004056:	f7fd f99f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 800405a:	f240 401f 	movw	r0, #1055	; 0x41f
 800405e:	f7fd f99b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 8004062:	2000      	movs	r0, #0
 8004064:	f7fd f998 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 8004068:	202e      	movs	r0, #46	; 0x2e
 800406a:	f7fd f995 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 800406e:	2000      	movs	r0, #0
 8004070:	f7fd f992 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004074:	2000      	movs	r0, #0
 8004076:	f7fd f98f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800407a:	2000      	movs	r0, #0
 800407c:	f7fd f98c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004080:	2000      	movs	r0, #0
 8004082:	f7fd f989 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 8004086:	20b6      	movs	r0, #182	; 0xb6
 8004088:	f7fd f972 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 800408c:	2002      	movs	r0, #2
 800408e:	f7fd f983 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 8004092:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8004096:	f7fd f97f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 800409a:	2000      	movs	r0, #0
 800409c:	f7fd f97c 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 80040a0:	2017      	movs	r0, #23
 80040a2:	f7fd f979 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80040a6:	2015      	movs	r0, #21
 80040a8:	f7fd f976 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040ac:	2000      	movs	r0, #0
 80040ae:	f7fd f973 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040b2:	2000      	movs	r0, #0
 80040b4:	f7fd f970 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 80040b8:	20f0      	movs	r0, #240	; 0xf0
 80040ba:	f7fd f959 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 80040be:	2003      	movs	r0, #3
 80040c0:	f7fd f96a 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 80040c4:	2029      	movs	r0, #41	; 0x29
 80040c6:	f7fd f953 	bl	8001370 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 80040ca:	20d0      	movs	r0, #208	; 0xd0
 80040cc:	f7fd f950 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 80040d0:	2000      	movs	r0, #0
 80040d2:	f7fd f961 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 80040d6:	20be      	movs	r0, #190	; 0xbe
 80040d8:	f7fd f94a 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 80040dc:	2005      	movs	r0, #5
 80040de:	f7fd f95b 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 80040e2:	20fe      	movs	r0, #254	; 0xfe
 80040e4:	f7fd f958 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 80040e8:	2001      	movs	r0, #1
 80040ea:	f7fd f955 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 80040ee:	2000      	movs	r0, #0
 80040f0:	f7fd f952 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 80040f4:	2000      	movs	r0, #0
 80040f6:	f7fd f94f 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 80040fa:	2000      	movs	r0, #0
 80040fc:	f7fd f94c 	bl	8001398 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8004100:	20b8      	movs	r0, #184	; 0xb8
 8004102:	f7fd f935 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8004106:	2003      	movs	r0, #3
 8004108:	f7fd f946 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 800410c:	2001      	movs	r0, #1
 800410e:	f7fd f943 	bl	8001398 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 8004112:	20ba      	movs	r0, #186	; 0xba
 8004114:	f7fd f92c 	bl	8001370 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8004118:	2001      	movs	r0, #1
 800411a:	f7fd f93d 	bl	8001398 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 800411e:	2064      	movs	r0, #100	; 0x64
 8004120:	f7fd fd4e 	bl	8001bc0 <LCD_SSD_BackLightSet>
	}
	//初始化完成以后,提速
	if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//如果是这几个IC,则设置WR时序为最快
 8004124:	4b1f      	ldr	r3, [pc, #124]	; (80041a4 <TFTLCD_Init+0x23dc>)
 8004126:	889b      	ldrh	r3, [r3, #4]
 8004128:	f249 3241 	movw	r2, #37697	; 0x9341
 800412c:	4293      	cmp	r3, r2
 800412e:	d011      	beq.n	8004154 <TFTLCD_Init+0x238c>
 8004130:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <TFTLCD_Init+0x23dc>)
 8004132:	889b      	ldrh	r3, [r3, #4]
 8004134:	f245 3210 	movw	r2, #21264	; 0x5310
 8004138:	4293      	cmp	r3, r2
 800413a:	d00b      	beq.n	8004154 <TFTLCD_Init+0x238c>
 800413c:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <TFTLCD_Init+0x23dc>)
 800413e:	889b      	ldrh	r3, [r3, #4]
 8004140:	f245 5210 	movw	r2, #21776	; 0x5510
 8004144:	4293      	cmp	r3, r2
 8004146:	d005      	beq.n	8004154 <TFTLCD_Init+0x238c>
 8004148:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <TFTLCD_Init+0x23dc>)
 800414a:	889b      	ldrh	r3, [r3, #4]
 800414c:	f641 1263 	movw	r2, #6499	; 0x1963
 8004150:	4293      	cmp	r3, r2
 8004152:	d117      	bne.n	8004184 <TFTLCD_Init+0x23bc>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 8004154:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <TFTLCD_Init+0x23e0>)
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	4a13      	ldr	r2, [pc, #76]	; (80041a8 <TFTLCD_Init+0x23e0>)
 800415a:	f023 030f 	bic.w	r3, r3, #15
 800415e:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <TFTLCD_Init+0x23e0>)
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <TFTLCD_Init+0x23e0>)
 8004166:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800416a:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=3<<0;		//地址建立时间(ADDSET)为3个HCLK =18ns
 800416c:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <TFTLCD_Init+0x23e0>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	4a0d      	ldr	r2, [pc, #52]	; (80041a8 <TFTLCD_Init+0x23e0>)
 8004172:	f043 0303 	orr.w	r3, r3, #3
 8004176:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=2<<8; 	//数据保存时间(DATAST)为6ns*3个HCLK=18ns
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <TFTLCD_Init+0x23e0>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	4a0a      	ldr	r2, [pc, #40]	; (80041a8 <TFTLCD_Init+0x23e0>)
 800417e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004182:	6193      	str	r3, [r2, #24]
	}
	LCD_Display_Dir(0);		//默认为竖屏
 8004184:	2000      	movs	r0, #0
 8004186:	f7fd fd4f 	bl	8001c28 <LCD_Display_Dir>
	GPIOB->ODR |= 1<<15;					//点亮背光
 800418a:	4b08      	ldr	r3, [pc, #32]	; (80041ac <TFTLCD_Init+0x23e4>)
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	4a07      	ldr	r2, [pc, #28]	; (80041ac <TFTLCD_Init+0x23e4>)
 8004190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004194:	6153      	str	r3, [r2, #20]
	LCD_Clear(WHITE);
 8004196:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800419a:	f000 f809 	bl	80041b0 <LCD_Clear>
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000310 	.word	0x20000310
 80041a8:	a0000104 	.word	0xa0000104
 80041ac:	40020400 	.word	0x40020400

080041b0 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint32_t color)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	uint32_t index=0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <LCD_Clear+0x54>)
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <LCD_Clear+0x54>)
 80041c4:	885b      	ldrh	r3, [r3, #2]
 80041c6:	461a      	mov	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	fb02 f303 	mul.w	r3, r2, r3
 80041ce:	60bb      	str	r3, [r7, #8]
	LCD_SetCursor(0x00,0x0000);			//设置光标位置
 80041d0:	2100      	movs	r1, #0
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7fd f93e 	bl	8001454 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 80041d8:	f7fd f92c 	bl	8001434 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e006      	b.n	80041f0 <LCD_Clear+0x40>
	{
		TFT_LCD->LCD_RAM=color;
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <LCD_Clear+0x58>)
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	b292      	uxth	r2, r2
 80041e8:	805a      	strh	r2, [r3, #2]
	for(index=0;index<totalpoint;index++)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3301      	adds	r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d3f4      	bcc.n	80041e2 <LCD_Clear+0x32>
	}
}
 80041f8:	bf00      	nop
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000310 	.word	0x20000310
 8004208:	6c00007e 	.word	0x6c00007e

0800420c <LCD_Fill>:
//在指定区域内填充单个颜色
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Fill(uint16_t sx,uint16_t sy,uint16_t ex,uint16_t ey,uint32_t color)
{
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	4604      	mov	r4, r0
 8004214:	4608      	mov	r0, r1
 8004216:	4611      	mov	r1, r2
 8004218:	461a      	mov	r2, r3
 800421a:	4623      	mov	r3, r4
 800421c:	80fb      	strh	r3, [r7, #6]
 800421e:	4603      	mov	r3, r0
 8004220:	80bb      	strh	r3, [r7, #4]
 8004222:	460b      	mov	r3, r1
 8004224:	807b      	strh	r3, [r7, #2]
 8004226:	4613      	mov	r3, r2
 8004228:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	uint16_t xlen=0;
 800422a:	2300      	movs	r3, #0
 800422c:	817b      	strh	r3, [r7, #10]
	xlen=ex-sx+1;
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	b29b      	uxth	r3, r3
 8004236:	3301      	adds	r3, #1
 8004238:	817b      	strh	r3, [r7, #10]
	for(i=sy;i<=ey;i++)
 800423a:	88bb      	ldrh	r3, [r7, #4]
 800423c:	81fb      	strh	r3, [r7, #14]
 800423e:	e018      	b.n	8004272 <LCD_Fill+0x66>
	{
		LCD_SetCursor(sx,i);      				//设置光标位置
 8004240:	89fa      	ldrh	r2, [r7, #14]
 8004242:	88fb      	ldrh	r3, [r7, #6]
 8004244:	4611      	mov	r1, r2
 8004246:	4618      	mov	r0, r3
 8004248:	f7fd f904 	bl	8001454 <LCD_SetCursor>
		LCD_WriteRAM_Prepare();     			//开始写入GRAM
 800424c:	f7fd f8f2 	bl	8001434 <LCD_WriteRAM_Prepare>
		for(j=0;j<xlen;j++)TFT_LCD->LCD_RAM=color;	//显示颜色
 8004250:	2300      	movs	r3, #0
 8004252:	81bb      	strh	r3, [r7, #12]
 8004254:	e006      	b.n	8004264 <LCD_Fill+0x58>
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <LCD_Fill+0x78>)
 8004258:	6a3a      	ldr	r2, [r7, #32]
 800425a:	b292      	uxth	r2, r2
 800425c:	805a      	strh	r2, [r3, #2]
 800425e:	89bb      	ldrh	r3, [r7, #12]
 8004260:	3301      	adds	r3, #1
 8004262:	81bb      	strh	r3, [r7, #12]
 8004264:	89ba      	ldrh	r2, [r7, #12]
 8004266:	897b      	ldrh	r3, [r7, #10]
 8004268:	429a      	cmp	r2, r3
 800426a:	d3f4      	bcc.n	8004256 <LCD_Fill+0x4a>
	for(i=sy;i<=ey;i++)
 800426c:	89fb      	ldrh	r3, [r7, #14]
 800426e:	3301      	adds	r3, #1
 8004270:	81fb      	strh	r3, [r7, #14]
 8004272:	89fa      	ldrh	r2, [r7, #14]
 8004274:	883b      	ldrh	r3, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d9e2      	bls.n	8004240 <LCD_Fill+0x34>
	}
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	bd90      	pop	{r4, r7, pc}
 8004284:	6c00007e 	.word	0x6c00007e

08004288 <LCD_DrawLine>:
}
//画线
//x1,y1:起点坐标
//x2,y2:终点坐标
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8004288:	b590      	push	{r4, r7, lr}
 800428a:	b08d      	sub	sp, #52	; 0x34
 800428c:	af00      	add	r7, sp, #0
 800428e:	4604      	mov	r4, r0
 8004290:	4608      	mov	r0, r1
 8004292:	4611      	mov	r1, r2
 8004294:	461a      	mov	r2, r3
 8004296:	4623      	mov	r3, r4
 8004298:	80fb      	strh	r3, [r7, #6]
 800429a:	4603      	mov	r3, r0
 800429c:	80bb      	strh	r3, [r7, #4]
 800429e:	460b      	mov	r3, r1
 80042a0:	807b      	strh	r3, [r7, #2]
 80042a2:	4613      	mov	r3, r2
 80042a4:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80042a6:	2300      	movs	r3, #0
 80042a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042aa:	2300      	movs	r3, #0
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1; //计算坐标增量
 80042ae:	887a      	ldrh	r2, [r7, #2]
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80042b6:	883a      	ldrh	r2, [r7, #0]
 80042b8:	88bb      	ldrh	r3, [r7, #4]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80042c2:	88bb      	ldrh	r3, [r7, #4]
 80042c4:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //设置单步方向
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	dd02      	ble.n	80042d2 <LCD_DrawLine+0x4a>
 80042cc:	2301      	movs	r3, #1
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e00b      	b.n	80042ea <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;//垂直线
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d102      	bne.n	80042de <LCD_DrawLine+0x56>
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	e005      	b.n	80042ea <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80042de:	f04f 33ff 	mov.w	r3, #4294967295
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	425b      	negs	r3, r3
 80042e8:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	dd02      	ble.n	80042f6 <LCD_DrawLine+0x6e>
 80042f0:	2301      	movs	r3, #1
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	e00b      	b.n	800430e <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;//水平线
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d102      	bne.n	8004302 <LCD_DrawLine+0x7a>
 80042fc:	2300      	movs	r3, #0
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	e005      	b.n	800430e <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;}
 8004302:	f04f 33ff 	mov.w	r3, #4294967295
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	425b      	negs	r3, r3
 800430c:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴
 800430e:	6a3a      	ldr	r2, [r7, #32]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	429a      	cmp	r2, r3
 8004314:	dd02      	ble.n	800431c <LCD_DrawLine+0x94>
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	e001      	b.n	8004320 <LCD_DrawLine+0x98>
	else distance=delta_y;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//画线输出
 8004320:	2300      	movs	r3, #0
 8004322:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004324:	e02a      	b.n	800437c <LCD_DrawLine+0xf4>
	{
		LCD_DrawPoint(uRow,uCol);//画点
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	b29b      	uxth	r3, r3
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	b292      	uxth	r2, r2
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f7fd fb0d 	bl	8001950 <LCD_DrawPoint>
		xerr+=delta_x ;
 8004336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	4413      	add	r3, r2
 800433c:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y ;
 800433e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	4413      	add	r3, r2
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8004346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	429a      	cmp	r2, r3
 800434c:	dd07      	ble.n	800435e <LCD_DrawLine+0xd6>
		{
			xerr-=distance;
 800434e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	4413      	add	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 800435e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	429a      	cmp	r2, r3
 8004364:	dd07      	ble.n	8004376 <LCD_DrawLine+0xee>
		{
			yerr-=distance;
 8004366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4413      	add	r3, r2
 8004374:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//画线输出
 8004376:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004378:	3301      	adds	r3, #1
 800437a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800437c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	3301      	adds	r3, #1
 8004382:	429a      	cmp	r2, r3
 8004384:	ddcf      	ble.n	8004326 <LCD_DrawLine+0x9e>
		}
	}
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	3734      	adds	r7, #52	; 0x34
 800438c:	46bd      	mov	sp, r7
 800438e:	bd90      	pop	{r4, r7, pc}

08004390 <LCD_DrawRectangle>:
//画矩形
//(x1,y1),(x2,y2):矩形的对角坐标
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	4604      	mov	r4, r0
 8004398:	4608      	mov	r0, r1
 800439a:	4611      	mov	r1, r2
 800439c:	461a      	mov	r2, r3
 800439e:	4623      	mov	r3, r4
 80043a0:	80fb      	strh	r3, [r7, #6]
 80043a2:	4603      	mov	r3, r0
 80043a4:	80bb      	strh	r3, [r7, #4]
 80043a6:	460b      	mov	r3, r1
 80043a8:	807b      	strh	r3, [r7, #2]
 80043aa:	4613      	mov	r3, r2
 80043ac:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1,y1,x2,y1);
 80043ae:	88bb      	ldrh	r3, [r7, #4]
 80043b0:	887a      	ldrh	r2, [r7, #2]
 80043b2:	88b9      	ldrh	r1, [r7, #4]
 80043b4:	88f8      	ldrh	r0, [r7, #6]
 80043b6:	f7ff ff67 	bl	8004288 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x1,y2);
 80043ba:	883b      	ldrh	r3, [r7, #0]
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	88b9      	ldrh	r1, [r7, #4]
 80043c0:	88f8      	ldrh	r0, [r7, #6]
 80043c2:	f7ff ff61 	bl	8004288 <LCD_DrawLine>
	LCD_DrawLine(x1,y2,x2,y2);
 80043c6:	883b      	ldrh	r3, [r7, #0]
 80043c8:	887a      	ldrh	r2, [r7, #2]
 80043ca:	8839      	ldrh	r1, [r7, #0]
 80043cc:	88f8      	ldrh	r0, [r7, #6]
 80043ce:	f7ff ff5b 	bl	8004288 <LCD_DrawLine>
	LCD_DrawLine(x2,y1,x2,y2);
 80043d2:	883b      	ldrh	r3, [r7, #0]
 80043d4:	887a      	ldrh	r2, [r7, #2]
 80043d6:	88b9      	ldrh	r1, [r7, #4]
 80043d8:	8878      	ldrh	r0, [r7, #2]
 80043da:	f7ff ff55 	bl	8004288 <LCD_DrawLine>
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd90      	pop	{r4, r7, pc}
	...

080043e8 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 80043e8:	b590      	push	{r4, r7, lr}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4604      	mov	r4, r0
 80043f0:	4608      	mov	r0, r1
 80043f2:	4611      	mov	r1, r2
 80043f4:	461a      	mov	r2, r3
 80043f6:	4623      	mov	r3, r4
 80043f8:	80fb      	strh	r3, [r7, #6]
 80043fa:	4603      	mov	r3, r0
 80043fc:	80bb      	strh	r3, [r7, #4]
 80043fe:	460b      	mov	r3, r1
 8004400:	70fb      	strb	r3, [r7, #3]
 8004402:	4613      	mov	r3, r2
 8004404:	70bb      	strb	r3, [r7, #2]
    uint8_t temp,t1,t;
	uint16_t y0=y;
 8004406:	88bb      	ldrh	r3, [r7, #4]
 8004408:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 800440a:	78bb      	ldrb	r3, [r7, #2]
 800440c:	08db      	lsrs	r3, r3, #3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	78bb      	ldrb	r3, [r7, #2]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf14      	ite	ne
 800441e:	2301      	movne	r3, #1
 8004420:	2300      	moveq	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	4413      	add	r3, r2
 8004426:	b2da      	uxtb	r2, r3
 8004428:	78bb      	ldrb	r3, [r7, #2]
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	b2db      	uxtb	r3, r3
 800442e:	fb12 f303 	smulbb	r3, r2, r3
 8004432:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	3b20      	subs	r3, #32
 8004438:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 800443a:	2300      	movs	r3, #0
 800443c:	737b      	strb	r3, [r7, #13]
 800443e:	e08f      	b.n	8004560 <LCD_ShowChar+0x178>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 8004440:	78bb      	ldrb	r3, [r7, #2]
 8004442:	2b0c      	cmp	r3, #12
 8004444:	d10b      	bne.n	800445e <LCD_ShowChar+0x76>
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	7b79      	ldrb	r1, [r7, #13]
 800444a:	484b      	ldr	r0, [pc, #300]	; (8004578 <LCD_ShowChar+0x190>)
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4403      	add	r3, r0
 8004456:	440b      	add	r3, r1
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	73fb      	strb	r3, [r7, #15]
 800445c:	e03f      	b.n	80044de <LCD_ShowChar+0xf6>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 800445e:	78bb      	ldrb	r3, [r7, #2]
 8004460:	2b10      	cmp	r3, #16
 8004462:	d108      	bne.n	8004476 <LCD_ShowChar+0x8e>
 8004464:	78fa      	ldrb	r2, [r7, #3]
 8004466:	7b7b      	ldrb	r3, [r7, #13]
 8004468:	4944      	ldr	r1, [pc, #272]	; (800457c <LCD_ShowChar+0x194>)
 800446a:	0112      	lsls	r2, r2, #4
 800446c:	440a      	add	r2, r1
 800446e:	4413      	add	r3, r2
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	73fb      	strb	r3, [r7, #15]
 8004474:	e033      	b.n	80044de <LCD_ShowChar+0xf6>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 8004476:	78bb      	ldrb	r3, [r7, #2]
 8004478:	2b18      	cmp	r3, #24
 800447a:	d10b      	bne.n	8004494 <LCD_ShowChar+0xac>
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	7b79      	ldrb	r1, [r7, #13]
 8004480:	483f      	ldr	r0, [pc, #252]	; (8004580 <LCD_ShowChar+0x198>)
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4403      	add	r3, r0
 800448c:	440b      	add	r3, r1
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	73fb      	strb	r3, [r7, #15]
 8004492:	e024      	b.n	80044de <LCD_ShowChar+0xf6>
		else if(size==32)temp=asc2_3216[num][t];	//调用3216字体
 8004494:	78bb      	ldrb	r3, [r7, #2]
 8004496:	2b20      	cmp	r3, #32
 8004498:	d108      	bne.n	80044ac <LCD_ShowChar+0xc4>
 800449a:	78fa      	ldrb	r2, [r7, #3]
 800449c:	7b7b      	ldrb	r3, [r7, #13]
 800449e:	4939      	ldr	r1, [pc, #228]	; (8004584 <LCD_ShowChar+0x19c>)
 80044a0:	0192      	lsls	r2, r2, #6
 80044a2:	440a      	add	r2, r1
 80044a4:	4413      	add	r3, r2
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	73fb      	strb	r3, [r7, #15]
 80044aa:	e018      	b.n	80044de <LCD_ShowChar+0xf6>
		else if(size==48)temp=asc2_4824[num][t];	//调用4824字体
 80044ac:	78bb      	ldrb	r3, [r7, #2]
 80044ae:	2b30      	cmp	r3, #48	; 0x30
 80044b0:	d10a      	bne.n	80044c8 <LCD_ShowChar+0xe0>
 80044b2:	78fa      	ldrb	r2, [r7, #3]
 80044b4:	7b7b      	ldrb	r3, [r7, #13]
 80044b6:	4934      	ldr	r1, [pc, #208]	; (8004588 <LCD_ShowChar+0x1a0>)
 80044b8:	20a8      	movs	r0, #168	; 0xa8
 80044ba:	fb00 f202 	mul.w	r2, r0, r2
 80044be:	440a      	add	r2, r1
 80044c0:	4413      	add	r3, r2
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	73fb      	strb	r3, [r7, #15]
 80044c6:	e00a      	b.n	80044de <LCD_ShowChar+0xf6>
		else if(size==64)temp=asc2_6432[num][t];	//调用6432字体
 80044c8:	78bb      	ldrb	r3, [r7, #2]
 80044ca:	2b40      	cmp	r3, #64	; 0x40
 80044cc:	d14e      	bne.n	800456c <LCD_ShowChar+0x184>
 80044ce:	78fa      	ldrb	r2, [r7, #3]
 80044d0:	7b7b      	ldrb	r3, [r7, #13]
 80044d2:	492e      	ldr	r1, [pc, #184]	; (800458c <LCD_ShowChar+0x1a4>)
 80044d4:	0212      	lsls	r2, r2, #8
 80044d6:	440a      	add	r2, r1
 80044d8:	4413      	add	r3, r2
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 80044de:	2300      	movs	r3, #0
 80044e0:	73bb      	strb	r3, [r7, #14]
 80044e2:	e035      	b.n	8004550 <LCD_ShowChar+0x168>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 80044e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	da07      	bge.n	80044fc <LCD_ShowChar+0x114>
 80044ec:	4b28      	ldr	r3, [pc, #160]	; (8004590 <LCD_ShowChar+0x1a8>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	88b9      	ldrh	r1, [r7, #4]
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fd fa49 	bl	800198c <LCD_Fast_DrawPoint>
 80044fa:	e00a      	b.n	8004512 <LCD_ShowChar+0x12a>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 80044fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <LCD_ShowChar+0x12a>
 8004504:	4b23      	ldr	r3, [pc, #140]	; (8004594 <LCD_ShowChar+0x1ac>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	88b9      	ldrh	r1, [r7, #4]
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	4618      	mov	r0, r3
 800450e:	f7fd fa3d 	bl	800198c <LCD_Fast_DrawPoint>
			temp<<=1;
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	73fb      	strb	r3, [r7, #15]
			y++;
 8004518:	88bb      	ldrh	r3, [r7, #4]
 800451a:	3301      	adds	r3, #1
 800451c:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 800451e:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <LCD_ShowChar+0x1b0>)
 8004520:	885b      	ldrh	r3, [r3, #2]
 8004522:	88ba      	ldrh	r2, [r7, #4]
 8004524:	429a      	cmp	r2, r3
 8004526:	d223      	bcs.n	8004570 <LCD_ShowChar+0x188>
			if((y-y0)==size)
 8004528:	88ba      	ldrh	r2, [r7, #4]
 800452a:	897b      	ldrh	r3, [r7, #10]
 800452c:	1ad2      	subs	r2, r2, r3
 800452e:	78bb      	ldrb	r3, [r7, #2]
 8004530:	429a      	cmp	r2, r3
 8004532:	d10a      	bne.n	800454a <LCD_ShowChar+0x162>
			{
				y=y0;
 8004534:	897b      	ldrh	r3, [r7, #10]
 8004536:	80bb      	strh	r3, [r7, #4]
				x++;
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	3301      	adds	r3, #1
 800453c:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 800453e:	4b16      	ldr	r3, [pc, #88]	; (8004598 <LCD_ShowChar+0x1b0>)
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	429a      	cmp	r2, r3
 8004546:	d307      	bcc.n	8004558 <LCD_ShowChar+0x170>
 8004548:	e013      	b.n	8004572 <LCD_ShowChar+0x18a>
		for(t1=0;t1<8;t1++)
 800454a:	7bbb      	ldrb	r3, [r7, #14]
 800454c:	3301      	adds	r3, #1
 800454e:	73bb      	strb	r3, [r7, #14]
 8004550:	7bbb      	ldrb	r3, [r7, #14]
 8004552:	2b07      	cmp	r3, #7
 8004554:	d9c6      	bls.n	80044e4 <LCD_ShowChar+0xfc>
 8004556:	e000      	b.n	800455a <LCD_ShowChar+0x172>
				break;
 8004558:	bf00      	nop
	for(t=0;t<csize;t++)
 800455a:	7b7b      	ldrb	r3, [r7, #13]
 800455c:	3301      	adds	r3, #1
 800455e:	737b      	strb	r3, [r7, #13]
 8004560:	7b7a      	ldrb	r2, [r7, #13]
 8004562:	7a7b      	ldrb	r3, [r7, #9]
 8004564:	429a      	cmp	r2, r3
 8004566:	f4ff af6b 	bcc.w	8004440 <LCD_ShowChar+0x58>
 800456a:	e002      	b.n	8004572 <LCD_ShowChar+0x18a>
		else return;								//没有的字库
 800456c:	bf00      	nop
 800456e:	e000      	b.n	8004572 <LCD_ShowChar+0x18a>
			if(y>=lcddev.height)return;		//超区域了
 8004570:	bf00      	nop
			}
		}
	}
}
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	bd90      	pop	{r4, r7, pc}
 8004578:	0800f8d4 	.word	0x0800f8d4
 800457c:	0800fd48 	.word	0x0800fd48
 8004580:	08010338 	.word	0x08010338
 8004584:	08011094 	.word	0x08011094
 8004588:	08012854 	.word	0x08012854
 800458c:	080166ac 	.word	0x080166ac
 8004590:	20000000 	.word	0x20000000
 8004594:	20000004 	.word	0x20000004
 8004598:	20000310 	.word	0x20000310

0800459c <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 800459c:	b590      	push	{r4, r7, lr}
 800459e:	b087      	sub	sp, #28
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	4604      	mov	r4, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	461a      	mov	r2, r3
 80045aa:	4623      	mov	r3, r4
 80045ac:	80fb      	strh	r3, [r7, #6]
 80045ae:	4603      	mov	r3, r0
 80045b0:	80bb      	strh	r3, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	807b      	strh	r3, [r7, #2]
 80045b6:	4613      	mov	r3, r2
 80045b8:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	73fb      	strb	r3, [r7, #15]
	width+=x;
 80045be:	887a      	ldrh	r2, [r7, #2]
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	4413      	add	r3, r2
 80045c4:	807b      	strh	r3, [r7, #2]
	height+=y;
 80045c6:	883a      	ldrh	r2, [r7, #0]
 80045c8:	88bb      	ldrh	r3, [r7, #4]
 80045ca:	4413      	add	r3, r2
 80045cc:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 80045ce:	e024      	b.n	800461a <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 80045d0:	88fa      	ldrh	r2, [r7, #6]
 80045d2:	887b      	ldrh	r3, [r7, #2]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d307      	bcc.n	80045e8 <LCD_ShowString+0x4c>
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	80fb      	strh	r3, [r7, #6]
 80045dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	88bb      	ldrh	r3, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 80045e8:	88ba      	ldrh	r2, [r7, #4]
 80045ea:	883b      	ldrh	r3, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d21d      	bcs.n	800462c <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	781a      	ldrb	r2, [r3, #0]
 80045f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045f8:	88b9      	ldrh	r1, [r7, #4]
 80045fa:	88f8      	ldrh	r0, [r7, #6]
 80045fc:	2400      	movs	r4, #0
 80045fe:	9400      	str	r4, [sp, #0]
 8004600:	f7ff fef2 	bl	80043e8 <LCD_ShowChar>
        x+=size/2;
 8004604:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004608:	085b      	lsrs	r3, r3, #1
 800460a:	b2db      	uxtb	r3, r3
 800460c:	b29a      	uxth	r2, r3
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	4413      	add	r3, r2
 8004612:	80fb      	strh	r3, [r7, #6]
        p++;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	3301      	adds	r3, #1
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b7e      	cmp	r3, #126	; 0x7e
 8004620:	d805      	bhi.n	800462e <LCD_ShowString+0x92>
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b1f      	cmp	r3, #31
 8004628:	d8d2      	bhi.n	80045d0 <LCD_ShowString+0x34>
    }
}
 800462a:	e000      	b.n	800462e <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 800462c:	bf00      	nop
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bd90      	pop	{r4, r7, pc}
	...

08004638 <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af04      	add	r7, sp, #16
 800463e:	4603      	mov	r3, r0
 8004640:	71fb      	strb	r3, [r7, #7]
 8004642:	460b      	mov	r3, r1
 8004644:	71bb      	strb	r3, [r7, #6]
 8004646:	4613      	mov	r3, r2
 8004648:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 800464a:	797b      	ldrb	r3, [r7, #5]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <PCA9685_SetBit+0x1c>
 8004650:	2301      	movs	r3, #1
 8004652:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <PCA9685_SetBit+0xb0>)
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	b29a      	uxth	r2, r3
 800465c:	230a      	movs	r3, #10
 800465e:	9302      	str	r3, [sp, #8]
 8004660:	2301      	movs	r3, #1
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	f107 030f 	add.w	r3, r7, #15
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	2301      	movs	r3, #1
 800466c:	2180      	movs	r1, #128	; 0x80
 800466e:	f003 ff69 	bl	8008544 <HAL_I2C_Mem_Read>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e031      	b.n	80046e0 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 800467c:	79bb      	ldrb	r3, [r7, #6]
 800467e:	2201      	movs	r2, #1
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	b25b      	sxtb	r3, r3
 8004686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800468a:	b25b      	sxtb	r3, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	b25a      	sxtb	r2, r3
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	b25b      	sxtb	r3, r3
 8004694:	4013      	ands	r3, r2
 8004696:	b25b      	sxtb	r3, r3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 800469c:	797b      	ldrb	r3, [r7, #5]
 800469e:	f003 0201 	and.w	r2, r3, #1
 80046a2:	79bb      	ldrb	r3, [r7, #6]
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	b25a      	sxtb	r2, r3
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	b25b      	sxtb	r3, r3
 80046ae:	4313      	orrs	r3, r2
 80046b0:	b25b      	sxtb	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 80046b6:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <PCA9685_SetBit+0xb0>)
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	b29a      	uxth	r2, r3
 80046be:	230a      	movs	r3, #10
 80046c0:	9302      	str	r3, [sp, #8]
 80046c2:	2301      	movs	r3, #1
 80046c4:	9301      	str	r3, [sp, #4]
 80046c6:	f107 030f 	add.w	r3, r7, #15
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	2301      	movs	r3, #1
 80046ce:	2180      	movs	r1, #128	; 0x80
 80046d0:	f003 fe3e 	bl	8008350 <HAL_I2C_Mem_Write>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20000320 	.word	0x20000320

080046ec <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 80046f2:	2306      	movs	r3, #6
 80046f4:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 80046f6:	4b09      	ldr	r3, [pc, #36]	; (800471c <PCA9685_SoftwareReset+0x30>)
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	1dfa      	adds	r2, r7, #7
 80046fc:	230a      	movs	r3, #10
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	2301      	movs	r3, #1
 8004702:	2100      	movs	r1, #0
 8004704:	f003 fd26 	bl	8008154 <HAL_I2C_Master_Transmit>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	e000      	b.n	8004714 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 8004712:	2301      	movs	r3, #1
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000320 	.word	0x20000320

08004720 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	461a      	mov	r2, r3
 800472e:	2104      	movs	r1, #4
 8004730:	2000      	movs	r0, #0
 8004732:	f7ff ff81 	bl	8004638 <PCA9685_SetBit>
 8004736:	4603      	mov	r3, r0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	461a      	mov	r2, r3
 800474e:	2107      	movs	r1, #7
 8004750:	2000      	movs	r0, #0
 8004752:	f7ff ff71 	bl	8004638 <PCA9685_SetBit>
 8004756:	4603      	mov	r3, r0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 800476a:	79fb      	ldrb	r3, [r7, #7]
 800476c:	461a      	mov	r2, r3
 800476e:	2105      	movs	r1, #5
 8004770:	2000      	movs	r0, #0
 8004772:	f7ff ff61 	bl	8004638 <PCA9685_SetBit>
 8004776:	4603      	mov	r3, r0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af04      	add	r7, sp, #16
 8004786:	4603      	mov	r3, r0
 8004788:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8004790:	4293      	cmp	r3, r2
 8004792:	d902      	bls.n	800479a <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8004794:	2303      	movs	r3, #3
 8004796:	72fb      	strb	r3, [r7, #11]
 8004798:	e046      	b.n	8004828 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	2b18      	cmp	r3, #24
 800479e:	d802      	bhi.n	80047a6 <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 80047a0:	23ff      	movs	r3, #255	; 0xff
 80047a2:	72fb      	strb	r3, [r7, #11]
 80047a4:	e040      	b.n	8004828 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	ee07 3a90 	vmov	s15, r3
 80047ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b0:	ee17 0a90 	vmov	r0, s15
 80047b4:	f7fb fec8 	bl	8000548 <__aeabi_f2d>
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	4b2a      	ldr	r3, [pc, #168]	; (8004868 <PCA9685_SetPwmFrequency+0xe8>)
 80047be:	f7fb ff1b 	bl	80005f8 <__aeabi_dmul>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	a126      	add	r1, pc, #152	; (adr r1, 8004860 <PCA9685_SetPwmFrequency+0xe0>)
 80047c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047cc:	f7fc f83e 	bl	800084c <__aeabi_ddiv>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	4b23      	ldr	r3, [pc, #140]	; (800486c <PCA9685_SetPwmFrequency+0xec>)
 80047de:	f7fb fd53 	bl	8000288 <__aeabi_dsub>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4610      	mov	r0, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	f7fc f9fd 	bl	8000be8 <__aeabi_d2f>
 80047ee:	4603      	mov	r3, r0
 80047f0:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7fb fea8 	bl	8000548 <__aeabi_f2d>
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	4b1c      	ldr	r3, [pc, #112]	; (8004870 <PCA9685_SetPwmFrequency+0xf0>)
 80047fe:	f7fb fd45 	bl	800028c <__adddf3>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	ec43 2b17 	vmov	d7, r2, r3
 800480a:	eeb0 0a47 	vmov.f32	s0, s14
 800480e:	eef0 0a67 	vmov.f32	s1, s15
 8004812:	f009 fd69 	bl	800e2e8 <floor>
 8004816:	ec53 2b10 	vmov	r2, r3, d0
 800481a:	4610      	mov	r0, r2
 800481c:	4619      	mov	r1, r3
 800481e:	f7fc f9c3 	bl	8000ba8 <__aeabi_d2uiz>
 8004822:	4603      	mov	r3, r0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8004828:	2001      	movs	r0, #1
 800482a:	f7ff ff79 	bl	8004720 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 800482e:	4b11      	ldr	r3, [pc, #68]	; (8004874 <PCA9685_SetPwmFrequency+0xf4>)
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	230a      	movs	r3, #10
 8004834:	9302      	str	r3, [sp, #8]
 8004836:	2301      	movs	r3, #1
 8004838:	9301      	str	r3, [sp, #4]
 800483a:	f107 030b 	add.w	r3, r7, #11
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2301      	movs	r3, #1
 8004842:	22fe      	movs	r2, #254	; 0xfe
 8004844:	2180      	movs	r1, #128	; 0x80
 8004846:	f003 fd83 	bl	8008350 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 800484a:	2000      	movs	r0, #0
 800484c:	f7ff ff68 	bl	8004720 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8004850:	2001      	movs	r0, #1
 8004852:	f7ff ff75 	bl	8004740 <PCA9685_RestartMode>
	return PCA9685_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	00000000 	.word	0x00000000
 8004864:	4177d784 	.word	0x4177d784
 8004868:	40b00000 	.word	0x40b00000
 800486c:	3ff00000 	.word	0x3ff00000
 8004870:	3fe00000 	.word	0x3fe00000
 8004874:	20000320 	.word	0x20000320

08004878 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af04      	add	r7, sp, #16
 800487e:	4603      	mov	r3, r0
 8004880:	71fb      	strb	r3, [r7, #7]
 8004882:	460b      	mov	r3, r1
 8004884:	80bb      	strh	r3, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	b2db      	uxtb	r3, r3
 8004890:	3306      	adds	r3, #6
 8004892:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8004894:	88bb      	ldrh	r3, [r7, #4]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 800489a:	88bb      	ldrh	r3, [r7, #4]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	b29b      	uxth	r3, r3
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 80048a4:	887b      	ldrh	r3, [r7, #2]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 80048aa:	887b      	ldrh	r3, [r7, #2]
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <PCA9685_SetPwm+0x70>)
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	230a      	movs	r3, #10
 80048be:	9302      	str	r3, [sp, #8]
 80048c0:	2304      	movs	r3, #4
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	f107 0308 	add.w	r3, r7, #8
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	2301      	movs	r3, #1
 80048cc:	2180      	movs	r1, #128	; 0x80
 80048ce:	f003 fd3f 	bl	8008350 <HAL_I2C_Mem_Write>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000320 	.word	0x20000320

080048ec <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	71fb      	strb	r3, [r7, #7]
 80048f6:	460b      	mov	r3, r1
 80048f8:	80bb      	strh	r3, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 80048fe:	88bb      	ldrh	r3, [r7, #4]
 8004900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004904:	d302      	bcc.n	800490c <PCA9685_SetPin+0x20>
 8004906:	f640 73ff 	movw	r3, #4095	; 0xfff
 800490a:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 800490c:	79bb      	ldrb	r3, [r7, #6]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d025      	beq.n	800495e <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8004912:	88bb      	ldrh	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d108      	bne.n	800492a <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	2200      	movs	r2, #0
 800491c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ffa9 	bl	8004878 <PCA9685_SetPwm>
 8004926:	4603      	mov	r3, r0
 8004928:	e03a      	b.n	80049a0 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 800492a:	88bb      	ldrh	r3, [r7, #4]
 800492c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004930:	4293      	cmp	r3, r2
 8004932:	d108      	bne.n	8004946 <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800493a:	2100      	movs	r1, #0
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff ff9b 	bl	8004878 <PCA9685_SetPwm>
 8004942:	4603      	mov	r3, r0
 8004944:	e02c      	b.n	80049a0 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8004946:	88bb      	ldrh	r3, [r7, #4]
 8004948:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800494c:	330f      	adds	r3, #15
 800494e:	b29a      	uxth	r2, r3
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	2100      	movs	r1, #0
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff8f 	bl	8004878 <PCA9685_SetPwm>
 800495a:	4603      	mov	r3, r0
 800495c:	e020      	b.n	80049a0 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 800495e:	88bb      	ldrh	r3, [r7, #4]
 8004960:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004964:	4293      	cmp	r3, r2
 8004966:	d108      	bne.n	800497a <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	2200      	movs	r2, #0
 800496c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff ff81 	bl	8004878 <PCA9685_SetPwm>
 8004976:	4603      	mov	r3, r0
 8004978:	e012      	b.n	80049a0 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 800497a:	88bb      	ldrh	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d108      	bne.n	8004992 <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004986:	2100      	movs	r1, #0
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff ff75 	bl	8004878 <PCA9685_SetPwm>
 800498e:	4603      	mov	r3, r0
 8004990:	e006      	b.n	80049a0 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8004992:	88ba      	ldrh	r2, [r7, #4]
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	2100      	movs	r1, #0
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff ff6d 	bl	8004878 <PCA9685_SetPwm>
 800499e:	4603      	mov	r3, r0
    }
  }
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	ed87 0a00 	vstr	s0, [r7]
 80049b4:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 80049b6:	edd7 7a00 	vldr	s15, [r7]
 80049ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c2:	d502      	bpl.n	80049ca <PCA9685_SetServoAngle+0x22>
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 80049ca:	edd7 7a00 	vldr	s15, [r7]
 80049ce:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004a50 <PCA9685_SetServoAngle+0xa8>
 80049d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049da:	dd01      	ble.n	80049e0 <PCA9685_SetServoAngle+0x38>
 80049dc:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <PCA9685_SetServoAngle+0xac>)
 80049de:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 80049e0:	6838      	ldr	r0, [r7, #0]
 80049e2:	f7fb fdb1 	bl	8000548 <__aeabi_f2d>
 80049e6:	a318      	add	r3, pc, #96	; (adr r3, 8004a48 <PCA9685_SetServoAngle+0xa0>)
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f7fb fe04 	bl	80005f8 <__aeabi_dmul>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4610      	mov	r0, r2
 80049f6:	4619      	mov	r1, r3
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	4b16      	ldr	r3, [pc, #88]	; (8004a58 <PCA9685_SetServoAngle+0xb0>)
 80049fe:	f7fb ff25 	bl	800084c <__aeabi_ddiv>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <PCA9685_SetServoAngle+0xb4>)
 8004a10:	f7fb fc3c 	bl	800028c <__adddf3>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	f7fc f8e4 	bl	8000be8 <__aeabi_d2f>
 8004a20:	4603      	mov	r3, r0
 8004a22:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8004a24:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a2c:	ee17 3a90 	vmov	r3, s15
 8004a30:	b299      	uxth	r1, r3
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	2200      	movs	r2, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff ff58 	bl	80048ec <PCA9685_SetPin>
 8004a3c:	4603      	mov	r3, r0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	00000000 	.word	0x00000000
 8004a4c:	40786000 	.word	0x40786000
 8004a50:	43340000 	.word	0x43340000
 8004a54:	43340000 	.word	0x43340000
 8004a58:	40668000 	.word	0x40668000
 8004a5c:	405b8000 	.word	0x405b8000

08004a60 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8004a68:	4a07      	ldr	r2, [pc, #28]	; (8004a88 <PCA9685_Init+0x28>)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8004a6e:	f7ff fe3d 	bl	80046ec <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8004a72:	2030      	movs	r0, #48	; 0x30
 8004a74:	f7ff fe84 	bl	8004780 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8004a78:	2001      	movs	r0, #1
 8004a7a:	f7ff fe71 	bl	8004760 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20000320 	.word	0x20000320

08004a8c <PID_Init>:
/*
 * 使用串级PID算法，外环PID为位置环，其输出为速度期望；内环PID为速度环，其输出为角度期望，直接控制舵机角度
 */

//坐标PID初始化
void PID_Init(PID *pid) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
	printf("PID Init begin\r\n");
 8004a94:	481d      	ldr	r0, [pc, #116]	; (8004b0c <PID_Init+0x80>)
 8004a96:	f007 f995 	bl	800bdc4 <puts>
	pid->SetPosi = 40;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2228      	movs	r2, #40	; 0x28
 8004a9e:	801a      	strh	r2, [r3, #0]
	pid->ActualPosi = 0;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	805a      	strh	r2, [r3, #2]
	pid->errorPosi[0] = 0;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	809a      	strh	r2, [r3, #4]
	pid->errorPosi[1] = 0;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	80da      	strh	r2, [r3, #6]
	pid->errorSpeed[0] = 0;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	811a      	strh	r2, [r3, #8]
	pid->errorSpeed[1] = 0;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	815a      	strh	r2, [r3, #10]
	pid->errorSpeed[2] = 0;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	819a      	strh	r2, [r3, #12]
	pid->Speed = 0;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	629a      	str	r2, [r3, #40]	; 0x28
	pid->angle = 90;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a10      	ldr	r2, [pc, #64]	; (8004b10 <PID_Init+0x84>)
 8004ad0:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->integral = 0;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30

	pid->PKp = 0.2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a0d      	ldr	r2, [pc, #52]	; (8004b14 <PID_Init+0x88>)
 8004ade:	611a      	str	r2, [r3, #16]
	pid->PKi = 0.015;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a0d      	ldr	r2, [pc, #52]	; (8004b18 <PID_Init+0x8c>)
 8004ae4:	615a      	str	r2, [r3, #20]
	pid->PKd = 0;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	619a      	str	r2, [r3, #24]
	pid->SKp = 0.2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a08      	ldr	r2, [pc, #32]	; (8004b14 <PID_Init+0x88>)
 8004af2:	61da      	str	r2, [r3, #28]
	pid->SKi = 0.5;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8004afa:	621a      	str	r2, [r3, #32]
	pid->SKd = 0.2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a05      	ldr	r2, [pc, #20]	; (8004b14 <PID_Init+0x88>)
 8004b00:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	0800f598 	.word	0x0800f598
 8004b10:	42b40000 	.word	0x42b40000
 8004b14:	3e4ccccd 	.word	0x3e4ccccd
 8004b18:	3c75c28f 	.word	0x3c75c28f

08004b1c <PID_Calc>:

//坐标PID调节函数(X轴)
uint16_t PID_Calc(PID *pid, uint16_t Posi, float Speed) {
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	460b      	mov	r3, r1
 8004b26:	ed87 0a01 	vstr	s0, [r7, #4]
 8004b2a:	817b      	strh	r3, [r7, #10]
	/******************************外环位置式PID(位置环)d************************************/

	pid->ActualPosi = Posi;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	897a      	ldrh	r2, [r7, #10]
 8004b30:	805a      	strh	r2, [r3, #2]
	pid->errorPosi[0] = pid->SetPosi - pid->ActualPosi;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	881a      	ldrh	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	885b      	ldrh	r3, [r3, #2]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	b21a      	sxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	809a      	strh	r2, [r3, #4]

	/* 设定闭环死区 */
	if ((pid->errorPosi[0] >= -LOC_DEAD_ZONE)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b4a:	f113 0f03 	cmn.w	r3, #3
 8004b4e:	db0e      	blt.n	8004b6e <PID_Calc+0x52>
			&& (pid->errorPosi[0] <= LOC_DEAD_ZONE)) {
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	dc09      	bgt.n	8004b6e <PID_Calc+0x52>
		pid->errorPosi[0] = 0;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	809a      	strh	r2, [r3, #4]
		pid->integral = 0;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
		pid->errorPosi[1] = 0;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	80da      	strh	r2, [r3, #6]
	}

	if (pid->errorPosi[0] >= LOCAL_MAX) {
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b74:	2bc7      	cmp	r3, #199	; 0xc7
 8004b76:	dd03      	ble.n	8004b80 <PID_Calc+0x64>
		pid->errorPosi[0] = LOCAL_MAX;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	22c8      	movs	r2, #200	; 0xc8
 8004b7c:	809a      	strh	r2, [r3, #4]
 8004b7e:	e009      	b.n	8004b94 <PID_Calc+0x78>
	} else if (pid->errorPosi[0] <= -LOCAL_MAX) {
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b86:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8004b8a:	da03      	bge.n	8004b94 <PID_Calc+0x78>
		pid->errorPosi[0] = -LOCAL_MAX;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f64f 7238 	movw	r2, #65336	; 0xff38
 8004b92:	809a      	strh	r2, [r3, #4]
	}

	pid->integral += pid->errorPosi[0];
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004ba0:	ee07 3a90 	vmov	s15, r3
 8004ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	//位置式PID算法核心函数
	pid->Speed = pid->PKp * pid->errorPosi[0] + pid->PKi * pid->integral
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	ed93 7a04 	vldr	s14, [r3, #16]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	edd3 6a05 	vldr	s13, [r3, #20]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bda:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ pid->PKd * (pid->errorPosi[0] - pid->errorPosi[1]);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	edd3 6a06 	vldr	s13, [r3, #24]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004bea:	461a      	mov	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	ee07 3a90 	vmov	s15, r3
 8004bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c00:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid->Speed = pid->PKp * pid->errorPosi[0] + pid->PKi * pid->integral
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
//	printf("比例%hu\r\n积分%hu\r\n微分%hu\r\n输出为%hu\r\n", (unsigned short int)pid->err, (unsigned short int)pid->integral,
//			(unsigned short int)(pid->err - pid->err_last), (unsigned short int)pid->ActualPosi);
	pid->errorPosi[1] = pid->errorPosi[0];
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	80da      	strh	r2, [r3, #6]

	/*********************************************************************************/

	/******************************内环增量式PID(速度环)d************************************/

	pid->errorSpeed[0] = pid->Speed - Speed;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004c1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c26:	ee17 3a90 	vmov	r3, s15
 8004c2a:	b21a      	sxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	811a      	strh	r2, [r3, #8]
	//增量式PID核心算法
	pid->angle += pid->SKp * (pid->errorSpeed[0] - pid->errorSpeed[1])
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	edd3 6a07 	vldr	s13, [r3, #28]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c42:	461a      	mov	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c54:	ee66 6aa7 	vmul.f32	s13, s13, s15
			+ pid->SKi * pid->errorSpeed[0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	ed93 6a08 	vldr	s12, [r3, #32]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c64:	ee07 3a90 	vmov	s15, r3
 8004c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c6c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004c70:	ee76 6aa7 	vadd.f32	s13, s13, s15
			+ pid->SKd
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
					* (pid->errorSpeed[0] - 2 * pid->errorSpeed[1]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c80:	461a      	mov	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	1ad3      	subs	r3, r2, r3
							+ pid->errorSpeed[2]);
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8004c92:	4413      	add	r3, r2
					* (pid->errorSpeed[0] - 2 * pid->errorSpeed[1]
 8004c94:	ee07 3a90 	vmov	s15, r3
 8004c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c9c:	ee66 7a27 	vmul.f32	s15, s12, s15
			+ pid->SKd
 8004ca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
	pid->angle += pid->SKp * (pid->errorSpeed[0] - pid->errorSpeed[1])
 8004ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	if (pid->angle >= ANGLE_MAX) {
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004cb4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004d00 <PID_Calc+0x1e4>
 8004cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc0:	db03      	blt.n	8004cca <PID_Calc+0x1ae>
		pid->angle = ANGLE_MAX;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4a0f      	ldr	r2, [pc, #60]	; (8004d04 <PID_Calc+0x1e8>)
 8004cc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cc8:	e00c      	b.n	8004ce4 <PID_Calc+0x1c8>
	} else if (pid->angle <= ANGLE_MIN) {
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004cd0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004d08 <PID_Calc+0x1ec>
 8004cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cdc:	d802      	bhi.n	8004ce4 <PID_Calc+0x1c8>
		pid->angle = ANGLE_MIN;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4a0a      	ldr	r2, [pc, #40]	; (8004d0c <PID_Calc+0x1f0>)
 8004ce2:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	return pid->angle;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cee:	ee17 3a90 	vmov	r3, s15
 8004cf2:	b29b      	uxth	r3, r3

	/****************************************************************************************/
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	43020000 	.word	0x43020000
 8004d04:	43020000 	.word	0x43020000
 8004d08:	42200000 	.word	0x42200000
 8004d0c:	42200000 	.word	0x42200000

08004d10 <ChaSetPosi>:

//改变设定值
void ChaSetPosi(PID *pid, uint16_t setPosi) {
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	807b      	strh	r3, [r7, #2]
	pid->SetPosi = setPosi;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	801a      	strh	r2, [r3, #0]
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <PID_Reset>:

void PID_Reset(PID *pid) {
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	pid->integral = 0;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
	pid->Speed = 0;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28
	pid->angle = 90;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a0b      	ldr	r2, [pc, #44]	; (8004d78 <PID_Reset+0x48>)
 8004d4c:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->errorPosi[0] = 0;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	809a      	strh	r2, [r3, #4]
	pid->errorPosi[1] = 0;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	80da      	strh	r2, [r3, #6]
	pid->errorSpeed[0] = 0;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	811a      	strh	r2, [r3, #8]
	pid->errorSpeed[1] = 0;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	815a      	strh	r2, [r3, #10]
	pid->errorSpeed[2] = 0;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	819a      	strh	r2, [r3, #12]
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	42b40000 	.word	0x42b40000

08004d7c <ballSpeed>:

uint8_t Mode[6] = { 0 }; //模式选择缓存区
uint8_t i = 0; //用于存放模式选择缓存区的向量

//计算小球速度
void ballSpeed() {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
	float distanceX, distanceY, distanceIns; //用于存放X，Y方向上的间距
	uint8_t j = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	73fb      	strb	r3, [r7, #15]
	j = (i - 10) ? (i >= 10) : (i - 10 + LEN);  //使用当前帧的坐标和10帧前的坐标计算瞬时速度
 8004d86:	4b5e      	ldr	r3, [pc, #376]	; (8004f00 <ballSpeed+0x184>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b0a      	cmp	r3, #10
 8004d8c:	d007      	beq.n	8004d9e <ballSpeed+0x22>
 8004d8e:	4b5c      	ldr	r3, [pc, #368]	; (8004f00 <ballSpeed+0x184>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b09      	cmp	r3, #9
 8004d94:	bf8c      	ite	hi
 8004d96:	2301      	movhi	r3, #1
 8004d98:	2300      	movls	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	e003      	b.n	8004da6 <ballSpeed+0x2a>
 8004d9e:	4b58      	ldr	r3, [pc, #352]	; (8004f00 <ballSpeed+0x184>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	3316      	adds	r3, #22
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	73fb      	strb	r3, [r7, #15]
	//计算瞬时的X方向、Y方向和总间距
	distanceX = (coordinate_XY[i][0] - coordinate_XY[j][0]) / RESOLUTION;
 8004da8:	4b55      	ldr	r3, [pc, #340]	; (8004f00 <ballSpeed+0x184>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	4b55      	ldr	r3, [pc, #340]	; (8004f04 <ballSpeed+0x188>)
 8004db0:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8004db4:	4619      	mov	r1, r3
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	4a52      	ldr	r2, [pc, #328]	; (8004f04 <ballSpeed+0x188>)
 8004dba:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8004dbe:	1acb      	subs	r3, r1, r3
 8004dc0:	4a51      	ldr	r2, [pc, #324]	; (8004f08 <ballSpeed+0x18c>)
 8004dc2:	fb82 1203 	smull	r1, r2, r2, r3
 8004dc6:	1092      	asrs	r2, r2, #2
 8004dc8:	17db      	asrs	r3, r3, #31
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	ee07 3a90 	vmov	s15, r3
 8004dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dd4:	edc7 7a02 	vstr	s15, [r7, #8]
	distanceY = (coordinate_XY[i][1] - coordinate_XY[j][1]) / RESOLUTION;
 8004dd8:	4b49      	ldr	r3, [pc, #292]	; (8004f00 <ballSpeed+0x184>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	4a49      	ldr	r2, [pc, #292]	; (8004f04 <ballSpeed+0x188>)
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	885b      	ldrh	r3, [r3, #2]
 8004de4:	4619      	mov	r1, r3
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	4a46      	ldr	r2, [pc, #280]	; (8004f04 <ballSpeed+0x188>)
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	885b      	ldrh	r3, [r3, #2]
 8004df0:	1acb      	subs	r3, r1, r3
 8004df2:	4a45      	ldr	r2, [pc, #276]	; (8004f08 <ballSpeed+0x18c>)
 8004df4:	fb82 1203 	smull	r1, r2, r2, r3
 8004df8:	1092      	asrs	r2, r2, #2
 8004dfa:	17db      	asrs	r3, r3, #31
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e06:	edc7 7a01 	vstr	s15, [r7, #4]
	distanceIns = sqrtf(distanceX * distanceX + distanceY * distanceY);
 8004e0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e0e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004e12:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8004e22:	f009 fb69 	bl	800e4f8 <sqrtf>
 8004e26:	ed87 0a00 	vstr	s0, [r7]

	//顺便计算出当前位置与目标位置的间距
	distance = sqrt(
			(coordinate_XY[i][0] - SetPosi[0])
 8004e2a:	4b35      	ldr	r3, [pc, #212]	; (8004f00 <ballSpeed+0x184>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	4b34      	ldr	r3, [pc, #208]	; (8004f04 <ballSpeed+0x188>)
 8004e32:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8004e36:	461a      	mov	r2, r3
 8004e38:	4b34      	ldr	r3, [pc, #208]	; (8004f0c <ballSpeed+0x190>)
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	1ad3      	subs	r3, r2, r3
					* (coordinate_XY[i][0] - SetPosi[0])
 8004e3e:	4a30      	ldr	r2, [pc, #192]	; (8004f00 <ballSpeed+0x184>)
 8004e40:	7812      	ldrb	r2, [r2, #0]
 8004e42:	4611      	mov	r1, r2
 8004e44:	4a2f      	ldr	r2, [pc, #188]	; (8004f04 <ballSpeed+0x188>)
 8004e46:	f832 2021 	ldrh.w	r2, [r2, r1, lsl #2]
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4a2f      	ldr	r2, [pc, #188]	; (8004f0c <ballSpeed+0x190>)
 8004e4e:	8812      	ldrh	r2, [r2, #0]
 8004e50:	1a8a      	subs	r2, r1, r2
 8004e52:	fb02 f203 	mul.w	r2, r2, r3
					+ (coordinate_XY[i][1] - SetPosi[1])
 8004e56:	4b2a      	ldr	r3, [pc, #168]	; (8004f00 <ballSpeed+0x184>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	492a      	ldr	r1, [pc, #168]	; (8004f04 <ballSpeed+0x188>)
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	885b      	ldrh	r3, [r3, #2]
 8004e62:	4619      	mov	r1, r3
 8004e64:	4b29      	ldr	r3, [pc, #164]	; (8004f0c <ballSpeed+0x190>)
 8004e66:	885b      	ldrh	r3, [r3, #2]
 8004e68:	1ac9      	subs	r1, r1, r3
							* (coordinate_XY[i][1] - SetPosi[1]));
 8004e6a:	4b25      	ldr	r3, [pc, #148]	; (8004f00 <ballSpeed+0x184>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	4825      	ldr	r0, [pc, #148]	; (8004f04 <ballSpeed+0x188>)
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4403      	add	r3, r0
 8004e74:	885b      	ldrh	r3, [r3, #2]
 8004e76:	4618      	mov	r0, r3
 8004e78:	4b24      	ldr	r3, [pc, #144]	; (8004f0c <ballSpeed+0x190>)
 8004e7a:	885b      	ldrh	r3, [r3, #2]
 8004e7c:	1ac3      	subs	r3, r0, r3
 8004e7e:	fb03 f301 	mul.w	r3, r3, r1
					+ (coordinate_XY[i][1] - SetPosi[1])
 8004e82:	4413      	add	r3, r2
	distance = sqrt(
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fb fb4d 	bl	8000524 <__aeabi_i2d>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	ec43 2b10 	vmov	d0, r2, r3
 8004e92:	f009 fafd 	bl	800e490 <sqrt>
 8004e96:	ec53 2b10 	vmov	r2, r3, d0
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	f7fb fea3 	bl	8000be8 <__aeabi_d2f>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	4a1a      	ldr	r2, [pc, #104]	; (8004f10 <ballSpeed+0x194>)
 8004ea6:	6013      	str	r3, [r2, #0]
	/*
	 * 计算各方向上的速度
	 * dt = 1 / FRAME * 10 (FRAME为帧率)
	 * speed = distance / dt = distance * FRAME / 10
	 */
	speedX = distanceX * FRAME / 10;
 8004ea8:	edd7 7a02 	vldr	s15, [r7, #8]
 8004eac:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004f14 <ballSpeed+0x198>
 8004eb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004eb4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004eb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ebc:	4b16      	ldr	r3, [pc, #88]	; (8004f18 <ballSpeed+0x19c>)
 8004ebe:	edc3 7a00 	vstr	s15, [r3]
	speedY = distanceY * FRAME / 10;
 8004ec2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ec6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8004f14 <ballSpeed+0x198>
 8004eca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ece:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004ed2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ed6:	4b11      	ldr	r3, [pc, #68]	; (8004f1c <ballSpeed+0x1a0>)
 8004ed8:	edc3 7a00 	vstr	s15, [r3]
	speed = distanceIns * FRAME / 10;
 8004edc:	edd7 7a00 	vldr	s15, [r7]
 8004ee0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004f14 <ballSpeed+0x198>
 8004ee4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ee8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <ballSpeed+0x1a4>)
 8004ef2:	edc3 7a00 	vstr	s15, [r3]
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	200002ae 	.word	0x200002ae
 8004f04:	20000228 	.word	0x20000228
 8004f08:	66666667 	.word	0x66666667
 8004f0c:	20000358 	.word	0x20000358
 8004f10:	20000360 	.word	0x20000360
 8004f14:	42480000 	.word	0x42480000
 8004f18:	2000035c 	.word	0x2000035c
 8004f1c:	20000404 	.word	0x20000404
 8004f20:	20000364 	.word	0x20000364

08004f24 <GetSetPosi>:

//确定9个位置坐标
//长宽均为400
void GetSetPosi(uint16_t *SetPosi, uint8_t number) {
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	70fb      	strb	r3, [r7, #3]
	switch (number) {
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	2b0a      	cmp	r3, #10
 8004f36:	d867      	bhi.n	8005008 <GetSetPosi+0xe4>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <GetSetPosi+0x1c>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f6d 	.word	0x08004f6d
 8004f44:	08004f7d 	.word	0x08004f7d
 8004f48:	08004f8d 	.word	0x08004f8d
 8004f4c:	08005009 	.word	0x08005009
 8004f50:	08004f9f 	.word	0x08004f9f
 8004f54:	08004faf 	.word	0x08004faf
 8004f58:	08004fbf 	.word	0x08004fbf
 8004f5c:	08005009 	.word	0x08005009
 8004f60:	08004fd1 	.word	0x08004fd1
 8004f64:	08004fe3 	.word	0x08004fe3
 8004f68:	08004ff5 	.word	0x08004ff5
	case 1:
		SetPosi[0] = 80;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2250      	movs	r2, #80	; 0x50
 8004f70:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 80;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3302      	adds	r3, #2
 8004f76:	2250      	movs	r2, #80	; 0x50
 8004f78:	801a      	strh	r2, [r3, #0]
		break;
 8004f7a:	e045      	b.n	8005008 <GetSetPosi+0xe4>
	case 2:
		SetPosi[0] = 200;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	22c8      	movs	r2, #200	; 0xc8
 8004f80:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 80;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3302      	adds	r3, #2
 8004f86:	2250      	movs	r2, #80	; 0x50
 8004f88:	801a      	strh	r2, [r3, #0]
		break;
 8004f8a:	e03d      	b.n	8005008 <GetSetPosi+0xe4>
	case 3:
		SetPosi[0] = 320;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004f92:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 80;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3302      	adds	r3, #2
 8004f98:	2250      	movs	r2, #80	; 0x50
 8004f9a:	801a      	strh	r2, [r3, #0]
		break;
 8004f9c:	e034      	b.n	8005008 <GetSetPosi+0xe4>
	case 5:
		SetPosi[0] = 80;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2250      	movs	r2, #80	; 0x50
 8004fa2:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 200;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3302      	adds	r3, #2
 8004fa8:	22c8      	movs	r2, #200	; 0xc8
 8004faa:	801a      	strh	r2, [r3, #0]
		break;
 8004fac:	e02c      	b.n	8005008 <GetSetPosi+0xe4>
	case 6:
		SetPosi[0] = 200;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	22c8      	movs	r2, #200	; 0xc8
 8004fb2:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 200;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3302      	adds	r3, #2
 8004fb8:	22c8      	movs	r2, #200	; 0xc8
 8004fba:	801a      	strh	r2, [r3, #0]
		break;
 8004fbc:	e024      	b.n	8005008 <GetSetPosi+0xe4>
	case 7:
		SetPosi[0] = 320;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004fc4:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 200;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3302      	adds	r3, #2
 8004fca:	22c8      	movs	r2, #200	; 0xc8
 8004fcc:	801a      	strh	r2, [r3, #0]
		break;
 8004fce:	e01b      	b.n	8005008 <GetSetPosi+0xe4>
	case 9:
		SetPosi[0] = 80;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2250      	movs	r2, #80	; 0x50
 8004fd4:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 320;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3302      	adds	r3, #2
 8004fda:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004fde:	801a      	strh	r2, [r3, #0]
		break;
 8004fe0:	e012      	b.n	8005008 <GetSetPosi+0xe4>
	case 10:
		SetPosi[0] = 200;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	22c8      	movs	r2, #200	; 0xc8
 8004fe6:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 320;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3302      	adds	r3, #2
 8004fec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ff0:	801a      	strh	r2, [r3, #0]
		break;
 8004ff2:	e009      	b.n	8005008 <GetSetPosi+0xe4>
	case 11:
		SetPosi[0] = 320;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ffa:	801a      	strh	r2, [r3, #0]
		SetPosi[1] = 320;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3302      	adds	r3, #2
 8005000:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005004:	801a      	strh	r2, [r3, #0]
		break;
 8005006:	bf00      	nop
	}
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	0000      	movs	r0, r0
	...

08005018 <ShowString>:

//LCD显示函数，isInit=1表示在初始化中调用
void ShowString() {
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	; 0x28
 800501c:	af02      	add	r7, sp, #8
//	LCD_ShowString(30, 100, 400, 32, 32, Buffer);
//	sprintf((char*) Buffer, "KalmanAngleY:%7.2f", MPU6050.KalmanAngleY);
//	LCD_ShowString(30, 150, 400, 32, 32, Buffer);

	//输出实验标题
	LCD_ShowString(42, 30, 400, 48, 48, (uint8_t*) "Rolling Ball");
 800501e:	4bbe      	ldr	r3, [pc, #760]	; (8005318 <ShowString+0x300>)
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	2330      	movs	r3, #48	; 0x30
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	2330      	movs	r3, #48	; 0x30
 8005028:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800502c:	211e      	movs	r1, #30
 800502e:	202a      	movs	r0, #42	; 0x2a
 8005030:	f7ff fab4 	bl	800459c <LCD_ShowString>
	LCD_ShowString(40, 90, 400, 48, 48, (uint8_t*) "Control System");
 8005034:	4bb9      	ldr	r3, [pc, #740]	; (800531c <ShowString+0x304>)
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	2330      	movs	r3, #48	; 0x30
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	2330      	movs	r3, #48	; 0x30
 800503e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005042:	215a      	movs	r1, #90	; 0x5a
 8005044:	2028      	movs	r0, #40	; 0x28
 8005046:	f7ff faa9 	bl	800459c <LCD_ShowString>
	//LCD输出舵机当前角度
	sprintf((char*) Buffer, "Angle_X:%6.2f", pid_X.angle);
 800504a:	4bb5      	ldr	r3, [pc, #724]	; (8005320 <ShowString+0x308>)
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	4618      	mov	r0, r3
 8005050:	f7fb fa7a 	bl	8000548 <__aeabi_f2d>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4638      	mov	r0, r7
 800505a:	49b2      	ldr	r1, [pc, #712]	; (8005324 <ShowString+0x30c>)
 800505c:	f006 feba 	bl	800bdd4 <siprintf>
	LCD_ShowString(30, 150, 400, 32, 32, Buffer);
 8005060:	463b      	mov	r3, r7
 8005062:	9301      	str	r3, [sp, #4]
 8005064:	2320      	movs	r3, #32
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	2320      	movs	r3, #32
 800506a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800506e:	2196      	movs	r1, #150	; 0x96
 8005070:	201e      	movs	r0, #30
 8005072:	f7ff fa93 	bl	800459c <LCD_ShowString>
	sprintf((char*) Buffer, "Angle_Y:%6.2f", pid_Y.angle);
 8005076:	4bac      	ldr	r3, [pc, #688]	; (8005328 <ShowString+0x310>)
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	4618      	mov	r0, r3
 800507c:	f7fb fa64 	bl	8000548 <__aeabi_f2d>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4638      	mov	r0, r7
 8005086:	49a9      	ldr	r1, [pc, #676]	; (800532c <ShowString+0x314>)
 8005088:	f006 fea4 	bl	800bdd4 <siprintf>
	LCD_ShowString(30, 200, 400, 32, 32, Buffer);
 800508c:	463b      	mov	r3, r7
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	2320      	movs	r3, #32
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	2320      	movs	r3, #32
 8005096:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800509a:	21c8      	movs	r1, #200	; 0xc8
 800509c:	201e      	movs	r0, #30
 800509e:	f7ff fa7d 	bl	800459c <LCD_ShowString>

	//LCD输出设定球坐标(包括位置期望和当前位置)
	sprintf((char*) Buffer, "Set_XY   :(%4d, %4d)", SetPosi[0], SetPosi[1]);
 80050a2:	4ba3      	ldr	r3, [pc, #652]	; (8005330 <ShowString+0x318>)
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	4ba1      	ldr	r3, [pc, #644]	; (8005330 <ShowString+0x318>)
 80050aa:	885b      	ldrh	r3, [r3, #2]
 80050ac:	4638      	mov	r0, r7
 80050ae:	49a1      	ldr	r1, [pc, #644]	; (8005334 <ShowString+0x31c>)
 80050b0:	f006 fe90 	bl	800bdd4 <siprintf>
	LCD_ShowString(30, 270, 400, 32, 32, Buffer);
 80050b4:	463b      	mov	r3, r7
 80050b6:	9301      	str	r3, [sp, #4]
 80050b8:	2320      	movs	r3, #32
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	2320      	movs	r3, #32
 80050be:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80050c2:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80050c6:	201e      	movs	r0, #30
 80050c8:	f7ff fa68 	bl	800459c <LCD_ShowString>
	//LCD输出当前球坐标，若球的位置达到要求，则输出黑色文字，否则输出红色文字
	if (distance <= 30) {
 80050cc:	4b9a      	ldr	r3, [pc, #616]	; (8005338 <ShowString+0x320>)
 80050ce:	edd3 7a00 	vldr	s15, [r3]
 80050d2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80050d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050de:	d804      	bhi.n	80050ea <ShowString+0xd2>
		POINT_COLOR = RED;
 80050e0:	4b96      	ldr	r3, [pc, #600]	; (800533c <ShowString+0x324>)
 80050e2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	e002      	b.n	80050f0 <ShowString+0xd8>
	} else {
		POINT_COLOR = BLACK;
 80050ea:	4b94      	ldr	r3, [pc, #592]	; (800533c <ShowString+0x324>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
	}
	sprintf((char*) Buffer, "Actual_XY:(%4d, %4d)", coordinate_XY[i][0],
 80050f0:	4b93      	ldr	r3, [pc, #588]	; (8005340 <ShowString+0x328>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	4b93      	ldr	r3, [pc, #588]	; (8005344 <ShowString+0x32c>)
 80050f8:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80050fc:	4619      	mov	r1, r3
			coordinate_XY[i][1]);
 80050fe:	4b90      	ldr	r3, [pc, #576]	; (8005340 <ShowString+0x328>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	4a90      	ldr	r2, [pc, #576]	; (8005344 <ShowString+0x32c>)
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	885b      	ldrh	r3, [r3, #2]
	sprintf((char*) Buffer, "Actual_XY:(%4d, %4d)", coordinate_XY[i][0],
 800510a:	4638      	mov	r0, r7
 800510c:	460a      	mov	r2, r1
 800510e:	498e      	ldr	r1, [pc, #568]	; (8005348 <ShowString+0x330>)
 8005110:	f006 fe60 	bl	800bdd4 <siprintf>
	LCD_ShowString(30, 320, 400, 32, 32, Buffer);
 8005114:	463b      	mov	r3, r7
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	2320      	movs	r3, #32
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	2320      	movs	r3, #32
 800511e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005122:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005126:	201e      	movs	r0, #30
 8005128:	f7ff fa38 	bl	800459c <LCD_ShowString>
	POINT_COLOR = BLACK;
 800512c:	4b83      	ldr	r3, [pc, #524]	; (800533c <ShowString+0x324>)
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]
	//LCD输出间距

	sprintf((char*) Buffer, "Distance :%5.2f", distance);
 8005132:	4b81      	ldr	r3, [pc, #516]	; (8005338 <ShowString+0x320>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f7fb fa06 	bl	8000548 <__aeabi_f2d>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4638      	mov	r0, r7
 8005142:	4982      	ldr	r1, [pc, #520]	; (800534c <ShowString+0x334>)
 8005144:	f006 fe46 	bl	800bdd4 <siprintf>
	LCD_ShowString(30, 370, 400, 32, 32, Buffer);
 8005148:	463b      	mov	r3, r7
 800514a:	9301      	str	r3, [sp, #4]
 800514c:	2320      	movs	r3, #32
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	2320      	movs	r3, #32
 8005152:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005156:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800515a:	201e      	movs	r0, #30
 800515c:	f7ff fa1e 	bl	800459c <LCD_ShowString>

	//LCD输出设定球速度(包括速度期望和当前速度)
	sprintf((char*) Buffer, "Expect_Speed:%7.2f",
			sqrtf(pid_X.Speed * pid_X.Speed + pid_Y.Speed * pid_Y.Speed));
 8005160:	4b6f      	ldr	r3, [pc, #444]	; (8005320 <ShowString+0x308>)
 8005162:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005166:	4b6e      	ldr	r3, [pc, #440]	; (8005320 <ShowString+0x308>)
 8005168:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800516c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005170:	4b6d      	ldr	r3, [pc, #436]	; (8005328 <ShowString+0x310>)
 8005172:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8005176:	4b6c      	ldr	r3, [pc, #432]	; (8005328 <ShowString+0x310>)
 8005178:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800517c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005184:	eeb0 0a67 	vmov.f32	s0, s15
 8005188:	f009 f9b6 	bl	800e4f8 <sqrtf>
 800518c:	ee10 3a10 	vmov	r3, s0
	sprintf((char*) Buffer, "Expect_Speed:%7.2f",
 8005190:	4618      	mov	r0, r3
 8005192:	f7fb f9d9 	bl	8000548 <__aeabi_f2d>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4638      	mov	r0, r7
 800519c:	496c      	ldr	r1, [pc, #432]	; (8005350 <ShowString+0x338>)
 800519e:	f006 fe19 	bl	800bdd4 <siprintf>
	LCD_ShowString(30, 440, 400, 32, 32, Buffer);
 80051a2:	463b      	mov	r3, r7
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	2320      	movs	r3, #32
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	2320      	movs	r3, #32
 80051ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80051b0:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80051b4:	201e      	movs	r0, #30
 80051b6:	f7ff f9f1 	bl	800459c <LCD_ShowString>
	//LCD输出当前球速度，若球的速度达到要求，则输出黑色文字，否则输出红色文字
	if (sqrtf(pid_X.Speed * pid_X.Speed + pid_Y.Speed * pid_Y.Speed) - speed
 80051ba:	4b59      	ldr	r3, [pc, #356]	; (8005320 <ShowString+0x308>)
 80051bc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80051c0:	4b57      	ldr	r3, [pc, #348]	; (8005320 <ShowString+0x308>)
 80051c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80051c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051ca:	4b57      	ldr	r3, [pc, #348]	; (8005328 <ShowString+0x310>)
 80051cc:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80051d0:	4b55      	ldr	r3, [pc, #340]	; (8005328 <ShowString+0x310>)
 80051d2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80051d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051de:	eeb0 0a67 	vmov.f32	s0, s15
 80051e2:	f009 f989 	bl	800e4f8 <sqrtf>
 80051e6:	eeb0 7a40 	vmov.f32	s14, s0
 80051ea:	4b5a      	ldr	r3, [pc, #360]	; (8005354 <ShowString+0x33c>)
 80051ec:	edd3 7a00 	vldr	s15, [r3]
 80051f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005200:	d828      	bhi.n	8005254 <ShowString+0x23c>
			<= 1
			&& sqrtf(pid_X.Speed * pid_X.Speed + pid_Y.Speed * pid_Y.Speed)
 8005202:	4b47      	ldr	r3, [pc, #284]	; (8005320 <ShowString+0x308>)
 8005204:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005208:	4b45      	ldr	r3, [pc, #276]	; (8005320 <ShowString+0x308>)
 800520a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800520e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005212:	4b45      	ldr	r3, [pc, #276]	; (8005328 <ShowString+0x310>)
 8005214:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8005218:	4b43      	ldr	r3, [pc, #268]	; (8005328 <ShowString+0x310>)
 800521a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800521e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005226:	eeb0 0a67 	vmov.f32	s0, s15
 800522a:	f009 f965 	bl	800e4f8 <sqrtf>
 800522e:	eeb0 7a40 	vmov.f32	s14, s0
					- speed >= -1) {
 8005232:	4b48      	ldr	r3, [pc, #288]	; (8005354 <ShowString+0x33c>)
 8005234:	edd3 7a00 	vldr	s15, [r3]
 8005238:	ee77 7a67 	vsub.f32	s15, s14, s15
			&& sqrtf(pid_X.Speed * pid_X.Speed + pid_Y.Speed * pid_Y.Speed)
 800523c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005248:	db04      	blt.n	8005254 <ShowString+0x23c>
		POINT_COLOR = RED;
 800524a:	4b3c      	ldr	r3, [pc, #240]	; (800533c <ShowString+0x324>)
 800524c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	e002      	b.n	800525a <ShowString+0x242>
	} else {
		POINT_COLOR = BLACK;
 8005254:	4b39      	ldr	r3, [pc, #228]	; (800533c <ShowString+0x324>)
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]
	}
	sprintf((char*) Buffer, "Actual_Speed:%7.2f", speed);
 800525a:	4b3e      	ldr	r3, [pc, #248]	; (8005354 <ShowString+0x33c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7fb f972 	bl	8000548 <__aeabi_f2d>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4638      	mov	r0, r7
 800526a:	493b      	ldr	r1, [pc, #236]	; (8005358 <ShowString+0x340>)
 800526c:	f006 fdb2 	bl	800bdd4 <siprintf>
	LCD_ShowString(30, 490, 400, 32, 32, Buffer);
 8005270:	463b      	mov	r3, r7
 8005272:	9301      	str	r3, [sp, #4]
 8005274:	2320      	movs	r3, #32
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	2320      	movs	r3, #32
 800527a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800527e:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8005282:	201e      	movs	r0, #30
 8005284:	f7ff f98a 	bl	800459c <LCD_ShowString>
	POINT_COLOR = BLACK;
 8005288:	4b2c      	ldr	r3, [pc, #176]	; (800533c <ShowString+0x324>)
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]

	//LCD输出耗费时间
	sprintf((char*) Buffer, "Total Time:%5.2f",
	__HAL_TIM_GET_COUNTER(&htim5) * 1.0 / 10000);
 800528e:	4b33      	ldr	r3, [pc, #204]	; (800535c <ShowString+0x344>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	4618      	mov	r0, r3
 8005296:	f7fb f935 	bl	8000504 <__aeabi_ui2d>
	sprintf((char*) Buffer, "Total Time:%5.2f",
 800529a:	a31d      	add	r3, pc, #116	; (adr r3, 8005310 <ShowString+0x2f8>)
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	f7fb fad4 	bl	800084c <__aeabi_ddiv>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4638      	mov	r0, r7
 80052aa:	492d      	ldr	r1, [pc, #180]	; (8005360 <ShowString+0x348>)
 80052ac:	f006 fd92 	bl	800bdd4 <siprintf>
	LCD_ShowString(30, 560, 400, 32, 32, Buffer);
 80052b0:	463b      	mov	r3, r7
 80052b2:	9301      	str	r3, [sp, #4]
 80052b4:	2320      	movs	r3, #32
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	2320      	movs	r3, #32
 80052ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80052be:	f44f 710c 	mov.w	r1, #560	; 0x230
 80052c2:	201e      	movs	r0, #30
 80052c4:	f7ff f96a 	bl	800459c <LCD_ShowString>
	sprintf((char*) Buffer, "Stable Time:%5.2f",
	__HAL_TIM_GET_COUNTER(&htim2) * 1.0 / 10000);
 80052c8:	4b26      	ldr	r3, [pc, #152]	; (8005364 <ShowString+0x34c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fb f918 	bl	8000504 <__aeabi_ui2d>
	sprintf((char*) Buffer, "Stable Time:%5.2f",
 80052d4:	a30e      	add	r3, pc, #56	; (adr r3, 8005310 <ShowString+0x2f8>)
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	f7fb fab7 	bl	800084c <__aeabi_ddiv>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4638      	mov	r0, r7
 80052e4:	4920      	ldr	r1, [pc, #128]	; (8005368 <ShowString+0x350>)
 80052e6:	f006 fd75 	bl	800bdd4 <siprintf>
	LCD_ShowString(30, 610, 400, 32, 32, Buffer);
 80052ea:	463b      	mov	r3, r7
 80052ec:	9301      	str	r3, [sp, #4]
 80052ee:	2320      	movs	r3, #32
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	2320      	movs	r3, #32
 80052f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80052f8:	f240 2162 	movw	r1, #610	; 0x262
 80052fc:	201e      	movs	r0, #30
 80052fe:	f7ff f94d 	bl	800459c <LCD_ShowString>

}
 8005302:	bf00      	nop
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	f3af 8000 	nop.w
 8005310:	00000000 	.word	0x00000000
 8005314:	40c38800 	.word	0x40c38800
 8005318:	0800f5a8 	.word	0x0800f5a8
 800531c:	0800f5b8 	.word	0x0800f5b8
 8005320:	20000368 	.word	0x20000368
 8005324:	0800f5c8 	.word	0x0800f5c8
 8005328:	20000324 	.word	0x20000324
 800532c:	0800f5d8 	.word	0x0800f5d8
 8005330:	20000358 	.word	0x20000358
 8005334:	0800f5e8 	.word	0x0800f5e8
 8005338:	20000360 	.word	0x20000360
 800533c:	20000000 	.word	0x20000000
 8005340:	200002ae 	.word	0x200002ae
 8005344:	20000228 	.word	0x20000228
 8005348:	0800f600 	.word	0x0800f600
 800534c:	0800f618 	.word	0x0800f618
 8005350:	0800f628 	.word	0x0800f628
 8005354:	20000364 	.word	0x20000364
 8005358:	0800f63c 	.word	0x0800f63c
 800535c:	200004ac 	.word	0x200004ac
 8005360:	0800f650 	.word	0x0800f650
 8005364:	200004f4 	.word	0x200004f4
 8005368:	0800f664 	.word	0x0800f664

0800536c <ShowMode>:

//LCD输出模式选择相关内容
void ShowMode(uint8_t key, uint8_t i) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af02      	add	r7, sp, #8
 8005372:	4603      	mov	r3, r0
 8005374:	460a      	mov	r2, r1
 8005376:	71fb      	strb	r3, [r7, #7]
 8005378:	4613      	mov	r3, r2
 800537a:	71bb      	strb	r3, [r7, #6]
	POINT_COLOR = RED; //输出字符为红色
 800537c:	4bcf      	ldr	r3, [pc, #828]	; (80056bc <ShowMode+0x350>)
 800537e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005382:	601a      	str	r2, [r3, #0]

	//没按下一个键，在LCD上显示按键信息
	//i == 0xff则表示输出每个按键信息
	if (i == 0xff) {
 8005384:	79bb      	ldrb	r3, [r7, #6]
 8005386:	2bff      	cmp	r3, #255	; 0xff
 8005388:	f040 81ba 	bne.w	8005700 <ShowMode+0x394>
		switch (key) {
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	3b01      	subs	r3, #1
 8005390:	2b0f      	cmp	r3, #15
 8005392:	f200 82da 	bhi.w	800594a <ShowMode+0x5de>
 8005396:	a201      	add	r2, pc, #4	; (adr r2, 800539c <ShowMode+0x30>)
 8005398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539c:	08005467 	.word	0x08005467
 80053a0:	08005495 	.word	0x08005495
 80053a4:	080054c3 	.word	0x080054c3
 80053a8:	080053dd 	.word	0x080053dd
 80053ac:	080054f1 	.word	0x080054f1
 80053b0:	0800551f 	.word	0x0800551f
 80053b4:	0800554d 	.word	0x0800554d
 80053b8:	0800540b 	.word	0x0800540b
 80053bc:	0800557b 	.word	0x0800557b
 80053c0:	080055a9 	.word	0x080055a9
 80053c4:	080055d7 	.word	0x080055d7
 80053c8:	08005439 	.word	0x08005439
 80053cc:	08005633 	.word	0x08005633
 80053d0:	08005605 	.word	0x08005605
 80053d4:	08005661 	.word	0x08005661
 80053d8:	0800568f 	.word	0x0800568f
		case STABLE:
			LCD_DrawRectangle(340, 590, 455, 642);
 80053dc:	f240 2382 	movw	r3, #642	; 0x282
 80053e0:	f240 12c7 	movw	r2, #455	; 0x1c7
 80053e4:	f240 214e 	movw	r1, #590	; 0x24e
 80053e8:	f44f 70aa 	mov.w	r0, #340	; 0x154
 80053ec:	f7fe ffd0 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "STABLE");
 80053f0:	4bb3      	ldr	r3, [pc, #716]	; (80056c0 <ShowMode+0x354>)
 80053f2:	9301      	str	r3, [sp, #4]
 80053f4:	2320      	movs	r3, #32
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	2320      	movs	r3, #32
 80053fa:	2282      	movs	r2, #130	; 0x82
 80053fc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005400:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005404:	f7ff f8ca 	bl	800459c <LCD_ShowString>
			break;
 8005408:	e29f      	b.n	800594a <ShowMode+0x5de>
		case MOVE:
			LCD_DrawRectangle(340, 590, 455, 642);
 800540a:	f240 2382 	movw	r3, #642	; 0x282
 800540e:	f240 12c7 	movw	r2, #455	; 0x1c7
 8005412:	f240 214e 	movw	r1, #590	; 0x24e
 8005416:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800541a:	f7fe ffb9 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "MOVE  ");
 800541e:	4ba9      	ldr	r3, [pc, #676]	; (80056c4 <ShowMode+0x358>)
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	2320      	movs	r3, #32
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	2320      	movs	r3, #32
 8005428:	2282      	movs	r2, #130	; 0x82
 800542a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800542e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005432:	f7ff f8b3 	bl	800459c <LCD_ShowString>
			break;
 8005436:	e288      	b.n	800594a <ShowMode+0x5de>
		case ROUND:
			LCD_DrawRectangle(340, 590, 455, 642);
 8005438:	f240 2382 	movw	r3, #642	; 0x282
 800543c:	f240 12c7 	movw	r2, #455	; 0x1c7
 8005440:	f240 214e 	movw	r1, #590	; 0x24e
 8005444:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8005448:	f7fe ffa2 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "ROUND ");
 800544c:	4b9e      	ldr	r3, [pc, #632]	; (80056c8 <ShowMode+0x35c>)
 800544e:	9301      	str	r3, [sp, #4]
 8005450:	2320      	movs	r3, #32
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	2320      	movs	r3, #32
 8005456:	2282      	movs	r2, #130	; 0x82
 8005458:	f44f 7116 	mov.w	r1, #600	; 0x258
 800545c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005460:	f7ff f89c 	bl	800459c <LCD_ShowString>
			break;
 8005464:	e271      	b.n	800594a <ShowMode+0x5de>
		case ONE:
			LCD_DrawRectangle(340, 590, 455, 642);
 8005466:	f240 2382 	movw	r3, #642	; 0x282
 800546a:	f240 12c7 	movw	r2, #455	; 0x1c7
 800546e:	f240 214e 	movw	r1, #590	; 0x24e
 8005472:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8005476:	f7fe ff8b 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "ONE   ");
 800547a:	4b94      	ldr	r3, [pc, #592]	; (80056cc <ShowMode+0x360>)
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	2320      	movs	r3, #32
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	2320      	movs	r3, #32
 8005484:	2282      	movs	r2, #130	; 0x82
 8005486:	f44f 7116 	mov.w	r1, #600	; 0x258
 800548a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800548e:	f7ff f885 	bl	800459c <LCD_ShowString>
			break;
 8005492:	e25a      	b.n	800594a <ShowMode+0x5de>
		case TWO:
			LCD_DrawRectangle(340, 590, 455, 642);
 8005494:	f240 2382 	movw	r3, #642	; 0x282
 8005498:	f240 12c7 	movw	r2, #455	; 0x1c7
 800549c:	f240 214e 	movw	r1, #590	; 0x24e
 80054a0:	f44f 70aa 	mov.w	r0, #340	; 0x154
 80054a4:	f7fe ff74 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "TWO   ");
 80054a8:	4b89      	ldr	r3, [pc, #548]	; (80056d0 <ShowMode+0x364>)
 80054aa:	9301      	str	r3, [sp, #4]
 80054ac:	2320      	movs	r3, #32
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	2320      	movs	r3, #32
 80054b2:	2282      	movs	r2, #130	; 0x82
 80054b4:	f44f 7116 	mov.w	r1, #600	; 0x258
 80054b8:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80054bc:	f7ff f86e 	bl	800459c <LCD_ShowString>
			break;
 80054c0:	e243      	b.n	800594a <ShowMode+0x5de>
		case THREE:
			LCD_DrawRectangle(340, 590, 455, 642);
 80054c2:	f240 2382 	movw	r3, #642	; 0x282
 80054c6:	f240 12c7 	movw	r2, #455	; 0x1c7
 80054ca:	f240 214e 	movw	r1, #590	; 0x24e
 80054ce:	f44f 70aa 	mov.w	r0, #340	; 0x154
 80054d2:	f7fe ff5d 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "THREE ");
 80054d6:	4b7f      	ldr	r3, [pc, #508]	; (80056d4 <ShowMode+0x368>)
 80054d8:	9301      	str	r3, [sp, #4]
 80054da:	2320      	movs	r3, #32
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	2320      	movs	r3, #32
 80054e0:	2282      	movs	r2, #130	; 0x82
 80054e2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80054e6:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80054ea:	f7ff f857 	bl	800459c <LCD_ShowString>
			break;
 80054ee:	e22c      	b.n	800594a <ShowMode+0x5de>
		case FOUR:
			LCD_DrawRectangle(340, 590, 455, 642);
 80054f0:	f240 2382 	movw	r3, #642	; 0x282
 80054f4:	f240 12c7 	movw	r2, #455	; 0x1c7
 80054f8:	f240 214e 	movw	r1, #590	; 0x24e
 80054fc:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8005500:	f7fe ff46 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "FOUR  ");
 8005504:	4b74      	ldr	r3, [pc, #464]	; (80056d8 <ShowMode+0x36c>)
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	2320      	movs	r3, #32
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	2320      	movs	r3, #32
 800550e:	2282      	movs	r2, #130	; 0x82
 8005510:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005514:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005518:	f7ff f840 	bl	800459c <LCD_ShowString>
			break;
 800551c:	e215      	b.n	800594a <ShowMode+0x5de>
		case FIVE:
			LCD_DrawRectangle(340, 590, 455, 642);
 800551e:	f240 2382 	movw	r3, #642	; 0x282
 8005522:	f240 12c7 	movw	r2, #455	; 0x1c7
 8005526:	f240 214e 	movw	r1, #590	; 0x24e
 800552a:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800552e:	f7fe ff2f 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "FIVE  ");
 8005532:	4b6a      	ldr	r3, [pc, #424]	; (80056dc <ShowMode+0x370>)
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	2320      	movs	r3, #32
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	2320      	movs	r3, #32
 800553c:	2282      	movs	r2, #130	; 0x82
 800553e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005542:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005546:	f7ff f829 	bl	800459c <LCD_ShowString>
			break;
 800554a:	e1fe      	b.n	800594a <ShowMode+0x5de>
		case SIX:
			LCD_DrawRectangle(340, 590, 455, 642);
 800554c:	f240 2382 	movw	r3, #642	; 0x282
 8005550:	f240 12c7 	movw	r2, #455	; 0x1c7
 8005554:	f240 214e 	movw	r1, #590	; 0x24e
 8005558:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800555c:	f7fe ff18 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "SIX   ");
 8005560:	4b5f      	ldr	r3, [pc, #380]	; (80056e0 <ShowMode+0x374>)
 8005562:	9301      	str	r3, [sp, #4]
 8005564:	2320      	movs	r3, #32
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	2320      	movs	r3, #32
 800556a:	2282      	movs	r2, #130	; 0x82
 800556c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005570:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005574:	f7ff f812 	bl	800459c <LCD_ShowString>
			break;
 8005578:	e1e7      	b.n	800594a <ShowMode+0x5de>
		case SEVEN:
			LCD_DrawRectangle(340, 590, 455, 642);
 800557a:	f240 2382 	movw	r3, #642	; 0x282
 800557e:	f240 12c7 	movw	r2, #455	; 0x1c7
 8005582:	f240 214e 	movw	r1, #590	; 0x24e
 8005586:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800558a:	f7fe ff01 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "SEVEN ");
 800558e:	4b55      	ldr	r3, [pc, #340]	; (80056e4 <ShowMode+0x378>)
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	2320      	movs	r3, #32
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	2320      	movs	r3, #32
 8005598:	2282      	movs	r2, #130	; 0x82
 800559a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800559e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80055a2:	f7fe fffb 	bl	800459c <LCD_ShowString>
			break;
 80055a6:	e1d0      	b.n	800594a <ShowMode+0x5de>
		case EIGHT:
			LCD_DrawRectangle(340, 590, 455, 642);
 80055a8:	f240 2382 	movw	r3, #642	; 0x282
 80055ac:	f240 12c7 	movw	r2, #455	; 0x1c7
 80055b0:	f240 214e 	movw	r1, #590	; 0x24e
 80055b4:	f44f 70aa 	mov.w	r0, #340	; 0x154
 80055b8:	f7fe feea 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "EIGHT ");
 80055bc:	4b4a      	ldr	r3, [pc, #296]	; (80056e8 <ShowMode+0x37c>)
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	2320      	movs	r3, #32
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	2320      	movs	r3, #32
 80055c6:	2282      	movs	r2, #130	; 0x82
 80055c8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80055cc:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80055d0:	f7fe ffe4 	bl	800459c <LCD_ShowString>
			break;
 80055d4:	e1b9      	b.n	800594a <ShowMode+0x5de>
		case NINE:
			LCD_DrawRectangle(340, 590, 455, 642);
 80055d6:	f240 2382 	movw	r3, #642	; 0x282
 80055da:	f240 12c7 	movw	r2, #455	; 0x1c7
 80055de:	f240 214e 	movw	r1, #590	; 0x24e
 80055e2:	f44f 70aa 	mov.w	r0, #340	; 0x154
 80055e6:	f7fe fed3 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "NINE  ");
 80055ea:	4b40      	ldr	r3, [pc, #256]	; (80056ec <ShowMode+0x380>)
 80055ec:	9301      	str	r3, [sp, #4]
 80055ee:	2320      	movs	r3, #32
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	2320      	movs	r3, #32
 80055f4:	2282      	movs	r2, #130	; 0x82
 80055f6:	f44f 7116 	mov.w	r1, #600	; 0x258
 80055fa:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80055fe:	f7fe ffcd 	bl	800459c <LCD_ShowString>
			break;
 8005602:	e1a2      	b.n	800594a <ShowMode+0x5de>
		case ZERO:
			LCD_DrawRectangle(340, 590, 455, 642);
 8005604:	f240 2382 	movw	r3, #642	; 0x282
 8005608:	f240 12c7 	movw	r2, #455	; 0x1c7
 800560c:	f240 214e 	movw	r1, #590	; 0x24e
 8005610:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8005614:	f7fe febc 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "ZERO  ");
 8005618:	4b35      	ldr	r3, [pc, #212]	; (80056f0 <ShowMode+0x384>)
 800561a:	9301      	str	r3, [sp, #4]
 800561c:	2320      	movs	r3, #32
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	2320      	movs	r3, #32
 8005622:	2282      	movs	r2, #130	; 0x82
 8005624:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005628:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800562c:	f7fe ffb6 	bl	800459c <LCD_ShowString>
			break;
 8005630:	e18b      	b.n	800594a <ShowMode+0x5de>
		case DETER:
			LCD_DrawRectangle(340, 590, 455, 642);
 8005632:	f240 2382 	movw	r3, #642	; 0x282
 8005636:	f240 12c7 	movw	r2, #455	; 0x1c7
 800563a:	f240 214e 	movw	r1, #590	; 0x24e
 800563e:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8005642:	f7fe fea5 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "DETER ");
 8005646:	4b2b      	ldr	r3, [pc, #172]	; (80056f4 <ShowMode+0x388>)
 8005648:	9301      	str	r3, [sp, #4]
 800564a:	2320      	movs	r3, #32
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	2320      	movs	r3, #32
 8005650:	2282      	movs	r2, #130	; 0x82
 8005652:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005656:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800565a:	f7fe ff9f 	bl	800459c <LCD_ShowString>
			break;
 800565e:	e174      	b.n	800594a <ShowMode+0x5de>
		case RESET:
			LCD_DrawRectangle(340, 590, 455, 642);
 8005660:	f240 2382 	movw	r3, #642	; 0x282
 8005664:	f240 12c7 	movw	r2, #455	; 0x1c7
 8005668:	f240 214e 	movw	r1, #590	; 0x24e
 800566c:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8005670:	f7fe fe8e 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "RESET ");
 8005674:	4b20      	ldr	r3, [pc, #128]	; (80056f8 <ShowMode+0x38c>)
 8005676:	9301      	str	r3, [sp, #4]
 8005678:	2320      	movs	r3, #32
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	2320      	movs	r3, #32
 800567e:	2282      	movs	r2, #130	; 0x82
 8005680:	f44f 7116 	mov.w	r1, #600	; 0x258
 8005684:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8005688:	f7fe ff88 	bl	800459c <LCD_ShowString>
			break;
 800568c:	e15d      	b.n	800594a <ShowMode+0x5de>
		case CANCEL:
			LCD_DrawRectangle(340, 590, 455, 642);
 800568e:	f240 2382 	movw	r3, #642	; 0x282
 8005692:	f240 12c7 	movw	r2, #455	; 0x1c7
 8005696:	f240 214e 	movw	r1, #590	; 0x24e
 800569a:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800569e:	f7fe fe77 	bl	8004390 <LCD_DrawRectangle>
			LCD_ShowString(350, 600, 130, 32, 32, (uint8_t*) "CANCEL");
 80056a2:	4b16      	ldr	r3, [pc, #88]	; (80056fc <ShowMode+0x390>)
 80056a4:	9301      	str	r3, [sp, #4]
 80056a6:	2320      	movs	r3, #32
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	2320      	movs	r3, #32
 80056ac:	2282      	movs	r2, #130	; 0x82
 80056ae:	f44f 7116 	mov.w	r1, #600	; 0x258
 80056b2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80056b6:	f7fe ff71 	bl	800459c <LCD_ShowString>
			break;
 80056ba:	e146      	b.n	800594a <ShowMode+0x5de>
 80056bc:	20000000 	.word	0x20000000
 80056c0:	0800f678 	.word	0x0800f678
 80056c4:	0800f680 	.word	0x0800f680
 80056c8:	0800f688 	.word	0x0800f688
 80056cc:	0800f690 	.word	0x0800f690
 80056d0:	0800f698 	.word	0x0800f698
 80056d4:	0800f6a0 	.word	0x0800f6a0
 80056d8:	0800f6a8 	.word	0x0800f6a8
 80056dc:	0800f6b0 	.word	0x0800f6b0
 80056e0:	0800f6b8 	.word	0x0800f6b8
 80056e4:	0800f6c0 	.word	0x0800f6c0
 80056e8:	0800f6c8 	.word	0x0800f6c8
 80056ec:	0800f6d0 	.word	0x0800f6d0
 80056f0:	0800f6d8 	.word	0x0800f6d8
 80056f4:	0800f6e0 	.word	0x0800f6e0
 80056f8:	0800f6e8 	.word	0x0800f6e8
 80056fc:	0800f6f0 	.word	0x0800f6f0
		}
	} else {
		//若i不为0xff则表示显示Mode模式缓存区中的信息
		switch (key) {
 8005700:	79fb      	ldrb	r3, [r7, #7]
 8005702:	3b01      	subs	r3, #1
 8005704:	2b0b      	cmp	r3, #11
 8005706:	f200 8120 	bhi.w	800594a <ShowMode+0x5de>
 800570a:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <ShowMode+0x3a4>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005789 	.word	0x08005789
 8005714:	080057bb 	.word	0x080057bb
 8005718:	080057ed 	.word	0x080057ed
 800571c:	08005741 	.word	0x08005741
 8005720:	0800581f 	.word	0x0800581f
 8005724:	08005851 	.word	0x08005851
 8005728:	08005883 	.word	0x08005883
 800572c:	08005759 	.word	0x08005759
 8005730:	080058b5 	.word	0x080058b5
 8005734:	080058e7 	.word	0x080058e7
 8005738:	08005919 	.word	0x08005919
 800573c:	08005771 	.word	0x08005771
		case STABLE:
			LCD_ShowString(30, 700, 130, 48, 48, (uint8_t*) "STABLE");
 8005740:	4b85      	ldr	r3, [pc, #532]	; (8005958 <ShowMode+0x5ec>)
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	2330      	movs	r3, #48	; 0x30
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	2330      	movs	r3, #48	; 0x30
 800574a:	2282      	movs	r2, #130	; 0x82
 800574c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005750:	201e      	movs	r0, #30
 8005752:	f7fe ff23 	bl	800459c <LCD_ShowString>
			break;
 8005756:	e0f8      	b.n	800594a <ShowMode+0x5de>
		case MOVE:
			LCD_ShowString(30, 700, 130, 48, 48, (uint8_t*) "MOVE  ");
 8005758:	4b80      	ldr	r3, [pc, #512]	; (800595c <ShowMode+0x5f0>)
 800575a:	9301      	str	r3, [sp, #4]
 800575c:	2330      	movs	r3, #48	; 0x30
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	2330      	movs	r3, #48	; 0x30
 8005762:	2282      	movs	r2, #130	; 0x82
 8005764:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005768:	201e      	movs	r0, #30
 800576a:	f7fe ff17 	bl	800459c <LCD_ShowString>
			break;
 800576e:	e0ec      	b.n	800594a <ShowMode+0x5de>
		case ROUND:
			LCD_ShowString(30, 700, 130, 48, 48, (uint8_t*) "ROUND ");
 8005770:	4b7b      	ldr	r3, [pc, #492]	; (8005960 <ShowMode+0x5f4>)
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	2330      	movs	r3, #48	; 0x30
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	2330      	movs	r3, #48	; 0x30
 800577a:	2282      	movs	r2, #130	; 0x82
 800577c:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005780:	201e      	movs	r0, #30
 8005782:	f7fe ff0b 	bl	800459c <LCD_ShowString>
			break;
 8005786:	e0e0      	b.n	800594a <ShowMode+0x5de>
		case ONE:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "1");
 8005788:	79bb      	ldrb	r3, [r7, #6]
 800578a:	b29b      	uxth	r3, r3
 800578c:	461a      	mov	r2, r3
 800578e:	0092      	lsls	r2, r2, #2
 8005790:	4413      	add	r3, r2
 8005792:	461a      	mov	r2, r3
 8005794:	0091      	lsls	r1, r2, #2
 8005796:	461a      	mov	r2, r3
 8005798:	460b      	mov	r3, r1
 800579a:	4413      	add	r3, r2
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	b29b      	uxth	r3, r3
 80057a0:	33b4      	adds	r3, #180	; 0xb4
 80057a2:	b298      	uxth	r0, r3
 80057a4:	4b6f      	ldr	r3, [pc, #444]	; (8005964 <ShowMode+0x5f8>)
 80057a6:	9301      	str	r3, [sp, #4]
 80057a8:	2330      	movs	r3, #48	; 0x30
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	2330      	movs	r3, #48	; 0x30
 80057ae:	2282      	movs	r2, #130	; 0x82
 80057b0:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80057b4:	f7fe fef2 	bl	800459c <LCD_ShowString>
			break;
 80057b8:	e0c7      	b.n	800594a <ShowMode+0x5de>
		case TWO:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "2");
 80057ba:	79bb      	ldrb	r3, [r7, #6]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	461a      	mov	r2, r3
 80057c0:	0092      	lsls	r2, r2, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	461a      	mov	r2, r3
 80057c6:	0091      	lsls	r1, r2, #2
 80057c8:	461a      	mov	r2, r3
 80057ca:	460b      	mov	r3, r1
 80057cc:	4413      	add	r3, r2
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	33b4      	adds	r3, #180	; 0xb4
 80057d4:	b298      	uxth	r0, r3
 80057d6:	4b64      	ldr	r3, [pc, #400]	; (8005968 <ShowMode+0x5fc>)
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	2330      	movs	r3, #48	; 0x30
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	2330      	movs	r3, #48	; 0x30
 80057e0:	2282      	movs	r2, #130	; 0x82
 80057e2:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80057e6:	f7fe fed9 	bl	800459c <LCD_ShowString>
			break;
 80057ea:	e0ae      	b.n	800594a <ShowMode+0x5de>
		case THREE:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "3");
 80057ec:	79bb      	ldrb	r3, [r7, #6]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	0092      	lsls	r2, r2, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	461a      	mov	r2, r3
 80057f8:	0091      	lsls	r1, r2, #2
 80057fa:	461a      	mov	r2, r3
 80057fc:	460b      	mov	r3, r1
 80057fe:	4413      	add	r3, r2
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	b29b      	uxth	r3, r3
 8005804:	33b4      	adds	r3, #180	; 0xb4
 8005806:	b298      	uxth	r0, r3
 8005808:	4b58      	ldr	r3, [pc, #352]	; (800596c <ShowMode+0x600>)
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	2330      	movs	r3, #48	; 0x30
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	2330      	movs	r3, #48	; 0x30
 8005812:	2282      	movs	r2, #130	; 0x82
 8005814:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005818:	f7fe fec0 	bl	800459c <LCD_ShowString>
			break;
 800581c:	e095      	b.n	800594a <ShowMode+0x5de>
		case FOUR:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "4");
 800581e:	79bb      	ldrb	r3, [r7, #6]
 8005820:	b29b      	uxth	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	0092      	lsls	r2, r2, #2
 8005826:	4413      	add	r3, r2
 8005828:	461a      	mov	r2, r3
 800582a:	0091      	lsls	r1, r2, #2
 800582c:	461a      	mov	r2, r3
 800582e:	460b      	mov	r3, r1
 8005830:	4413      	add	r3, r2
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	b29b      	uxth	r3, r3
 8005836:	33b4      	adds	r3, #180	; 0xb4
 8005838:	b298      	uxth	r0, r3
 800583a:	4b4d      	ldr	r3, [pc, #308]	; (8005970 <ShowMode+0x604>)
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	2330      	movs	r3, #48	; 0x30
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	2330      	movs	r3, #48	; 0x30
 8005844:	2282      	movs	r2, #130	; 0x82
 8005846:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800584a:	f7fe fea7 	bl	800459c <LCD_ShowString>
			break;
 800584e:	e07c      	b.n	800594a <ShowMode+0x5de>
		case FIVE:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "5");
 8005850:	79bb      	ldrb	r3, [r7, #6]
 8005852:	b29b      	uxth	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	0092      	lsls	r2, r2, #2
 8005858:	4413      	add	r3, r2
 800585a:	461a      	mov	r2, r3
 800585c:	0091      	lsls	r1, r2, #2
 800585e:	461a      	mov	r2, r3
 8005860:	460b      	mov	r3, r1
 8005862:	4413      	add	r3, r2
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	b29b      	uxth	r3, r3
 8005868:	33b4      	adds	r3, #180	; 0xb4
 800586a:	b298      	uxth	r0, r3
 800586c:	4b41      	ldr	r3, [pc, #260]	; (8005974 <ShowMode+0x608>)
 800586e:	9301      	str	r3, [sp, #4]
 8005870:	2330      	movs	r3, #48	; 0x30
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	2330      	movs	r3, #48	; 0x30
 8005876:	2282      	movs	r2, #130	; 0x82
 8005878:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800587c:	f7fe fe8e 	bl	800459c <LCD_ShowString>
			break;
 8005880:	e063      	b.n	800594a <ShowMode+0x5de>
		case SIX:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "6");
 8005882:	79bb      	ldrb	r3, [r7, #6]
 8005884:	b29b      	uxth	r3, r3
 8005886:	461a      	mov	r2, r3
 8005888:	0092      	lsls	r2, r2, #2
 800588a:	4413      	add	r3, r2
 800588c:	461a      	mov	r2, r3
 800588e:	0091      	lsls	r1, r2, #2
 8005890:	461a      	mov	r2, r3
 8005892:	460b      	mov	r3, r1
 8005894:	4413      	add	r3, r2
 8005896:	005b      	lsls	r3, r3, #1
 8005898:	b29b      	uxth	r3, r3
 800589a:	33b4      	adds	r3, #180	; 0xb4
 800589c:	b298      	uxth	r0, r3
 800589e:	4b36      	ldr	r3, [pc, #216]	; (8005978 <ShowMode+0x60c>)
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	2330      	movs	r3, #48	; 0x30
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	2330      	movs	r3, #48	; 0x30
 80058a8:	2282      	movs	r2, #130	; 0x82
 80058aa:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80058ae:	f7fe fe75 	bl	800459c <LCD_ShowString>
			break;
 80058b2:	e04a      	b.n	800594a <ShowMode+0x5de>
		case SEVEN:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "7");
 80058b4:	79bb      	ldrb	r3, [r7, #6]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	461a      	mov	r2, r3
 80058ba:	0092      	lsls	r2, r2, #2
 80058bc:	4413      	add	r3, r2
 80058be:	461a      	mov	r2, r3
 80058c0:	0091      	lsls	r1, r2, #2
 80058c2:	461a      	mov	r2, r3
 80058c4:	460b      	mov	r3, r1
 80058c6:	4413      	add	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	33b4      	adds	r3, #180	; 0xb4
 80058ce:	b298      	uxth	r0, r3
 80058d0:	4b2a      	ldr	r3, [pc, #168]	; (800597c <ShowMode+0x610>)
 80058d2:	9301      	str	r3, [sp, #4]
 80058d4:	2330      	movs	r3, #48	; 0x30
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	2330      	movs	r3, #48	; 0x30
 80058da:	2282      	movs	r2, #130	; 0x82
 80058dc:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80058e0:	f7fe fe5c 	bl	800459c <LCD_ShowString>
			break;
 80058e4:	e031      	b.n	800594a <ShowMode+0x5de>
		case EIGHT:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "8");
 80058e6:	79bb      	ldrb	r3, [r7, #6]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	0092      	lsls	r2, r2, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	461a      	mov	r2, r3
 80058f2:	0091      	lsls	r1, r2, #2
 80058f4:	461a      	mov	r2, r3
 80058f6:	460b      	mov	r3, r1
 80058f8:	4413      	add	r3, r2
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	33b4      	adds	r3, #180	; 0xb4
 8005900:	b298      	uxth	r0, r3
 8005902:	4b1f      	ldr	r3, [pc, #124]	; (8005980 <ShowMode+0x614>)
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	2330      	movs	r3, #48	; 0x30
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	2330      	movs	r3, #48	; 0x30
 800590c:	2282      	movs	r2, #130	; 0x82
 800590e:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005912:	f7fe fe43 	bl	800459c <LCD_ShowString>
			break;
 8005916:	e018      	b.n	800594a <ShowMode+0x5de>
		case NINE:
			LCD_ShowString(180 + 50 * i, 700, 130, 48, 48, (uint8_t*) "9");
 8005918:	79bb      	ldrb	r3, [r7, #6]
 800591a:	b29b      	uxth	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	0092      	lsls	r2, r2, #2
 8005920:	4413      	add	r3, r2
 8005922:	461a      	mov	r2, r3
 8005924:	0091      	lsls	r1, r2, #2
 8005926:	461a      	mov	r2, r3
 8005928:	460b      	mov	r3, r1
 800592a:	4413      	add	r3, r2
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	b29b      	uxth	r3, r3
 8005930:	33b4      	adds	r3, #180	; 0xb4
 8005932:	b298      	uxth	r0, r3
 8005934:	4b13      	ldr	r3, [pc, #76]	; (8005984 <ShowMode+0x618>)
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	2330      	movs	r3, #48	; 0x30
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	2330      	movs	r3, #48	; 0x30
 800593e:	2282      	movs	r2, #130	; 0x82
 8005940:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005944:	f7fe fe2a 	bl	800459c <LCD_ShowString>
			break;
 8005948:	bf00      	nop
		}
	}
	POINT_COLOR = BLACK; //将字符恢复为黑色
 800594a:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <ShowMode+0x61c>)
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
}
 8005950:	bf00      	nop
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	0800f678 	.word	0x0800f678
 800595c:	0800f680 	.word	0x0800f680
 8005960:	0800f688 	.word	0x0800f688
 8005964:	0800f6f8 	.word	0x0800f6f8
 8005968:	0800f6fc 	.word	0x0800f6fc
 800596c:	0800f700 	.word	0x0800f700
 8005970:	0800f704 	.word	0x0800f704
 8005974:	0800f708 	.word	0x0800f708
 8005978:	0800f70c 	.word	0x0800f70c
 800597c:	0800f710 	.word	0x0800f710
 8005980:	0800f714 	.word	0x0800f714
 8005984:	0800f718 	.word	0x0800f718
 8005988:	20000000 	.word	0x20000000

0800598c <ModeStable>:

//模式1：稳定模式
void ModeStable(void) {
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
	//确定稳定坐标
	GetSetPosi(SetPosi, Mode[1]);
 8005990:	4b22      	ldr	r3, [pc, #136]	; (8005a1c <ModeStable+0x90>)
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	4619      	mov	r1, r3
 8005996:	4822      	ldr	r0, [pc, #136]	; (8005a20 <ModeStable+0x94>)
 8005998:	f7ff fac4 	bl	8004f24 <GetSetPosi>
	//将稳定坐标放入PID结构体中
	ChaSetPosi(&pid_X, SetPosi[0]);
 800599c:	4b20      	ldr	r3, [pc, #128]	; (8005a20 <ModeStable+0x94>)
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	4619      	mov	r1, r3
 80059a2:	4820      	ldr	r0, [pc, #128]	; (8005a24 <ModeStable+0x98>)
 80059a4:	f7ff f9b4 	bl	8004d10 <ChaSetPosi>
	ChaSetPosi(&pid_Y, SetPosi[1]);
 80059a8:	4b1d      	ldr	r3, [pc, #116]	; (8005a20 <ModeStable+0x94>)
 80059aa:	885b      	ldrh	r3, [r3, #2]
 80059ac:	4619      	mov	r1, r3
 80059ae:	481e      	ldr	r0, [pc, #120]	; (8005a28 <ModeStable+0x9c>)
 80059b0:	f7ff f9ae 	bl	8004d10 <ChaSetPosi>

	//计算小球速度,同时查看间距
	ballSpeed();
 80059b4:	f7ff f9e2 	bl	8004d7c <ballSpeed>
	//分别使用pid算法调整X,Y的坐标
	//其中0通道控制X轴舵机,1通道控制Y轴舵机
	PID_Calc(&pid_X, coordinate_XY[i][0], speedX);
 80059b8:	4b1c      	ldr	r3, [pc, #112]	; (8005a2c <ModeStable+0xa0>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	4b1c      	ldr	r3, [pc, #112]	; (8005a30 <ModeStable+0xa4>)
 80059c0:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80059c4:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <ModeStable+0xa8>)
 80059c6:	edd2 7a00 	vldr	s15, [r2]
 80059ca:	eeb0 0a67 	vmov.f32	s0, s15
 80059ce:	4619      	mov	r1, r3
 80059d0:	4814      	ldr	r0, [pc, #80]	; (8005a24 <ModeStable+0x98>)
 80059d2:	f7ff f8a3 	bl	8004b1c <PID_Calc>
	PID_Calc(&pid_Y, coordinate_XY[i][1], speedY);
 80059d6:	4b15      	ldr	r3, [pc, #84]	; (8005a2c <ModeStable+0xa0>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	4a15      	ldr	r2, [pc, #84]	; (8005a30 <ModeStable+0xa4>)
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	885b      	ldrh	r3, [r3, #2]
 80059e2:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <ModeStable+0xac>)
 80059e4:	edd2 7a00 	vldr	s15, [r2]
 80059e8:	eeb0 0a67 	vmov.f32	s0, s15
 80059ec:	4619      	mov	r1, r3
 80059ee:	480e      	ldr	r0, [pc, #56]	; (8005a28 <ModeStable+0x9c>)
 80059f0:	f7ff f894 	bl	8004b1c <PID_Calc>
	PCA9685_SetServoAngle(0, pid_X.angle);
 80059f4:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <ModeStable+0x98>)
 80059f6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80059fa:	eeb0 0a67 	vmov.f32	s0, s15
 80059fe:	2000      	movs	r0, #0
 8005a00:	f7fe ffd2 	bl	80049a8 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, pid_Y.angle);
 8005a04:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <ModeStable+0x9c>)
 8005a06:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a0e:	2001      	movs	r0, #1
 8005a10:	f7fe ffca 	bl	80049a8 <PCA9685_SetServoAngle>

	//同一使用LCD输出相关信息
	ShowString();
 8005a14:	f7ff fb00 	bl	8005018 <ShowString>
}
 8005a18:	bf00      	nop
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	200002a8 	.word	0x200002a8
 8005a20:	20000358 	.word	0x20000358
 8005a24:	20000368 	.word	0x20000368
 8005a28:	20000324 	.word	0x20000324
 8005a2c:	200002ae 	.word	0x200002ae
 8005a30:	20000228 	.word	0x20000228
 8005a34:	2000035c 	.word	0x2000035c
 8005a38:	20000404 	.word	0x20000404

08005a3c <ModeMove>:

//模式2：移动模式
void ModeMove(void) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
	uint8_t count = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	71fb      	strb	r3, [r7, #7]
	static uint8_t isTim = 0;  //判断是否稳定，是否开始计时，isTim为1即为开始计时
	while (Mode[count] != 0) {
 8005a46:	e002      	b.n	8005a4e <ModeMove+0x12>
		count++;
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	71fb      	strb	r3, [r7, #7]
	while (Mode[count] != 0) {
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	4a6d      	ldr	r2, [pc, #436]	; (8005c08 <ModeMove+0x1cc>)
 8005a52:	5cd3      	ldrb	r3, [r2, r3]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f7      	bne.n	8005a48 <ModeMove+0xc>
	}

	for (uint8_t i = 1; i < count;) {
 8005a58:	2301      	movs	r3, #1
 8005a5a:	71bb      	strb	r3, [r7, #6]
 8005a5c:	e0ca      	b.n	8005bf4 <ModeMove+0x1b8>

		//确定目的坐标
		GetSetPosi(SetPosi, Mode[i]);
 8005a5e:	79bb      	ldrb	r3, [r7, #6]
 8005a60:	4a69      	ldr	r2, [pc, #420]	; (8005c08 <ModeMove+0x1cc>)
 8005a62:	5cd3      	ldrb	r3, [r2, r3]
 8005a64:	4619      	mov	r1, r3
 8005a66:	4869      	ldr	r0, [pc, #420]	; (8005c0c <ModeMove+0x1d0>)
 8005a68:	f7ff fa5c 	bl	8004f24 <GetSetPosi>
		ChaSetPosi(&pid_X, SetPosi[0]);
 8005a6c:	4b67      	ldr	r3, [pc, #412]	; (8005c0c <ModeMove+0x1d0>)
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	4619      	mov	r1, r3
 8005a72:	4867      	ldr	r0, [pc, #412]	; (8005c10 <ModeMove+0x1d4>)
 8005a74:	f7ff f94c 	bl	8004d10 <ChaSetPosi>
		ChaSetPosi(&pid_Y, SetPosi[1]);
 8005a78:	4b64      	ldr	r3, [pc, #400]	; (8005c0c <ModeMove+0x1d0>)
 8005a7a:	885b      	ldrh	r3, [r3, #2]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4865      	ldr	r0, [pc, #404]	; (8005c14 <ModeMove+0x1d8>)
 8005a80:	f7ff f946 	bl	8004d10 <ChaSetPosi>

		//计算小球速度,同时查看间距
		ballSpeed();
 8005a84:	f7ff f97a 	bl	8004d7c <ballSpeed>
		//i==1时，需要在初始位置稳定2s以上
		if (i == 1) {
 8005a88:	79bb      	ldrb	r3, [r7, #6]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d13e      	bne.n	8005b0c <ModeMove+0xd0>
			if (isTim == 0) { //isTim为1表示未开始计时，需判断是否开始计时
 8005a8e:	4b62      	ldr	r3, [pc, #392]	; (8005c18 <ModeMove+0x1dc>)
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d110      	bne.n	8005ab8 <ModeMove+0x7c>
				if (distance <= 30) {  //若间距小于30，则开始计时
 8005a96:	4b61      	ldr	r3, [pc, #388]	; (8005c1c <ModeMove+0x1e0>)
 8005a98:	edd3 7a00 	vldr	s15, [r3]
 8005a9c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa8:	d876      	bhi.n	8005b98 <ModeMove+0x15c>
					HAL_TIM_Base_Start(&htim2);
 8005aaa:	485d      	ldr	r0, [pc, #372]	; (8005c20 <ModeMove+0x1e4>)
 8005aac:	f004 f856 	bl	8009b5c <HAL_TIM_Base_Start>
					isTim = 1; //isTim置1表示已开始计时
 8005ab0:	4b59      	ldr	r3, [pc, #356]	; (8005c18 <ModeMove+0x1dc>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	e06f      	b.n	8005b98 <ModeMove+0x15c>
				}
			} else {
				if (distance > 30) {  //若间距大于30，则停止计时
 8005ab8:	4b58      	ldr	r3, [pc, #352]	; (8005c1c <ModeMove+0x1e0>)
 8005aba:	edd3 7a00 	vldr	s15, [r3]
 8005abe:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aca:	dd0a      	ble.n	8005ae2 <ModeMove+0xa6>
					isTim = 0;
 8005acc:	4b52      	ldr	r3, [pc, #328]	; (8005c18 <ModeMove+0x1dc>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8005ad2:	4853      	ldr	r0, [pc, #332]	; (8005c20 <ModeMove+0x1e4>)
 8005ad4:	f004 f8aa 	bl	8009c2c <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);  //重新将计时器置零，方便下次计时
 8005ad8:	4b51      	ldr	r3, [pc, #324]	; (8005c20 <ModeMove+0x1e4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2200      	movs	r2, #0
 8005ade:	625a      	str	r2, [r3, #36]	; 0x24
 8005ae0:	e05a      	b.n	8005b98 <ModeMove+0x15c>
				} else if (__HAL_TIM_GET_COUNTER(&htim2) >= 30000) { //若间距小于30的情况下持续了3s，则完成稳定任务
 8005ae2:	4b4f      	ldr	r3, [pc, #316]	; (8005c20 <ModeMove+0x1e4>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	f247 522f 	movw	r2, #29999	; 0x752f
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d953      	bls.n	8005b98 <ModeMove+0x15c>
					i++;	//i加一，则进入下一环节，即小球移动
 8005af0:	79bb      	ldrb	r3, [r7, #6]
 8005af2:	3301      	adds	r3, #1
 8005af4:	71bb      	strb	r3, [r7, #6]
					isTim = 0;
 8005af6:	4b48      	ldr	r3, [pc, #288]	; (8005c18 <ModeMove+0x1dc>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8005afc:	4848      	ldr	r0, [pc, #288]	; (8005c20 <ModeMove+0x1e4>)
 8005afe:	f004 f895 	bl	8009c2c <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8005b02:	4b47      	ldr	r3, [pc, #284]	; (8005c20 <ModeMove+0x1e4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2200      	movs	r2, #0
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24
 8005b0a:	e045      	b.n	8005b98 <ModeMove+0x15c>
				}
			}
		} else if (i > 1 || i < count - 1) { //中间路径只需稍微停留即可，这里停留0.5s
 8005b0c:	79bb      	ldrb	r3, [r7, #6]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d804      	bhi.n	8005b1c <ModeMove+0xe0>
 8005b12:	79ba      	ldrb	r2, [r7, #6]
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	da3d      	bge.n	8005b98 <ModeMove+0x15c>
			if (isTim == 0) {  //计时步骤同上
 8005b1c:	4b3e      	ldr	r3, [pc, #248]	; (8005c18 <ModeMove+0x1dc>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d110      	bne.n	8005b46 <ModeMove+0x10a>
				if (distance <= 30) {
 8005b24:	4b3d      	ldr	r3, [pc, #244]	; (8005c1c <ModeMove+0x1e0>)
 8005b26:	edd3 7a00 	vldr	s15, [r3]
 8005b2a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b36:	d82f      	bhi.n	8005b98 <ModeMove+0x15c>
					HAL_TIM_Base_Start(&htim2);
 8005b38:	4839      	ldr	r0, [pc, #228]	; (8005c20 <ModeMove+0x1e4>)
 8005b3a:	f004 f80f 	bl	8009b5c <HAL_TIM_Base_Start>
					isTim = 1;
 8005b3e:	4b36      	ldr	r3, [pc, #216]	; (8005c18 <ModeMove+0x1dc>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	e028      	b.n	8005b98 <ModeMove+0x15c>
				}
			} else {
				if (distance > 30) {
 8005b46:	4b35      	ldr	r3, [pc, #212]	; (8005c1c <ModeMove+0x1e0>)
 8005b48:	edd3 7a00 	vldr	s15, [r3]
 8005b4c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b58:	dd0a      	ble.n	8005b70 <ModeMove+0x134>
					isTim = 1;
 8005b5a:	4b2f      	ldr	r3, [pc, #188]	; (8005c18 <ModeMove+0x1dc>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8005b60:	482f      	ldr	r0, [pc, #188]	; (8005c20 <ModeMove+0x1e4>)
 8005b62:	f004 f863 	bl	8009c2c <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8005b66:	4b2e      	ldr	r3, [pc, #184]	; (8005c20 <ModeMove+0x1e4>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b6e:	e013      	b.n	8005b98 <ModeMove+0x15c>
				} else if (__HAL_TIM_GET_COUNTER(&htim2) >= 5000) {
 8005b70:	4b2b      	ldr	r3, [pc, #172]	; (8005c20 <ModeMove+0x1e4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	f241 3287 	movw	r2, #4999	; 0x1387
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d90c      	bls.n	8005b98 <ModeMove+0x15c>
					i++;
 8005b7e:	79bb      	ldrb	r3, [r7, #6]
 8005b80:	3301      	adds	r3, #1
 8005b82:	71bb      	strb	r3, [r7, #6]
					isTim = 1;
 8005b84:	4b24      	ldr	r3, [pc, #144]	; (8005c18 <ModeMove+0x1dc>)
 8005b86:	2201      	movs	r2, #1
 8005b88:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop(&htim2);
 8005b8a:	4825      	ldr	r0, [pc, #148]	; (8005c20 <ModeMove+0x1e4>)
 8005b8c:	f004 f84e 	bl	8009c2c <HAL_TIM_Base_Stop>
					__HAL_TIM_SET_COUNTER(&htim2, 0);
 8005b90:	4b23      	ldr	r3, [pc, #140]	; (8005c20 <ModeMove+0x1e4>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2200      	movs	r2, #0
 8005b96:	625a      	str	r2, [r3, #36]	; 0x24
			}
		}

		//分别使用pid算法调整X,Y的坐标
		//其中0通道控制X轴舵机,1通道控制Y轴舵机
		PID_Calc(&pid_X, coordinate_XY[i][0], speedX);
 8005b98:	79bb      	ldrb	r3, [r7, #6]
 8005b9a:	4a22      	ldr	r2, [pc, #136]	; (8005c24 <ModeMove+0x1e8>)
 8005b9c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8005ba0:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <ModeMove+0x1ec>)
 8005ba2:	edd2 7a00 	vldr	s15, [r2]
 8005ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8005baa:	4619      	mov	r1, r3
 8005bac:	4818      	ldr	r0, [pc, #96]	; (8005c10 <ModeMove+0x1d4>)
 8005bae:	f7fe ffb5 	bl	8004b1c <PID_Calc>
		PID_Calc(&pid_Y, coordinate_XY[i][1], speedY);
 8005bb2:	79bb      	ldrb	r3, [r7, #6]
 8005bb4:	4a1b      	ldr	r2, [pc, #108]	; (8005c24 <ModeMove+0x1e8>)
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	885b      	ldrh	r3, [r3, #2]
 8005bbc:	4a1b      	ldr	r2, [pc, #108]	; (8005c2c <ModeMove+0x1f0>)
 8005bbe:	edd2 7a00 	vldr	s15, [r2]
 8005bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	4812      	ldr	r0, [pc, #72]	; (8005c14 <ModeMove+0x1d8>)
 8005bca:	f7fe ffa7 	bl	8004b1c <PID_Calc>
		PCA9685_SetServoAngle(0, pid_X.angle);
 8005bce:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <ModeMove+0x1d4>)
 8005bd0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8005bd8:	2000      	movs	r0, #0
 8005bda:	f7fe fee5 	bl	80049a8 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(1, pid_Y.angle);
 8005bde:	4b0d      	ldr	r3, [pc, #52]	; (8005c14 <ModeMove+0x1d8>)
 8005be0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005be4:	eeb0 0a67 	vmov.f32	s0, s15
 8005be8:	2001      	movs	r0, #1
 8005bea:	f7fe fedd 	bl	80049a8 <PCA9685_SetServoAngle>

		ShowString(0);
 8005bee:	2000      	movs	r0, #0
 8005bf0:	f7ff fa12 	bl	8005018 <ShowString>
	for (uint8_t i = 1; i < count;) {
 8005bf4:	79ba      	ldrb	r2, [r7, #6]
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	f4ff af30 	bcc.w	8005a5e <ModeMove+0x22>
	}
}
 8005bfe:	bf00      	nop
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	200002a8 	.word	0x200002a8
 8005c0c:	20000358 	.word	0x20000358
 8005c10:	20000368 	.word	0x20000368
 8005c14:	20000324 	.word	0x20000324
 8005c18:	200002af 	.word	0x200002af
 8005c1c:	20000360 	.word	0x20000360
 8005c20:	200004f4 	.word	0x200004f4
 8005c24:	20000228 	.word	0x20000228
 8005c28:	2000035c 	.word	0x2000035c
 8005c2c:	20000404 	.word	0x20000404

08005c30 <ModeRound>:

//模式3：绕圈模式
void ModeRound(void) {
 8005c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
	//绕圈模式使用极坐标转为直角坐标
	uint16_t radius = 100;   //半径设置为100
 8005c36:	2364      	movs	r3, #100	; 0x64
 8005c38:	80bb      	strh	r3, [r7, #4]
	uint8_t zita = 0;      //角度初始位为0
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	71fb      	strb	r3, [r7, #7]

	while (1) {
		//确定中心坐标
		GetSetPosi(SetPosi, Mode[1]);
 8005c3e:	4b4c      	ldr	r3, [pc, #304]	; (8005d70 <ModeRound+0x140>)
 8005c40:	785b      	ldrb	r3, [r3, #1]
 8005c42:	4619      	mov	r1, r3
 8005c44:	484b      	ldr	r0, [pc, #300]	; (8005d74 <ModeRound+0x144>)
 8005c46:	f7ff f96d 	bl	8004f24 <GetSetPosi>
		//根据中心坐标和相对极坐标，确定其直角坐标
		SetPosi[0] += (uint16_t) (radius * cos(zita));
 8005c4a:	4b4a      	ldr	r3, [pc, #296]	; (8005d74 <ModeRound+0x144>)
 8005c4c:	881e      	ldrh	r6, [r3, #0]
 8005c4e:	88bb      	ldrh	r3, [r7, #4]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fa fc67 	bl	8000524 <__aeabi_i2d>
 8005c56:	4604      	mov	r4, r0
 8005c58:	460d      	mov	r5, r1
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fa fc51 	bl	8000504 <__aeabi_ui2d>
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	ec43 2b10 	vmov	d0, r2, r3
 8005c6a:	f008 fae1 	bl	800e230 <cos>
 8005c6e:	ec53 2b10 	vmov	r2, r3, d0
 8005c72:	4620      	mov	r0, r4
 8005c74:	4629      	mov	r1, r5
 8005c76:	f7fa fcbf 	bl	80005f8 <__aeabi_dmul>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4619      	mov	r1, r3
 8005c82:	f7fa ff91 	bl	8000ba8 <__aeabi_d2uiz>
 8005c86:	4603      	mov	r3, r0
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	4433      	add	r3, r6
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	4b39      	ldr	r3, [pc, #228]	; (8005d74 <ModeRound+0x144>)
 8005c90:	801a      	strh	r2, [r3, #0]
		SetPosi[1] += (uint16_t) (radius * sin(zita));
 8005c92:	4b38      	ldr	r3, [pc, #224]	; (8005d74 <ModeRound+0x144>)
 8005c94:	885e      	ldrh	r6, [r3, #2]
 8005c96:	88bb      	ldrh	r3, [r7, #4]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fa fc43 	bl	8000524 <__aeabi_i2d>
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	460d      	mov	r5, r1
 8005ca2:	79fb      	ldrb	r3, [r7, #7]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fa fc2d 	bl	8000504 <__aeabi_ui2d>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	ec43 2b10 	vmov	d0, r2, r3
 8005cb2:	f008 fb99 	bl	800e3e8 <sin>
 8005cb6:	ec53 2b10 	vmov	r2, r3, d0
 8005cba:	4620      	mov	r0, r4
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	f7fa fc9b 	bl	80005f8 <__aeabi_dmul>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	4619      	mov	r1, r3
 8005cca:	f7fa ff6d 	bl	8000ba8 <__aeabi_d2uiz>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	4433      	add	r3, r6
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	4b27      	ldr	r3, [pc, #156]	; (8005d74 <ModeRound+0x144>)
 8005cd8:	805a      	strh	r2, [r3, #2]

		//将稳定坐标放入PID结构体中
		ChaSetPosi(&pid_X, SetPosi[0]);
 8005cda:	4b26      	ldr	r3, [pc, #152]	; (8005d74 <ModeRound+0x144>)
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4825      	ldr	r0, [pc, #148]	; (8005d78 <ModeRound+0x148>)
 8005ce2:	f7ff f815 	bl	8004d10 <ChaSetPosi>
		ChaSetPosi(&pid_Y, SetPosi[1]);
 8005ce6:	4b23      	ldr	r3, [pc, #140]	; (8005d74 <ModeRound+0x144>)
 8005ce8:	885b      	ldrh	r3, [r3, #2]
 8005cea:	4619      	mov	r1, r3
 8005cec:	4823      	ldr	r0, [pc, #140]	; (8005d7c <ModeRound+0x14c>)
 8005cee:	f7ff f80f 	bl	8004d10 <ChaSetPosi>

		//计算小球速度,同时查看间距
		ballSpeed();
 8005cf2:	f7ff f843 	bl	8004d7c <ballSpeed>

		//当当前位置与目标位置间距小于20，目标坐标角度增加10度
		if (distance <= 20) {
 8005cf6:	4b22      	ldr	r3, [pc, #136]	; (8005d80 <ModeRound+0x150>)
 8005cf8:	edd3 7a00 	vldr	s15, [r3]
 8005cfc:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d08:	d802      	bhi.n	8005d10 <ModeRound+0xe0>
			zita += 10;
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	330a      	adds	r3, #10
 8005d0e:	71fb      	strb	r3, [r7, #7]
		}

		//分别使用pid算法调整X,Y的坐标
		//其中0通道控制X轴舵机,1通道控制Y轴舵机
		PID_Calc(&pid_X, coordinate_XY[i][0], speedX);
 8005d10:	4b1c      	ldr	r3, [pc, #112]	; (8005d84 <ModeRound+0x154>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	4b1c      	ldr	r3, [pc, #112]	; (8005d88 <ModeRound+0x158>)
 8005d18:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8005d1c:	4a1b      	ldr	r2, [pc, #108]	; (8005d8c <ModeRound+0x15c>)
 8005d1e:	edd2 7a00 	vldr	s15, [r2]
 8005d22:	eeb0 0a67 	vmov.f32	s0, s15
 8005d26:	4619      	mov	r1, r3
 8005d28:	4813      	ldr	r0, [pc, #76]	; (8005d78 <ModeRound+0x148>)
 8005d2a:	f7fe fef7 	bl	8004b1c <PID_Calc>
		PID_Calc(&pid_Y, coordinate_XY[i][1], speedY);
 8005d2e:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <ModeRound+0x154>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	4a15      	ldr	r2, [pc, #84]	; (8005d88 <ModeRound+0x158>)
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	885b      	ldrh	r3, [r3, #2]
 8005d3a:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <ModeRound+0x160>)
 8005d3c:	edd2 7a00 	vldr	s15, [r2]
 8005d40:	eeb0 0a67 	vmov.f32	s0, s15
 8005d44:	4619      	mov	r1, r3
 8005d46:	480d      	ldr	r0, [pc, #52]	; (8005d7c <ModeRound+0x14c>)
 8005d48:	f7fe fee8 	bl	8004b1c <PID_Calc>
		PCA9685_SetServoAngle(0, pid_X.angle);
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <ModeRound+0x148>)
 8005d4e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005d52:	eeb0 0a67 	vmov.f32	s0, s15
 8005d56:	2000      	movs	r0, #0
 8005d58:	f7fe fe26 	bl	80049a8 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(1, pid_Y.angle);
 8005d5c:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <ModeRound+0x14c>)
 8005d5e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005d62:	eeb0 0a67 	vmov.f32	s0, s15
 8005d66:	2001      	movs	r0, #1
 8005d68:	f7fe fe1e 	bl	80049a8 <PCA9685_SetServoAngle>
		GetSetPosi(SetPosi, Mode[1]);
 8005d6c:	e767      	b.n	8005c3e <ModeRound+0xe>
 8005d6e:	bf00      	nop
 8005d70:	200002a8 	.word	0x200002a8
 8005d74:	20000358 	.word	0x20000358
 8005d78:	20000368 	.word	0x20000368
 8005d7c:	20000324 	.word	0x20000324
 8005d80:	20000360 	.word	0x20000360
 8005d84:	200002ae 	.word	0x200002ae
 8005d88:	20000228 	.word	0x20000228
 8005d8c:	2000035c 	.word	0x2000035c
 8005d90:	20000404 	.word	0x20000404

08005d94 <SelecMode>:
		}
	}
}

//选择模式,isInit=1表示在初始化中调用
void SelecMode(uint8_t isInit) {
 8005d94:	b590      	push	{r4, r7, lr}
 8005d96:	b089      	sub	sp, #36	; 0x24
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	71fb      	strb	r3, [r7, #7]
	uint8_t key;
	uint8_t ModeBuffer[6];  //模式缓存区
	for (uint8_t i = 0; i < 6; i++) { //将原本模式缓存区中的信息保存起来
 8005d9e:	2300      	movs	r3, #0
 8005da0:	75fb      	strb	r3, [r7, #23]
 8005da2:	e00f      	b.n	8005dc4 <SelecMode+0x30>
		ModeBuffer[i] = Mode[i];
 8005da4:	7dfa      	ldrb	r2, [r7, #23]
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	499b      	ldr	r1, [pc, #620]	; (8006018 <SelecMode+0x284>)
 8005daa:	5c8a      	ldrb	r2, [r1, r2]
 8005dac:	f107 0118 	add.w	r1, r7, #24
 8005db0:	440b      	add	r3, r1
 8005db2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		Mode[i] = 0;
 8005db6:	7dfb      	ldrb	r3, [r7, #23]
 8005db8:	4a97      	ldr	r2, [pc, #604]	; (8006018 <SelecMode+0x284>)
 8005dba:	2100      	movs	r1, #0
 8005dbc:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 6; i++) { //将原本模式缓存区中的信息保存起来
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	75fb      	strb	r3, [r7, #23]
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	2b05      	cmp	r3, #5
 8005dc8:	d9ec      	bls.n	8005da4 <SelecMode+0x10>
	}

	printf("请选择模式:(模式+格点)\r\n如：从1经过2，3至6 ---------- 移动+1+2+3+6\r\n");
 8005dca:	4894      	ldr	r0, [pc, #592]	; (800601c <SelecMode+0x288>)
 8005dcc:	f005 fffa 	bl	800bdc4 <puts>
	for (uint8_t i = 0; i < 6; i++) {
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	75bb      	strb	r3, [r7, #22]
 8005dd4:	e118      	b.n	8006008 <SelecMode+0x274>
		while ((key = keyboard_scan()) == NOPRES)
 8005dd6:	bf00      	nop
 8005dd8:	f7fb f8d2 	bl	8000f80 <keyboard_scan>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	753b      	strb	r3, [r7, #20]
 8005de0:	7d3b      	ldrb	r3, [r7, #20]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f8      	beq.n	8005dd8 <SelecMode+0x44>
		/*
		 * 若输入格式不符合要求，则重新输入
		 * 若如何输入，则显示模式缓存区数据
		 * 先输入模式（即稳定、移动和绕圈），后输入数字，最后一位一定为确定键，并开始计时
		 */
		if (i == 5) { //该判断语句的多用是确保最后一定按下确定键
 8005de6:	7dbb      	ldrb	r3, [r7, #22]
 8005de8:	2b05      	cmp	r3, #5
 8005dea:	d113      	bne.n	8005e14 <SelecMode+0x80>
			if (key == DETER) {
 8005dec:	7d3b      	ldrb	r3, [r7, #20]
 8005dee:	2b0d      	cmp	r3, #13
 8005df0:	d109      	bne.n	8005e06 <SelecMode+0x72>
				HAL_TIM_Base_Start(&htim5); //按下确定键后开始计时
 8005df2:	488b      	ldr	r0, [pc, #556]	; (8006020 <SelecMode+0x28c>)
 8005df4:	f003 feb2 	bl	8009b5c <HAL_TIM_Base_Start>
				PID_Reset(&pid_X); 		   //并重置PID信息
 8005df8:	488a      	ldr	r0, [pc, #552]	; (8006024 <SelecMode+0x290>)
 8005dfa:	f7fe ff99 	bl	8004d30 <PID_Reset>
				PID_Reset(&pid_Y);
 8005dfe:	488a      	ldr	r0, [pc, #552]	; (8006028 <SelecMode+0x294>)
 8005e00:	f7fe ff96 	bl	8004d30 <PID_Reset>
				return; 		   //跳出函数，开始控制
 8005e04:	e104      	b.n	8006010 <SelecMode+0x27c>
			} else {
				printf("你输入的格式不符合要求，请按下确定键!\r\n");
 8005e06:	4889      	ldr	r0, [pc, #548]	; (800602c <SelecMode+0x298>)
 8005e08:	f005 ffdc 	bl	800bdc4 <puts>
				i -= 1; //若输入格式不符合要求则重新输入
 8005e0c:	7dbb      	ldrb	r3, [r7, #22]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	75bb      	strb	r3, [r7, #22]
				continue;
 8005e12:	e0f6      	b.n	8006002 <SelecMode+0x26e>
			}
		} else if (i == 0 && key != STABLE && key != MOVE && key != ROUND) {
 8005e14:	7dbb      	ldrb	r3, [r7, #22]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10e      	bne.n	8005e38 <SelecMode+0xa4>
 8005e1a:	7d3b      	ldrb	r3, [r7, #20]
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d00b      	beq.n	8005e38 <SelecMode+0xa4>
 8005e20:	7d3b      	ldrb	r3, [r7, #20]
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d008      	beq.n	8005e38 <SelecMode+0xa4>
 8005e26:	7d3b      	ldrb	r3, [r7, #20]
 8005e28:	2b0c      	cmp	r3, #12
 8005e2a:	d005      	beq.n	8005e38 <SelecMode+0xa4>
			printf("你输入的格式不符合要求，请输入模式!\r\n");
 8005e2c:	4880      	ldr	r0, [pc, #512]	; (8006030 <SelecMode+0x29c>)
 8005e2e:	f005 ffc9 	bl	800bdc4 <puts>
			i = -1; //若输入格式不符合要求则重新输入
 8005e32:	23ff      	movs	r3, #255	; 0xff
 8005e34:	75bb      	strb	r3, [r7, #22]
			continue;
 8005e36:	e0e4      	b.n	8006002 <SelecMode+0x26e>
		} else if (i == 0 && (key == STABLE || key == MOVE || key == ROUND)) {
 8005e38:	7dbb      	ldrb	r3, [r7, #22]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d128      	bne.n	8005e90 <SelecMode+0xfc>
 8005e3e:	7d3b      	ldrb	r3, [r7, #20]
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d005      	beq.n	8005e50 <SelecMode+0xbc>
 8005e44:	7d3b      	ldrb	r3, [r7, #20]
 8005e46:	2b08      	cmp	r3, #8
 8005e48:	d002      	beq.n	8005e50 <SelecMode+0xbc>
 8005e4a:	7d3b      	ldrb	r3, [r7, #20]
 8005e4c:	2b0c      	cmp	r3, #12
 8005e4e:	d11f      	bne.n	8005e90 <SelecMode+0xfc>
			Mode[i] = key; //若输入符合要求，则将键值存入模式缓存区中
 8005e50:	7dbb      	ldrb	r3, [r7, #22]
 8005e52:	4971      	ldr	r1, [pc, #452]	; (8006018 <SelecMode+0x284>)
 8005e54:	7d3a      	ldrb	r2, [r7, #20]
 8005e56:	54ca      	strb	r2, [r1, r3]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 8005e58:	4b6f      	ldr	r3, [pc, #444]	; (8006018 <SelecMode+0x284>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4b6e      	ldr	r3, [pc, #440]	; (8006018 <SelecMode+0x284>)
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	4618      	mov	r0, r3
 8005e64:	4b6c      	ldr	r3, [pc, #432]	; (8006018 <SelecMode+0x284>)
 8005e66:	789b      	ldrb	r3, [r3, #2]
 8005e68:	461c      	mov	r4, r3
 8005e6a:	4b6b      	ldr	r3, [pc, #428]	; (8006018 <SelecMode+0x284>)
 8005e6c:	78db      	ldrb	r3, [r3, #3]
 8005e6e:	461a      	mov	r2, r3
					Mode[4]);
 8005e70:	4b69      	ldr	r3, [pc, #420]	; (8006018 <SelecMode+0x284>)
 8005e72:	791b      	ldrb	r3, [r3, #4]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	9200      	str	r2, [sp, #0]
 8005e78:	4623      	mov	r3, r4
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	486d      	ldr	r0, [pc, #436]	; (8006034 <SelecMode+0x2a0>)
 8005e7e:	f005 ff1b 	bl	800bcb8 <iprintf>

			//在LCD中显示按键信息
			ShowMode(key, i);
 8005e82:	7dba      	ldrb	r2, [r7, #22]
 8005e84:	7d3b      	ldrb	r3, [r7, #20]
 8005e86:	4611      	mov	r1, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff fa6f 	bl	800536c <ShowMode>

			continue;
 8005e8e:	e0b8      	b.n	8006002 <SelecMode+0x26e>
		} else if (key == DETER) {
 8005e90:	7d3b      	ldrb	r3, [r7, #20]
 8005e92:	2b0d      	cmp	r3, #13
 8005e94:	d109      	bne.n	8005eaa <SelecMode+0x116>
			HAL_TIM_Base_Start(&htim5); //按下确定键后开始计时
 8005e96:	4862      	ldr	r0, [pc, #392]	; (8006020 <SelecMode+0x28c>)
 8005e98:	f003 fe60 	bl	8009b5c <HAL_TIM_Base_Start>
			PID_Reset(&pid_X);		   //并重置PID信息
 8005e9c:	4861      	ldr	r0, [pc, #388]	; (8006024 <SelecMode+0x290>)
 8005e9e:	f7fe ff47 	bl	8004d30 <PID_Reset>
			PID_Reset(&pid_Y);
 8005ea2:	4861      	ldr	r0, [pc, #388]	; (8006028 <SelecMode+0x294>)
 8005ea4:	f7fe ff44 	bl	8004d30 <PID_Reset>
			break;
 8005ea8:	e0b2      	b.n	8006010 <SelecMode+0x27c>
		} else if (key == RESET) {
 8005eaa:	7d3b      	ldrb	r3, [r7, #20]
 8005eac:	2b0f      	cmp	r3, #15
 8005eae:	d11e      	bne.n	8005eee <SelecMode+0x15a>
			for (i = 0; i <= 4; i++) { //按下复位键后，将模式缓存区中的信息清零
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	75bb      	strb	r3, [r7, #22]
 8005eb4:	e006      	b.n	8005ec4 <SelecMode+0x130>
				Mode[i] = 0;
 8005eb6:	7dbb      	ldrb	r3, [r7, #22]
 8005eb8:	4a57      	ldr	r2, [pc, #348]	; (8006018 <SelecMode+0x284>)
 8005eba:	2100      	movs	r1, #0
 8005ebc:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i <= 4; i++) { //按下复位键后，将模式缓存区中的信息清零
 8005ebe:	7dbb      	ldrb	r3, [r7, #22]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	75bb      	strb	r3, [r7, #22]
 8005ec4:	7dbb      	ldrb	r3, [r7, #22]
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d9f5      	bls.n	8005eb6 <SelecMode+0x122>
			}
			LCD_Fill(30, 700, 400, 750, WHITE);
 8005eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	f240 23ee 	movw	r3, #750	; 0x2ee
 8005ed4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005ed8:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005edc:	201e      	movs	r0, #30
 8005ede:	f7fe f995 	bl	800420c <LCD_Fill>
			i = -1; //i=-1,进入下一个循环后，会自动加一，即从0重新开始
 8005ee2:	23ff      	movs	r3, #255	; 0xff
 8005ee4:	75bb      	strb	r3, [r7, #22]
			printf("复位\r\n");
 8005ee6:	4854      	ldr	r0, [pc, #336]	; (8006038 <SelecMode+0x2a4>)
 8005ee8:	f005 ff6c 	bl	800bdc4 <puts>
			continue;
 8005eec:	e089      	b.n	8006002 <SelecMode+0x26e>
		}

		//判断格式输入是否正确
		if ((key >= ONE && key <= THREE) || (key >= FOUR && key <= SIX)
 8005eee:	7d3b      	ldrb	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <SelecMode+0x166>
 8005ef4:	7d3b      	ldrb	r3, [r7, #20]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d90b      	bls.n	8005f12 <SelecMode+0x17e>
 8005efa:	7d3b      	ldrb	r3, [r7, #20]
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d902      	bls.n	8005f06 <SelecMode+0x172>
 8005f00:	7d3b      	ldrb	r3, [r7, #20]
 8005f02:	2b07      	cmp	r3, #7
 8005f04:	d905      	bls.n	8005f12 <SelecMode+0x17e>
				|| (key >= SEVEN && key <= NINE)) {
 8005f06:	7d3b      	ldrb	r3, [r7, #20]
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d922      	bls.n	8005f52 <SelecMode+0x1be>
 8005f0c:	7d3b      	ldrb	r3, [r7, #20]
 8005f0e:	2b0b      	cmp	r3, #11
 8005f10:	d81f      	bhi.n	8005f52 <SelecMode+0x1be>
			Mode[i] = key; //若输入符合要求，则将键值存入模式缓存区中
 8005f12:	7dbb      	ldrb	r3, [r7, #22]
 8005f14:	4940      	ldr	r1, [pc, #256]	; (8006018 <SelecMode+0x284>)
 8005f16:	7d3a      	ldrb	r2, [r7, #20]
 8005f18:	54ca      	strb	r2, [r1, r3]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 8005f1a:	4b3f      	ldr	r3, [pc, #252]	; (8006018 <SelecMode+0x284>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4b3d      	ldr	r3, [pc, #244]	; (8006018 <SelecMode+0x284>)
 8005f22:	785b      	ldrb	r3, [r3, #1]
 8005f24:	4618      	mov	r0, r3
 8005f26:	4b3c      	ldr	r3, [pc, #240]	; (8006018 <SelecMode+0x284>)
 8005f28:	789b      	ldrb	r3, [r3, #2]
 8005f2a:	461c      	mov	r4, r3
 8005f2c:	4b3a      	ldr	r3, [pc, #232]	; (8006018 <SelecMode+0x284>)
 8005f2e:	78db      	ldrb	r3, [r3, #3]
 8005f30:	461a      	mov	r2, r3
					Mode[4]);
 8005f32:	4b39      	ldr	r3, [pc, #228]	; (8006018 <SelecMode+0x284>)
 8005f34:	791b      	ldrb	r3, [r3, #4]
			printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3],
 8005f36:	9301      	str	r3, [sp, #4]
 8005f38:	9200      	str	r2, [sp, #0]
 8005f3a:	4623      	mov	r3, r4
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	483d      	ldr	r0, [pc, #244]	; (8006034 <SelecMode+0x2a0>)
 8005f40:	f005 feba 	bl	800bcb8 <iprintf>

			//在LCD中显示按键信息
			ShowMode(key, i);
 8005f44:	7dba      	ldrb	r2, [r7, #22]
 8005f46:	7d3b      	ldrb	r3, [r7, #20]
 8005f48:	4611      	mov	r1, r2
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff fa0e 	bl	800536c <ShowMode>

			continue;
 8005f50:	e057      	b.n	8006002 <SelecMode+0x26e>
		} else if (key == DETER) {
 8005f52:	7d3b      	ldrb	r3, [r7, #20]
 8005f54:	2b0d      	cmp	r3, #13
 8005f56:	d109      	bne.n	8005f6c <SelecMode+0x1d8>
			HAL_TIM_Base_Start(&htim5); //按下确定键后开始计时
 8005f58:	4831      	ldr	r0, [pc, #196]	; (8006020 <SelecMode+0x28c>)
 8005f5a:	f003 fdff 	bl	8009b5c <HAL_TIM_Base_Start>
			PID_Reset(&pid_X);		   //并重置PID信息
 8005f5e:	4831      	ldr	r0, [pc, #196]	; (8006024 <SelecMode+0x290>)
 8005f60:	f7fe fee6 	bl	8004d30 <PID_Reset>
			PID_Reset(&pid_Y);
 8005f64:	4830      	ldr	r0, [pc, #192]	; (8006028 <SelecMode+0x294>)
 8005f66:	f7fe fee3 	bl	8004d30 <PID_Reset>
			break;
 8005f6a:	e051      	b.n	8006010 <SelecMode+0x27c>
		} else if (key == RESET) {
 8005f6c:	7d3b      	ldrb	r3, [r7, #20]
 8005f6e:	2b0f      	cmp	r3, #15
 8005f70:	d11e      	bne.n	8005fb0 <SelecMode+0x21c>
			for (i = 0; i <= 4; i++) {		   //按下复位键后，将模式缓存区中的信息清零
 8005f72:	2300      	movs	r3, #0
 8005f74:	75bb      	strb	r3, [r7, #22]
 8005f76:	e006      	b.n	8005f86 <SelecMode+0x1f2>
				Mode[i] = 0;
 8005f78:	7dbb      	ldrb	r3, [r7, #22]
 8005f7a:	4a27      	ldr	r2, [pc, #156]	; (8006018 <SelecMode+0x284>)
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i <= 4; i++) {		   //按下复位键后，将模式缓存区中的信息清零
 8005f80:	7dbb      	ldrb	r3, [r7, #22]
 8005f82:	3301      	adds	r3, #1
 8005f84:	75bb      	strb	r3, [r7, #22]
 8005f86:	7dbb      	ldrb	r3, [r7, #22]
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d9f5      	bls.n	8005f78 <SelecMode+0x1e4>
			}
			LCD_Fill(30, 700, 400, 750, WHITE);
 8005f8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	f240 23ee 	movw	r3, #750	; 0x2ee
 8005f96:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005f9a:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005f9e:	201e      	movs	r0, #30
 8005fa0:	f7fe f934 	bl	800420c <LCD_Fill>
			i = -1;		   //i=-1,进入下一个循环后，会自动加一，即从0重新开始
 8005fa4:	23ff      	movs	r3, #255	; 0xff
 8005fa6:	75bb      	strb	r3, [r7, #22]
			printf("复位\r\n");
 8005fa8:	4823      	ldr	r0, [pc, #140]	; (8006038 <SelecMode+0x2a4>)
 8005faa:	f005 ff0b 	bl	800bdc4 <puts>
			continue;
 8005fae:	e028      	b.n	8006002 <SelecMode+0x26e>
		}

		//若按下CANCEL键，则取消以上输入，并将模式缓存区的数据恢复
		if (key == CANCEL) {
 8005fb0:	7d3b      	ldrb	r3, [r7, #20]
 8005fb2:	2b10      	cmp	r3, #16
 8005fb4:	d11f      	bne.n	8005ff6 <SelecMode+0x262>
			if (isInit == 0) {
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d115      	bne.n	8005fe8 <SelecMode+0x254>
				for (uint8_t i = 0; i < 6; i++) { //恢复模式缓存区原本的信息
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	757b      	strb	r3, [r7, #21]
 8005fc0:	e00b      	b.n	8005fda <SelecMode+0x246>
					Mode[i] = ModeBuffer[i];
 8005fc2:	7d7a      	ldrb	r2, [r7, #21]
 8005fc4:	7d7b      	ldrb	r3, [r7, #21]
 8005fc6:	f107 0118 	add.w	r1, r7, #24
 8005fca:	440a      	add	r2, r1
 8005fcc:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8005fd0:	4a11      	ldr	r2, [pc, #68]	; (8006018 <SelecMode+0x284>)
 8005fd2:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < 6; i++) { //恢复模式缓存区原本的信息
 8005fd4:	7d7b      	ldrb	r3, [r7, #21]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	757b      	strb	r3, [r7, #21]
 8005fda:	7d7b      	ldrb	r3, [r7, #21]
 8005fdc:	2b05      	cmp	r3, #5
 8005fde:	d9f0      	bls.n	8005fc2 <SelecMode+0x22e>
				}
				HAL_TIM_Base_Start(&htim5); //重新开始计时
 8005fe0:	480f      	ldr	r0, [pc, #60]	; (8006020 <SelecMode+0x28c>)
 8005fe2:	f003 fdbb 	bl	8009b5c <HAL_TIM_Base_Start>
				return;
 8005fe6:	e013      	b.n	8006010 <SelecMode+0x27c>
			} else {
				printf("你输入的格式不符合要求，初次设置模式，不能使用取消键!\r\n");
 8005fe8:	4814      	ldr	r0, [pc, #80]	; (800603c <SelecMode+0x2a8>)
 8005fea:	f005 feeb 	bl	800bdc4 <puts>
				i -= 1; //在初始化选择模式时，不能使用取消键
 8005fee:	7dbb      	ldrb	r3, [r7, #22]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	75bb      	strb	r3, [r7, #22]
 8005ff4:	e005      	b.n	8006002 <SelecMode+0x26e>
			}
		} else {
			printf("你输入的格式不符合要求，请输入数字按键!\r\n");
 8005ff6:	4812      	ldr	r0, [pc, #72]	; (8006040 <SelecMode+0x2ac>)
 8005ff8:	f005 fee4 	bl	800bdc4 <puts>
			i -= 1;
 8005ffc:	7dbb      	ldrb	r3, [r7, #22]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; i < 6; i++) {
 8006002:	7dbb      	ldrb	r3, [r7, #22]
 8006004:	3301      	adds	r3, #1
 8006006:	75bb      	strb	r3, [r7, #22]
 8006008:	7dbb      	ldrb	r3, [r7, #22]
 800600a:	2b05      	cmp	r3, #5
 800600c:	f67f aee3 	bls.w	8005dd6 <SelecMode+0x42>
		}
	}
}
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	bd90      	pop	{r4, r7, pc}
 8006016:	bf00      	nop
 8006018:	200002a8 	.word	0x200002a8
 800601c:	0800f71c 	.word	0x0800f71c
 8006020:	200004ac 	.word	0x200004ac
 8006024:	20000368 	.word	0x20000368
 8006028:	20000324 	.word	0x20000324
 800602c:	0800f774 	.word	0x0800f774
 8006030:	0800f7b0 	.word	0x0800f7b0
 8006034:	0800f7e8 	.word	0x0800f7e8
 8006038:	0800f800 	.word	0x0800f800
 800603c:	0800f808 	.word	0x0800f808
 8006040:	0800f85c 	.word	0x0800f85c

08006044 <app_main_init>:

//初始化函数
void app_main_init(void) {
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
	//LCD初始化
	TFTLCD_Init();
 8006048:	f7fb febe 	bl	8001dc8 <TFTLCD_Init>
	LCD_Clear(WHITE);
 800604c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006050:	f7fe f8ae 	bl	80041b0 <LCD_Clear>
	POINT_COLOR = BLACK;
 8006054:	4b10      	ldr	r3, [pc, #64]	; (8006098 <app_main_init+0x54>)
 8006056:	2200      	movs	r2, #0
 8006058:	601a      	str	r2, [r3, #0]
//	//MPU6050初始化,判断MPU6050是否正常连接
//	while (MPU6050_Init(&hi2c1) == 1)
//		;

	//PCA9685初始化,将通道一和通道二(本次需要使用这两个通道)的角度初始化为0
	PCA9685_Init(&hi2c1);
 800605a:	4810      	ldr	r0, [pc, #64]	; (800609c <app_main_init+0x58>)
 800605c:	f7fe fd00 	bl	8004a60 <PCA9685_Init>
	PCA9685_SetServoAngle(0, 90);
 8006060:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80060a0 <app_main_init+0x5c>
 8006064:	2000      	movs	r0, #0
 8006066:	f7fe fc9f 	bl	80049a8 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(1, 90);
 800606a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80060a0 <app_main_init+0x5c>
 800606e:	2001      	movs	r0, #1
 8006070:	f7fe fc9a 	bl	80049a8 <PCA9685_SetServoAngle>

	//显示信息
	ShowString();
 8006074:	f7fe ffd0 	bl	8005018 <ShowString>
	//选择模式
	SelecMode(1);
 8006078:	2001      	movs	r0, #1
 800607a:	f7ff fe8b 	bl	8005d94 <SelecMode>

	//PID初始化, 并设定预设球位置
	PID_Init(&pid_X);
 800607e:	4809      	ldr	r0, [pc, #36]	; (80060a4 <app_main_init+0x60>)
 8006080:	f7fe fd04 	bl	8004a8c <PID_Init>
	PID_Init(&pid_Y);
 8006084:	4808      	ldr	r0, [pc, #32]	; (80060a8 <app_main_init+0x64>)
 8006086:	f7fe fd01 	bl	8004a8c <PID_Init>

	HAL_Delay(500);   //延时0.5s用于舵机调整角度
 800608a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800608e:	f000 fff3 	bl	8007078 <HAL_Delay>
}
 8006092:	bf00      	nop
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000000 	.word	0x20000000
 800609c:	20000458 	.word	0x20000458
 80060a0:	42b40000 	.word	0x42b40000
 80060a4:	20000368 	.word	0x20000368
 80060a8:	20000324 	.word	0x20000324

080060ac <app_main>:

//主程序函数
void app_main(void) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
	if (Mode[0] == STABLE) {
 80060b0:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <app_main+0x30>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d102      	bne.n	80060be <app_main+0x12>
		ModeStable();
 80060b8:	f7ff fc68 	bl	800598c <ModeStable>
//	usart1_report_imu(MPU6050.Accel_X_RAW, MPU6050.Accel_Y_RAW,
//			MPU6050.Accel_Z_RAW, MPU6050.Gyro_X_RAW, MPU6050.Gyro_Y_RAW,
//			MPU6050.Gyro_Z_RAW, (float) MPU6050.KalmanAngleX * 100,
//			(float) MPU6050.KalmanAngleY * 100, 0);
	//	print("\r\nKalmanAngleX:%.2f\r\nKalmanAngleY:%.2f\r\n", MPU6050.KalmanAngleX, MPU6050.KalmanAngleY);
}
 80060bc:	e00c      	b.n	80060d8 <app_main+0x2c>
	} else if (Mode[0] == MOVE) {
 80060be:	4b07      	ldr	r3, [pc, #28]	; (80060dc <app_main+0x30>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d102      	bne.n	80060cc <app_main+0x20>
		ModeMove();
 80060c6:	f7ff fcb9 	bl	8005a3c <ModeMove>
}
 80060ca:	e005      	b.n	80060d8 <app_main+0x2c>
	} else if (Mode[0] == ROUND) {
 80060cc:	4b03      	ldr	r3, [pc, #12]	; (80060dc <app_main+0x30>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b0c      	cmp	r3, #12
 80060d2:	d101      	bne.n	80060d8 <app_main+0x2c>
		ModeRound();
 80060d4:	f7ff fdac 	bl	8005c30 <ModeRound>
}
 80060d8:	bf00      	nop
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	200002a8 	.word	0x200002a8

080060e0 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 80060e8:	bf00      	nop
 80060ea:	4b08      	ldr	r3, [pc, #32]	; (800610c <__io_putchar+0x2c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0f9      	beq.n	80060ea <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	4b04      	ldr	r3, [pc, #16]	; (800610c <__io_putchar+0x2c>)
 80060fc:	605a      	str	r2, [r3, #4]

	//  while ((USART2->SR & 0X40) == 0) {
	//  }; //循环发送,直到发送完毕
	//  USART2->DR = (uint8_t) ch;

	return ch;
 80060fe:	687b      	ldr	r3, [r7, #4]
}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	40011000 	.word	0x40011000

08006110 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006116:	2300      	movs	r3, #0
 8006118:	607b      	str	r3, [r7, #4]
 800611a:	4b0c      	ldr	r3, [pc, #48]	; (800614c <MX_DMA_Init+0x3c>)
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	4a0b      	ldr	r2, [pc, #44]	; (800614c <MX_DMA_Init+0x3c>)
 8006120:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006124:	6313      	str	r3, [r2, #48]	; 0x30
 8006126:	4b09      	ldr	r3, [pc, #36]	; (800614c <MX_DMA_Init+0x3c>)
 8006128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800612e:	607b      	str	r3, [r7, #4]
 8006130:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006132:	2200      	movs	r2, #0
 8006134:	2100      	movs	r1, #0
 8006136:	203a      	movs	r0, #58	; 0x3a
 8006138:	f001 f89d 	bl	8007276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800613c:	203a      	movs	r0, #58	; 0x3a
 800613e:	f001 f8b6 	bl	80072ae <HAL_NVIC_EnableIRQ>

}
 8006142:	bf00      	nop
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	40023800 	.word	0x40023800

08006150 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08e      	sub	sp, #56	; 0x38
 8006154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8006156:	f107 031c 	add.w	r3, r7, #28
 800615a:	2200      	movs	r2, #0
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	605a      	str	r2, [r3, #4]
 8006160:	609a      	str	r2, [r3, #8]
 8006162:	60da      	str	r2, [r3, #12]
 8006164:	611a      	str	r2, [r3, #16]
 8006166:	615a      	str	r2, [r3, #20]
 8006168:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800616a:	463b      	mov	r3, r7
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	605a      	str	r2, [r3, #4]
 8006172:	609a      	str	r2, [r3, #8]
 8006174:	60da      	str	r2, [r3, #12]
 8006176:	611a      	str	r2, [r3, #16]
 8006178:	615a      	str	r2, [r3, #20]
 800617a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800617c:	4b2f      	ldr	r3, [pc, #188]	; (800623c <MX_FSMC_Init+0xec>)
 800617e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8006182:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8006184:	4b2d      	ldr	r3, [pc, #180]	; (800623c <MX_FSMC_Init+0xec>)
 8006186:	4a2e      	ldr	r2, [pc, #184]	; (8006240 <MX_FSMC_Init+0xf0>)
 8006188:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 800618a:	4b2c      	ldr	r3, [pc, #176]	; (800623c <MX_FSMC_Init+0xec>)
 800618c:	2206      	movs	r2, #6
 800618e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8006190:	4b2a      	ldr	r3, [pc, #168]	; (800623c <MX_FSMC_Init+0xec>)
 8006192:	2200      	movs	r2, #0
 8006194:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8006196:	4b29      	ldr	r3, [pc, #164]	; (800623c <MX_FSMC_Init+0xec>)
 8006198:	2200      	movs	r2, #0
 800619a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800619c:	4b27      	ldr	r3, [pc, #156]	; (800623c <MX_FSMC_Init+0xec>)
 800619e:	2210      	movs	r2, #16
 80061a0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80061a2:	4b26      	ldr	r3, [pc, #152]	; (800623c <MX_FSMC_Init+0xec>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80061a8:	4b24      	ldr	r3, [pc, #144]	; (800623c <MX_FSMC_Init+0xec>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80061ae:	4b23      	ldr	r3, [pc, #140]	; (800623c <MX_FSMC_Init+0xec>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80061b4:	4b21      	ldr	r3, [pc, #132]	; (800623c <MX_FSMC_Init+0xec>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80061ba:	4b20      	ldr	r3, [pc, #128]	; (800623c <MX_FSMC_Init+0xec>)
 80061bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061c0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80061c2:	4b1e      	ldr	r3, [pc, #120]	; (800623c <MX_FSMC_Init+0xec>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80061c8:	4b1c      	ldr	r3, [pc, #112]	; (800623c <MX_FSMC_Init+0xec>)
 80061ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061ce:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80061d0:	4b1a      	ldr	r3, [pc, #104]	; (800623c <MX_FSMC_Init+0xec>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80061d6:	4b19      	ldr	r3, [pc, #100]	; (800623c <MX_FSMC_Init+0xec>)
 80061d8:	2200      	movs	r2, #0
 80061da:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80061dc:	4b17      	ldr	r3, [pc, #92]	; (800623c <MX_FSMC_Init+0xec>)
 80061de:	2200      	movs	r2, #0
 80061e0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80061e2:	2301      	movs	r3, #1
 80061e4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80061e6:	230f      	movs	r3, #15
 80061e8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 15;
 80061ea:	230f      	movs	r3, #15
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 80061ee:	230f      	movs	r3, #15
 80061f0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80061f2:	2310      	movs	r3, #16
 80061f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80061f6:	2311      	movs	r3, #17
 80061f8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80061fa:	2300      	movs	r3, #0
 80061fc:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 1;
 80061fe:	2301      	movs	r3, #1
 8006200:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8006202:	230f      	movs	r3, #15
 8006204:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 15;
 8006206:	230f      	movs	r3, #15
 8006208:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 800620a:	230f      	movs	r3, #15
 800620c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800620e:	2310      	movs	r3, #16
 8006210:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8006212:	2311      	movs	r3, #17
 8006214:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8006216:	2300      	movs	r3, #0
 8006218:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800621a:	463a      	mov	r2, r7
 800621c:	f107 031c 	add.w	r3, r7, #28
 8006220:	4619      	mov	r1, r3
 8006222:	4806      	ldr	r0, [pc, #24]	; (800623c <MX_FSMC_Init+0xec>)
 8006224:	f003 fc06 	bl	8009a34 <HAL_SRAM_Init>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800622e:	f000 fa43 	bl	80066b8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8006232:	bf00      	nop
 8006234:	3738      	adds	r7, #56	; 0x38
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20000408 	.word	0x20000408
 8006240:	a0000104 	.word	0xa0000104

08006244 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800624a:	1d3b      	adds	r3, r7, #4
 800624c:	2200      	movs	r2, #0
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	605a      	str	r2, [r3, #4]
 8006252:	609a      	str	r2, [r3, #8]
 8006254:	60da      	str	r2, [r3, #12]
 8006256:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8006258:	4b2c      	ldr	r3, [pc, #176]	; (800630c <HAL_FSMC_MspInit+0xc8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d151      	bne.n	8006304 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8006260:	4b2a      	ldr	r3, [pc, #168]	; (800630c <HAL_FSMC_MspInit+0xc8>)
 8006262:	2201      	movs	r2, #1
 8006264:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8006266:	2300      	movs	r3, #0
 8006268:	603b      	str	r3, [r7, #0]
 800626a:	4b29      	ldr	r3, [pc, #164]	; (8006310 <HAL_FSMC_MspInit+0xcc>)
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	4a28      	ldr	r2, [pc, #160]	; (8006310 <HAL_FSMC_MspInit+0xcc>)
 8006270:	f043 0301 	orr.w	r3, r3, #1
 8006274:	6393      	str	r3, [r2, #56]	; 0x38
 8006276:	4b26      	ldr	r3, [pc, #152]	; (8006310 <HAL_FSMC_MspInit+0xcc>)
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006286:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006288:	2302      	movs	r3, #2
 800628a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800628c:	2300      	movs	r3, #0
 800628e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006290:	2303      	movs	r3, #3
 8006292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8006294:	230c      	movs	r3, #12
 8006296:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006298:	1d3b      	adds	r3, r7, #4
 800629a:	4619      	mov	r1, r3
 800629c:	481d      	ldr	r0, [pc, #116]	; (8006314 <HAL_FSMC_MspInit+0xd0>)
 800629e:	f001 fc23 	bl	8007ae8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80062a2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80062a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062a8:	2302      	movs	r3, #2
 80062aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ac:	2300      	movs	r3, #0
 80062ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062b0:	2303      	movs	r3, #3
 80062b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80062b4:	230c      	movs	r3, #12
 80062b6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062b8:	1d3b      	adds	r3, r7, #4
 80062ba:	4619      	mov	r1, r3
 80062bc:	4816      	ldr	r0, [pc, #88]	; (8006318 <HAL_FSMC_MspInit+0xd4>)
 80062be:	f001 fc13 	bl	8007ae8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80062c2:	f24c 7333 	movw	r3, #50995	; 0xc733
 80062c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062c8:	2302      	movs	r3, #2
 80062ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062d0:	2303      	movs	r3, #3
 80062d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80062d4:	230c      	movs	r3, #12
 80062d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062d8:	1d3b      	adds	r3, r7, #4
 80062da:	4619      	mov	r1, r3
 80062dc:	480f      	ldr	r0, [pc, #60]	; (800631c <HAL_FSMC_MspInit+0xd8>)
 80062de:	f001 fc03 	bl	8007ae8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80062e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e8:	2302      	movs	r3, #2
 80062ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062f0:	2303      	movs	r3, #3
 80062f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80062f4:	230c      	movs	r3, #12
 80062f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80062f8:	1d3b      	adds	r3, r7, #4
 80062fa:	4619      	mov	r1, r3
 80062fc:	4808      	ldr	r0, [pc, #32]	; (8006320 <HAL_FSMC_MspInit+0xdc>)
 80062fe:	f001 fbf3 	bl	8007ae8 <HAL_GPIO_Init>
 8006302:	e000      	b.n	8006306 <HAL_FSMC_MspInit+0xc2>
    return;
 8006304:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	200002b0 	.word	0x200002b0
 8006310:	40023800 	.word	0x40023800
 8006314:	40021400 	.word	0x40021400
 8006318:	40021000 	.word	0x40021000
 800631c:	40020c00 	.word	0x40020c00
 8006320:	40021800 	.word	0x40021800

08006324 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800632c:	f7ff ff8a 	bl	8006244 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8006330:	bf00      	nop
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08c      	sub	sp, #48	; 0x30
 800633c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800633e:	f107 031c 	add.w	r3, r7, #28
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	605a      	str	r2, [r3, #4]
 8006348:	609a      	str	r2, [r3, #8]
 800634a:	60da      	str	r2, [r3, #12]
 800634c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800634e:	2300      	movs	r3, #0
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	4b57      	ldr	r3, [pc, #348]	; (80064b0 <MX_GPIO_Init+0x178>)
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	4a56      	ldr	r2, [pc, #344]	; (80064b0 <MX_GPIO_Init+0x178>)
 8006358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635c:	6313      	str	r3, [r2, #48]	; 0x30
 800635e:	4b54      	ldr	r3, [pc, #336]	; (80064b0 <MX_GPIO_Init+0x178>)
 8006360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	4b50      	ldr	r3, [pc, #320]	; (80064b0 <MX_GPIO_Init+0x178>)
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	4a4f      	ldr	r2, [pc, #316]	; (80064b0 <MX_GPIO_Init+0x178>)
 8006374:	f043 0301 	orr.w	r3, r3, #1
 8006378:	6313      	str	r3, [r2, #48]	; 0x30
 800637a:	4b4d      	ldr	r3, [pc, #308]	; (80064b0 <MX_GPIO_Init+0x178>)
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006386:	2300      	movs	r3, #0
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	4b49      	ldr	r3, [pc, #292]	; (80064b0 <MX_GPIO_Init+0x178>)
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	4a48      	ldr	r2, [pc, #288]	; (80064b0 <MX_GPIO_Init+0x178>)
 8006390:	f043 0320 	orr.w	r3, r3, #32
 8006394:	6313      	str	r3, [r2, #48]	; 0x30
 8006396:	4b46      	ldr	r3, [pc, #280]	; (80064b0 <MX_GPIO_Init+0x178>)
 8006398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	4b42      	ldr	r3, [pc, #264]	; (80064b0 <MX_GPIO_Init+0x178>)
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	4a41      	ldr	r2, [pc, #260]	; (80064b0 <MX_GPIO_Init+0x178>)
 80063ac:	f043 0310 	orr.w	r3, r3, #16
 80063b0:	6313      	str	r3, [r2, #48]	; 0x30
 80063b2:	4b3f      	ldr	r3, [pc, #252]	; (80064b0 <MX_GPIO_Init+0x178>)
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	f003 0310 	and.w	r3, r3, #16
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80063be:	2300      	movs	r3, #0
 80063c0:	60bb      	str	r3, [r7, #8]
 80063c2:	4b3b      	ldr	r3, [pc, #236]	; (80064b0 <MX_GPIO_Init+0x178>)
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	4a3a      	ldr	r2, [pc, #232]	; (80064b0 <MX_GPIO_Init+0x178>)
 80063c8:	f043 0302 	orr.w	r3, r3, #2
 80063cc:	6313      	str	r3, [r2, #48]	; 0x30
 80063ce:	4b38      	ldr	r3, [pc, #224]	; (80064b0 <MX_GPIO_Init+0x178>)
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	60bb      	str	r3, [r7, #8]
 80063d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80063da:	2300      	movs	r3, #0
 80063dc:	607b      	str	r3, [r7, #4]
 80063de:	4b34      	ldr	r3, [pc, #208]	; (80064b0 <MX_GPIO_Init+0x178>)
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	4a33      	ldr	r2, [pc, #204]	; (80064b0 <MX_GPIO_Init+0x178>)
 80063e4:	f043 0308 	orr.w	r3, r3, #8
 80063e8:	6313      	str	r3, [r2, #48]	; 0x30
 80063ea:	4b31      	ldr	r3, [pc, #196]	; (80064b0 <MX_GPIO_Init+0x178>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	607b      	str	r3, [r7, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80063f6:	2300      	movs	r3, #0
 80063f8:	603b      	str	r3, [r7, #0]
 80063fa:	4b2d      	ldr	r3, [pc, #180]	; (80064b0 <MX_GPIO_Init+0x178>)
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	4a2c      	ldr	r2, [pc, #176]	; (80064b0 <MX_GPIO_Init+0x178>)
 8006400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006404:	6313      	str	r3, [r2, #48]	; 0x30
 8006406:	4b2a      	ldr	r3, [pc, #168]	; (80064b0 <MX_GPIO_Init+0x178>)
 8006408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8006412:	2200      	movs	r2, #0
 8006414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006418:	4826      	ldr	r0, [pc, #152]	; (80064b4 <MX_GPIO_Init+0x17c>)
 800641a:	f001 fd19 	bl	8007e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin, GPIO_PIN_RESET);
 800641e:	2200      	movs	r2, #0
 8006420:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8006424:	4824      	ldr	r0, [pc, #144]	; (80064b8 <MX_GPIO_Init+0x180>)
 8006426:	f001 fd13 	bl	8007e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KY_UP_Pin;
 800642a:	2301      	movs	r3, #1
 800642c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800642e:	4b23      	ldr	r3, [pc, #140]	; (80064bc <MX_GPIO_Init+0x184>)
 8006430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006432:	2302      	movs	r3, #2
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KY_UP_GPIO_Port, &GPIO_InitStruct);
 8006436:	f107 031c 	add.w	r3, r7, #28
 800643a:	4619      	mov	r1, r3
 800643c:	4820      	ldr	r0, [pc, #128]	; (80064c0 <MX_GPIO_Init+0x188>)
 800643e:	f001 fb53 	bl	8007ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006448:	2301      	movs	r3, #1
 800644a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800644c:	2301      	movs	r3, #1
 800644e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006450:	2302      	movs	r3, #2
 8006452:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006454:	f107 031c 	add.w	r3, r7, #28
 8006458:	4619      	mov	r1, r3
 800645a:	4816      	ldr	r0, [pc, #88]	; (80064b4 <MX_GPIO_Init+0x17c>)
 800645c:	f001 fb44 	bl	8007ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Row4_Pin|Row3_Pin|Row2_Pin|Row1_Pin;
 8006460:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8006464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006466:	2300      	movs	r3, #0
 8006468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800646a:	2301      	movs	r3, #1
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800646e:	f107 031c 	add.w	r3, r7, #28
 8006472:	4619      	mov	r1, r3
 8006474:	4810      	ldr	r0, [pc, #64]	; (80064b8 <MX_GPIO_Init+0x180>)
 8006476:	f001 fb37 	bl	8007ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin;
 800647a:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 800647e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006480:	2301      	movs	r3, #1
 8006482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006484:	2302      	movs	r3, #2
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006488:	2302      	movs	r3, #2
 800648a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800648c:	f107 031c 	add.w	r3, r7, #28
 8006490:	4619      	mov	r1, r3
 8006492:	4809      	ldr	r0, [pc, #36]	; (80064b8 <MX_GPIO_Init+0x180>)
 8006494:	f001 fb28 	bl	8007ae8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8006498:	2200      	movs	r2, #0
 800649a:	2101      	movs	r1, #1
 800649c:	2006      	movs	r0, #6
 800649e:	f000 feea 	bl	8007276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80064a2:	2006      	movs	r0, #6
 80064a4:	f000 ff03 	bl	80072ae <HAL_NVIC_EnableIRQ>

}
 80064a8:	bf00      	nop
 80064aa:	3730      	adds	r7, #48	; 0x30
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40023800 	.word	0x40023800
 80064b4:	40020400 	.word	0x40020400
 80064b8:	40021800 	.word	0x40021800
 80064bc:	10110000 	.word	0x10110000
 80064c0:	40020000 	.word	0x40020000

080064c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80064c8:	4b12      	ldr	r3, [pc, #72]	; (8006514 <MX_I2C1_Init+0x50>)
 80064ca:	4a13      	ldr	r2, [pc, #76]	; (8006518 <MX_I2C1_Init+0x54>)
 80064cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80064ce:	4b11      	ldr	r3, [pc, #68]	; (8006514 <MX_I2C1_Init+0x50>)
 80064d0:	4a12      	ldr	r2, [pc, #72]	; (800651c <MX_I2C1_Init+0x58>)
 80064d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80064d4:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <MX_I2C1_Init+0x50>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80064da:	4b0e      	ldr	r3, [pc, #56]	; (8006514 <MX_I2C1_Init+0x50>)
 80064dc:	2200      	movs	r2, #0
 80064de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80064e0:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <MX_I2C1_Init+0x50>)
 80064e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <MX_I2C1_Init+0x50>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80064ee:	4b09      	ldr	r3, [pc, #36]	; (8006514 <MX_I2C1_Init+0x50>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80064f4:	4b07      	ldr	r3, [pc, #28]	; (8006514 <MX_I2C1_Init+0x50>)
 80064f6:	2240      	movs	r2, #64	; 0x40
 80064f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80064fa:	4b06      	ldr	r3, [pc, #24]	; (8006514 <MX_I2C1_Init+0x50>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006500:	4804      	ldr	r0, [pc, #16]	; (8006514 <MX_I2C1_Init+0x50>)
 8006502:	f001 fce3 	bl	8007ecc <HAL_I2C_Init>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800650c:	f000 f8d4 	bl	80066b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006510:	bf00      	nop
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20000458 	.word	0x20000458
 8006518:	40005400 	.word	0x40005400
 800651c:	00061a80 	.word	0x00061a80

08006520 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08a      	sub	sp, #40	; 0x28
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006528:	f107 0314 	add.w	r3, r7, #20
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	605a      	str	r2, [r3, #4]
 8006532:	609a      	str	r2, [r3, #8]
 8006534:	60da      	str	r2, [r3, #12]
 8006536:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a19      	ldr	r2, [pc, #100]	; (80065a4 <HAL_I2C_MspInit+0x84>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d12b      	bne.n	800659a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006542:	2300      	movs	r3, #0
 8006544:	613b      	str	r3, [r7, #16]
 8006546:	4b18      	ldr	r3, [pc, #96]	; (80065a8 <HAL_I2C_MspInit+0x88>)
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <HAL_I2C_MspInit+0x88>)
 800654c:	f043 0302 	orr.w	r3, r3, #2
 8006550:	6313      	str	r3, [r2, #48]	; 0x30
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <HAL_I2C_MspInit+0x88>)
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	613b      	str	r3, [r7, #16]
 800655c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800655e:	23c0      	movs	r3, #192	; 0xc0
 8006560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006562:	2312      	movs	r3, #18
 8006564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006566:	2301      	movs	r3, #1
 8006568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800656a:	2303      	movs	r3, #3
 800656c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800656e:	2304      	movs	r3, #4
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006572:	f107 0314 	add.w	r3, r7, #20
 8006576:	4619      	mov	r1, r3
 8006578:	480c      	ldr	r0, [pc, #48]	; (80065ac <HAL_I2C_MspInit+0x8c>)
 800657a:	f001 fab5 	bl	8007ae8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <HAL_I2C_MspInit+0x88>)
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	4a08      	ldr	r2, [pc, #32]	; (80065a8 <HAL_I2C_MspInit+0x88>)
 8006588:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800658c:	6413      	str	r3, [r2, #64]	; 0x40
 800658e:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <HAL_I2C_MspInit+0x88>)
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800659a:	bf00      	nop
 800659c:	3728      	adds	r7, #40	; 0x28
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40005400 	.word	0x40005400
 80065a8:	40023800 	.word	0x40023800
 80065ac:	40020400 	.word	0x40020400

080065b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80065b4:	f000 fcee 	bl	8006f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80065b8:	f000 f814 	bl	80065e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80065bc:	f7ff febc 	bl	8006338 <MX_GPIO_Init>
  MX_DMA_Init();
 80065c0:	f7ff fda6 	bl	8006110 <MX_DMA_Init>
  MX_FSMC_Init();
 80065c4:	f7ff fdc4 	bl	8006150 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80065c8:	f000 faf6 	bl	8006bb8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80065cc:	f7ff ff7a 	bl	80064c4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80065d0:	f000 fa1a 	bl	8006a08 <MX_TIM2_Init>
  MX_TIM5_Init();
 80065d4:	f000 fa66 	bl	8006aa4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	app_main_init();
 80065d8:	f7ff fd34 	bl	8006044 <app_main_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		app_main();
 80065dc:	f7ff fd66 	bl	80060ac <app_main>
 80065e0:	e7fc      	b.n	80065dc <main+0x2c>
	...

080065e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b094      	sub	sp, #80	; 0x50
 80065e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80065ea:	f107 0320 	add.w	r3, r7, #32
 80065ee:	2230      	movs	r2, #48	; 0x30
 80065f0:	2100      	movs	r1, #0
 80065f2:	4618      	mov	r0, r3
 80065f4:	f004 feee 	bl	800b3d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80065f8:	f107 030c 	add.w	r3, r7, #12
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	605a      	str	r2, [r3, #4]
 8006602:	609a      	str	r2, [r3, #8]
 8006604:	60da      	str	r2, [r3, #12]
 8006606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006608:	2300      	movs	r3, #0
 800660a:	60bb      	str	r3, [r7, #8]
 800660c:	4b28      	ldr	r3, [pc, #160]	; (80066b0 <SystemClock_Config+0xcc>)
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	4a27      	ldr	r2, [pc, #156]	; (80066b0 <SystemClock_Config+0xcc>)
 8006612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006616:	6413      	str	r3, [r2, #64]	; 0x40
 8006618:	4b25      	ldr	r3, [pc, #148]	; (80066b0 <SystemClock_Config+0xcc>)
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006620:	60bb      	str	r3, [r7, #8]
 8006622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006624:	2300      	movs	r3, #0
 8006626:	607b      	str	r3, [r7, #4]
 8006628:	4b22      	ldr	r3, [pc, #136]	; (80066b4 <SystemClock_Config+0xd0>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a21      	ldr	r2, [pc, #132]	; (80066b4 <SystemClock_Config+0xd0>)
 800662e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	4b1f      	ldr	r3, [pc, #124]	; (80066b4 <SystemClock_Config+0xd0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800663c:	607b      	str	r3, [r7, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006640:	2301      	movs	r3, #1
 8006642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800664a:	2302      	movs	r3, #2
 800664c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800664e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006654:	2304      	movs	r3, #4
 8006656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006658:	23a8      	movs	r3, #168	; 0xa8
 800665a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800665c:	2302      	movs	r3, #2
 800665e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006660:	2304      	movs	r3, #4
 8006662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006664:	f107 0320 	add.w	r3, r7, #32
 8006668:	4618      	mov	r0, r3
 800666a:	f002 fd6f 	bl	800914c <HAL_RCC_OscConfig>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006674:	f000 f820 	bl	80066b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006678:	230f      	movs	r3, #15
 800667a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800667c:	2302      	movs	r3, #2
 800667e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006680:	2300      	movs	r3, #0
 8006682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800668a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800668e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006690:	f107 030c 	add.w	r3, r7, #12
 8006694:	2105      	movs	r1, #5
 8006696:	4618      	mov	r0, r3
 8006698:	f002 ffd0 	bl	800963c <HAL_RCC_ClockConfig>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80066a2:	f000 f809 	bl	80066b8 <Error_Handler>
  }
}
 80066a6:	bf00      	nop
 80066a8:	3750      	adds	r7, #80	; 0x50
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40023800 	.word	0x40023800
 80066b4:	40007000 	.word	0x40007000

080066b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80066b8:	b480      	push	{r7}
 80066ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80066bc:	b672      	cpsid	i
}
 80066be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80066c0:	e7fe      	b.n	80066c0 <Error_Handler+0x8>
	...

080066c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066ca:	2300      	movs	r3, #0
 80066cc:	607b      	str	r3, [r7, #4]
 80066ce:	4b10      	ldr	r3, [pc, #64]	; (8006710 <HAL_MspInit+0x4c>)
 80066d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d2:	4a0f      	ldr	r2, [pc, #60]	; (8006710 <HAL_MspInit+0x4c>)
 80066d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066d8:	6453      	str	r3, [r2, #68]	; 0x44
 80066da:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <HAL_MspInit+0x4c>)
 80066dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e2:	607b      	str	r3, [r7, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80066e6:	2300      	movs	r3, #0
 80066e8:	603b      	str	r3, [r7, #0]
 80066ea:	4b09      	ldr	r3, [pc, #36]	; (8006710 <HAL_MspInit+0x4c>)
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	4a08      	ldr	r2, [pc, #32]	; (8006710 <HAL_MspInit+0x4c>)
 80066f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f4:	6413      	str	r3, [r2, #64]	; 0x40
 80066f6:	4b06      	ldr	r3, [pc, #24]	; (8006710 <HAL_MspInit+0x4c>)
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40023800 	.word	0x40023800

08006714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8006718:	e7fe      	b.n	8006718 <NMI_Handler+0x4>

0800671a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800671a:	b480      	push	{r7}
 800671c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800671e:	e7fe      	b.n	800671e <HardFault_Handler+0x4>

08006720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006724:	e7fe      	b.n	8006724 <MemManage_Handler+0x4>

08006726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006726:	b480      	push	{r7}
 8006728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800672a:	e7fe      	b.n	800672a <BusFault_Handler+0x4>

0800672c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006730:	e7fe      	b.n	8006730 <UsageFault_Handler+0x4>

08006732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006732:	b480      	push	{r7}
 8006734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006736:	bf00      	nop
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006740:	b480      	push	{r7}
 8006742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800674e:	b480      	push	{r7}
 8006750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006752:	bf00      	nop
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006760:	f000 fc6a 	bl	8007038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006764:	bf00      	nop
 8006766:	bd80      	pop	{r7, pc}

08006768 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006768:	b590      	push	{r4, r7, lr}
 800676a:	b083      	sub	sp, #12
 800676c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800676e:	2001      	movs	r0, #1
 8006770:	f001 fb88 	bl	8007e84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	HAL_Delay(20);
 8006774:	2014      	movs	r0, #20
 8006776:	f000 fc7f 	bl	8007078 <HAL_Delay>
	if (KY_UP == GPIO_PIN_SET) {
 800677a:	2101      	movs	r1, #1
 800677c:	4820      	ldr	r0, [pc, #128]	; (8006800 <EXTI0_IRQHandler+0x98>)
 800677e:	f001 fb4f 	bl	8007e20 <HAL_GPIO_ReadPin>
 8006782:	4603      	mov	r3, r0
 8006784:	2b01      	cmp	r3, #1
 8006786:	d137      	bne.n	80067f8 <EXTI0_IRQHandler+0x90>
		printf("KY_UP按键按下。。。。。\r\n");
 8006788:	481e      	ldr	r0, [pc, #120]	; (8006804 <EXTI0_IRQHandler+0x9c>)
 800678a:	f005 fb1b 	bl	800bdc4 <puts>
		HAL_TIM_Base_Stop(&htim5);
 800678e:	481e      	ldr	r0, [pc, #120]	; (8006808 <EXTI0_IRQHandler+0xa0>)
 8006790:	f003 fa4c 	bl	8009c2c <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8006794:	4b1c      	ldr	r3, [pc, #112]	; (8006808 <EXTI0_IRQHandler+0xa0>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2200      	movs	r2, #0
 800679a:	625a      	str	r2, [r3, #36]	; 0x24
		LCD_Fill(30, 700, 400, 750, WHITE);
 800679c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	f240 23ee 	movw	r3, #750	; 0x2ee
 80067a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80067aa:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80067ae:	201e      	movs	r0, #30
 80067b0:	f7fd fd2c 	bl	800420c <LCD_Fill>
		//让舵机角度再次回到初始值
		PCA9685_SetServoAngle(0, 90);
 80067b4:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800680c <EXTI0_IRQHandler+0xa4>
 80067b8:	2000      	movs	r0, #0
 80067ba:	f7fe f8f5 	bl	80049a8 <PCA9685_SetServoAngle>
		PCA9685_SetServoAngle(1, 90);
 80067be:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800680c <EXTI0_IRQHandler+0xa4>
 80067c2:	2001      	movs	r0, #1
 80067c4:	f7fe f8f0 	bl	80049a8 <PCA9685_SetServoAngle>

		//使用矩形键盘设置模式
		SelecMode(0);
 80067c8:	2000      	movs	r0, #0
 80067ca:	f7ff fae3 	bl	8005d94 <SelecMode>
		printf("%d  %d  %d  %d  %d\r\n", Mode[0], Mode[1], Mode[2], Mode[3], Mode[4]);
 80067ce:	4b10      	ldr	r3, [pc, #64]	; (8006810 <EXTI0_IRQHandler+0xa8>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	4619      	mov	r1, r3
 80067d4:	4b0e      	ldr	r3, [pc, #56]	; (8006810 <EXTI0_IRQHandler+0xa8>)
 80067d6:	785b      	ldrb	r3, [r3, #1]
 80067d8:	4618      	mov	r0, r3
 80067da:	4b0d      	ldr	r3, [pc, #52]	; (8006810 <EXTI0_IRQHandler+0xa8>)
 80067dc:	789b      	ldrb	r3, [r3, #2]
 80067de:	461c      	mov	r4, r3
 80067e0:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <EXTI0_IRQHandler+0xa8>)
 80067e2:	78db      	ldrb	r3, [r3, #3]
 80067e4:	461a      	mov	r2, r3
 80067e6:	4b0a      	ldr	r3, [pc, #40]	; (8006810 <EXTI0_IRQHandler+0xa8>)
 80067e8:	791b      	ldrb	r3, [r3, #4]
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	9200      	str	r2, [sp, #0]
 80067ee:	4623      	mov	r3, r4
 80067f0:	4602      	mov	r2, r0
 80067f2:	4808      	ldr	r0, [pc, #32]	; (8006814 <EXTI0_IRQHandler+0xac>)
 80067f4:	f005 fa60 	bl	800bcb8 <iprintf>
	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 80067f8:	bf00      	nop
 80067fa:	3704      	adds	r7, #4
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd90      	pop	{r4, r7, pc}
 8006800:	40020000 	.word	0x40020000
 8006804:	0800f898 	.word	0x0800f898
 8006808:	200004ac 	.word	0x200004ac
 800680c:	42b40000 	.word	0x42b40000
 8006810:	200002a8 	.word	0x200002a8
 8006814:	0800f8bc 	.word	0x0800f8bc

08006818 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800681c:	4802      	ldr	r0, [pc, #8]	; (8006828 <TIM2_IRQHandler+0x10>)
 800681e:	f003 fa2c 	bl	8009c7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006822:	bf00      	nop
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	200004f4 	.word	0x200004f4

0800682c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006830:	4803      	ldr	r0, [pc, #12]	; (8006840 <USART1_IRQHandler+0x14>)
 8006832:	f003 fec3 	bl	800a5bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	// 新添加的函数，用来处理串口空闲中断
	USER_UART_IRQHandler(&huart1);
 8006836:	4802      	ldr	r0, [pc, #8]	; (8006840 <USART1_IRQHandler+0x14>)
 8006838:	f000 fb5c 	bl	8006ef4 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 800683c:	bf00      	nop
 800683e:	bd80      	pop	{r7, pc}
 8006840:	2000059c 	.word	0x2000059c

08006844 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006848:	4802      	ldr	r0, [pc, #8]	; (8006854 <DMA2_Stream2_IRQHandler+0x10>)
 800684a:	f000 fee3 	bl	8007614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800684e:	bf00      	nop
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	2000053c 	.word	0x2000053c

08006858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
	return 1;
 800685c:	2301      	movs	r3, #1
}
 800685e:	4618      	mov	r0, r3
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <_kill>:

int _kill(int pid, int sig)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006872:	f004 fd85 	bl	800b380 <__errno>
 8006876:	4603      	mov	r3, r0
 8006878:	2216      	movs	r2, #22
 800687a:	601a      	str	r2, [r3, #0]
	return -1;
 800687c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006880:	4618      	mov	r0, r3
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <_exit>:

void _exit (int status)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006890:	f04f 31ff 	mov.w	r1, #4294967295
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff ffe7 	bl	8006868 <_kill>
	while (1) {}		/* Make sure we hang here */
 800689a:	e7fe      	b.n	800689a <_exit+0x12>

0800689c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068a8:	2300      	movs	r3, #0
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	e00a      	b.n	80068c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80068ae:	f3af 8000 	nop.w
 80068b2:	4601      	mov	r1, r0
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	60ba      	str	r2, [r7, #8]
 80068ba:	b2ca      	uxtb	r2, r1
 80068bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	3301      	adds	r3, #1
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	dbf0      	blt.n	80068ae <_read+0x12>
	}

return len;
 80068cc:	687b      	ldr	r3, [r7, #4]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b086      	sub	sp, #24
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068e2:	2300      	movs	r3, #0
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	e009      	b.n	80068fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	60ba      	str	r2, [r7, #8]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff fbf5 	bl	80060e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	3301      	adds	r3, #1
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	429a      	cmp	r2, r3
 8006902:	dbf1      	blt.n	80068e8 <_write+0x12>
	}
	return len;
 8006904:	687b      	ldr	r3, [r7, #4]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <_close>:

int _close(int file)
{
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
	return -1;
 8006916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800691a:	4618      	mov	r0, r3
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006936:	605a      	str	r2, [r3, #4]
	return 0;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <_isatty>:

int _isatty(int file)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
	return 1;
 800694e:	2301      	movs	r3, #1
}
 8006950:	4618      	mov	r0, r3
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
	return 0;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
	...

08006978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006980:	4a14      	ldr	r2, [pc, #80]	; (80069d4 <_sbrk+0x5c>)
 8006982:	4b15      	ldr	r3, [pc, #84]	; (80069d8 <_sbrk+0x60>)
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800698c:	4b13      	ldr	r3, [pc, #76]	; (80069dc <_sbrk+0x64>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d102      	bne.n	800699a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006994:	4b11      	ldr	r3, [pc, #68]	; (80069dc <_sbrk+0x64>)
 8006996:	4a12      	ldr	r2, [pc, #72]	; (80069e0 <_sbrk+0x68>)
 8006998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800699a:	4b10      	ldr	r3, [pc, #64]	; (80069dc <_sbrk+0x64>)
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4413      	add	r3, r2
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d207      	bcs.n	80069b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80069a8:	f004 fcea 	bl	800b380 <__errno>
 80069ac:	4603      	mov	r3, r0
 80069ae:	220c      	movs	r2, #12
 80069b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80069b2:	f04f 33ff 	mov.w	r3, #4294967295
 80069b6:	e009      	b.n	80069cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80069b8:	4b08      	ldr	r3, [pc, #32]	; (80069dc <_sbrk+0x64>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80069be:	4b07      	ldr	r3, [pc, #28]	; (80069dc <_sbrk+0x64>)
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4413      	add	r3, r2
 80069c6:	4a05      	ldr	r2, [pc, #20]	; (80069dc <_sbrk+0x64>)
 80069c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80069ca:	68fb      	ldr	r3, [r7, #12]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	20020000 	.word	0x20020000
 80069d8:	00000400 	.word	0x00000400
 80069dc:	200002b4 	.word	0x200002b4
 80069e0:	200005f8 	.word	0x200005f8

080069e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80069e4:	b480      	push	{r7}
 80069e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80069e8:	4b06      	ldr	r3, [pc, #24]	; (8006a04 <SystemInit+0x20>)
 80069ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ee:	4a05      	ldr	r2, [pc, #20]	; (8006a04 <SystemInit+0x20>)
 80069f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80069f8:	bf00      	nop
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	e000ed00 	.word	0xe000ed00

08006a08 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a0e:	f107 0308 	add.w	r3, r7, #8
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	605a      	str	r2, [r3, #4]
 8006a18:	609a      	str	r2, [r3, #8]
 8006a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a1c:	463b      	mov	r3, r7
 8006a1e:	2200      	movs	r2, #0
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006a24:	4b1e      	ldr	r3, [pc, #120]	; (8006aa0 <MX_TIM2_Init+0x98>)
 8006a26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006a2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8006a2c:	4b1c      	ldr	r3, [pc, #112]	; (8006aa0 <MX_TIM2_Init+0x98>)
 8006a2e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8006a32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a34:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <MX_TIM2_Init+0x98>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8006a3a:	4b19      	ldr	r3, [pc, #100]	; (8006aa0 <MX_TIM2_Init+0x98>)
 8006a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a42:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <MX_TIM2_Init+0x98>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a48:	4b15      	ldr	r3, [pc, #84]	; (8006aa0 <MX_TIM2_Init+0x98>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006a4e:	4814      	ldr	r0, [pc, #80]	; (8006aa0 <MX_TIM2_Init+0x98>)
 8006a50:	f003 f834 	bl	8009abc <HAL_TIM_Base_Init>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006a5a:	f7ff fe2d 	bl	80066b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006a64:	f107 0308 	add.w	r3, r7, #8
 8006a68:	4619      	mov	r1, r3
 8006a6a:	480d      	ldr	r0, [pc, #52]	; (8006aa0 <MX_TIM2_Init+0x98>)
 8006a6c:	f003 fa0d 	bl	8009e8a <HAL_TIM_ConfigClockSource>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006a76:	f7ff fe1f 	bl	80066b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006a82:	463b      	mov	r3, r7
 8006a84:	4619      	mov	r1, r3
 8006a86:	4806      	ldr	r0, [pc, #24]	; (8006aa0 <MX_TIM2_Init+0x98>)
 8006a88:	f003 fc30 	bl	800a2ec <HAL_TIMEx_MasterConfigSynchronization>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006a92:	f7ff fe11 	bl	80066b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006a96:	bf00      	nop
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	200004f4 	.word	0x200004f4

08006aa4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006aaa:	f107 0308 	add.w	r3, r7, #8
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	605a      	str	r2, [r3, #4]
 8006ab4:	609a      	str	r2, [r3, #8]
 8006ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ab8:	463b      	mov	r3, r7
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8006ac0:	4b1d      	ldr	r3, [pc, #116]	; (8006b38 <MX_TIM5_Init+0x94>)
 8006ac2:	4a1e      	ldr	r2, [pc, #120]	; (8006b3c <MX_TIM5_Init+0x98>)
 8006ac4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400-1;
 8006ac6:	4b1c      	ldr	r3, [pc, #112]	; (8006b38 <MX_TIM5_Init+0x94>)
 8006ac8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8006acc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ace:	4b1a      	ldr	r3, [pc, #104]	; (8006b38 <MX_TIM5_Init+0x94>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8006ad4:	4b18      	ldr	r3, [pc, #96]	; (8006b38 <MX_TIM5_Init+0x94>)
 8006ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8006ada:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006adc:	4b16      	ldr	r3, [pc, #88]	; (8006b38 <MX_TIM5_Init+0x94>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ae2:	4b15      	ldr	r3, [pc, #84]	; (8006b38 <MX_TIM5_Init+0x94>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8006ae8:	4813      	ldr	r0, [pc, #76]	; (8006b38 <MX_TIM5_Init+0x94>)
 8006aea:	f002 ffe7 	bl	8009abc <HAL_TIM_Base_Init>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8006af4:	f7ff fde0 	bl	80066b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006afc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8006afe:	f107 0308 	add.w	r3, r7, #8
 8006b02:	4619      	mov	r1, r3
 8006b04:	480c      	ldr	r0, [pc, #48]	; (8006b38 <MX_TIM5_Init+0x94>)
 8006b06:	f003 f9c0 	bl	8009e8a <HAL_TIM_ConfigClockSource>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8006b10:	f7ff fdd2 	bl	80066b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b14:	2300      	movs	r3, #0
 8006b16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4805      	ldr	r0, [pc, #20]	; (8006b38 <MX_TIM5_Init+0x94>)
 8006b22:	f003 fbe3 	bl	800a2ec <HAL_TIMEx_MasterConfigSynchronization>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8006b2c:	f7ff fdc4 	bl	80066b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8006b30:	bf00      	nop
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	200004ac 	.word	0x200004ac
 8006b3c:	40000c00 	.word	0x40000c00

08006b40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b50:	d116      	bne.n	8006b80 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	4b16      	ldr	r3, [pc, #88]	; (8006bb0 <HAL_TIM_Base_MspInit+0x70>)
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	4a15      	ldr	r2, [pc, #84]	; (8006bb0 <HAL_TIM_Base_MspInit+0x70>)
 8006b5c:	f043 0301 	orr.w	r3, r3, #1
 8006b60:	6413      	str	r3, [r2, #64]	; 0x40
 8006b62:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <HAL_TIM_Base_MspInit+0x70>)
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006b6e:	2200      	movs	r2, #0
 8006b70:	2100      	movs	r1, #0
 8006b72:	201c      	movs	r0, #28
 8006b74:	f000 fb7f 	bl	8007276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006b78:	201c      	movs	r0, #28
 8006b7a:	f000 fb98 	bl	80072ae <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8006b7e:	e012      	b.n	8006ba6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a0b      	ldr	r2, [pc, #44]	; (8006bb4 <HAL_TIM_Base_MspInit+0x74>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d10d      	bne.n	8006ba6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60bb      	str	r3, [r7, #8]
 8006b8e:	4b08      	ldr	r3, [pc, #32]	; (8006bb0 <HAL_TIM_Base_MspInit+0x70>)
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	4a07      	ldr	r2, [pc, #28]	; (8006bb0 <HAL_TIM_Base_MspInit+0x70>)
 8006b94:	f043 0308 	orr.w	r3, r3, #8
 8006b98:	6413      	str	r3, [r2, #64]	; 0x40
 8006b9a:	4b05      	ldr	r3, [pc, #20]	; (8006bb0 <HAL_TIM_Base_MspInit+0x70>)
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	60bb      	str	r3, [r7, #8]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
}
 8006ba6:	bf00      	nop
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	40000c00 	.word	0x40000c00

08006bb8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006bbc:	4b17      	ldr	r3, [pc, #92]	; (8006c1c <MX_USART1_UART_Init+0x64>)
 8006bbe:	4a18      	ldr	r2, [pc, #96]	; (8006c20 <MX_USART1_UART_Init+0x68>)
 8006bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006bc2:	4b16      	ldr	r3, [pc, #88]	; (8006c1c <MX_USART1_UART_Init+0x64>)
 8006bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006bca:	4b14      	ldr	r3, [pc, #80]	; (8006c1c <MX_USART1_UART_Init+0x64>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006bd0:	4b12      	ldr	r3, [pc, #72]	; (8006c1c <MX_USART1_UART_Init+0x64>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006bd6:	4b11      	ldr	r3, [pc, #68]	; (8006c1c <MX_USART1_UART_Init+0x64>)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006bdc:	4b0f      	ldr	r3, [pc, #60]	; (8006c1c <MX_USART1_UART_Init+0x64>)
 8006bde:	220c      	movs	r2, #12
 8006be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006be2:	4b0e      	ldr	r3, [pc, #56]	; (8006c1c <MX_USART1_UART_Init+0x64>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006be8:	4b0c      	ldr	r3, [pc, #48]	; (8006c1c <MX_USART1_UART_Init+0x64>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006bee:	480b      	ldr	r0, [pc, #44]	; (8006c1c <MX_USART1_UART_Init+0x64>)
 8006bf0:	f003 fc0c 	bl	800a40c <HAL_UART_Init>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006bfa:	f7ff fd5d 	bl	80066b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);  // 使能串口空闲中断
 8006bfe:	4b07      	ldr	r3, [pc, #28]	; (8006c1c <MX_USART1_UART_Init+0x64>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <MX_USART1_UART_Init+0x64>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f042 0210 	orr.w	r2, r2, #16
 8006c0c:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) receive_buff, 8); //设置DMA传输，将串口1的数据搬运到recvive_buff中，每次8个字节
 8006c0e:	2208      	movs	r2, #8
 8006c10:	4904      	ldr	r1, [pc, #16]	; (8006c24 <MX_USART1_UART_Init+0x6c>)
 8006c12:	4802      	ldr	r0, [pc, #8]	; (8006c1c <MX_USART1_UART_Init+0x64>)
 8006c14:	f003 fc47 	bl	800a4a6 <HAL_UART_Receive_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8006c18:	bf00      	nop
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	2000059c 	.word	0x2000059c
 8006c20:	40011000 	.word	0x40011000
 8006c24:	20000208 	.word	0x20000208

08006c28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	; 0x28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c30:	f107 0314 	add.w	r3, r7, #20
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	605a      	str	r2, [r3, #4]
 8006c3a:	609a      	str	r2, [r3, #8]
 8006c3c:	60da      	str	r2, [r3, #12]
 8006c3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a35      	ldr	r2, [pc, #212]	; (8006d1c <HAL_UART_MspInit+0xf4>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d164      	bne.n	8006d14 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	4b34      	ldr	r3, [pc, #208]	; (8006d20 <HAL_UART_MspInit+0xf8>)
 8006c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c52:	4a33      	ldr	r2, [pc, #204]	; (8006d20 <HAL_UART_MspInit+0xf8>)
 8006c54:	f043 0310 	orr.w	r3, r3, #16
 8006c58:	6453      	str	r3, [r2, #68]	; 0x44
 8006c5a:	4b31      	ldr	r3, [pc, #196]	; (8006d20 <HAL_UART_MspInit+0xf8>)
 8006c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5e:	f003 0310 	and.w	r3, r3, #16
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	4b2d      	ldr	r3, [pc, #180]	; (8006d20 <HAL_UART_MspInit+0xf8>)
 8006c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6e:	4a2c      	ldr	r2, [pc, #176]	; (8006d20 <HAL_UART_MspInit+0xf8>)
 8006c70:	f043 0301 	orr.w	r3, r3, #1
 8006c74:	6313      	str	r3, [r2, #48]	; 0x30
 8006c76:	4b2a      	ldr	r3, [pc, #168]	; (8006d20 <HAL_UART_MspInit+0xf8>)
 8006c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006c82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c88:	2302      	movs	r3, #2
 8006c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c90:	2303      	movs	r3, #3
 8006c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006c94:	2307      	movs	r3, #7
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c98:	f107 0314 	add.w	r3, r7, #20
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	4821      	ldr	r0, [pc, #132]	; (8006d24 <HAL_UART_MspInit+0xfc>)
 8006ca0:	f000 ff22 	bl	8007ae8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006ca4:	4b20      	ldr	r3, [pc, #128]	; (8006d28 <HAL_UART_MspInit+0x100>)
 8006ca6:	4a21      	ldr	r2, [pc, #132]	; (8006d2c <HAL_UART_MspInit+0x104>)
 8006ca8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006caa:	4b1f      	ldr	r3, [pc, #124]	; (8006d28 <HAL_UART_MspInit+0x100>)
 8006cac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006cb0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cb2:	4b1d      	ldr	r3, [pc, #116]	; (8006d28 <HAL_UART_MspInit+0x100>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cb8:	4b1b      	ldr	r3, [pc, #108]	; (8006d28 <HAL_UART_MspInit+0x100>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006cbe:	4b1a      	ldr	r3, [pc, #104]	; (8006d28 <HAL_UART_MspInit+0x100>)
 8006cc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cc4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006cc6:	4b18      	ldr	r3, [pc, #96]	; (8006d28 <HAL_UART_MspInit+0x100>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ccc:	4b16      	ldr	r3, [pc, #88]	; (8006d28 <HAL_UART_MspInit+0x100>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006cd2:	4b15      	ldr	r3, [pc, #84]	; (8006d28 <HAL_UART_MspInit+0x100>)
 8006cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cd8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006cda:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <HAL_UART_MspInit+0x100>)
 8006cdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006ce0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ce2:	4b11      	ldr	r3, [pc, #68]	; (8006d28 <HAL_UART_MspInit+0x100>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006ce8:	480f      	ldr	r0, [pc, #60]	; (8006d28 <HAL_UART_MspInit+0x100>)
 8006cea:	f000 fafb 	bl	80072e4 <HAL_DMA_Init>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8006cf4:	f7ff fce0 	bl	80066b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a0b      	ldr	r2, [pc, #44]	; (8006d28 <HAL_UART_MspInit+0x100>)
 8006cfc:	639a      	str	r2, [r3, #56]	; 0x38
 8006cfe:	4a0a      	ldr	r2, [pc, #40]	; (8006d28 <HAL_UART_MspInit+0x100>)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8006d04:	2200      	movs	r2, #0
 8006d06:	2101      	movs	r1, #1
 8006d08:	2025      	movs	r0, #37	; 0x25
 8006d0a:	f000 fab4 	bl	8007276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006d0e:	2025      	movs	r0, #37	; 0x25
 8006d10:	f000 facd 	bl	80072ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006d14:	bf00      	nop
 8006d16:	3728      	adds	r7, #40	; 0x28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	40011000 	.word	0x40011000
 8006d20:	40023800 	.word	0x40023800
 8006d24:	40020000 	.word	0x40020000
 8006d28:	2000053c 	.word	0x2000053c
 8006d2c:	40026440 	.word	0x40026440

08006d30 <asc2int>:
  }
}

/* USER CODE BEGIN 1 */
uint16_t asc2int(uint8_t huns, uint8_t tens, uint8_t ones)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4603      	mov	r3, r0
 8006d38:	71fb      	strb	r3, [r7, #7]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	71bb      	strb	r3, [r7, #6]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	717b      	strb	r3, [r7, #5]
	uint16_t number = (huns-48) * 100 + (tens-48) * 10 + (ones-48);
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	3b30      	subs	r3, #48	; 0x30
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	461a      	mov	r2, r3
 8006d4a:	0092      	lsls	r2, r2, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	461a      	mov	r2, r3
 8006d50:	0091      	lsls	r1, r2, #2
 8006d52:	461a      	mov	r2, r3
 8006d54:	460b      	mov	r3, r1
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	79bb      	ldrb	r3, [r7, #6]
 8006d5e:	3b30      	subs	r3, #48	; 0x30
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	4619      	mov	r1, r3
 8006d64:	0089      	lsls	r1, r1, #2
 8006d66:	440b      	add	r3, r1
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	4413      	add	r3, r2
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	797b      	ldrb	r3, [r7, #5]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	4413      	add	r3, r2
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b30      	subs	r3, #48	; 0x30
 8006d7a:	81fb      	strh	r3, [r7, #14]
	return number;
 8006d7c:	89fb      	ldrh	r3, [r7, #14]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <USAR_UART_IDLECallback>:

/* USER CODE BEGIN 1 */
void USAR_UART_IDLECallback(UART_HandleTypeDef *huart) {
 8006d8c:	b590      	push	{r4, r7, lr}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	//数据传输的格式为abcd(x轴,y轴)ef
	uint8_t start = 0, end = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	73fb      	strb	r3, [r7, #15]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73bb      	strb	r3, [r7, #14]
	uint8_t isStart = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	737b      	strb	r3, [r7, #13]
	// 停止本次DMA传输
	HAL_UART_DMAStop(&huart1);
 8006da0:	484f      	ldr	r0, [pc, #316]	; (8006ee0 <USAR_UART_IDLECallback+0x154>)
 8006da2:	f003 fbb0 	bl	800a506 <HAL_UART_DMAStop>

	// 计算接收到的数据长度
	uint8_t data_length = BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8006da6:	4b4f      	ldr	r3, [pc, #316]	; (8006ee4 <USAR_UART_IDLECallback+0x158>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	f1c3 0320 	rsb	r3, r3, #32
 8006db2:	72fb      	strb	r3, [r7, #11]

	for (uint8_t i = 0; i < 32; i++) {
 8006db4:	2300      	movs	r3, #0
 8006db6:	733b      	strb	r3, [r7, #12]
 8006db8:	e040      	b.n	8006e3c <USAR_UART_IDLECallback+0xb0>
		if (isStart == 0 && receive_buff[i] == 0x61) {
 8006dba:	7b7b      	ldrb	r3, [r7, #13]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d122      	bne.n	8006e06 <USAR_UART_IDLECallback+0x7a>
 8006dc0:	7b3b      	ldrb	r3, [r7, #12]
 8006dc2:	4a49      	ldr	r2, [pc, #292]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006dc4:	5cd3      	ldrb	r3, [r2, r3]
 8006dc6:	2b61      	cmp	r3, #97	; 0x61
 8006dc8:	d11d      	bne.n	8006e06 <USAR_UART_IDLECallback+0x7a>
			if (receive_buff[i] == 0x61 && receive_buff[i + 1] == 0x62
 8006dca:	7b3b      	ldrb	r3, [r7, #12]
 8006dcc:	4a46      	ldr	r2, [pc, #280]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006dce:	5cd3      	ldrb	r3, [r2, r3]
 8006dd0:	2b61      	cmp	r3, #97	; 0x61
 8006dd2:	d118      	bne.n	8006e06 <USAR_UART_IDLECallback+0x7a>
 8006dd4:	7b3b      	ldrb	r3, [r7, #12]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	4a43      	ldr	r2, [pc, #268]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006dda:	5cd3      	ldrb	r3, [r2, r3]
 8006ddc:	2b62      	cmp	r3, #98	; 0x62
 8006dde:	d112      	bne.n	8006e06 <USAR_UART_IDLECallback+0x7a>
					&& receive_buff[i + 2] == 0x63
 8006de0:	7b3b      	ldrb	r3, [r7, #12]
 8006de2:	3302      	adds	r3, #2
 8006de4:	4a40      	ldr	r2, [pc, #256]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006de6:	5cd3      	ldrb	r3, [r2, r3]
 8006de8:	2b63      	cmp	r3, #99	; 0x63
 8006dea:	d10c      	bne.n	8006e06 <USAR_UART_IDLECallback+0x7a>
					&& receive_buff[i + 3] == 0x64) {
 8006dec:	7b3b      	ldrb	r3, [r7, #12]
 8006dee:	3303      	adds	r3, #3
 8006df0:	4a3d      	ldr	r2, [pc, #244]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006df2:	5cd3      	ldrb	r3, [r2, r3]
 8006df4:	2b64      	cmp	r3, #100	; 0x64
 8006df6:	d106      	bne.n	8006e06 <USAR_UART_IDLECallback+0x7a>
				i += 4;
 8006df8:	7b3b      	ldrb	r3, [r7, #12]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	733b      	strb	r3, [r7, #12]
				start = i;
 8006dfe:	7b3b      	ldrb	r3, [r7, #12]
 8006e00:	73fb      	strb	r3, [r7, #15]
				isStart = 1;
 8006e02:	2301      	movs	r3, #1
 8006e04:	737b      	strb	r3, [r7, #13]
			}
		}
		if(isStart == 1 && receive_buff[i] == 0x65)
 8006e06:	7b7b      	ldrb	r3, [r7, #13]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d114      	bne.n	8006e36 <USAR_UART_IDLECallback+0xaa>
 8006e0c:	7b3b      	ldrb	r3, [r7, #12]
 8006e0e:	4a36      	ldr	r2, [pc, #216]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006e10:	5cd3      	ldrb	r3, [r2, r3]
 8006e12:	2b65      	cmp	r3, #101	; 0x65
 8006e14:	d10f      	bne.n	8006e36 <USAR_UART_IDLECallback+0xaa>
		{
			if(receive_buff[i] == 0x65 && receive_buff[i+1] == 0x66){
 8006e16:	7b3b      	ldrb	r3, [r7, #12]
 8006e18:	4a33      	ldr	r2, [pc, #204]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006e1a:	5cd3      	ldrb	r3, [r2, r3]
 8006e1c:	2b65      	cmp	r3, #101	; 0x65
 8006e1e:	d10a      	bne.n	8006e36 <USAR_UART_IDLECallback+0xaa>
 8006e20:	7b3b      	ldrb	r3, [r7, #12]
 8006e22:	3301      	adds	r3, #1
 8006e24:	4a30      	ldr	r2, [pc, #192]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006e26:	5cd3      	ldrb	r3, [r2, r3]
 8006e28:	2b66      	cmp	r3, #102	; 0x66
 8006e2a:	d104      	bne.n	8006e36 <USAR_UART_IDLECallback+0xaa>
				end = i - 1;
 8006e2c:	7b3b      	ldrb	r3, [r7, #12]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	73bb      	strb	r3, [r7, #14]
				isStart = 2;
 8006e32:	2302      	movs	r3, #2
 8006e34:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < 32; i++) {
 8006e36:	7b3b      	ldrb	r3, [r7, #12]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	733b      	strb	r3, [r7, #12]
 8006e3c:	7b3b      	ldrb	r3, [r7, #12]
 8006e3e:	2b1f      	cmp	r3, #31
 8006e40:	d9bb      	bls.n	8006dba <USAR_UART_IDLECallback+0x2e>
			}
		}
	}
	if (isStart == 2) {
 8006e42:	7b7b      	ldrb	r3, [r7, #13]
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d13a      	bne.n	8006ebe <USAR_UART_IDLECallback+0x132>
//				printf("%x\r\n", receive_buff[i]);
//			} else {
//				printf("%x ", receive_buff[i]);
//			}
//		}
		coordinate_XY[i][0] = asc2int(receive_buff[start], receive_buff[start+1], receive_buff[start+2]);
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	4a27      	ldr	r2, [pc, #156]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006e4c:	5cd0      	ldrb	r0, [r2, r3]
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
 8006e50:	3301      	adds	r3, #1
 8006e52:	4a25      	ldr	r2, [pc, #148]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006e54:	5cd1      	ldrb	r1, [r2, r3]
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	3302      	adds	r3, #2
 8006e5a:	4a23      	ldr	r2, [pc, #140]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006e5c:	5cd3      	ldrb	r3, [r2, r3]
 8006e5e:	4a23      	ldr	r2, [pc, #140]	; (8006eec <USAR_UART_IDLECallback+0x160>)
 8006e60:	7812      	ldrb	r2, [r2, #0]
 8006e62:	4614      	mov	r4, r2
 8006e64:	461a      	mov	r2, r3
 8006e66:	f7ff ff63 	bl	8006d30 <asc2int>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4b20      	ldr	r3, [pc, #128]	; (8006ef0 <USAR_UART_IDLECallback+0x164>)
 8006e70:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
		coordinate_XY[i][1] = asc2int(receive_buff[end-2], receive_buff[end-1], receive_buff[end]);
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	3b02      	subs	r3, #2
 8006e78:	4a1b      	ldr	r2, [pc, #108]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006e7a:	5cd0      	ldrb	r0, [r2, r3]
 8006e7c:	7bbb      	ldrb	r3, [r7, #14]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	4a19      	ldr	r2, [pc, #100]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006e82:	5cd1      	ldrb	r1, [r2, r3]
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	4a18      	ldr	r2, [pc, #96]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006e88:	5cd3      	ldrb	r3, [r2, r3]
 8006e8a:	4a18      	ldr	r2, [pc, #96]	; (8006eec <USAR_UART_IDLECallback+0x160>)
 8006e8c:	7812      	ldrb	r2, [r2, #0]
 8006e8e:	4614      	mov	r4, r2
 8006e90:	461a      	mov	r2, r3
 8006e92:	f7ff ff4d 	bl	8006d30 <asc2int>
 8006e96:	4603      	mov	r3, r0
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4a15      	ldr	r2, [pc, #84]	; (8006ef0 <USAR_UART_IDLECallback+0x164>)
 8006e9c:	00a3      	lsls	r3, r4, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	460a      	mov	r2, r1
 8006ea2:	805a      	strh	r2, [r3, #2]

//		printf("%d %d\r\n", coordinate_XY[i][0], coordinate_XY[i][1]);

		i++;
 8006ea4:	4b11      	ldr	r3, [pc, #68]	; (8006eec <USAR_UART_IDLECallback+0x160>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	4b0f      	ldr	r3, [pc, #60]	; (8006eec <USAR_UART_IDLECallback+0x160>)
 8006eae:	701a      	strb	r2, [r3, #0]
		if (i >= 31) {
 8006eb0:	4b0e      	ldr	r3, [pc, #56]	; (8006eec <USAR_UART_IDLECallback+0x160>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	2b1e      	cmp	r3, #30
 8006eb6:	d902      	bls.n	8006ebe <USAR_UART_IDLECallback+0x132>
			i = 0;
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <USAR_UART_IDLECallback+0x160>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
		}
	}

// 清零接收缓冲区
	memset(receive_buff, 0, data_length);
 8006ebe:	7afb      	ldrb	r3, [r7, #11]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	4808      	ldr	r0, [pc, #32]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006ec6:	f004 fa85 	bl	800b3d4 <memset>
	data_length = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	72fb      	strb	r3, [r7, #11]

// 重启开始DMA传输 每次255字节数据
	HAL_UART_Receive_DMA(&huart1, (uint8_t*) receive_buff, 32);
 8006ece:	2220      	movs	r2, #32
 8006ed0:	4905      	ldr	r1, [pc, #20]	; (8006ee8 <USAR_UART_IDLECallback+0x15c>)
 8006ed2:	4803      	ldr	r0, [pc, #12]	; (8006ee0 <USAR_UART_IDLECallback+0x154>)
 8006ed4:	f003 fae7 	bl	800a4a6 <HAL_UART_Receive_DMA>
}
 8006ed8:	bf00      	nop
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd90      	pop	{r4, r7, pc}
 8006ee0:	2000059c 	.word	0x2000059c
 8006ee4:	2000053c 	.word	0x2000053c
 8006ee8:	20000208 	.word	0x20000208
 8006eec:	200002ae 	.word	0x200002ae
 8006ef0:	20000228 	.word	0x20000228

08006ef4 <USER_UART_IRQHandler>:
void USER_UART_IRQHandler(UART_HandleTypeDef *huart) {	// 判断是否是串口1
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
//	printf("\r\n进入中断函数.....\r\n");
	if (USART1 == huart->Instance) {	// 判断是否是空闲中断
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a0d      	ldr	r2, [pc, #52]	; (8006f38 <USER_UART_IRQHandler+0x44>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d114      	bne.n	8006f30 <USER_UART_IRQHandler+0x3c>
		if (RESET != __HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {// 清除空闲中断标志（否则会一直不断进入中断）
 8006f06:	4b0d      	ldr	r3, [pc, #52]	; (8006f3c <USER_UART_IRQHandler+0x48>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0310 	and.w	r3, r3, #16
 8006f10:	2b10      	cmp	r3, #16
 8006f12:	d10d      	bne.n	8006f30 <USER_UART_IRQHandler+0x3c>
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	4b08      	ldr	r3, [pc, #32]	; (8006f3c <USER_UART_IRQHandler+0x48>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	4b06      	ldr	r3, [pc, #24]	; (8006f3c <USER_UART_IRQHandler+0x48>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	68fb      	ldr	r3, [r7, #12]
			// 调用中断处理函数
			USAR_UART_IDLECallback(huart);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff ff2e 	bl	8006d8c <USAR_UART_IDLECallback>
		}
	}
}
 8006f30:	bf00      	nop
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40011000 	.word	0x40011000
 8006f3c:	2000059c 	.word	0x2000059c

08006f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006f78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006f44:	480d      	ldr	r0, [pc, #52]	; (8006f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006f46:	490e      	ldr	r1, [pc, #56]	; (8006f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006f48:	4a0e      	ldr	r2, [pc, #56]	; (8006f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f4c:	e002      	b.n	8006f54 <LoopCopyDataInit>

08006f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f52:	3304      	adds	r3, #4

08006f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f58:	d3f9      	bcc.n	8006f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f5a:	4a0b      	ldr	r2, [pc, #44]	; (8006f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006f5c:	4c0b      	ldr	r4, [pc, #44]	; (8006f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8006f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f60:	e001      	b.n	8006f66 <LoopFillZerobss>

08006f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f64:	3204      	adds	r2, #4

08006f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f68:	d3fb      	bcc.n	8006f62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006f6a:	f7ff fd3b 	bl	80069e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006f6e:	f004 fa0d 	bl	800b38c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006f72:	f7ff fb1d 	bl	80065b0 <main>
  bx  lr    
 8006f76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006f80:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8006f84:	0801cb98 	.word	0x0801cb98
  ldr r2, =_sbss
 8006f88:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8006f8c:	200005f4 	.word	0x200005f4

08006f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006f90:	e7fe      	b.n	8006f90 <ADC_IRQHandler>
	...

08006f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006f98:	4b0e      	ldr	r3, [pc, #56]	; (8006fd4 <HAL_Init+0x40>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a0d      	ldr	r2, [pc, #52]	; (8006fd4 <HAL_Init+0x40>)
 8006f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <HAL_Init+0x40>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a0a      	ldr	r2, [pc, #40]	; (8006fd4 <HAL_Init+0x40>)
 8006faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006fb0:	4b08      	ldr	r3, [pc, #32]	; (8006fd4 <HAL_Init+0x40>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a07      	ldr	r2, [pc, #28]	; (8006fd4 <HAL_Init+0x40>)
 8006fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006fbc:	2003      	movs	r0, #3
 8006fbe:	f000 f94f 	bl	8007260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	f000 f808 	bl	8006fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006fc8:	f7ff fb7c 	bl	80066c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	40023c00 	.word	0x40023c00

08006fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006fe0:	4b12      	ldr	r3, [pc, #72]	; (800702c <HAL_InitTick+0x54>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	4b12      	ldr	r3, [pc, #72]	; (8007030 <HAL_InitTick+0x58>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 f967 	bl	80072ca <HAL_SYSTICK_Config>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e00e      	b.n	8007024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b0f      	cmp	r3, #15
 800700a:	d80a      	bhi.n	8007022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800700c:	2200      	movs	r2, #0
 800700e:	6879      	ldr	r1, [r7, #4]
 8007010:	f04f 30ff 	mov.w	r0, #4294967295
 8007014:	f000 f92f 	bl	8007276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007018:	4a06      	ldr	r2, [pc, #24]	; (8007034 <HAL_InitTick+0x5c>)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	e000      	b.n	8007024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
}
 8007024:	4618      	mov	r0, r3
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	20000008 	.word	0x20000008
 8007030:	20000010 	.word	0x20000010
 8007034:	2000000c 	.word	0x2000000c

08007038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007038:	b480      	push	{r7}
 800703a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800703c:	4b06      	ldr	r3, [pc, #24]	; (8007058 <HAL_IncTick+0x20>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	4b06      	ldr	r3, [pc, #24]	; (800705c <HAL_IncTick+0x24>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4413      	add	r3, r2
 8007048:	4a04      	ldr	r2, [pc, #16]	; (800705c <HAL_IncTick+0x24>)
 800704a:	6013      	str	r3, [r2, #0]
}
 800704c:	bf00      	nop
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	20000010 	.word	0x20000010
 800705c:	200005e0 	.word	0x200005e0

08007060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
  return uwTick;
 8007064:	4b03      	ldr	r3, [pc, #12]	; (8007074 <HAL_GetTick+0x14>)
 8007066:	681b      	ldr	r3, [r3, #0]
}
 8007068:	4618      	mov	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	200005e0 	.word	0x200005e0

08007078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007080:	f7ff ffee 	bl	8007060 <HAL_GetTick>
 8007084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007090:	d005      	beq.n	800709e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007092:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <HAL_Delay+0x44>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800709e:	bf00      	nop
 80070a0:	f7ff ffde 	bl	8007060 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d8f7      	bhi.n	80070a0 <HAL_Delay+0x28>
  {
  }
}
 80070b0:	bf00      	nop
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	20000010 	.word	0x20000010

080070c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f003 0307 	and.w	r3, r3, #7
 80070ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070d0:	4b0c      	ldr	r3, [pc, #48]	; (8007104 <__NVIC_SetPriorityGrouping+0x44>)
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070dc:	4013      	ands	r3, r2
 80070de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80070ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070f2:	4a04      	ldr	r2, [pc, #16]	; (8007104 <__NVIC_SetPriorityGrouping+0x44>)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	60d3      	str	r3, [r2, #12]
}
 80070f8:	bf00      	nop
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	e000ed00 	.word	0xe000ed00

08007108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800710c:	4b04      	ldr	r3, [pc, #16]	; (8007120 <__NVIC_GetPriorityGrouping+0x18>)
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	0a1b      	lsrs	r3, r3, #8
 8007112:	f003 0307 	and.w	r3, r3, #7
}
 8007116:	4618      	mov	r0, r3
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	e000ed00 	.word	0xe000ed00

08007124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800712e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007132:	2b00      	cmp	r3, #0
 8007134:	db0b      	blt.n	800714e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007136:	79fb      	ldrb	r3, [r7, #7]
 8007138:	f003 021f 	and.w	r2, r3, #31
 800713c:	4907      	ldr	r1, [pc, #28]	; (800715c <__NVIC_EnableIRQ+0x38>)
 800713e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007142:	095b      	lsrs	r3, r3, #5
 8007144:	2001      	movs	r0, #1
 8007146:	fa00 f202 	lsl.w	r2, r0, r2
 800714a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	e000e100 	.word	0xe000e100

08007160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	6039      	str	r1, [r7, #0]
 800716a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800716c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007170:	2b00      	cmp	r3, #0
 8007172:	db0a      	blt.n	800718a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	b2da      	uxtb	r2, r3
 8007178:	490c      	ldr	r1, [pc, #48]	; (80071ac <__NVIC_SetPriority+0x4c>)
 800717a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800717e:	0112      	lsls	r2, r2, #4
 8007180:	b2d2      	uxtb	r2, r2
 8007182:	440b      	add	r3, r1
 8007184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007188:	e00a      	b.n	80071a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	b2da      	uxtb	r2, r3
 800718e:	4908      	ldr	r1, [pc, #32]	; (80071b0 <__NVIC_SetPriority+0x50>)
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	f003 030f 	and.w	r3, r3, #15
 8007196:	3b04      	subs	r3, #4
 8007198:	0112      	lsls	r2, r2, #4
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	440b      	add	r3, r1
 800719e:	761a      	strb	r2, [r3, #24]
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	e000e100 	.word	0xe000e100
 80071b0:	e000ed00 	.word	0xe000ed00

080071b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b089      	sub	sp, #36	; 0x24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	f1c3 0307 	rsb	r3, r3, #7
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	bf28      	it	cs
 80071d2:	2304      	movcs	r3, #4
 80071d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	3304      	adds	r3, #4
 80071da:	2b06      	cmp	r3, #6
 80071dc:	d902      	bls.n	80071e4 <NVIC_EncodePriority+0x30>
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	3b03      	subs	r3, #3
 80071e2:	e000      	b.n	80071e6 <NVIC_EncodePriority+0x32>
 80071e4:	2300      	movs	r3, #0
 80071e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071e8:	f04f 32ff 	mov.w	r2, #4294967295
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	43da      	mvns	r2, r3
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	401a      	ands	r2, r3
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071fc:	f04f 31ff 	mov.w	r1, #4294967295
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	fa01 f303 	lsl.w	r3, r1, r3
 8007206:	43d9      	mvns	r1, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800720c:	4313      	orrs	r3, r2
         );
}
 800720e:	4618      	mov	r0, r3
 8007210:	3724      	adds	r7, #36	; 0x24
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
	...

0800721c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3b01      	subs	r3, #1
 8007228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800722c:	d301      	bcc.n	8007232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800722e:	2301      	movs	r3, #1
 8007230:	e00f      	b.n	8007252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007232:	4a0a      	ldr	r2, [pc, #40]	; (800725c <SysTick_Config+0x40>)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3b01      	subs	r3, #1
 8007238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800723a:	210f      	movs	r1, #15
 800723c:	f04f 30ff 	mov.w	r0, #4294967295
 8007240:	f7ff ff8e 	bl	8007160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007244:	4b05      	ldr	r3, [pc, #20]	; (800725c <SysTick_Config+0x40>)
 8007246:	2200      	movs	r2, #0
 8007248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800724a:	4b04      	ldr	r3, [pc, #16]	; (800725c <SysTick_Config+0x40>)
 800724c:	2207      	movs	r2, #7
 800724e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	e000e010 	.word	0xe000e010

08007260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7ff ff29 	bl	80070c0 <__NVIC_SetPriorityGrouping>
}
 800726e:	bf00      	nop
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007276:	b580      	push	{r7, lr}
 8007278:	b086      	sub	sp, #24
 800727a:	af00      	add	r7, sp, #0
 800727c:	4603      	mov	r3, r0
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007284:	2300      	movs	r3, #0
 8007286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007288:	f7ff ff3e 	bl	8007108 <__NVIC_GetPriorityGrouping>
 800728c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	6978      	ldr	r0, [r7, #20]
 8007294:	f7ff ff8e 	bl	80071b4 <NVIC_EncodePriority>
 8007298:	4602      	mov	r2, r0
 800729a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800729e:	4611      	mov	r1, r2
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7ff ff5d 	bl	8007160 <__NVIC_SetPriority>
}
 80072a6:	bf00      	nop
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	4603      	mov	r3, r0
 80072b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff ff31 	bl	8007124 <__NVIC_EnableIRQ>
}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff ffa2 	bl	800721c <SysTick_Config>
 80072d8:	4603      	mov	r3, r0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80072f0:	f7ff feb6 	bl	8007060 <HAL_GetTick>
 80072f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e099      	b.n	8007434 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0201 	bic.w	r2, r2, #1
 800731e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007320:	e00f      	b.n	8007342 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007322:	f7ff fe9d 	bl	8007060 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b05      	cmp	r3, #5
 800732e:	d908      	bls.n	8007342 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2220      	movs	r2, #32
 8007334:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2203      	movs	r2, #3
 800733a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e078      	b.n	8007434 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1e8      	bne.n	8007322 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	4b38      	ldr	r3, [pc, #224]	; (800743c <HAL_DMA_Init+0x158>)
 800735c:	4013      	ands	r3, r2
 800735e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800736e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800737a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	2b04      	cmp	r3, #4
 800739a:	d107      	bne.n	80073ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a4:	4313      	orrs	r3, r2
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f023 0307 	bic.w	r3, r3, #7
 80073c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d117      	bne.n	8007406 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00e      	beq.n	8007406 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fb01 	bl	80079f0 <DMA_CheckFifoParam>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d008      	beq.n	8007406 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2240      	movs	r2, #64	; 0x40
 80073f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007402:	2301      	movs	r3, #1
 8007404:	e016      	b.n	8007434 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fab8 	bl	8007984 <DMA_CalcBaseAndBitshift>
 8007414:	4603      	mov	r3, r0
 8007416:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800741c:	223f      	movs	r2, #63	; 0x3f
 800741e:	409a      	lsls	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	f010803f 	.word	0xf010803f

08007440 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007456:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800745e:	2b01      	cmp	r3, #1
 8007460:	d101      	bne.n	8007466 <HAL_DMA_Start_IT+0x26>
 8007462:	2302      	movs	r3, #2
 8007464:	e040      	b.n	80074e8 <HAL_DMA_Start_IT+0xa8>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b01      	cmp	r3, #1
 8007478:	d12f      	bne.n	80074da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2202      	movs	r2, #2
 800747e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	68b9      	ldr	r1, [r7, #8]
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f000 fa4a 	bl	8007928 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007498:	223f      	movs	r2, #63	; 0x3f
 800749a:	409a      	lsls	r2, r3
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f042 0216 	orr.w	r2, r2, #22
 80074ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d007      	beq.n	80074c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0208 	orr.w	r2, r2, #8
 80074c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0201 	orr.w	r2, r2, #1
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	e005      	b.n	80074e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80074e2:	2302      	movs	r3, #2
 80074e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80074fe:	f7ff fdaf 	bl	8007060 <HAL_GetTick>
 8007502:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d008      	beq.n	8007522 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2280      	movs	r2, #128	; 0x80
 8007514:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e052      	b.n	80075c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0216 	bic.w	r2, r2, #22
 8007530:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695a      	ldr	r2, [r3, #20]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007540:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d103      	bne.n	8007552 <HAL_DMA_Abort+0x62>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0208 	bic.w	r2, r2, #8
 8007560:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0201 	bic.w	r2, r2, #1
 8007570:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007572:	e013      	b.n	800759c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007574:	f7ff fd74 	bl	8007060 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b05      	cmp	r3, #5
 8007580:	d90c      	bls.n	800759c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2220      	movs	r2, #32
 8007586:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2203      	movs	r2, #3
 8007594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e015      	b.n	80075c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1e4      	bne.n	8007574 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ae:	223f      	movs	r2, #63	; 0x3f
 80075b0:	409a      	lsls	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d004      	beq.n	80075ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2280      	movs	r2, #128	; 0x80
 80075e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e00c      	b.n	8007608 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2205      	movs	r2, #5
 80075f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0201 	bic.w	r2, r2, #1
 8007604:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007620:	4b92      	ldr	r3, [pc, #584]	; (800786c <HAL_DMA_IRQHandler+0x258>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a92      	ldr	r2, [pc, #584]	; (8007870 <HAL_DMA_IRQHandler+0x25c>)
 8007626:	fba2 2303 	umull	r2, r3, r2, r3
 800762a:	0a9b      	lsrs	r3, r3, #10
 800762c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007632:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800763e:	2208      	movs	r2, #8
 8007640:	409a      	lsls	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4013      	ands	r3, r2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d01a      	beq.n	8007680 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b00      	cmp	r3, #0
 8007656:	d013      	beq.n	8007680 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0204 	bic.w	r2, r2, #4
 8007666:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800766c:	2208      	movs	r2, #8
 800766e:	409a      	lsls	r2, r3
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007678:	f043 0201 	orr.w	r2, r3, #1
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007684:	2201      	movs	r2, #1
 8007686:	409a      	lsls	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4013      	ands	r3, r2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d012      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a2:	2201      	movs	r2, #1
 80076a4:	409a      	lsls	r2, r3
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ae:	f043 0202 	orr.w	r2, r3, #2
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ba:	2204      	movs	r2, #4
 80076bc:	409a      	lsls	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	4013      	ands	r3, r2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d012      	beq.n	80076ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d8:	2204      	movs	r2, #4
 80076da:	409a      	lsls	r2, r3
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e4:	f043 0204 	orr.w	r2, r3, #4
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f0:	2210      	movs	r2, #16
 80076f2:	409a      	lsls	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4013      	ands	r3, r2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d043      	beq.n	8007784 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0308 	and.w	r3, r3, #8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d03c      	beq.n	8007784 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800770e:	2210      	movs	r2, #16
 8007710:	409a      	lsls	r2, r3
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d018      	beq.n	8007756 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d108      	bne.n	8007744 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	2b00      	cmp	r3, #0
 8007738:	d024      	beq.n	8007784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4798      	blx	r3
 8007742:	e01f      	b.n	8007784 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01b      	beq.n	8007784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	4798      	blx	r3
 8007754:	e016      	b.n	8007784 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007760:	2b00      	cmp	r3, #0
 8007762:	d107      	bne.n	8007774 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 0208 	bic.w	r2, r2, #8
 8007772:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007788:	2220      	movs	r2, #32
 800778a:	409a      	lsls	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4013      	ands	r3, r2
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 808e 	beq.w	80078b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0310 	and.w	r3, r3, #16
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 8086 	beq.w	80078b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077aa:	2220      	movs	r2, #32
 80077ac:	409a      	lsls	r2, r3
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b05      	cmp	r3, #5
 80077bc:	d136      	bne.n	800782c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0216 	bic.w	r2, r2, #22
 80077cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695a      	ldr	r2, [r3, #20]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d103      	bne.n	80077ee <HAL_DMA_IRQHandler+0x1da>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d007      	beq.n	80077fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 0208 	bic.w	r2, r2, #8
 80077fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007802:	223f      	movs	r2, #63	; 0x3f
 8007804:	409a      	lsls	r2, r3
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781e:	2b00      	cmp	r3, #0
 8007820:	d07d      	beq.n	800791e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
        }
        return;
 800782a:	e078      	b.n	800791e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d01c      	beq.n	8007874 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d108      	bne.n	800785a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784c:	2b00      	cmp	r3, #0
 800784e:	d030      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	4798      	blx	r3
 8007858:	e02b      	b.n	80078b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785e:	2b00      	cmp	r3, #0
 8007860:	d027      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
 800786a:	e022      	b.n	80078b2 <HAL_DMA_IRQHandler+0x29e>
 800786c:	20000008 	.word	0x20000008
 8007870:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10f      	bne.n	80078a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0210 	bic.w	r2, r2, #16
 8007890:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d032      	beq.n	8007920 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d022      	beq.n	800790c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2205      	movs	r2, #5
 80078ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0201 	bic.w	r2, r2, #1
 80078dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	3301      	adds	r3, #1
 80078e2:	60bb      	str	r3, [r7, #8]
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d307      	bcc.n	80078fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1f2      	bne.n	80078de <HAL_DMA_IRQHandler+0x2ca>
 80078f8:	e000      	b.n	80078fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80078fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007910:	2b00      	cmp	r3, #0
 8007912:	d005      	beq.n	8007920 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	4798      	blx	r3
 800791c:	e000      	b.n	8007920 <HAL_DMA_IRQHandler+0x30c>
        return;
 800791e:	bf00      	nop
    }
  }
}
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop

08007928 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
 8007934:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007944:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	2b40      	cmp	r3, #64	; 0x40
 8007954:	d108      	bne.n	8007968 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007966:	e007      	b.n	8007978 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	60da      	str	r2, [r3, #12]
}
 8007978:	bf00      	nop
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	b2db      	uxtb	r3, r3
 8007992:	3b10      	subs	r3, #16
 8007994:	4a14      	ldr	r2, [pc, #80]	; (80079e8 <DMA_CalcBaseAndBitshift+0x64>)
 8007996:	fba2 2303 	umull	r2, r3, r2, r3
 800799a:	091b      	lsrs	r3, r3, #4
 800799c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800799e:	4a13      	ldr	r2, [pc, #76]	; (80079ec <DMA_CalcBaseAndBitshift+0x68>)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d909      	bls.n	80079c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80079ba:	f023 0303 	bic.w	r3, r3, #3
 80079be:	1d1a      	adds	r2, r3, #4
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	659a      	str	r2, [r3, #88]	; 0x58
 80079c4:	e007      	b.n	80079d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80079ce:	f023 0303 	bic.w	r3, r3, #3
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	aaaaaaab 	.word	0xaaaaaaab
 80079ec:	0801c5c4 	.word	0x0801c5c4

080079f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b085      	sub	sp, #20
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d11f      	bne.n	8007a4a <DMA_CheckFifoParam+0x5a>
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b03      	cmp	r3, #3
 8007a0e:	d856      	bhi.n	8007abe <DMA_CheckFifoParam+0xce>
 8007a10:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <DMA_CheckFifoParam+0x28>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a29 	.word	0x08007a29
 8007a1c:	08007a3b 	.word	0x08007a3b
 8007a20:	08007a29 	.word	0x08007a29
 8007a24:	08007abf 	.word	0x08007abf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d046      	beq.n	8007ac2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a38:	e043      	b.n	8007ac2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a42:	d140      	bne.n	8007ac6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a48:	e03d      	b.n	8007ac6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a52:	d121      	bne.n	8007a98 <DMA_CheckFifoParam+0xa8>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d837      	bhi.n	8007aca <DMA_CheckFifoParam+0xda>
 8007a5a:	a201      	add	r2, pc, #4	; (adr r2, 8007a60 <DMA_CheckFifoParam+0x70>)
 8007a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a60:	08007a71 	.word	0x08007a71
 8007a64:	08007a77 	.word	0x08007a77
 8007a68:	08007a71 	.word	0x08007a71
 8007a6c:	08007a89 	.word	0x08007a89
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	73fb      	strb	r3, [r7, #15]
      break;
 8007a74:	e030      	b.n	8007ad8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d025      	beq.n	8007ace <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a86:	e022      	b.n	8007ace <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a90:	d11f      	bne.n	8007ad2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007a96:	e01c      	b.n	8007ad2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d903      	bls.n	8007aa6 <DMA_CheckFifoParam+0xb6>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d003      	beq.n	8007aac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007aa4:	e018      	b.n	8007ad8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8007aaa:	e015      	b.n	8007ad8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00e      	beq.n	8007ad6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	73fb      	strb	r3, [r7, #15]
      break;
 8007abc:	e00b      	b.n	8007ad6 <DMA_CheckFifoParam+0xe6>
      break;
 8007abe:	bf00      	nop
 8007ac0:	e00a      	b.n	8007ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8007ac2:	bf00      	nop
 8007ac4:	e008      	b.n	8007ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8007ac6:	bf00      	nop
 8007ac8:	e006      	b.n	8007ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8007aca:	bf00      	nop
 8007acc:	e004      	b.n	8007ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8007ace:	bf00      	nop
 8007ad0:	e002      	b.n	8007ad8 <DMA_CheckFifoParam+0xe8>
      break;   
 8007ad2:	bf00      	nop
 8007ad4:	e000      	b.n	8007ad8 <DMA_CheckFifoParam+0xe8>
      break;
 8007ad6:	bf00      	nop
    }
  } 
  
  return status; 
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop

08007ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b089      	sub	sp, #36	; 0x24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007afe:	2300      	movs	r3, #0
 8007b00:	61fb      	str	r3, [r7, #28]
 8007b02:	e16b      	b.n	8007ddc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007b04:	2201      	movs	r2, #1
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	4013      	ands	r3, r2
 8007b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	f040 815a 	bne.w	8007dd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f003 0303 	and.w	r3, r3, #3
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d005      	beq.n	8007b3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d130      	bne.n	8007b9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	2203      	movs	r2, #3
 8007b46:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4a:	43db      	mvns	r3, r3
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	4013      	ands	r3, r2
 8007b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	005b      	lsls	r3, r3, #1
 8007b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5e:	69ba      	ldr	r2, [r7, #24]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007b70:	2201      	movs	r2, #1
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	43db      	mvns	r3, r3
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	091b      	lsrs	r3, r3, #4
 8007b86:	f003 0201 	and.w	r2, r3, #1
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f003 0303 	and.w	r3, r3, #3
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d017      	beq.n	8007bd8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	005b      	lsls	r3, r3, #1
 8007bb2:	2203      	movs	r2, #3
 8007bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb8:	43db      	mvns	r3, r3
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f003 0303 	and.w	r3, r3, #3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d123      	bne.n	8007c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	08da      	lsrs	r2, r3, #3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3208      	adds	r2, #8
 8007bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	220f      	movs	r2, #15
 8007bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007c00:	43db      	mvns	r3, r3
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	4013      	ands	r3, r2
 8007c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	691a      	ldr	r2, [r3, #16]
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	f003 0307 	and.w	r3, r3, #7
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	fa02 f303 	lsl.w	r3, r2, r3
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	08da      	lsrs	r2, r3, #3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3208      	adds	r2, #8
 8007c26:	69b9      	ldr	r1, [r7, #24]
 8007c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	2203      	movs	r2, #3
 8007c38:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3c:	43db      	mvns	r3, r3
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	4013      	ands	r3, r2
 8007c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f003 0203 	and.w	r2, r3, #3
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	005b      	lsls	r3, r3, #1
 8007c50:	fa02 f303 	lsl.w	r3, r2, r3
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 80b4 	beq.w	8007dd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	4b60      	ldr	r3, [pc, #384]	; (8007df4 <HAL_GPIO_Init+0x30c>)
 8007c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c76:	4a5f      	ldr	r2, [pc, #380]	; (8007df4 <HAL_GPIO_Init+0x30c>)
 8007c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8007c7e:	4b5d      	ldr	r3, [pc, #372]	; (8007df4 <HAL_GPIO_Init+0x30c>)
 8007c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c8a:	4a5b      	ldr	r2, [pc, #364]	; (8007df8 <HAL_GPIO_Init+0x310>)
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	089b      	lsrs	r3, r3, #2
 8007c90:	3302      	adds	r3, #2
 8007c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	220f      	movs	r2, #15
 8007ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca6:	43db      	mvns	r3, r3
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	4013      	ands	r3, r2
 8007cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a52      	ldr	r2, [pc, #328]	; (8007dfc <HAL_GPIO_Init+0x314>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d02b      	beq.n	8007d0e <HAL_GPIO_Init+0x226>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a51      	ldr	r2, [pc, #324]	; (8007e00 <HAL_GPIO_Init+0x318>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d025      	beq.n	8007d0a <HAL_GPIO_Init+0x222>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a50      	ldr	r2, [pc, #320]	; (8007e04 <HAL_GPIO_Init+0x31c>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d01f      	beq.n	8007d06 <HAL_GPIO_Init+0x21e>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a4f      	ldr	r2, [pc, #316]	; (8007e08 <HAL_GPIO_Init+0x320>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d019      	beq.n	8007d02 <HAL_GPIO_Init+0x21a>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a4e      	ldr	r2, [pc, #312]	; (8007e0c <HAL_GPIO_Init+0x324>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d013      	beq.n	8007cfe <HAL_GPIO_Init+0x216>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a4d      	ldr	r2, [pc, #308]	; (8007e10 <HAL_GPIO_Init+0x328>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00d      	beq.n	8007cfa <HAL_GPIO_Init+0x212>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a4c      	ldr	r2, [pc, #304]	; (8007e14 <HAL_GPIO_Init+0x32c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d007      	beq.n	8007cf6 <HAL_GPIO_Init+0x20e>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a4b      	ldr	r2, [pc, #300]	; (8007e18 <HAL_GPIO_Init+0x330>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d101      	bne.n	8007cf2 <HAL_GPIO_Init+0x20a>
 8007cee:	2307      	movs	r3, #7
 8007cf0:	e00e      	b.n	8007d10 <HAL_GPIO_Init+0x228>
 8007cf2:	2308      	movs	r3, #8
 8007cf4:	e00c      	b.n	8007d10 <HAL_GPIO_Init+0x228>
 8007cf6:	2306      	movs	r3, #6
 8007cf8:	e00a      	b.n	8007d10 <HAL_GPIO_Init+0x228>
 8007cfa:	2305      	movs	r3, #5
 8007cfc:	e008      	b.n	8007d10 <HAL_GPIO_Init+0x228>
 8007cfe:	2304      	movs	r3, #4
 8007d00:	e006      	b.n	8007d10 <HAL_GPIO_Init+0x228>
 8007d02:	2303      	movs	r3, #3
 8007d04:	e004      	b.n	8007d10 <HAL_GPIO_Init+0x228>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e002      	b.n	8007d10 <HAL_GPIO_Init+0x228>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e000      	b.n	8007d10 <HAL_GPIO_Init+0x228>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	69fa      	ldr	r2, [r7, #28]
 8007d12:	f002 0203 	and.w	r2, r2, #3
 8007d16:	0092      	lsls	r2, r2, #2
 8007d18:	4093      	lsls	r3, r2
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d20:	4935      	ldr	r1, [pc, #212]	; (8007df8 <HAL_GPIO_Init+0x310>)
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	089b      	lsrs	r3, r3, #2
 8007d26:	3302      	adds	r3, #2
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007d2e:	4b3b      	ldr	r3, [pc, #236]	; (8007e1c <HAL_GPIO_Init+0x334>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	43db      	mvns	r3, r3
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007d52:	4a32      	ldr	r2, [pc, #200]	; (8007e1c <HAL_GPIO_Init+0x334>)
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007d58:	4b30      	ldr	r3, [pc, #192]	; (8007e1c <HAL_GPIO_Init+0x334>)
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	43db      	mvns	r3, r3
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	4013      	ands	r3, r2
 8007d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d003      	beq.n	8007d7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007d7c:	4a27      	ldr	r2, [pc, #156]	; (8007e1c <HAL_GPIO_Init+0x334>)
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007d82:	4b26      	ldr	r3, [pc, #152]	; (8007e1c <HAL_GPIO_Init+0x334>)
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	43db      	mvns	r3, r3
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007da6:	4a1d      	ldr	r2, [pc, #116]	; (8007e1c <HAL_GPIO_Init+0x334>)
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007dac:	4b1b      	ldr	r3, [pc, #108]	; (8007e1c <HAL_GPIO_Init+0x334>)
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	43db      	mvns	r3, r3
 8007db6:	69ba      	ldr	r2, [r7, #24]
 8007db8:	4013      	ands	r3, r2
 8007dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007dd0:	4a12      	ldr	r2, [pc, #72]	; (8007e1c <HAL_GPIO_Init+0x334>)
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	61fb      	str	r3, [r7, #28]
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	2b0f      	cmp	r3, #15
 8007de0:	f67f ae90 	bls.w	8007b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	3724      	adds	r7, #36	; 0x24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	40023800 	.word	0x40023800
 8007df8:	40013800 	.word	0x40013800
 8007dfc:	40020000 	.word	0x40020000
 8007e00:	40020400 	.word	0x40020400
 8007e04:	40020800 	.word	0x40020800
 8007e08:	40020c00 	.word	0x40020c00
 8007e0c:	40021000 	.word	0x40021000
 8007e10:	40021400 	.word	0x40021400
 8007e14:	40021800 	.word	0x40021800
 8007e18:	40021c00 	.word	0x40021c00
 8007e1c:	40013c00 	.word	0x40013c00

08007e20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691a      	ldr	r2, [r3, #16]
 8007e30:	887b      	ldrh	r3, [r7, #2]
 8007e32:	4013      	ands	r3, r2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
 8007e3c:	e001      	b.n	8007e42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	807b      	strh	r3, [r7, #2]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007e60:	787b      	ldrb	r3, [r7, #1]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e66:	887a      	ldrh	r2, [r7, #2]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007e6c:	e003      	b.n	8007e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007e6e:	887b      	ldrh	r3, [r7, #2]
 8007e70:	041a      	lsls	r2, r3, #16
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	619a      	str	r2, [r3, #24]
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
	...

08007e84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007e8e:	4b08      	ldr	r3, [pc, #32]	; (8007eb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e90:	695a      	ldr	r2, [r3, #20]
 8007e92:	88fb      	ldrh	r3, [r7, #6]
 8007e94:	4013      	ands	r3, r2
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d006      	beq.n	8007ea8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e9a:	4a05      	ldr	r2, [pc, #20]	; (8007eb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e9c:	88fb      	ldrh	r3, [r7, #6]
 8007e9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ea0:	88fb      	ldrh	r3, [r7, #6]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 f806 	bl	8007eb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007ea8:	bf00      	nop
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	40013c00 	.word	0x40013c00

08007eb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	4603      	mov	r3, r0
 8007ebc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007ebe:	bf00      	nop
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
	...

08007ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e12b      	b.n	8008136 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7fe fb14 	bl	8006520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2224      	movs	r2, #36	; 0x24
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0201 	bic.w	r2, r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007f30:	f001 fd58 	bl	80099e4 <HAL_RCC_GetPCLK1Freq>
 8007f34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	4a81      	ldr	r2, [pc, #516]	; (8008140 <HAL_I2C_Init+0x274>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d807      	bhi.n	8007f50 <HAL_I2C_Init+0x84>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4a80      	ldr	r2, [pc, #512]	; (8008144 <HAL_I2C_Init+0x278>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	bf94      	ite	ls
 8007f48:	2301      	movls	r3, #1
 8007f4a:	2300      	movhi	r3, #0
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	e006      	b.n	8007f5e <HAL_I2C_Init+0x92>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4a7d      	ldr	r2, [pc, #500]	; (8008148 <HAL_I2C_Init+0x27c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	bf94      	ite	ls
 8007f58:	2301      	movls	r3, #1
 8007f5a:	2300      	movhi	r3, #0
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d001      	beq.n	8007f66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e0e7      	b.n	8008136 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	4a78      	ldr	r2, [pc, #480]	; (800814c <HAL_I2C_Init+0x280>)
 8007f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f6e:	0c9b      	lsrs	r3, r3, #18
 8007f70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	4a6a      	ldr	r2, [pc, #424]	; (8008140 <HAL_I2C_Init+0x274>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d802      	bhi.n	8007fa0 <HAL_I2C_Init+0xd4>
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	e009      	b.n	8007fb4 <HAL_I2C_Init+0xe8>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007fa6:	fb02 f303 	mul.w	r3, r2, r3
 8007faa:	4a69      	ldr	r2, [pc, #420]	; (8008150 <HAL_I2C_Init+0x284>)
 8007fac:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb0:	099b      	lsrs	r3, r3, #6
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6812      	ldr	r2, [r2, #0]
 8007fb8:	430b      	orrs	r3, r1
 8007fba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007fc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	495c      	ldr	r1, [pc, #368]	; (8008140 <HAL_I2C_Init+0x274>)
 8007fd0:	428b      	cmp	r3, r1
 8007fd2:	d819      	bhi.n	8008008 <HAL_I2C_Init+0x13c>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	1e59      	subs	r1, r3, #1
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fe2:	1c59      	adds	r1, r3, #1
 8007fe4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007fe8:	400b      	ands	r3, r1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <HAL_I2C_Init+0x138>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	1e59      	subs	r1, r3, #1
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	005b      	lsls	r3, r3, #1
 8007ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008002:	e051      	b.n	80080a8 <HAL_I2C_Init+0x1dc>
 8008004:	2304      	movs	r3, #4
 8008006:	e04f      	b.n	80080a8 <HAL_I2C_Init+0x1dc>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d111      	bne.n	8008034 <HAL_I2C_Init+0x168>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	1e58      	subs	r0, r3, #1
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6859      	ldr	r1, [r3, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	440b      	add	r3, r1
 800801e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008022:	3301      	adds	r3, #1
 8008024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008028:	2b00      	cmp	r3, #0
 800802a:	bf0c      	ite	eq
 800802c:	2301      	moveq	r3, #1
 800802e:	2300      	movne	r3, #0
 8008030:	b2db      	uxtb	r3, r3
 8008032:	e012      	b.n	800805a <HAL_I2C_Init+0x18e>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	1e58      	subs	r0, r3, #1
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6859      	ldr	r1, [r3, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	440b      	add	r3, r1
 8008042:	0099      	lsls	r1, r3, #2
 8008044:	440b      	add	r3, r1
 8008046:	fbb0 f3f3 	udiv	r3, r0, r3
 800804a:	3301      	adds	r3, #1
 800804c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008050:	2b00      	cmp	r3, #0
 8008052:	bf0c      	ite	eq
 8008054:	2301      	moveq	r3, #1
 8008056:	2300      	movne	r3, #0
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <HAL_I2C_Init+0x196>
 800805e:	2301      	movs	r3, #1
 8008060:	e022      	b.n	80080a8 <HAL_I2C_Init+0x1dc>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10e      	bne.n	8008088 <HAL_I2C_Init+0x1bc>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	1e58      	subs	r0, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6859      	ldr	r1, [r3, #4]
 8008072:	460b      	mov	r3, r1
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	440b      	add	r3, r1
 8008078:	fbb0 f3f3 	udiv	r3, r0, r3
 800807c:	3301      	adds	r3, #1
 800807e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008086:	e00f      	b.n	80080a8 <HAL_I2C_Init+0x1dc>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	1e58      	subs	r0, r3, #1
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6859      	ldr	r1, [r3, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	440b      	add	r3, r1
 8008096:	0099      	lsls	r1, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	fbb0 f3f3 	udiv	r3, r0, r3
 800809e:	3301      	adds	r3, #1
 80080a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080a8:	6879      	ldr	r1, [r7, #4]
 80080aa:	6809      	ldr	r1, [r1, #0]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	69da      	ldr	r2, [r3, #28]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	431a      	orrs	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80080d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	6911      	ldr	r1, [r2, #16]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	68d2      	ldr	r2, [r2, #12]
 80080e2:	4311      	orrs	r1, r2
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	6812      	ldr	r2, [r2, #0]
 80080e8:	430b      	orrs	r3, r1
 80080ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	695a      	ldr	r2, [r3, #20]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	431a      	orrs	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	430a      	orrs	r2, r1
 8008106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0201 	orr.w	r2, r2, #1
 8008116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2220      	movs	r2, #32
 8008122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	000186a0 	.word	0x000186a0
 8008144:	001e847f 	.word	0x001e847f
 8008148:	003d08ff 	.word	0x003d08ff
 800814c:	431bde83 	.word	0x431bde83
 8008150:	10624dd3 	.word	0x10624dd3

08008154 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af02      	add	r7, sp, #8
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	607a      	str	r2, [r7, #4]
 800815e:	461a      	mov	r2, r3
 8008160:	460b      	mov	r3, r1
 8008162:	817b      	strh	r3, [r7, #10]
 8008164:	4613      	mov	r3, r2
 8008166:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008168:	f7fe ff7a 	bl	8007060 <HAL_GetTick>
 800816c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b20      	cmp	r3, #32
 8008178:	f040 80e0 	bne.w	800833c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	2319      	movs	r3, #25
 8008182:	2201      	movs	r2, #1
 8008184:	4970      	ldr	r1, [pc, #448]	; (8008348 <HAL_I2C_Master_Transmit+0x1f4>)
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 fe02 	bl	8008d90 <I2C_WaitOnFlagUntilTimeout>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008192:	2302      	movs	r3, #2
 8008194:	e0d3      	b.n	800833e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800819c:	2b01      	cmp	r3, #1
 800819e:	d101      	bne.n	80081a4 <HAL_I2C_Master_Transmit+0x50>
 80081a0:	2302      	movs	r3, #2
 80081a2:	e0cc      	b.n	800833e <HAL_I2C_Master_Transmit+0x1ea>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d007      	beq.n	80081ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f042 0201 	orr.w	r2, r2, #1
 80081c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2221      	movs	r2, #33	; 0x21
 80081de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2210      	movs	r2, #16
 80081e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	893a      	ldrh	r2, [r7, #8]
 80081fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008200:	b29a      	uxth	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4a50      	ldr	r2, [pc, #320]	; (800834c <HAL_I2C_Master_Transmit+0x1f8>)
 800820a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800820c:	8979      	ldrh	r1, [r7, #10]
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	6a3a      	ldr	r2, [r7, #32]
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 fbbc 	bl	8008990 <I2C_MasterRequestWrite>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e08d      	b.n	800833e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008222:	2300      	movs	r3, #0
 8008224:	613b      	str	r3, [r7, #16]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	613b      	str	r3, [r7, #16]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	613b      	str	r3, [r7, #16]
 8008236:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008238:	e066      	b.n	8008308 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	6a39      	ldr	r1, [r7, #32]
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 fe7c 	bl	8008f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00d      	beq.n	8008266 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824e:	2b04      	cmp	r3, #4
 8008250:	d107      	bne.n	8008262 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008260:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e06b      	b.n	800833e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	781a      	ldrb	r2, [r3, #0]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008280:	b29b      	uxth	r3, r3
 8008282:	3b01      	subs	r3, #1
 8008284:	b29a      	uxth	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800828e:	3b01      	subs	r3, #1
 8008290:	b29a      	uxth	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	2b04      	cmp	r3, #4
 80082a2:	d11b      	bne.n	80082dc <HAL_I2C_Master_Transmit+0x188>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d017      	beq.n	80082dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	781a      	ldrb	r2, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	1c5a      	adds	r2, r3, #1
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	3b01      	subs	r3, #1
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082d4:	3b01      	subs	r3, #1
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	6a39      	ldr	r1, [r7, #32]
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 fe6c 	bl	8008fbe <I2C_WaitOnBTFFlagUntilTimeout>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00d      	beq.n	8008308 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f0:	2b04      	cmp	r3, #4
 80082f2:	d107      	bne.n	8008304 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008302:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e01a      	b.n	800833e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800830c:	2b00      	cmp	r3, #0
 800830e:	d194      	bne.n	800823a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800831e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2220      	movs	r2, #32
 8008324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	e000      	b.n	800833e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800833c:	2302      	movs	r3, #2
  }
}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	00100002 	.word	0x00100002
 800834c:	ffff0000 	.word	0xffff0000

08008350 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b088      	sub	sp, #32
 8008354:	af02      	add	r7, sp, #8
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	4608      	mov	r0, r1
 800835a:	4611      	mov	r1, r2
 800835c:	461a      	mov	r2, r3
 800835e:	4603      	mov	r3, r0
 8008360:	817b      	strh	r3, [r7, #10]
 8008362:	460b      	mov	r3, r1
 8008364:	813b      	strh	r3, [r7, #8]
 8008366:	4613      	mov	r3, r2
 8008368:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800836a:	f7fe fe79 	bl	8007060 <HAL_GetTick>
 800836e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b20      	cmp	r3, #32
 800837a:	f040 80d9 	bne.w	8008530 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	2319      	movs	r3, #25
 8008384:	2201      	movs	r2, #1
 8008386:	496d      	ldr	r1, [pc, #436]	; (800853c <HAL_I2C_Mem_Write+0x1ec>)
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 fd01 	bl	8008d90 <I2C_WaitOnFlagUntilTimeout>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008394:	2302      	movs	r3, #2
 8008396:	e0cc      	b.n	8008532 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d101      	bne.n	80083a6 <HAL_I2C_Mem_Write+0x56>
 80083a2:	2302      	movs	r3, #2
 80083a4:	e0c5      	b.n	8008532 <HAL_I2C_Mem_Write+0x1e2>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d007      	beq.n	80083cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f042 0201 	orr.w	r2, r2, #1
 80083ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2221      	movs	r2, #33	; 0x21
 80083e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2240      	movs	r2, #64	; 0x40
 80083e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6a3a      	ldr	r2, [r7, #32]
 80083f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80083fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008402:	b29a      	uxth	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	4a4d      	ldr	r2, [pc, #308]	; (8008540 <HAL_I2C_Mem_Write+0x1f0>)
 800840c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800840e:	88f8      	ldrh	r0, [r7, #6]
 8008410:	893a      	ldrh	r2, [r7, #8]
 8008412:	8979      	ldrh	r1, [r7, #10]
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	9301      	str	r3, [sp, #4]
 8008418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	4603      	mov	r3, r0
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f000 fb38 	bl	8008a94 <I2C_RequestMemoryWrite>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d052      	beq.n	80084d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e081      	b.n	8008532 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 fd82 	bl	8008f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00d      	beq.n	800845a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008442:	2b04      	cmp	r3, #4
 8008444:	d107      	bne.n	8008456 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008454:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e06b      	b.n	8008532 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	781a      	ldrb	r2, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	1c5a      	adds	r2, r3, #1
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008474:	3b01      	subs	r3, #1
 8008476:	b29a      	uxth	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008480:	b29b      	uxth	r3, r3
 8008482:	3b01      	subs	r3, #1
 8008484:	b29a      	uxth	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	f003 0304 	and.w	r3, r3, #4
 8008494:	2b04      	cmp	r3, #4
 8008496:	d11b      	bne.n	80084d0 <HAL_I2C_Mem_Write+0x180>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800849c:	2b00      	cmp	r3, #0
 800849e:	d017      	beq.n	80084d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	781a      	ldrb	r2, [r3, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084ba:	3b01      	subs	r3, #1
 80084bc:	b29a      	uxth	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	3b01      	subs	r3, #1
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1aa      	bne.n	800842e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 fd6e 	bl	8008fbe <I2C_WaitOnBTFFlagUntilTimeout>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00d      	beq.n	8008504 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ec:	2b04      	cmp	r3, #4
 80084ee:	d107      	bne.n	8008500 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e016      	b.n	8008532 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2220      	movs	r2, #32
 8008518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	e000      	b.n	8008532 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008530:	2302      	movs	r3, #2
  }
}
 8008532:	4618      	mov	r0, r3
 8008534:	3718      	adds	r7, #24
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	00100002 	.word	0x00100002
 8008540:	ffff0000 	.word	0xffff0000

08008544 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b08c      	sub	sp, #48	; 0x30
 8008548:	af02      	add	r7, sp, #8
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	4608      	mov	r0, r1
 800854e:	4611      	mov	r1, r2
 8008550:	461a      	mov	r2, r3
 8008552:	4603      	mov	r3, r0
 8008554:	817b      	strh	r3, [r7, #10]
 8008556:	460b      	mov	r3, r1
 8008558:	813b      	strh	r3, [r7, #8]
 800855a:	4613      	mov	r3, r2
 800855c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800855e:	f7fe fd7f 	bl	8007060 <HAL_GetTick>
 8008562:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b20      	cmp	r3, #32
 800856e:	f040 8208 	bne.w	8008982 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	2319      	movs	r3, #25
 8008578:	2201      	movs	r2, #1
 800857a:	497b      	ldr	r1, [pc, #492]	; (8008768 <HAL_I2C_Mem_Read+0x224>)
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 fc07 	bl	8008d90 <I2C_WaitOnFlagUntilTimeout>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d001      	beq.n	800858c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008588:	2302      	movs	r3, #2
 800858a:	e1fb      	b.n	8008984 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008592:	2b01      	cmp	r3, #1
 8008594:	d101      	bne.n	800859a <HAL_I2C_Mem_Read+0x56>
 8008596:	2302      	movs	r3, #2
 8008598:	e1f4      	b.n	8008984 <HAL_I2C_Mem_Read+0x440>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d007      	beq.n	80085c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f042 0201 	orr.w	r2, r2, #1
 80085be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2222      	movs	r2, #34	; 0x22
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2240      	movs	r2, #64	; 0x40
 80085dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80085f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4a5b      	ldr	r2, [pc, #364]	; (800876c <HAL_I2C_Mem_Read+0x228>)
 8008600:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008602:	88f8      	ldrh	r0, [r7, #6]
 8008604:	893a      	ldrh	r2, [r7, #8]
 8008606:	8979      	ldrh	r1, [r7, #10]
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	9301      	str	r3, [sp, #4]
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	4603      	mov	r3, r0
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f000 fad4 	bl	8008bc0 <I2C_RequestMemoryRead>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e1b0      	b.n	8008984 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008626:	2b00      	cmp	r3, #0
 8008628:	d113      	bne.n	8008652 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800862a:	2300      	movs	r3, #0
 800862c:	623b      	str	r3, [r7, #32]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	623b      	str	r3, [r7, #32]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	623b      	str	r3, [r7, #32]
 800863e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	e184      	b.n	800895c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008656:	2b01      	cmp	r3, #1
 8008658:	d11b      	bne.n	8008692 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008668:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800866a:	2300      	movs	r3, #0
 800866c:	61fb      	str	r3, [r7, #28]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	61fb      	str	r3, [r7, #28]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	61fb      	str	r3, [r7, #28]
 800867e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	e164      	b.n	800895c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008696:	2b02      	cmp	r3, #2
 8008698:	d11b      	bne.n	80086d2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086ba:	2300      	movs	r3, #0
 80086bc:	61bb      	str	r3, [r7, #24]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	61bb      	str	r3, [r7, #24]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	61bb      	str	r3, [r7, #24]
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	e144      	b.n	800895c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086d2:	2300      	movs	r3, #0
 80086d4:	617b      	str	r3, [r7, #20]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	617b      	str	r3, [r7, #20]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80086e8:	e138      	b.n	800895c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	f200 80f1 	bhi.w	80088d6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d123      	bne.n	8008744 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 fc9d 	bl	8009040 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e139      	b.n	8008984 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	691a      	ldr	r2, [r3, #16]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871a:	b2d2      	uxtb	r2, r2
 800871c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800872c:	3b01      	subs	r3, #1
 800872e:	b29a      	uxth	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008738:	b29b      	uxth	r3, r3
 800873a:	3b01      	subs	r3, #1
 800873c:	b29a      	uxth	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008742:	e10b      	b.n	800895c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008748:	2b02      	cmp	r3, #2
 800874a:	d14e      	bne.n	80087ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008752:	2200      	movs	r2, #0
 8008754:	4906      	ldr	r1, [pc, #24]	; (8008770 <HAL_I2C_Mem_Read+0x22c>)
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 fb1a 	bl	8008d90 <I2C_WaitOnFlagUntilTimeout>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d008      	beq.n	8008774 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e10e      	b.n	8008984 <HAL_I2C_Mem_Read+0x440>
 8008766:	bf00      	nop
 8008768:	00100002 	.word	0x00100002
 800876c:	ffff0000 	.word	0xffff0000
 8008770:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	691a      	ldr	r2, [r3, #16]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	b2d2      	uxtb	r2, r2
 8008790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a0:	3b01      	subs	r3, #1
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	3b01      	subs	r3, #1
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	691a      	ldr	r2, [r3, #16]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	b2d2      	uxtb	r2, r2
 80087c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c8:	1c5a      	adds	r2, r3, #1
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087d2:	3b01      	subs	r3, #1
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087de:	b29b      	uxth	r3, r3
 80087e0:	3b01      	subs	r3, #1
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087e8:	e0b8      	b.n	800895c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f0:	2200      	movs	r2, #0
 80087f2:	4966      	ldr	r1, [pc, #408]	; (800898c <HAL_I2C_Mem_Read+0x448>)
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 facb 	bl	8008d90 <I2C_WaitOnFlagUntilTimeout>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e0bf      	b.n	8008984 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	691a      	ldr	r2, [r3, #16]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881e:	b2d2      	uxtb	r2, r2
 8008820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	1c5a      	adds	r2, r3, #1
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008830:	3b01      	subs	r3, #1
 8008832:	b29a      	uxth	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800883c:	b29b      	uxth	r3, r3
 800883e:	3b01      	subs	r3, #1
 8008840:	b29a      	uxth	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884c:	2200      	movs	r2, #0
 800884e:	494f      	ldr	r1, [pc, #316]	; (800898c <HAL_I2C_Mem_Read+0x448>)
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 fa9d 	bl	8008d90 <I2C_WaitOnFlagUntilTimeout>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e091      	b.n	8008984 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800886e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	691a      	ldr	r2, [r3, #16]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	b2d2      	uxtb	r2, r2
 800887c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008882:	1c5a      	adds	r2, r3, #1
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800888c:	3b01      	subs	r3, #1
 800888e:	b29a      	uxth	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008898:	b29b      	uxth	r3, r3
 800889a:	3b01      	subs	r3, #1
 800889c:	b29a      	uxth	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	691a      	ldr	r2, [r3, #16]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	b2d2      	uxtb	r2, r2
 80088ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	1c5a      	adds	r2, r3, #1
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088be:	3b01      	subs	r3, #1
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	3b01      	subs	r3, #1
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80088d4:	e042      	b.n	800895c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f000 fbb0 	bl	8009040 <I2C_WaitOnRXNEFlagUntilTimeout>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e04c      	b.n	8008984 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	691a      	ldr	r2, [r3, #16]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f4:	b2d2      	uxtb	r2, r2
 80088f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008906:	3b01      	subs	r3, #1
 8008908:	b29a      	uxth	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008912:	b29b      	uxth	r3, r3
 8008914:	3b01      	subs	r3, #1
 8008916:	b29a      	uxth	r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	f003 0304 	and.w	r3, r3, #4
 8008926:	2b04      	cmp	r3, #4
 8008928:	d118      	bne.n	800895c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	691a      	ldr	r2, [r3, #16]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	b2d2      	uxtb	r2, r2
 8008936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	1c5a      	adds	r2, r3, #1
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008946:	3b01      	subs	r3, #1
 8008948:	b29a      	uxth	r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008952:	b29b      	uxth	r3, r3
 8008954:	3b01      	subs	r3, #1
 8008956:	b29a      	uxth	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008960:	2b00      	cmp	r3, #0
 8008962:	f47f aec2 	bne.w	80086ea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2220      	movs	r2, #32
 800896a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	e000      	b.n	8008984 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008982:	2302      	movs	r3, #2
  }
}
 8008984:	4618      	mov	r0, r3
 8008986:	3728      	adds	r7, #40	; 0x28
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	00010004 	.word	0x00010004

08008990 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af02      	add	r7, sp, #8
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	607a      	str	r2, [r7, #4]
 800899a:	603b      	str	r3, [r7, #0]
 800899c:	460b      	mov	r3, r1
 800899e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2b08      	cmp	r3, #8
 80089aa:	d006      	beq.n	80089ba <I2C_MasterRequestWrite+0x2a>
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d003      	beq.n	80089ba <I2C_MasterRequestWrite+0x2a>
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80089b8:	d108      	bne.n	80089cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089c8:	601a      	str	r2, [r3, #0]
 80089ca:	e00b      	b.n	80089e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d0:	2b12      	cmp	r3, #18
 80089d2:	d107      	bne.n	80089e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 f9cd 	bl	8008d90 <I2C_WaitOnFlagUntilTimeout>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00d      	beq.n	8008a18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a0a:	d103      	bne.n	8008a14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e035      	b.n	8008a84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a20:	d108      	bne.n	8008a34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a22:	897b      	ldrh	r3, [r7, #10]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	461a      	mov	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a30:	611a      	str	r2, [r3, #16]
 8008a32:	e01b      	b.n	8008a6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008a34:	897b      	ldrh	r3, [r7, #10]
 8008a36:	11db      	asrs	r3, r3, #7
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	f003 0306 	and.w	r3, r3, #6
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	f063 030f 	orn	r3, r3, #15
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	490e      	ldr	r1, [pc, #56]	; (8008a8c <I2C_MasterRequestWrite+0xfc>)
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f000 f9f3 	bl	8008e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e010      	b.n	8008a84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008a62:	897b      	ldrh	r3, [r7, #10]
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	4907      	ldr	r1, [pc, #28]	; (8008a90 <I2C_MasterRequestWrite+0x100>)
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 f9e3 	bl	8008e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e000      	b.n	8008a84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	00010008 	.word	0x00010008
 8008a90:	00010002 	.word	0x00010002

08008a94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b088      	sub	sp, #32
 8008a98:	af02      	add	r7, sp, #8
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	4608      	mov	r0, r1
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	817b      	strh	r3, [r7, #10]
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	813b      	strh	r3, [r7, #8]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008abc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 f960 	bl	8008d90 <I2C_WaitOnFlagUntilTimeout>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00d      	beq.n	8008af2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ae4:	d103      	bne.n	8008aee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008aec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e05f      	b.n	8008bb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008af2:	897b      	ldrh	r3, [r7, #10]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	461a      	mov	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b04:	6a3a      	ldr	r2, [r7, #32]
 8008b06:	492d      	ldr	r1, [pc, #180]	; (8008bbc <I2C_RequestMemoryWrite+0x128>)
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 f998 	bl	8008e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e04c      	b.n	8008bb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b18:	2300      	movs	r3, #0
 8008b1a:	617b      	str	r3, [r7, #20]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	617b      	str	r3, [r7, #20]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b30:	6a39      	ldr	r1, [r7, #32]
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f000 fa02 	bl	8008f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00d      	beq.n	8008b5a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	d107      	bne.n	8008b56 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e02b      	b.n	8008bb2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b5a:	88fb      	ldrh	r3, [r7, #6]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d105      	bne.n	8008b6c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b60:	893b      	ldrh	r3, [r7, #8]
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	611a      	str	r2, [r3, #16]
 8008b6a:	e021      	b.n	8008bb0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008b6c:	893b      	ldrh	r3, [r7, #8]
 8008b6e:	0a1b      	lsrs	r3, r3, #8
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b7c:	6a39      	ldr	r1, [r7, #32]
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 f9dc 	bl	8008f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00d      	beq.n	8008ba6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d107      	bne.n	8008ba2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ba0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e005      	b.n	8008bb2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ba6:	893b      	ldrh	r3, [r7, #8]
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3718      	adds	r7, #24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	00010002 	.word	0x00010002

08008bc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	4608      	mov	r0, r1
 8008bca:	4611      	mov	r1, r2
 8008bcc:	461a      	mov	r2, r3
 8008bce:	4603      	mov	r3, r0
 8008bd0:	817b      	strh	r3, [r7, #10]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	813b      	strh	r3, [r7, #8]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008be8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	6a3b      	ldr	r3, [r7, #32]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 f8c2 	bl	8008d90 <I2C_WaitOnFlagUntilTimeout>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00d      	beq.n	8008c2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c20:	d103      	bne.n	8008c2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e0aa      	b.n	8008d84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c2e:	897b      	ldrh	r3, [r7, #10]
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	461a      	mov	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008c3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	6a3a      	ldr	r2, [r7, #32]
 8008c42:	4952      	ldr	r1, [pc, #328]	; (8008d8c <I2C_RequestMemoryRead+0x1cc>)
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f000 f8fa 	bl	8008e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e097      	b.n	8008d84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c54:	2300      	movs	r3, #0
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c6c:	6a39      	ldr	r1, [r7, #32]
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 f964 	bl	8008f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00d      	beq.n	8008c96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	d107      	bne.n	8008c92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e076      	b.n	8008d84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c96:	88fb      	ldrh	r3, [r7, #6]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d105      	bne.n	8008ca8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008c9c:	893b      	ldrh	r3, [r7, #8]
 8008c9e:	b2da      	uxtb	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	611a      	str	r2, [r3, #16]
 8008ca6:	e021      	b.n	8008cec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008ca8:	893b      	ldrh	r3, [r7, #8]
 8008caa:	0a1b      	lsrs	r3, r3, #8
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cb8:	6a39      	ldr	r1, [r7, #32]
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f000 f93e 	bl	8008f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00d      	beq.n	8008ce2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cca:	2b04      	cmp	r3, #4
 8008ccc:	d107      	bne.n	8008cde <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e050      	b.n	8008d84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ce2:	893b      	ldrh	r3, [r7, #8]
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cee:	6a39      	ldr	r1, [r7, #32]
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 f923 	bl	8008f3c <I2C_WaitOnTXEFlagUntilTimeout>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00d      	beq.n	8008d18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d00:	2b04      	cmp	r3, #4
 8008d02:	d107      	bne.n	8008d14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e035      	b.n	8008d84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	6a3b      	ldr	r3, [r7, #32]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 f82b 	bl	8008d90 <I2C_WaitOnFlagUntilTimeout>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00d      	beq.n	8008d5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d4e:	d103      	bne.n	8008d58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e013      	b.n	8008d84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008d5c:	897b      	ldrh	r3, [r7, #10]
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	f043 0301 	orr.w	r3, r3, #1
 8008d64:	b2da      	uxtb	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	6a3a      	ldr	r2, [r7, #32]
 8008d70:	4906      	ldr	r1, [pc, #24]	; (8008d8c <I2C_RequestMemoryRead+0x1cc>)
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f000 f863 	bl	8008e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e000      	b.n	8008d84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	00010002 	.word	0x00010002

08008d90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008da0:	e025      	b.n	8008dee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da8:	d021      	beq.n	8008dee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008daa:	f7fe f959 	bl	8007060 <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d302      	bcc.n	8008dc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d116      	bne.n	8008dee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dda:	f043 0220 	orr.w	r2, r3, #32
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e023      	b.n	8008e36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	0c1b      	lsrs	r3, r3, #16
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d10d      	bne.n	8008e14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	43da      	mvns	r2, r3
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	4013      	ands	r3, r2
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	bf0c      	ite	eq
 8008e0a:	2301      	moveq	r3, #1
 8008e0c:	2300      	movne	r3, #0
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	461a      	mov	r2, r3
 8008e12:	e00c      	b.n	8008e2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	43da      	mvns	r2, r3
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	4013      	ands	r3, r2
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	bf0c      	ite	eq
 8008e26:	2301      	moveq	r3, #1
 8008e28:	2300      	movne	r3, #0
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	79fb      	ldrb	r3, [r7, #7]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d0b6      	beq.n	8008da2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	60f8      	str	r0, [r7, #12]
 8008e46:	60b9      	str	r1, [r7, #8]
 8008e48:	607a      	str	r2, [r7, #4]
 8008e4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e4c:	e051      	b.n	8008ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e5c:	d123      	bne.n	8008ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2220      	movs	r2, #32
 8008e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e92:	f043 0204 	orr.w	r2, r3, #4
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e046      	b.n	8008f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eac:	d021      	beq.n	8008ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eae:	f7fe f8d7 	bl	8007060 <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d302      	bcc.n	8008ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d116      	bne.n	8008ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ede:	f043 0220 	orr.w	r2, r3, #32
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e020      	b.n	8008f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	0c1b      	lsrs	r3, r3, #16
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d10c      	bne.n	8008f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	43da      	mvns	r2, r3
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	4013      	ands	r3, r2
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	bf14      	ite	ne
 8008f0e:	2301      	movne	r3, #1
 8008f10:	2300      	moveq	r3, #0
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	e00b      	b.n	8008f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	43da      	mvns	r2, r3
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	4013      	ands	r3, r2
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	bf14      	ite	ne
 8008f28:	2301      	movne	r3, #1
 8008f2a:	2300      	moveq	r3, #0
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d18d      	bne.n	8008e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f48:	e02d      	b.n	8008fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f000 f8ce 	bl	80090ec <I2C_IsAcknowledgeFailed>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e02d      	b.n	8008fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f60:	d021      	beq.n	8008fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f62:	f7fe f87d 	bl	8007060 <HAL_GetTick>
 8008f66:	4602      	mov	r2, r0
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d302      	bcc.n	8008f78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d116      	bne.n	8008fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2220      	movs	r2, #32
 8008f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f92:	f043 0220 	orr.w	r2, r3, #32
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e007      	b.n	8008fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb0:	2b80      	cmp	r3, #128	; 0x80
 8008fb2:	d1ca      	bne.n	8008f4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008fca:	e02d      	b.n	8009028 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 f88d 	bl	80090ec <I2C_IsAcknowledgeFailed>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e02d      	b.n	8009038 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe2:	d021      	beq.n	8009028 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fe4:	f7fe f83c 	bl	8007060 <HAL_GetTick>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d302      	bcc.n	8008ffa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d116      	bne.n	8009028 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2220      	movs	r2, #32
 8009004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009014:	f043 0220 	orr.w	r2, r3, #32
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	e007      	b.n	8009038 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	f003 0304 	and.w	r3, r3, #4
 8009032:	2b04      	cmp	r3, #4
 8009034:	d1ca      	bne.n	8008fcc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800904c:	e042      	b.n	80090d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	695b      	ldr	r3, [r3, #20]
 8009054:	f003 0310 	and.w	r3, r3, #16
 8009058:	2b10      	cmp	r3, #16
 800905a:	d119      	bne.n	8009090 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f06f 0210 	mvn.w	r2, #16
 8009064:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2220      	movs	r2, #32
 8009070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e029      	b.n	80090e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009090:	f7fd ffe6 	bl	8007060 <HAL_GetTick>
 8009094:	4602      	mov	r2, r0
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	429a      	cmp	r2, r3
 800909e:	d302      	bcc.n	80090a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d116      	bne.n	80090d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2220      	movs	r2, #32
 80090b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c0:	f043 0220 	orr.w	r2, r3, #32
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	e007      	b.n	80090e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090de:	2b40      	cmp	r3, #64	; 0x40
 80090e0:	d1b5      	bne.n	800904e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009102:	d11b      	bne.n	800913c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800910c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2220      	movs	r2, #32
 8009118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009128:	f043 0204 	orr.w	r2, r3, #4
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e000      	b.n	800913e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
	...

0800914c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d101      	bne.n	800915e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e264      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	d075      	beq.n	8009256 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800916a:	4ba3      	ldr	r3, [pc, #652]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f003 030c 	and.w	r3, r3, #12
 8009172:	2b04      	cmp	r3, #4
 8009174:	d00c      	beq.n	8009190 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009176:	4ba0      	ldr	r3, [pc, #640]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800917e:	2b08      	cmp	r3, #8
 8009180:	d112      	bne.n	80091a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009182:	4b9d      	ldr	r3, [pc, #628]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800918a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800918e:	d10b      	bne.n	80091a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009190:	4b99      	ldr	r3, [pc, #612]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d05b      	beq.n	8009254 <HAL_RCC_OscConfig+0x108>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d157      	bne.n	8009254 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e23f      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091b0:	d106      	bne.n	80091c0 <HAL_RCC_OscConfig+0x74>
 80091b2:	4b91      	ldr	r3, [pc, #580]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a90      	ldr	r2, [pc, #576]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80091b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	e01d      	b.n	80091fc <HAL_RCC_OscConfig+0xb0>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091c8:	d10c      	bne.n	80091e4 <HAL_RCC_OscConfig+0x98>
 80091ca:	4b8b      	ldr	r3, [pc, #556]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a8a      	ldr	r2, [pc, #552]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80091d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80091d4:	6013      	str	r3, [r2, #0]
 80091d6:	4b88      	ldr	r3, [pc, #544]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a87      	ldr	r2, [pc, #540]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80091dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091e0:	6013      	str	r3, [r2, #0]
 80091e2:	e00b      	b.n	80091fc <HAL_RCC_OscConfig+0xb0>
 80091e4:	4b84      	ldr	r3, [pc, #528]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a83      	ldr	r2, [pc, #524]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80091ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	4b81      	ldr	r3, [pc, #516]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a80      	ldr	r2, [pc, #512]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80091f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d013      	beq.n	800922c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009204:	f7fd ff2c 	bl	8007060 <HAL_GetTick>
 8009208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800920a:	e008      	b.n	800921e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800920c:	f7fd ff28 	bl	8007060 <HAL_GetTick>
 8009210:	4602      	mov	r2, r0
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	2b64      	cmp	r3, #100	; 0x64
 8009218:	d901      	bls.n	800921e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e204      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800921e:	4b76      	ldr	r3, [pc, #472]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0f0      	beq.n	800920c <HAL_RCC_OscConfig+0xc0>
 800922a:	e014      	b.n	8009256 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800922c:	f7fd ff18 	bl	8007060 <HAL_GetTick>
 8009230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009232:	e008      	b.n	8009246 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009234:	f7fd ff14 	bl	8007060 <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b64      	cmp	r3, #100	; 0x64
 8009240:	d901      	bls.n	8009246 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e1f0      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009246:	4b6c      	ldr	r3, [pc, #432]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1f0      	bne.n	8009234 <HAL_RCC_OscConfig+0xe8>
 8009252:	e000      	b.n	8009256 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0302 	and.w	r3, r3, #2
 800925e:	2b00      	cmp	r3, #0
 8009260:	d063      	beq.n	800932a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009262:	4b65      	ldr	r3, [pc, #404]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	f003 030c 	and.w	r3, r3, #12
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00b      	beq.n	8009286 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800926e:	4b62      	ldr	r3, [pc, #392]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009276:	2b08      	cmp	r3, #8
 8009278:	d11c      	bne.n	80092b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800927a:	4b5f      	ldr	r3, [pc, #380]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009282:	2b00      	cmp	r3, #0
 8009284:	d116      	bne.n	80092b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009286:	4b5c      	ldr	r3, [pc, #368]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d005      	beq.n	800929e <HAL_RCC_OscConfig+0x152>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d001      	beq.n	800929e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e1c4      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800929e:	4b56      	ldr	r3, [pc, #344]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	00db      	lsls	r3, r3, #3
 80092ac:	4952      	ldr	r1, [pc, #328]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80092ae:	4313      	orrs	r3, r2
 80092b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092b2:	e03a      	b.n	800932a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d020      	beq.n	80092fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092bc:	4b4f      	ldr	r3, [pc, #316]	; (80093fc <HAL_RCC_OscConfig+0x2b0>)
 80092be:	2201      	movs	r2, #1
 80092c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092c2:	f7fd fecd 	bl	8007060 <HAL_GetTick>
 80092c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092c8:	e008      	b.n	80092dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092ca:	f7fd fec9 	bl	8007060 <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d901      	bls.n	80092dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80092d8:	2303      	movs	r3, #3
 80092da:	e1a5      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092dc:	4b46      	ldr	r3, [pc, #280]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0302 	and.w	r3, r3, #2
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0f0      	beq.n	80092ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092e8:	4b43      	ldr	r3, [pc, #268]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	00db      	lsls	r3, r3, #3
 80092f6:	4940      	ldr	r1, [pc, #256]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80092f8:	4313      	orrs	r3, r2
 80092fa:	600b      	str	r3, [r1, #0]
 80092fc:	e015      	b.n	800932a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092fe:	4b3f      	ldr	r3, [pc, #252]	; (80093fc <HAL_RCC_OscConfig+0x2b0>)
 8009300:	2200      	movs	r2, #0
 8009302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009304:	f7fd feac 	bl	8007060 <HAL_GetTick>
 8009308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800930a:	e008      	b.n	800931e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800930c:	f7fd fea8 	bl	8007060 <HAL_GetTick>
 8009310:	4602      	mov	r2, r0
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	1ad3      	subs	r3, r2, r3
 8009316:	2b02      	cmp	r3, #2
 8009318:	d901      	bls.n	800931e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800931a:	2303      	movs	r3, #3
 800931c:	e184      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800931e:	4b36      	ldr	r3, [pc, #216]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f003 0302 	and.w	r3, r3, #2
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1f0      	bne.n	800930c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0308 	and.w	r3, r3, #8
 8009332:	2b00      	cmp	r3, #0
 8009334:	d030      	beq.n	8009398 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d016      	beq.n	800936c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800933e:	4b30      	ldr	r3, [pc, #192]	; (8009400 <HAL_RCC_OscConfig+0x2b4>)
 8009340:	2201      	movs	r2, #1
 8009342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009344:	f7fd fe8c 	bl	8007060 <HAL_GetTick>
 8009348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800934a:	e008      	b.n	800935e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800934c:	f7fd fe88 	bl	8007060 <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b02      	cmp	r3, #2
 8009358:	d901      	bls.n	800935e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e164      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800935e:	4b26      	ldr	r3, [pc, #152]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 8009360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009362:	f003 0302 	and.w	r3, r3, #2
 8009366:	2b00      	cmp	r3, #0
 8009368:	d0f0      	beq.n	800934c <HAL_RCC_OscConfig+0x200>
 800936a:	e015      	b.n	8009398 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800936c:	4b24      	ldr	r3, [pc, #144]	; (8009400 <HAL_RCC_OscConfig+0x2b4>)
 800936e:	2200      	movs	r2, #0
 8009370:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009372:	f7fd fe75 	bl	8007060 <HAL_GetTick>
 8009376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009378:	e008      	b.n	800938c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800937a:	f7fd fe71 	bl	8007060 <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	2b02      	cmp	r3, #2
 8009386:	d901      	bls.n	800938c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e14d      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800938c:	4b1a      	ldr	r3, [pc, #104]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 800938e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009390:	f003 0302 	and.w	r3, r3, #2
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1f0      	bne.n	800937a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0304 	and.w	r3, r3, #4
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 80a0 	beq.w	80094e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093a6:	2300      	movs	r3, #0
 80093a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093aa:	4b13      	ldr	r3, [pc, #76]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80093ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10f      	bne.n	80093d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093b6:	2300      	movs	r3, #0
 80093b8:	60bb      	str	r3, [r7, #8]
 80093ba:	4b0f      	ldr	r3, [pc, #60]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80093bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093be:	4a0e      	ldr	r2, [pc, #56]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80093c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093c4:	6413      	str	r3, [r2, #64]	; 0x40
 80093c6:	4b0c      	ldr	r3, [pc, #48]	; (80093f8 <HAL_RCC_OscConfig+0x2ac>)
 80093c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093ce:	60bb      	str	r3, [r7, #8]
 80093d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093d2:	2301      	movs	r3, #1
 80093d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093d6:	4b0b      	ldr	r3, [pc, #44]	; (8009404 <HAL_RCC_OscConfig+0x2b8>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d121      	bne.n	8009426 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80093e2:	4b08      	ldr	r3, [pc, #32]	; (8009404 <HAL_RCC_OscConfig+0x2b8>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a07      	ldr	r2, [pc, #28]	; (8009404 <HAL_RCC_OscConfig+0x2b8>)
 80093e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093ee:	f7fd fe37 	bl	8007060 <HAL_GetTick>
 80093f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093f4:	e011      	b.n	800941a <HAL_RCC_OscConfig+0x2ce>
 80093f6:	bf00      	nop
 80093f8:	40023800 	.word	0x40023800
 80093fc:	42470000 	.word	0x42470000
 8009400:	42470e80 	.word	0x42470e80
 8009404:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009408:	f7fd fe2a 	bl	8007060 <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	2b02      	cmp	r3, #2
 8009414:	d901      	bls.n	800941a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e106      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800941a:	4b85      	ldr	r3, [pc, #532]	; (8009630 <HAL_RCC_OscConfig+0x4e4>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0f0      	beq.n	8009408 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d106      	bne.n	800943c <HAL_RCC_OscConfig+0x2f0>
 800942e:	4b81      	ldr	r3, [pc, #516]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 8009430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009432:	4a80      	ldr	r2, [pc, #512]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 8009434:	f043 0301 	orr.w	r3, r3, #1
 8009438:	6713      	str	r3, [r2, #112]	; 0x70
 800943a:	e01c      	b.n	8009476 <HAL_RCC_OscConfig+0x32a>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	2b05      	cmp	r3, #5
 8009442:	d10c      	bne.n	800945e <HAL_RCC_OscConfig+0x312>
 8009444:	4b7b      	ldr	r3, [pc, #492]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 8009446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009448:	4a7a      	ldr	r2, [pc, #488]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 800944a:	f043 0304 	orr.w	r3, r3, #4
 800944e:	6713      	str	r3, [r2, #112]	; 0x70
 8009450:	4b78      	ldr	r3, [pc, #480]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 8009452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009454:	4a77      	ldr	r2, [pc, #476]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 8009456:	f043 0301 	orr.w	r3, r3, #1
 800945a:	6713      	str	r3, [r2, #112]	; 0x70
 800945c:	e00b      	b.n	8009476 <HAL_RCC_OscConfig+0x32a>
 800945e:	4b75      	ldr	r3, [pc, #468]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 8009460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009462:	4a74      	ldr	r2, [pc, #464]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 8009464:	f023 0301 	bic.w	r3, r3, #1
 8009468:	6713      	str	r3, [r2, #112]	; 0x70
 800946a:	4b72      	ldr	r3, [pc, #456]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 800946c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800946e:	4a71      	ldr	r2, [pc, #452]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 8009470:	f023 0304 	bic.w	r3, r3, #4
 8009474:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d015      	beq.n	80094aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800947e:	f7fd fdef 	bl	8007060 <HAL_GetTick>
 8009482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009484:	e00a      	b.n	800949c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009486:	f7fd fdeb 	bl	8007060 <HAL_GetTick>
 800948a:	4602      	mov	r2, r0
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	f241 3288 	movw	r2, #5000	; 0x1388
 8009494:	4293      	cmp	r3, r2
 8009496:	d901      	bls.n	800949c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	e0c5      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800949c:	4b65      	ldr	r3, [pc, #404]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 800949e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d0ee      	beq.n	8009486 <HAL_RCC_OscConfig+0x33a>
 80094a8:	e014      	b.n	80094d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094aa:	f7fd fdd9 	bl	8007060 <HAL_GetTick>
 80094ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094b0:	e00a      	b.n	80094c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094b2:	f7fd fdd5 	bl	8007060 <HAL_GetTick>
 80094b6:	4602      	mov	r2, r0
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d901      	bls.n	80094c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e0af      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094c8:	4b5a      	ldr	r3, [pc, #360]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 80094ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094cc:	f003 0302 	and.w	r3, r3, #2
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1ee      	bne.n	80094b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094d4:	7dfb      	ldrb	r3, [r7, #23]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d105      	bne.n	80094e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094da:	4b56      	ldr	r3, [pc, #344]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 80094dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094de:	4a55      	ldr	r2, [pc, #340]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 80094e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f000 809b 	beq.w	8009626 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80094f0:	4b50      	ldr	r3, [pc, #320]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f003 030c 	and.w	r3, r3, #12
 80094f8:	2b08      	cmp	r3, #8
 80094fa:	d05c      	beq.n	80095b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	2b02      	cmp	r3, #2
 8009502:	d141      	bne.n	8009588 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009504:	4b4c      	ldr	r3, [pc, #304]	; (8009638 <HAL_RCC_OscConfig+0x4ec>)
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800950a:	f7fd fda9 	bl	8007060 <HAL_GetTick>
 800950e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009510:	e008      	b.n	8009524 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009512:	f7fd fda5 	bl	8007060 <HAL_GetTick>
 8009516:	4602      	mov	r2, r0
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	2b02      	cmp	r3, #2
 800951e:	d901      	bls.n	8009524 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e081      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009524:	4b43      	ldr	r3, [pc, #268]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1f0      	bne.n	8009512 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	69da      	ldr	r2, [r3, #28]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a1b      	ldr	r3, [r3, #32]
 8009538:	431a      	orrs	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953e:	019b      	lsls	r3, r3, #6
 8009540:	431a      	orrs	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009546:	085b      	lsrs	r3, r3, #1
 8009548:	3b01      	subs	r3, #1
 800954a:	041b      	lsls	r3, r3, #16
 800954c:	431a      	orrs	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009552:	061b      	lsls	r3, r3, #24
 8009554:	4937      	ldr	r1, [pc, #220]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 8009556:	4313      	orrs	r3, r2
 8009558:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800955a:	4b37      	ldr	r3, [pc, #220]	; (8009638 <HAL_RCC_OscConfig+0x4ec>)
 800955c:	2201      	movs	r2, #1
 800955e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009560:	f7fd fd7e 	bl	8007060 <HAL_GetTick>
 8009564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009566:	e008      	b.n	800957a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009568:	f7fd fd7a 	bl	8007060 <HAL_GetTick>
 800956c:	4602      	mov	r2, r0
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	2b02      	cmp	r3, #2
 8009574:	d901      	bls.n	800957a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	e056      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800957a:	4b2e      	ldr	r3, [pc, #184]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009582:	2b00      	cmp	r3, #0
 8009584:	d0f0      	beq.n	8009568 <HAL_RCC_OscConfig+0x41c>
 8009586:	e04e      	b.n	8009626 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009588:	4b2b      	ldr	r3, [pc, #172]	; (8009638 <HAL_RCC_OscConfig+0x4ec>)
 800958a:	2200      	movs	r2, #0
 800958c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800958e:	f7fd fd67 	bl	8007060 <HAL_GetTick>
 8009592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009594:	e008      	b.n	80095a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009596:	f7fd fd63 	bl	8007060 <HAL_GetTick>
 800959a:	4602      	mov	r2, r0
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	d901      	bls.n	80095a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80095a4:	2303      	movs	r3, #3
 80095a6:	e03f      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095a8:	4b22      	ldr	r3, [pc, #136]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1f0      	bne.n	8009596 <HAL_RCC_OscConfig+0x44a>
 80095b4:	e037      	b.n	8009626 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d101      	bne.n	80095c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e032      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80095c2:	4b1c      	ldr	r3, [pc, #112]	; (8009634 <HAL_RCC_OscConfig+0x4e8>)
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d028      	beq.n	8009622 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095da:	429a      	cmp	r2, r3
 80095dc:	d121      	bne.n	8009622 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d11a      	bne.n	8009622 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80095f2:	4013      	ands	r3, r2
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80095f8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d111      	bne.n	8009622 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009608:	085b      	lsrs	r3, r3, #1
 800960a:	3b01      	subs	r3, #1
 800960c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800960e:	429a      	cmp	r2, r3
 8009610:	d107      	bne.n	8009622 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800961e:	429a      	cmp	r2, r3
 8009620:	d001      	beq.n	8009626 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e000      	b.n	8009628 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	40007000 	.word	0x40007000
 8009634:	40023800 	.word	0x40023800
 8009638:	42470060 	.word	0x42470060

0800963c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e0cc      	b.n	80097ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009650:	4b68      	ldr	r3, [pc, #416]	; (80097f4 <HAL_RCC_ClockConfig+0x1b8>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 0307 	and.w	r3, r3, #7
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	429a      	cmp	r2, r3
 800965c:	d90c      	bls.n	8009678 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800965e:	4b65      	ldr	r3, [pc, #404]	; (80097f4 <HAL_RCC_ClockConfig+0x1b8>)
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	b2d2      	uxtb	r2, r2
 8009664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009666:	4b63      	ldr	r3, [pc, #396]	; (80097f4 <HAL_RCC_ClockConfig+0x1b8>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 0307 	and.w	r3, r3, #7
 800966e:	683a      	ldr	r2, [r7, #0]
 8009670:	429a      	cmp	r2, r3
 8009672:	d001      	beq.n	8009678 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e0b8      	b.n	80097ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0302 	and.w	r3, r3, #2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d020      	beq.n	80096c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0304 	and.w	r3, r3, #4
 800968c:	2b00      	cmp	r3, #0
 800968e:	d005      	beq.n	800969c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009690:	4b59      	ldr	r3, [pc, #356]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	4a58      	ldr	r2, [pc, #352]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 8009696:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800969a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0308 	and.w	r3, r3, #8
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d005      	beq.n	80096b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096a8:	4b53      	ldr	r3, [pc, #332]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	4a52      	ldr	r2, [pc, #328]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80096ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096b4:	4b50      	ldr	r3, [pc, #320]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	494d      	ldr	r1, [pc, #308]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 0301 	and.w	r3, r3, #1
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d044      	beq.n	800975c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d107      	bne.n	80096ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096da:	4b47      	ldr	r3, [pc, #284]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d119      	bne.n	800971a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e07f      	b.n	80097ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d003      	beq.n	80096fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80096f6:	2b03      	cmp	r3, #3
 80096f8:	d107      	bne.n	800970a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096fa:	4b3f      	ldr	r3, [pc, #252]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d109      	bne.n	800971a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e06f      	b.n	80097ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800970a:	4b3b      	ldr	r3, [pc, #236]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e067      	b.n	80097ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800971a:	4b37      	ldr	r3, [pc, #220]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f023 0203 	bic.w	r2, r3, #3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	4934      	ldr	r1, [pc, #208]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 8009728:	4313      	orrs	r3, r2
 800972a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800972c:	f7fd fc98 	bl	8007060 <HAL_GetTick>
 8009730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009732:	e00a      	b.n	800974a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009734:	f7fd fc94 	bl	8007060 <HAL_GetTick>
 8009738:	4602      	mov	r2, r0
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009742:	4293      	cmp	r3, r2
 8009744:	d901      	bls.n	800974a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e04f      	b.n	80097ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800974a:	4b2b      	ldr	r3, [pc, #172]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f003 020c 	and.w	r2, r3, #12
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	429a      	cmp	r2, r3
 800975a:	d1eb      	bne.n	8009734 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800975c:	4b25      	ldr	r3, [pc, #148]	; (80097f4 <HAL_RCC_ClockConfig+0x1b8>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 0307 	and.w	r3, r3, #7
 8009764:	683a      	ldr	r2, [r7, #0]
 8009766:	429a      	cmp	r2, r3
 8009768:	d20c      	bcs.n	8009784 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800976a:	4b22      	ldr	r3, [pc, #136]	; (80097f4 <HAL_RCC_ClockConfig+0x1b8>)
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	b2d2      	uxtb	r2, r2
 8009770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009772:	4b20      	ldr	r3, [pc, #128]	; (80097f4 <HAL_RCC_ClockConfig+0x1b8>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	429a      	cmp	r2, r3
 800977e:	d001      	beq.n	8009784 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e032      	b.n	80097ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0304 	and.w	r3, r3, #4
 800978c:	2b00      	cmp	r3, #0
 800978e:	d008      	beq.n	80097a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009790:	4b19      	ldr	r3, [pc, #100]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	4916      	ldr	r1, [pc, #88]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0308 	and.w	r3, r3, #8
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d009      	beq.n	80097c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097ae:	4b12      	ldr	r3, [pc, #72]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	00db      	lsls	r3, r3, #3
 80097bc:	490e      	ldr	r1, [pc, #56]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80097c2:	f000 f821 	bl	8009808 <HAL_RCC_GetSysClockFreq>
 80097c6:	4602      	mov	r2, r0
 80097c8:	4b0b      	ldr	r3, [pc, #44]	; (80097f8 <HAL_RCC_ClockConfig+0x1bc>)
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	091b      	lsrs	r3, r3, #4
 80097ce:	f003 030f 	and.w	r3, r3, #15
 80097d2:	490a      	ldr	r1, [pc, #40]	; (80097fc <HAL_RCC_ClockConfig+0x1c0>)
 80097d4:	5ccb      	ldrb	r3, [r1, r3]
 80097d6:	fa22 f303 	lsr.w	r3, r2, r3
 80097da:	4a09      	ldr	r2, [pc, #36]	; (8009800 <HAL_RCC_ClockConfig+0x1c4>)
 80097dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80097de:	4b09      	ldr	r3, [pc, #36]	; (8009804 <HAL_RCC_ClockConfig+0x1c8>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fd fbf8 	bl	8006fd8 <HAL_InitTick>

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	40023c00 	.word	0x40023c00
 80097f8:	40023800 	.word	0x40023800
 80097fc:	0801c5ac 	.word	0x0801c5ac
 8009800:	20000008 	.word	0x20000008
 8009804:	2000000c 	.word	0x2000000c

08009808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009808:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009810:	2300      	movs	r3, #0
 8009812:	607b      	str	r3, [r7, #4]
 8009814:	2300      	movs	r3, #0
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	2300      	movs	r3, #0
 800981a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800981c:	2300      	movs	r3, #0
 800981e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009820:	4b67      	ldr	r3, [pc, #412]	; (80099c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f003 030c 	and.w	r3, r3, #12
 8009828:	2b08      	cmp	r3, #8
 800982a:	d00d      	beq.n	8009848 <HAL_RCC_GetSysClockFreq+0x40>
 800982c:	2b08      	cmp	r3, #8
 800982e:	f200 80bd 	bhi.w	80099ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8009832:	2b00      	cmp	r3, #0
 8009834:	d002      	beq.n	800983c <HAL_RCC_GetSysClockFreq+0x34>
 8009836:	2b04      	cmp	r3, #4
 8009838:	d003      	beq.n	8009842 <HAL_RCC_GetSysClockFreq+0x3a>
 800983a:	e0b7      	b.n	80099ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800983c:	4b61      	ldr	r3, [pc, #388]	; (80099c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800983e:	60bb      	str	r3, [r7, #8]
       break;
 8009840:	e0b7      	b.n	80099b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009842:	4b61      	ldr	r3, [pc, #388]	; (80099c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009844:	60bb      	str	r3, [r7, #8]
      break;
 8009846:	e0b4      	b.n	80099b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009848:	4b5d      	ldr	r3, [pc, #372]	; (80099c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009850:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009852:	4b5b      	ldr	r3, [pc, #364]	; (80099c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d04d      	beq.n	80098fa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800985e:	4b58      	ldr	r3, [pc, #352]	; (80099c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	099b      	lsrs	r3, r3, #6
 8009864:	461a      	mov	r2, r3
 8009866:	f04f 0300 	mov.w	r3, #0
 800986a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800986e:	f04f 0100 	mov.w	r1, #0
 8009872:	ea02 0800 	and.w	r8, r2, r0
 8009876:	ea03 0901 	and.w	r9, r3, r1
 800987a:	4640      	mov	r0, r8
 800987c:	4649      	mov	r1, r9
 800987e:	f04f 0200 	mov.w	r2, #0
 8009882:	f04f 0300 	mov.w	r3, #0
 8009886:	014b      	lsls	r3, r1, #5
 8009888:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800988c:	0142      	lsls	r2, r0, #5
 800988e:	4610      	mov	r0, r2
 8009890:	4619      	mov	r1, r3
 8009892:	ebb0 0008 	subs.w	r0, r0, r8
 8009896:	eb61 0109 	sbc.w	r1, r1, r9
 800989a:	f04f 0200 	mov.w	r2, #0
 800989e:	f04f 0300 	mov.w	r3, #0
 80098a2:	018b      	lsls	r3, r1, #6
 80098a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80098a8:	0182      	lsls	r2, r0, #6
 80098aa:	1a12      	subs	r2, r2, r0
 80098ac:	eb63 0301 	sbc.w	r3, r3, r1
 80098b0:	f04f 0000 	mov.w	r0, #0
 80098b4:	f04f 0100 	mov.w	r1, #0
 80098b8:	00d9      	lsls	r1, r3, #3
 80098ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098be:	00d0      	lsls	r0, r2, #3
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	eb12 0208 	adds.w	r2, r2, r8
 80098c8:	eb43 0309 	adc.w	r3, r3, r9
 80098cc:	f04f 0000 	mov.w	r0, #0
 80098d0:	f04f 0100 	mov.w	r1, #0
 80098d4:	0259      	lsls	r1, r3, #9
 80098d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80098da:	0250      	lsls	r0, r2, #9
 80098dc:	4602      	mov	r2, r0
 80098de:	460b      	mov	r3, r1
 80098e0:	4610      	mov	r0, r2
 80098e2:	4619      	mov	r1, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	461a      	mov	r2, r3
 80098e8:	f04f 0300 	mov.w	r3, #0
 80098ec:	f7f7 f9cc 	bl	8000c88 <__aeabi_uldivmod>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4613      	mov	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]
 80098f8:	e04a      	b.n	8009990 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098fa:	4b31      	ldr	r3, [pc, #196]	; (80099c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	099b      	lsrs	r3, r3, #6
 8009900:	461a      	mov	r2, r3
 8009902:	f04f 0300 	mov.w	r3, #0
 8009906:	f240 10ff 	movw	r0, #511	; 0x1ff
 800990a:	f04f 0100 	mov.w	r1, #0
 800990e:	ea02 0400 	and.w	r4, r2, r0
 8009912:	ea03 0501 	and.w	r5, r3, r1
 8009916:	4620      	mov	r0, r4
 8009918:	4629      	mov	r1, r5
 800991a:	f04f 0200 	mov.w	r2, #0
 800991e:	f04f 0300 	mov.w	r3, #0
 8009922:	014b      	lsls	r3, r1, #5
 8009924:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009928:	0142      	lsls	r2, r0, #5
 800992a:	4610      	mov	r0, r2
 800992c:	4619      	mov	r1, r3
 800992e:	1b00      	subs	r0, r0, r4
 8009930:	eb61 0105 	sbc.w	r1, r1, r5
 8009934:	f04f 0200 	mov.w	r2, #0
 8009938:	f04f 0300 	mov.w	r3, #0
 800993c:	018b      	lsls	r3, r1, #6
 800993e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009942:	0182      	lsls	r2, r0, #6
 8009944:	1a12      	subs	r2, r2, r0
 8009946:	eb63 0301 	sbc.w	r3, r3, r1
 800994a:	f04f 0000 	mov.w	r0, #0
 800994e:	f04f 0100 	mov.w	r1, #0
 8009952:	00d9      	lsls	r1, r3, #3
 8009954:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009958:	00d0      	lsls	r0, r2, #3
 800995a:	4602      	mov	r2, r0
 800995c:	460b      	mov	r3, r1
 800995e:	1912      	adds	r2, r2, r4
 8009960:	eb45 0303 	adc.w	r3, r5, r3
 8009964:	f04f 0000 	mov.w	r0, #0
 8009968:	f04f 0100 	mov.w	r1, #0
 800996c:	0299      	lsls	r1, r3, #10
 800996e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009972:	0290      	lsls	r0, r2, #10
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4610      	mov	r0, r2
 800997a:	4619      	mov	r1, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	461a      	mov	r2, r3
 8009980:	f04f 0300 	mov.w	r3, #0
 8009984:	f7f7 f980 	bl	8000c88 <__aeabi_uldivmod>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	4613      	mov	r3, r2
 800998e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009990:	4b0b      	ldr	r3, [pc, #44]	; (80099c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	0c1b      	lsrs	r3, r3, #16
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	3301      	adds	r3, #1
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80099a8:	60bb      	str	r3, [r7, #8]
      break;
 80099aa:	e002      	b.n	80099b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80099ac:	4b05      	ldr	r3, [pc, #20]	; (80099c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80099ae:	60bb      	str	r3, [r7, #8]
      break;
 80099b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80099b2:	68bb      	ldr	r3, [r7, #8]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80099be:	bf00      	nop
 80099c0:	40023800 	.word	0x40023800
 80099c4:	00f42400 	.word	0x00f42400
 80099c8:	007a1200 	.word	0x007a1200

080099cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099cc:	b480      	push	{r7}
 80099ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099d0:	4b03      	ldr	r3, [pc, #12]	; (80099e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80099d2:	681b      	ldr	r3, [r3, #0]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	20000008 	.word	0x20000008

080099e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80099e8:	f7ff fff0 	bl	80099cc <HAL_RCC_GetHCLKFreq>
 80099ec:	4602      	mov	r2, r0
 80099ee:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	0a9b      	lsrs	r3, r3, #10
 80099f4:	f003 0307 	and.w	r3, r3, #7
 80099f8:	4903      	ldr	r1, [pc, #12]	; (8009a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80099fa:	5ccb      	ldrb	r3, [r1, r3]
 80099fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	40023800 	.word	0x40023800
 8009a08:	0801c5bc 	.word	0x0801c5bc

08009a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009a10:	f7ff ffdc 	bl	80099cc <HAL_RCC_GetHCLKFreq>
 8009a14:	4602      	mov	r2, r0
 8009a16:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	0b5b      	lsrs	r3, r3, #13
 8009a1c:	f003 0307 	and.w	r3, r3, #7
 8009a20:	4903      	ldr	r1, [pc, #12]	; (8009a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a22:	5ccb      	ldrb	r3, [r1, r3]
 8009a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	40023800 	.word	0x40023800
 8009a30:	0801c5bc 	.word	0x0801c5bc

08009a34 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d101      	bne.n	8009a4a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e034      	b.n	8009ab4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d106      	bne.n	8009a64 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7fc fc60 	bl	8006324 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	3308      	adds	r3, #8
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	4610      	mov	r0, r2
 8009a70:	f001 fbb6 	bl	800b1e0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6818      	ldr	r0, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	68b9      	ldr	r1, [r7, #8]
 8009a80:	f001 fc00 	bl	800b284 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6858      	ldr	r0, [r3, #4]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	689a      	ldr	r2, [r3, #8]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a90:	6879      	ldr	r1, [r7, #4]
 8009a92:	f001 fc35 	bl	800b300 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	6892      	ldr	r2, [r2, #8]
 8009a9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	6892      	ldr	r2, [r2, #8]
 8009aaa:	f041 0101 	orr.w	r1, r1, #1
 8009aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d101      	bne.n	8009ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e041      	b.n	8009b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d106      	bne.n	8009ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7fd f82c 	bl	8006b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2202      	movs	r2, #2
 8009aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3304      	adds	r3, #4
 8009af8:	4619      	mov	r1, r3
 8009afa:	4610      	mov	r0, r2
 8009afc:	f000 fabc 	bl	800a078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d001      	beq.n	8009b74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	e046      	b.n	8009c02 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2202      	movs	r2, #2
 8009b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a23      	ldr	r2, [pc, #140]	; (8009c10 <HAL_TIM_Base_Start+0xb4>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d022      	beq.n	8009bcc <HAL_TIM_Base_Start+0x70>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b8e:	d01d      	beq.n	8009bcc <HAL_TIM_Base_Start+0x70>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a1f      	ldr	r2, [pc, #124]	; (8009c14 <HAL_TIM_Base_Start+0xb8>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d018      	beq.n	8009bcc <HAL_TIM_Base_Start+0x70>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a1e      	ldr	r2, [pc, #120]	; (8009c18 <HAL_TIM_Base_Start+0xbc>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d013      	beq.n	8009bcc <HAL_TIM_Base_Start+0x70>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a1c      	ldr	r2, [pc, #112]	; (8009c1c <HAL_TIM_Base_Start+0xc0>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d00e      	beq.n	8009bcc <HAL_TIM_Base_Start+0x70>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a1b      	ldr	r2, [pc, #108]	; (8009c20 <HAL_TIM_Base_Start+0xc4>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d009      	beq.n	8009bcc <HAL_TIM_Base_Start+0x70>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a19      	ldr	r2, [pc, #100]	; (8009c24 <HAL_TIM_Base_Start+0xc8>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d004      	beq.n	8009bcc <HAL_TIM_Base_Start+0x70>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a18      	ldr	r2, [pc, #96]	; (8009c28 <HAL_TIM_Base_Start+0xcc>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d111      	bne.n	8009bf0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f003 0307 	and.w	r3, r3, #7
 8009bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2b06      	cmp	r3, #6
 8009bdc:	d010      	beq.n	8009c00 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f042 0201 	orr.w	r2, r2, #1
 8009bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bee:	e007      	b.n	8009c00 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0201 	orr.w	r2, r2, #1
 8009bfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	40010000 	.word	0x40010000
 8009c14:	40000400 	.word	0x40000400
 8009c18:	40000800 	.word	0x40000800
 8009c1c:	40000c00 	.word	0x40000c00
 8009c20:	40010400 	.word	0x40010400
 8009c24:	40014000 	.word	0x40014000
 8009c28:	40001800 	.word	0x40001800

08009c2c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6a1a      	ldr	r2, [r3, #32]
 8009c3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c3e:	4013      	ands	r3, r2
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d10f      	bne.n	8009c64 <HAL_TIM_Base_Stop+0x38>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6a1a      	ldr	r2, [r3, #32]
 8009c4a:	f240 4344 	movw	r3, #1092	; 0x444
 8009c4e:	4013      	ands	r3, r2
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d107      	bne.n	8009c64 <HAL_TIM_Base_Stop+0x38>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f022 0201 	bic.w	r2, r2, #1
 8009c62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	370c      	adds	r7, #12
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr

08009c7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b082      	sub	sp, #8
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	f003 0302 	and.w	r3, r3, #2
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d122      	bne.n	8009cd6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f003 0302 	and.w	r3, r3, #2
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d11b      	bne.n	8009cd6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f06f 0202 	mvn.w	r2, #2
 8009ca6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	699b      	ldr	r3, [r3, #24]
 8009cb4:	f003 0303 	and.w	r3, r3, #3
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f9bc 	bl	800a03a <HAL_TIM_IC_CaptureCallback>
 8009cc2:	e005      	b.n	8009cd0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f9ae 	bl	800a026 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f9bf 	bl	800a04e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	691b      	ldr	r3, [r3, #16]
 8009cdc:	f003 0304 	and.w	r3, r3, #4
 8009ce0:	2b04      	cmp	r3, #4
 8009ce2:	d122      	bne.n	8009d2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	f003 0304 	and.w	r3, r3, #4
 8009cee:	2b04      	cmp	r3, #4
 8009cf0:	d11b      	bne.n	8009d2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f06f 0204 	mvn.w	r2, #4
 8009cfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	699b      	ldr	r3, [r3, #24]
 8009d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d003      	beq.n	8009d18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f992 	bl	800a03a <HAL_TIM_IC_CaptureCallback>
 8009d16:	e005      	b.n	8009d24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f984 	bl	800a026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f995 	bl	800a04e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	f003 0308 	and.w	r3, r3, #8
 8009d34:	2b08      	cmp	r3, #8
 8009d36:	d122      	bne.n	8009d7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	f003 0308 	and.w	r3, r3, #8
 8009d42:	2b08      	cmp	r3, #8
 8009d44:	d11b      	bne.n	8009d7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f06f 0208 	mvn.w	r2, #8
 8009d4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2204      	movs	r2, #4
 8009d54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	f003 0303 	and.w	r3, r3, #3
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d003      	beq.n	8009d6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f968 	bl	800a03a <HAL_TIM_IC_CaptureCallback>
 8009d6a:	e005      	b.n	8009d78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 f95a 	bl	800a026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f96b 	bl	800a04e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	f003 0310 	and.w	r3, r3, #16
 8009d88:	2b10      	cmp	r3, #16
 8009d8a:	d122      	bne.n	8009dd2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	f003 0310 	and.w	r3, r3, #16
 8009d96:	2b10      	cmp	r3, #16
 8009d98:	d11b      	bne.n	8009dd2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f06f 0210 	mvn.w	r2, #16
 8009da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2208      	movs	r2, #8
 8009da8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	69db      	ldr	r3, [r3, #28]
 8009db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d003      	beq.n	8009dc0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f93e 	bl	800a03a <HAL_TIM_IC_CaptureCallback>
 8009dbe:	e005      	b.n	8009dcc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f930 	bl	800a026 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f941 	bl	800a04e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	f003 0301 	and.w	r3, r3, #1
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d10e      	bne.n	8009dfe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d107      	bne.n	8009dfe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f06f 0201 	mvn.w	r2, #1
 8009df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f90a 	bl	800a012 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e08:	2b80      	cmp	r3, #128	; 0x80
 8009e0a:	d10e      	bne.n	8009e2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e16:	2b80      	cmp	r3, #128	; 0x80
 8009e18:	d107      	bne.n	8009e2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fae7 	bl	800a3f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e34:	2b40      	cmp	r3, #64	; 0x40
 8009e36:	d10e      	bne.n	8009e56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e42:	2b40      	cmp	r3, #64	; 0x40
 8009e44:	d107      	bne.n	8009e56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 f906 	bl	800a062 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	f003 0320 	and.w	r3, r3, #32
 8009e60:	2b20      	cmp	r3, #32
 8009e62:	d10e      	bne.n	8009e82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	f003 0320 	and.w	r3, r3, #32
 8009e6e:	2b20      	cmp	r3, #32
 8009e70:	d107      	bne.n	8009e82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f06f 0220 	mvn.w	r2, #32
 8009e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fab1 	bl	800a3e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e82:	bf00      	nop
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b084      	sub	sp, #16
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d101      	bne.n	8009ea2 <HAL_TIM_ConfigClockSource+0x18>
 8009e9e:	2302      	movs	r3, #2
 8009ea0:	e0b3      	b.n	800a00a <HAL_TIM_ConfigClockSource+0x180>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2202      	movs	r2, #2
 8009eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009ec0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ec8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eda:	d03e      	beq.n	8009f5a <HAL_TIM_ConfigClockSource+0xd0>
 8009edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ee0:	f200 8087 	bhi.w	8009ff2 <HAL_TIM_ConfigClockSource+0x168>
 8009ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ee8:	f000 8085 	beq.w	8009ff6 <HAL_TIM_ConfigClockSource+0x16c>
 8009eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ef0:	d87f      	bhi.n	8009ff2 <HAL_TIM_ConfigClockSource+0x168>
 8009ef2:	2b70      	cmp	r3, #112	; 0x70
 8009ef4:	d01a      	beq.n	8009f2c <HAL_TIM_ConfigClockSource+0xa2>
 8009ef6:	2b70      	cmp	r3, #112	; 0x70
 8009ef8:	d87b      	bhi.n	8009ff2 <HAL_TIM_ConfigClockSource+0x168>
 8009efa:	2b60      	cmp	r3, #96	; 0x60
 8009efc:	d050      	beq.n	8009fa0 <HAL_TIM_ConfigClockSource+0x116>
 8009efe:	2b60      	cmp	r3, #96	; 0x60
 8009f00:	d877      	bhi.n	8009ff2 <HAL_TIM_ConfigClockSource+0x168>
 8009f02:	2b50      	cmp	r3, #80	; 0x50
 8009f04:	d03c      	beq.n	8009f80 <HAL_TIM_ConfigClockSource+0xf6>
 8009f06:	2b50      	cmp	r3, #80	; 0x50
 8009f08:	d873      	bhi.n	8009ff2 <HAL_TIM_ConfigClockSource+0x168>
 8009f0a:	2b40      	cmp	r3, #64	; 0x40
 8009f0c:	d058      	beq.n	8009fc0 <HAL_TIM_ConfigClockSource+0x136>
 8009f0e:	2b40      	cmp	r3, #64	; 0x40
 8009f10:	d86f      	bhi.n	8009ff2 <HAL_TIM_ConfigClockSource+0x168>
 8009f12:	2b30      	cmp	r3, #48	; 0x30
 8009f14:	d064      	beq.n	8009fe0 <HAL_TIM_ConfigClockSource+0x156>
 8009f16:	2b30      	cmp	r3, #48	; 0x30
 8009f18:	d86b      	bhi.n	8009ff2 <HAL_TIM_ConfigClockSource+0x168>
 8009f1a:	2b20      	cmp	r3, #32
 8009f1c:	d060      	beq.n	8009fe0 <HAL_TIM_ConfigClockSource+0x156>
 8009f1e:	2b20      	cmp	r3, #32
 8009f20:	d867      	bhi.n	8009ff2 <HAL_TIM_ConfigClockSource+0x168>
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d05c      	beq.n	8009fe0 <HAL_TIM_ConfigClockSource+0x156>
 8009f26:	2b10      	cmp	r3, #16
 8009f28:	d05a      	beq.n	8009fe0 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009f2a:	e062      	b.n	8009ff2 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6818      	ldr	r0, [r3, #0]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	6899      	ldr	r1, [r3, #8]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	f000 f9b6 	bl	800a2ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	609a      	str	r2, [r3, #8]
      break;
 8009f58:	e04e      	b.n	8009ff8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6818      	ldr	r0, [r3, #0]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	6899      	ldr	r1, [r3, #8]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	f000 f99f 	bl	800a2ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	689a      	ldr	r2, [r3, #8]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f7c:	609a      	str	r2, [r3, #8]
      break;
 8009f7e:	e03b      	b.n	8009ff8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6818      	ldr	r0, [r3, #0]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	6859      	ldr	r1, [r3, #4]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	f000 f913 	bl	800a1b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2150      	movs	r1, #80	; 0x50
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f000 f96c 	bl	800a276 <TIM_ITRx_SetConfig>
      break;
 8009f9e:	e02b      	b.n	8009ff8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6818      	ldr	r0, [r3, #0]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	6859      	ldr	r1, [r3, #4]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	461a      	mov	r2, r3
 8009fae:	f000 f932 	bl	800a216 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2160      	movs	r1, #96	; 0x60
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f000 f95c 	bl	800a276 <TIM_ITRx_SetConfig>
      break;
 8009fbe:	e01b      	b.n	8009ff8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6818      	ldr	r0, [r3, #0]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	6859      	ldr	r1, [r3, #4]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	461a      	mov	r2, r3
 8009fce:	f000 f8f3 	bl	800a1b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2140      	movs	r1, #64	; 0x40
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f000 f94c 	bl	800a276 <TIM_ITRx_SetConfig>
      break;
 8009fde:	e00b      	b.n	8009ff8 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	4610      	mov	r0, r2
 8009fec:	f000 f943 	bl	800a276 <TIM_ITRx_SetConfig>
        break;
 8009ff0:	e002      	b.n	8009ff8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009ff2:	bf00      	nop
 8009ff4:	e000      	b.n	8009ff8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a012:	b480      	push	{r7}
 800a014:	b083      	sub	sp, #12
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a01a:	bf00      	nop
 800a01c:	370c      	adds	r7, #12
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr

0800a026 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a026:	b480      	push	{r7}
 800a028:	b083      	sub	sp, #12
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a02e:	bf00      	nop
 800a030:	370c      	adds	r7, #12
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b083      	sub	sp, #12
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a042:	bf00      	nop
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a04e:	b480      	push	{r7}
 800a050:	b083      	sub	sp, #12
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a056:	bf00      	nop
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a062:	b480      	push	{r7}
 800a064:	b083      	sub	sp, #12
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a06a:	bf00      	nop
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
	...

0800a078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a40      	ldr	r2, [pc, #256]	; (800a18c <TIM_Base_SetConfig+0x114>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d013      	beq.n	800a0b8 <TIM_Base_SetConfig+0x40>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a096:	d00f      	beq.n	800a0b8 <TIM_Base_SetConfig+0x40>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a3d      	ldr	r2, [pc, #244]	; (800a190 <TIM_Base_SetConfig+0x118>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d00b      	beq.n	800a0b8 <TIM_Base_SetConfig+0x40>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a3c      	ldr	r2, [pc, #240]	; (800a194 <TIM_Base_SetConfig+0x11c>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d007      	beq.n	800a0b8 <TIM_Base_SetConfig+0x40>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a3b      	ldr	r2, [pc, #236]	; (800a198 <TIM_Base_SetConfig+0x120>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d003      	beq.n	800a0b8 <TIM_Base_SetConfig+0x40>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	4a3a      	ldr	r2, [pc, #232]	; (800a19c <TIM_Base_SetConfig+0x124>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d108      	bne.n	800a0ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a2f      	ldr	r2, [pc, #188]	; (800a18c <TIM_Base_SetConfig+0x114>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d02b      	beq.n	800a12a <TIM_Base_SetConfig+0xb2>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0d8:	d027      	beq.n	800a12a <TIM_Base_SetConfig+0xb2>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4a2c      	ldr	r2, [pc, #176]	; (800a190 <TIM_Base_SetConfig+0x118>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d023      	beq.n	800a12a <TIM_Base_SetConfig+0xb2>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	4a2b      	ldr	r2, [pc, #172]	; (800a194 <TIM_Base_SetConfig+0x11c>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d01f      	beq.n	800a12a <TIM_Base_SetConfig+0xb2>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a2a      	ldr	r2, [pc, #168]	; (800a198 <TIM_Base_SetConfig+0x120>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d01b      	beq.n	800a12a <TIM_Base_SetConfig+0xb2>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a29      	ldr	r2, [pc, #164]	; (800a19c <TIM_Base_SetConfig+0x124>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d017      	beq.n	800a12a <TIM_Base_SetConfig+0xb2>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4a28      	ldr	r2, [pc, #160]	; (800a1a0 <TIM_Base_SetConfig+0x128>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d013      	beq.n	800a12a <TIM_Base_SetConfig+0xb2>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4a27      	ldr	r2, [pc, #156]	; (800a1a4 <TIM_Base_SetConfig+0x12c>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d00f      	beq.n	800a12a <TIM_Base_SetConfig+0xb2>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a26      	ldr	r2, [pc, #152]	; (800a1a8 <TIM_Base_SetConfig+0x130>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d00b      	beq.n	800a12a <TIM_Base_SetConfig+0xb2>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a25      	ldr	r2, [pc, #148]	; (800a1ac <TIM_Base_SetConfig+0x134>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d007      	beq.n	800a12a <TIM_Base_SetConfig+0xb2>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a24      	ldr	r2, [pc, #144]	; (800a1b0 <TIM_Base_SetConfig+0x138>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d003      	beq.n	800a12a <TIM_Base_SetConfig+0xb2>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a23      	ldr	r2, [pc, #140]	; (800a1b4 <TIM_Base_SetConfig+0x13c>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d108      	bne.n	800a13c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	4313      	orrs	r3, r2
 800a13a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	695b      	ldr	r3, [r3, #20]
 800a146:	4313      	orrs	r3, r2
 800a148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	689a      	ldr	r2, [r3, #8]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a0a      	ldr	r2, [pc, #40]	; (800a18c <TIM_Base_SetConfig+0x114>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d003      	beq.n	800a170 <TIM_Base_SetConfig+0xf8>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a0c      	ldr	r2, [pc, #48]	; (800a19c <TIM_Base_SetConfig+0x124>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d103      	bne.n	800a178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	691a      	ldr	r2, [r3, #16]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	615a      	str	r2, [r3, #20]
}
 800a17e:	bf00      	nop
 800a180:	3714      	adds	r7, #20
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	40010000 	.word	0x40010000
 800a190:	40000400 	.word	0x40000400
 800a194:	40000800 	.word	0x40000800
 800a198:	40000c00 	.word	0x40000c00
 800a19c:	40010400 	.word	0x40010400
 800a1a0:	40014000 	.word	0x40014000
 800a1a4:	40014400 	.word	0x40014400
 800a1a8:	40014800 	.word	0x40014800
 800a1ac:	40001800 	.word	0x40001800
 800a1b0:	40001c00 	.word	0x40001c00
 800a1b4:	40002000 	.word	0x40002000

0800a1b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b087      	sub	sp, #28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	f023 0201 	bic.w	r2, r3, #1
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	011b      	lsls	r3, r3, #4
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f023 030a 	bic.w	r3, r3, #10
 800a1f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	693a      	ldr	r2, [r7, #16]
 800a202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	621a      	str	r2, [r3, #32]
}
 800a20a:	bf00      	nop
 800a20c:	371c      	adds	r7, #28
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a216:	b480      	push	{r7}
 800a218:	b087      	sub	sp, #28
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	60f8      	str	r0, [r7, #12]
 800a21e:	60b9      	str	r1, [r7, #8]
 800a220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	f023 0210 	bic.w	r2, r3, #16
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6a1b      	ldr	r3, [r3, #32]
 800a238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	031b      	lsls	r3, r3, #12
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	4313      	orrs	r3, r2
 800a24a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	011b      	lsls	r3, r3, #4
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	697a      	ldr	r2, [r7, #20]
 800a262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	621a      	str	r2, [r3, #32]
}
 800a26a:	bf00      	nop
 800a26c:	371c      	adds	r7, #28
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a276:	b480      	push	{r7}
 800a278:	b085      	sub	sp, #20
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a28c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a28e:	683a      	ldr	r2, [r7, #0]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4313      	orrs	r3, r2
 800a294:	f043 0307 	orr.w	r3, r3, #7
 800a298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	609a      	str	r2, [r3, #8]
}
 800a2a0:	bf00      	nop
 800a2a2:	3714      	adds	r7, #20
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
 800a2b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	021a      	lsls	r2, r3, #8
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	431a      	orrs	r2, r3
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	609a      	str	r2, [r3, #8]
}
 800a2e0:	bf00      	nop
 800a2e2:	371c      	adds	r7, #28
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d101      	bne.n	800a304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a300:	2302      	movs	r3, #2
 800a302:	e05a      	b.n	800a3ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2202      	movs	r2, #2
 800a310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a32a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	4313      	orrs	r3, r2
 800a334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a21      	ldr	r2, [pc, #132]	; (800a3c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d022      	beq.n	800a38e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a350:	d01d      	beq.n	800a38e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a1d      	ldr	r2, [pc, #116]	; (800a3cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d018      	beq.n	800a38e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a1b      	ldr	r2, [pc, #108]	; (800a3d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d013      	beq.n	800a38e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a1a      	ldr	r2, [pc, #104]	; (800a3d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d00e      	beq.n	800a38e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a18      	ldr	r2, [pc, #96]	; (800a3d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d009      	beq.n	800a38e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a17      	ldr	r2, [pc, #92]	; (800a3dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d004      	beq.n	800a38e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a15      	ldr	r2, [pc, #84]	; (800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d10c      	bne.n	800a3a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	40010000 	.word	0x40010000
 800a3cc:	40000400 	.word	0x40000400
 800a3d0:	40000800 	.word	0x40000800
 800a3d4:	40000c00 	.word	0x40000c00
 800a3d8:	40010400 	.word	0x40010400
 800a3dc:	40014000 	.word	0x40014000
 800a3e0:	40001800 	.word	0x40001800

0800a3e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d101      	bne.n	800a41e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e03f      	b.n	800a49e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b00      	cmp	r3, #0
 800a428:	d106      	bne.n	800a438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f7fc fbf8 	bl	8006c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2224      	movs	r2, #36	; 0x24
 800a43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68da      	ldr	r2, [r3, #12]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a44e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 fcfd 	bl	800ae50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	691a      	ldr	r2, [r3, #16]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	695a      	ldr	r2, [r3, #20]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68da      	ldr	r2, [r3, #12]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2220      	movs	r2, #32
 800a490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2220      	movs	r2, #32
 800a498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	60f8      	str	r0, [r7, #12]
 800a4ae:	60b9      	str	r1, [r7, #8]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b20      	cmp	r3, #32
 800a4be:	d11d      	bne.n	800a4fc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <HAL_UART_Receive_DMA+0x26>
 800a4c6:	88fb      	ldrh	r3, [r7, #6]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e016      	b.n	800a4fe <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d101      	bne.n	800a4de <HAL_UART_Receive_DMA+0x38>
 800a4da:	2302      	movs	r3, #2
 800a4dc:	e00f      	b.n	800a4fe <HAL_UART_Receive_DMA+0x58>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800a4ec:	88fb      	ldrh	r3, [r7, #6]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	68b9      	ldr	r1, [r7, #8]
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 faf2 	bl	800aadc <UART_Start_Receive_DMA>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	e000      	b.n	800a4fe <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a4fc:	2302      	movs	r3, #2
  }
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b084      	sub	sp, #16
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a50e:	2300      	movs	r3, #0
 800a510:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	695b      	ldr	r3, [r3, #20]
 800a518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a51c:	2b80      	cmp	r3, #128	; 0x80
 800a51e:	bf0c      	ite	eq
 800a520:	2301      	moveq	r3, #1
 800a522:	2300      	movne	r3, #0
 800a524:	b2db      	uxtb	r3, r3
 800a526:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	2b21      	cmp	r3, #33	; 0x21
 800a532:	d116      	bne.n	800a562 <HAL_UART_DMAStop+0x5c>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d013      	beq.n	800a562 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	695a      	ldr	r2, [r3, #20]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a548:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d004      	beq.n	800a55c <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a556:	4618      	mov	r0, r3
 800a558:	f7fc ffca 	bl	80074f0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fb21 	bl	800aba4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	695b      	ldr	r3, [r3, #20]
 800a568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a56c:	2b40      	cmp	r3, #64	; 0x40
 800a56e:	bf0c      	ite	eq
 800a570:	2301      	moveq	r3, #1
 800a572:	2300      	movne	r3, #0
 800a574:	b2db      	uxtb	r3, r3
 800a576:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b22      	cmp	r3, #34	; 0x22
 800a582:	d116      	bne.n	800a5b2 <HAL_UART_DMAStop+0xac>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d013      	beq.n	800a5b2 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	695a      	ldr	r2, [r3, #20]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a598:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d004      	beq.n	800a5ac <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fc ffa2 	bl	80074f0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fb0f 	bl	800abd0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08a      	sub	sp, #40	; 0x28
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	f003 030f 	and.w	r3, r3, #15
 800a5ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10d      	bne.n	800a60e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f4:	f003 0320 	and.w	r3, r3, #32
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d008      	beq.n	800a60e <HAL_UART_IRQHandler+0x52>
 800a5fc:	6a3b      	ldr	r3, [r7, #32]
 800a5fe:	f003 0320 	and.w	r3, r3, #32
 800a602:	2b00      	cmp	r3, #0
 800a604:	d003      	beq.n	800a60e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fb8b 	bl	800ad22 <UART_Receive_IT>
      return;
 800a60c:	e17c      	b.n	800a908 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	2b00      	cmp	r3, #0
 800a612:	f000 80b1 	beq.w	800a778 <HAL_UART_IRQHandler+0x1bc>
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d105      	bne.n	800a62c <HAL_UART_IRQHandler+0x70>
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a626:	2b00      	cmp	r3, #0
 800a628:	f000 80a6 	beq.w	800a778 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00a      	beq.n	800a64c <HAL_UART_IRQHandler+0x90>
 800a636:	6a3b      	ldr	r3, [r7, #32]
 800a638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d005      	beq.n	800a64c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a644:	f043 0201 	orr.w	r2, r3, #1
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	f003 0304 	and.w	r3, r3, #4
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00a      	beq.n	800a66c <HAL_UART_IRQHandler+0xb0>
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	f003 0301 	and.w	r3, r3, #1
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d005      	beq.n	800a66c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a664:	f043 0202 	orr.w	r2, r3, #2
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66e:	f003 0302 	and.w	r3, r3, #2
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00a      	beq.n	800a68c <HAL_UART_IRQHandler+0xd0>
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	f003 0301 	and.w	r3, r3, #1
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d005      	beq.n	800a68c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a684:	f043 0204 	orr.w	r2, r3, #4
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	f003 0308 	and.w	r3, r3, #8
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00f      	beq.n	800a6b6 <HAL_UART_IRQHandler+0xfa>
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	f003 0320 	and.w	r3, r3, #32
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d104      	bne.n	800a6aa <HAL_UART_IRQHandler+0xee>
 800a6a0:	69fb      	ldr	r3, [r7, #28]
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d005      	beq.n	800a6b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ae:	f043 0208 	orr.w	r2, r3, #8
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f000 811f 	beq.w	800a8fe <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c2:	f003 0320 	and.w	r3, r3, #32
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d007      	beq.n	800a6da <HAL_UART_IRQHandler+0x11e>
 800a6ca:	6a3b      	ldr	r3, [r7, #32]
 800a6cc:	f003 0320 	and.w	r3, r3, #32
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fb24 	bl	800ad22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	695b      	ldr	r3, [r3, #20]
 800a6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e4:	2b40      	cmp	r3, #64	; 0x40
 800a6e6:	bf0c      	ite	eq
 800a6e8:	2301      	moveq	r3, #1
 800a6ea:	2300      	movne	r3, #0
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f4:	f003 0308 	and.w	r3, r3, #8
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d102      	bne.n	800a702 <HAL_UART_IRQHandler+0x146>
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d031      	beq.n	800a766 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fa64 	bl	800abd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a712:	2b40      	cmp	r3, #64	; 0x40
 800a714:	d123      	bne.n	800a75e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	695a      	ldr	r2, [r3, #20]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a724:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d013      	beq.n	800a756 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a732:	4a77      	ldr	r2, [pc, #476]	; (800a910 <HAL_UART_IRQHandler+0x354>)
 800a734:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fc ff48 	bl	80075d0 <HAL_DMA_Abort_IT>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d016      	beq.n	800a774 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a750:	4610      	mov	r0, r2
 800a752:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a754:	e00e      	b.n	800a774 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f8fa 	bl	800a950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a75c:	e00a      	b.n	800a774 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f8f6 	bl	800a950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a764:	e006      	b.n	800a774 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f8f2 	bl	800a950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a772:	e0c4      	b.n	800a8fe <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a774:	bf00      	nop
    return;
 800a776:	e0c2      	b.n	800a8fe <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	f040 80a2 	bne.w	800a8c6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a784:	f003 0310 	and.w	r3, r3, #16
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f000 809c 	beq.w	800a8c6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a78e:	6a3b      	ldr	r3, [r7, #32]
 800a790:	f003 0310 	and.w	r3, r3, #16
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 8096 	beq.w	800a8c6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a79a:	2300      	movs	r3, #0
 800a79c:	60fb      	str	r3, [r7, #12]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	60fb      	str	r3, [r7, #12]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	60fb      	str	r3, [r7, #12]
 800a7ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ba:	2b40      	cmp	r3, #64	; 0x40
 800a7bc:	d14f      	bne.n	800a85e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a7c8:	8a3b      	ldrh	r3, [r7, #16]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f000 8099 	beq.w	800a902 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a7d4:	8a3a      	ldrh	r2, [r7, #16]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	f080 8093 	bcs.w	800a902 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	8a3a      	ldrh	r2, [r7, #16]
 800a7e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e6:	69db      	ldr	r3, [r3, #28]
 800a7e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7ec:	d02b      	beq.n	800a846 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	68da      	ldr	r2, [r3, #12]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a7fc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	695a      	ldr	r2, [r3, #20]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f022 0201 	bic.w	r2, r2, #1
 800a80c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	695a      	ldr	r2, [r3, #20]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a81c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2220      	movs	r2, #32
 800a822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68da      	ldr	r2, [r3, #12]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f022 0210 	bic.w	r2, r2, #16
 800a83a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a840:	4618      	mov	r0, r3
 800a842:	f7fc fe55 	bl	80074f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a84e:	b29b      	uxth	r3, r3
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	b29b      	uxth	r3, r3
 800a854:	4619      	mov	r1, r3
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f884 	bl	800a964 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a85c:	e051      	b.n	800a902 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a866:	b29b      	uxth	r3, r3
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a870:	b29b      	uxth	r3, r3
 800a872:	2b00      	cmp	r3, #0
 800a874:	d047      	beq.n	800a906 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800a876:	8a7b      	ldrh	r3, [r7, #18]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d044      	beq.n	800a906 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68da      	ldr	r2, [r3, #12]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a88a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	695a      	ldr	r2, [r3, #20]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f022 0201 	bic.w	r2, r2, #1
 800a89a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2220      	movs	r2, #32
 800a8a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68da      	ldr	r2, [r3, #12]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f022 0210 	bic.w	r2, r2, #16
 800a8b8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8ba:	8a7b      	ldrh	r3, [r7, #18]
 800a8bc:	4619      	mov	r1, r3
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f850 	bl	800a964 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a8c4:	e01f      	b.n	800a906 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d008      	beq.n	800a8e2 <HAL_UART_IRQHandler+0x326>
 800a8d0:	6a3b      	ldr	r3, [r7, #32]
 800a8d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d003      	beq.n	800a8e2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f9b9 	bl	800ac52 <UART_Transmit_IT>
    return;
 800a8e0:	e012      	b.n	800a908 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00d      	beq.n	800a908 <HAL_UART_IRQHandler+0x34c>
 800a8ec:	6a3b      	ldr	r3, [r7, #32]
 800a8ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d008      	beq.n	800a908 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f9fb 	bl	800acf2 <UART_EndTransmit_IT>
    return;
 800a8fc:	e004      	b.n	800a908 <HAL_UART_IRQHandler+0x34c>
    return;
 800a8fe:	bf00      	nop
 800a900:	e002      	b.n	800a908 <HAL_UART_IRQHandler+0x34c>
      return;
 800a902:	bf00      	nop
 800a904:	e000      	b.n	800a908 <HAL_UART_IRQHandler+0x34c>
      return;
 800a906:	bf00      	nop
  }
}
 800a908:	3728      	adds	r7, #40	; 0x28
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	0800ac2b 	.word	0x0800ac2b

0800a914 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a958:	bf00      	nop
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	460b      	mov	r3, r1
 800a96e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a988:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a994:	2b00      	cmp	r3, #0
 800a996:	d12a      	bne.n	800a9ee <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2200      	movs	r2, #0
 800a99c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68da      	ldr	r2, [r3, #12]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a9ac:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	695a      	ldr	r2, [r3, #20]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f022 0201 	bic.w	r2, r2, #1
 800a9bc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	695a      	ldr	r2, [r3, #20]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9cc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2220      	movs	r2, #32
 800a9d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d107      	bne.n	800a9ee <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68da      	ldr	r2, [r3, #12]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f022 0210 	bic.w	r2, r2, #16
 800a9ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d106      	bne.n	800aa04 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f7ff ffb1 	bl	800a964 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa02:	e002      	b.n	800aa0a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f7ff ff8f 	bl	800a928 <HAL_UART_RxCpltCallback>
}
 800aa0a:	bf00      	nop
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b084      	sub	sp, #16
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d108      	bne.n	800aa3a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa2c:	085b      	lsrs	r3, r3, #1
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	4619      	mov	r1, r3
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f7ff ff96 	bl	800a964 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa38:	e002      	b.n	800aa40 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f7ff ff7e 	bl	800a93c <HAL_UART_RxHalfCpltCallback>
}
 800aa40:	bf00      	nop
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800aa50:	2300      	movs	r3, #0
 800aa52:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa58:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	695b      	ldr	r3, [r3, #20]
 800aa60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa64:	2b80      	cmp	r3, #128	; 0x80
 800aa66:	bf0c      	ite	eq
 800aa68:	2301      	moveq	r3, #1
 800aa6a:	2300      	movne	r3, #0
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	2b21      	cmp	r3, #33	; 0x21
 800aa7a:	d108      	bne.n	800aa8e <UART_DMAError+0x46>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d005      	beq.n	800aa8e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2200      	movs	r2, #0
 800aa86:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800aa88:	68b8      	ldr	r0, [r7, #8]
 800aa8a:	f000 f88b 	bl	800aba4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa98:	2b40      	cmp	r3, #64	; 0x40
 800aa9a:	bf0c      	ite	eq
 800aa9c:	2301      	moveq	r3, #1
 800aa9e:	2300      	movne	r3, #0
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b22      	cmp	r3, #34	; 0x22
 800aaae:	d108      	bne.n	800aac2 <UART_DMAError+0x7a>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d005      	beq.n	800aac2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2200      	movs	r2, #0
 800aaba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800aabc:	68b8      	ldr	r0, [r7, #8]
 800aabe:	f000 f887 	bl	800abd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac6:	f043 0210 	orr.w	r2, r3, #16
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aace:	68b8      	ldr	r0, [r7, #8]
 800aad0:	f7ff ff3e 	bl	800a950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aad4:	bf00      	nop
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b086      	sub	sp, #24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	4613      	mov	r3, r2
 800aae8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	88fa      	ldrh	r2, [r7, #6]
 800aaf4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2222      	movs	r2, #34	; 0x22
 800ab00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab08:	4a23      	ldr	r2, [pc, #140]	; (800ab98 <UART_Start_Receive_DMA+0xbc>)
 800ab0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab10:	4a22      	ldr	r2, [pc, #136]	; (800ab9c <UART_Start_Receive_DMA+0xc0>)
 800ab12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab18:	4a21      	ldr	r2, [pc, #132]	; (800aba0 <UART_Start_Receive_DMA+0xc4>)
 800ab1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab20:	2200      	movs	r2, #0
 800ab22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ab24:	f107 0308 	add.w	r3, r7, #8
 800ab28:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3304      	adds	r3, #4
 800ab34:	4619      	mov	r1, r3
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	88fb      	ldrh	r3, [r7, #6]
 800ab3c:	f7fc fc80 	bl	8007440 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ab40:	2300      	movs	r3, #0
 800ab42:	613b      	str	r3, [r7, #16]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	613b      	str	r3, [r7, #16]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	613b      	str	r3, [r7, #16]
 800ab54:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68da      	ldr	r2, [r3, #12]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab6c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	695a      	ldr	r2, [r3, #20]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f042 0201 	orr.w	r2, r2, #1
 800ab7c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	695a      	ldr	r2, [r3, #20]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab8c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3718      	adds	r7, #24
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	0800a97d 	.word	0x0800a97d
 800ab9c:	0800aa13 	.word	0x0800aa13
 800aba0:	0800aa49 	.word	0x0800aa49

0800aba4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68da      	ldr	r2, [r3, #12]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800abba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2220      	movs	r2, #32
 800abc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68da      	ldr	r2, [r3, #12]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800abe6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	695a      	ldr	r2, [r3, #20]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f022 0201 	bic.w	r2, r2, #1
 800abf6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d107      	bne.n	800ac10 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68da      	ldr	r2, [r3, #12]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f022 0210 	bic.w	r2, r2, #16
 800ac0e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2220      	movs	r2, #32
 800ac14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ac1e:	bf00      	nop
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b084      	sub	sp, #16
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2200      	movs	r2, #0
 800ac42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f7ff fe83 	bl	800a950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac4a:	bf00      	nop
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ac52:	b480      	push	{r7}
 800ac54:	b085      	sub	sp, #20
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b21      	cmp	r3, #33	; 0x21
 800ac64:	d13e      	bne.n	800ace4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac6e:	d114      	bne.n	800ac9a <UART_Transmit_IT+0x48>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d110      	bne.n	800ac9a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a1b      	ldr	r3, [r3, #32]
 800ac7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	881b      	ldrh	r3, [r3, #0]
 800ac82:	461a      	mov	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a1b      	ldr	r3, [r3, #32]
 800ac92:	1c9a      	adds	r2, r3, #2
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	621a      	str	r2, [r3, #32]
 800ac98:	e008      	b.n	800acac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a1b      	ldr	r3, [r3, #32]
 800ac9e:	1c59      	adds	r1, r3, #1
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	6211      	str	r1, [r2, #32]
 800aca4:	781a      	ldrb	r2, [r3, #0]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	3b01      	subs	r3, #1
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	4619      	mov	r1, r3
 800acba:	84d1      	strh	r1, [r2, #38]	; 0x26
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10f      	bne.n	800ace0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	68da      	ldr	r2, [r3, #12]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800acce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68da      	ldr	r2, [r3, #12]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acde:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	e000      	b.n	800ace6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ace4:	2302      	movs	r3, #2
  }
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b082      	sub	sp, #8
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68da      	ldr	r2, [r3, #12]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2220      	movs	r2, #32
 800ad0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f7ff fdfe 	bl	800a914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b084      	sub	sp, #16
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	2b22      	cmp	r3, #34	; 0x22
 800ad34:	f040 8087 	bne.w	800ae46 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad40:	d117      	bne.n	800ad72 <UART_Receive_IT+0x50>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d113      	bne.n	800ad72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad52:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad6a:	1c9a      	adds	r2, r3, #2
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	629a      	str	r2, [r3, #40]	; 0x28
 800ad70:	e026      	b.n	800adc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad76:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad84:	d007      	beq.n	800ad96 <UART_Receive_IT+0x74>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10a      	bne.n	800ada4 <UART_Receive_IT+0x82>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d106      	bne.n	800ada4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	b2da      	uxtb	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	701a      	strb	r2, [r3, #0]
 800ada2:	e008      	b.n	800adb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adba:	1c5a      	adds	r2, r3, #1
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	3b01      	subs	r3, #1
 800adc8:	b29b      	uxth	r3, r3
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	4619      	mov	r1, r3
 800adce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800add0:	2b00      	cmp	r3, #0
 800add2:	d136      	bne.n	800ae42 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68da      	ldr	r2, [r3, #12]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f022 0220 	bic.w	r2, r2, #32
 800ade2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68da      	ldr	r2, [r3, #12]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800adf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	695a      	ldr	r2, [r3, #20]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f022 0201 	bic.w	r2, r2, #1
 800ae02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2220      	movs	r2, #32
 800ae08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d10e      	bne.n	800ae32 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68da      	ldr	r2, [r3, #12]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f022 0210 	bic.w	r2, r2, #16
 800ae22:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae28:	4619      	mov	r1, r3
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f7ff fd9a 	bl	800a964 <HAL_UARTEx_RxEventCallback>
 800ae30:	e002      	b.n	800ae38 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fd78 	bl	800a928 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e002      	b.n	800ae48 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	e000      	b.n	800ae48 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800ae46:	2302      	movs	r3, #2
  }
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	b09f      	sub	sp, #124	; 0x7c
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ae64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae66:	68d9      	ldr	r1, [r3, #12]
 800ae68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	ea40 0301 	orr.w	r3, r0, r1
 800ae70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae74:	689a      	ldr	r2, [r3, #8]
 800ae76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	431a      	orrs	r2, r3
 800ae7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	431a      	orrs	r2, r3
 800ae82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ae8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ae94:	f021 010c 	bic.w	r1, r1, #12
 800ae98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae9e:	430b      	orrs	r3, r1
 800aea0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	695b      	ldr	r3, [r3, #20]
 800aea8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aeac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeae:	6999      	ldr	r1, [r3, #24]
 800aeb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	ea40 0301 	orr.w	r3, r0, r1
 800aeb8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aeba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	4bc5      	ldr	r3, [pc, #788]	; (800b1d4 <UART_SetConfig+0x384>)
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d004      	beq.n	800aece <UART_SetConfig+0x7e>
 800aec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	4bc3      	ldr	r3, [pc, #780]	; (800b1d8 <UART_SetConfig+0x388>)
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d103      	bne.n	800aed6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aece:	f7fe fd9d 	bl	8009a0c <HAL_RCC_GetPCLK2Freq>
 800aed2:	6778      	str	r0, [r7, #116]	; 0x74
 800aed4:	e002      	b.n	800aedc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aed6:	f7fe fd85 	bl	80099e4 <HAL_RCC_GetPCLK1Freq>
 800aeda:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aedc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aede:	69db      	ldr	r3, [r3, #28]
 800aee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aee4:	f040 80b6 	bne.w	800b054 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aeea:	461c      	mov	r4, r3
 800aeec:	f04f 0500 	mov.w	r5, #0
 800aef0:	4622      	mov	r2, r4
 800aef2:	462b      	mov	r3, r5
 800aef4:	1891      	adds	r1, r2, r2
 800aef6:	6439      	str	r1, [r7, #64]	; 0x40
 800aef8:	415b      	adcs	r3, r3
 800aefa:	647b      	str	r3, [r7, #68]	; 0x44
 800aefc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800af00:	1912      	adds	r2, r2, r4
 800af02:	eb45 0303 	adc.w	r3, r5, r3
 800af06:	f04f 0000 	mov.w	r0, #0
 800af0a:	f04f 0100 	mov.w	r1, #0
 800af0e:	00d9      	lsls	r1, r3, #3
 800af10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800af14:	00d0      	lsls	r0, r2, #3
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	1911      	adds	r1, r2, r4
 800af1c:	6639      	str	r1, [r7, #96]	; 0x60
 800af1e:	416b      	adcs	r3, r5
 800af20:	667b      	str	r3, [r7, #100]	; 0x64
 800af22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	461a      	mov	r2, r3
 800af28:	f04f 0300 	mov.w	r3, #0
 800af2c:	1891      	adds	r1, r2, r2
 800af2e:	63b9      	str	r1, [r7, #56]	; 0x38
 800af30:	415b      	adcs	r3, r3
 800af32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800af38:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800af3c:	f7f5 fea4 	bl	8000c88 <__aeabi_uldivmod>
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	4ba5      	ldr	r3, [pc, #660]	; (800b1dc <UART_SetConfig+0x38c>)
 800af46:	fba3 2302 	umull	r2, r3, r3, r2
 800af4a:	095b      	lsrs	r3, r3, #5
 800af4c:	011e      	lsls	r6, r3, #4
 800af4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af50:	461c      	mov	r4, r3
 800af52:	f04f 0500 	mov.w	r5, #0
 800af56:	4622      	mov	r2, r4
 800af58:	462b      	mov	r3, r5
 800af5a:	1891      	adds	r1, r2, r2
 800af5c:	6339      	str	r1, [r7, #48]	; 0x30
 800af5e:	415b      	adcs	r3, r3
 800af60:	637b      	str	r3, [r7, #52]	; 0x34
 800af62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800af66:	1912      	adds	r2, r2, r4
 800af68:	eb45 0303 	adc.w	r3, r5, r3
 800af6c:	f04f 0000 	mov.w	r0, #0
 800af70:	f04f 0100 	mov.w	r1, #0
 800af74:	00d9      	lsls	r1, r3, #3
 800af76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800af7a:	00d0      	lsls	r0, r2, #3
 800af7c:	4602      	mov	r2, r0
 800af7e:	460b      	mov	r3, r1
 800af80:	1911      	adds	r1, r2, r4
 800af82:	65b9      	str	r1, [r7, #88]	; 0x58
 800af84:	416b      	adcs	r3, r5
 800af86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	461a      	mov	r2, r3
 800af8e:	f04f 0300 	mov.w	r3, #0
 800af92:	1891      	adds	r1, r2, r2
 800af94:	62b9      	str	r1, [r7, #40]	; 0x28
 800af96:	415b      	adcs	r3, r3
 800af98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800af9e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800afa2:	f7f5 fe71 	bl	8000c88 <__aeabi_uldivmod>
 800afa6:	4602      	mov	r2, r0
 800afa8:	460b      	mov	r3, r1
 800afaa:	4b8c      	ldr	r3, [pc, #560]	; (800b1dc <UART_SetConfig+0x38c>)
 800afac:	fba3 1302 	umull	r1, r3, r3, r2
 800afb0:	095b      	lsrs	r3, r3, #5
 800afb2:	2164      	movs	r1, #100	; 0x64
 800afb4:	fb01 f303 	mul.w	r3, r1, r3
 800afb8:	1ad3      	subs	r3, r2, r3
 800afba:	00db      	lsls	r3, r3, #3
 800afbc:	3332      	adds	r3, #50	; 0x32
 800afbe:	4a87      	ldr	r2, [pc, #540]	; (800b1dc <UART_SetConfig+0x38c>)
 800afc0:	fba2 2303 	umull	r2, r3, r2, r3
 800afc4:	095b      	lsrs	r3, r3, #5
 800afc6:	005b      	lsls	r3, r3, #1
 800afc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800afcc:	441e      	add	r6, r3
 800afce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afd0:	4618      	mov	r0, r3
 800afd2:	f04f 0100 	mov.w	r1, #0
 800afd6:	4602      	mov	r2, r0
 800afd8:	460b      	mov	r3, r1
 800afda:	1894      	adds	r4, r2, r2
 800afdc:	623c      	str	r4, [r7, #32]
 800afde:	415b      	adcs	r3, r3
 800afe0:	627b      	str	r3, [r7, #36]	; 0x24
 800afe2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800afe6:	1812      	adds	r2, r2, r0
 800afe8:	eb41 0303 	adc.w	r3, r1, r3
 800afec:	f04f 0400 	mov.w	r4, #0
 800aff0:	f04f 0500 	mov.w	r5, #0
 800aff4:	00dd      	lsls	r5, r3, #3
 800aff6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800affa:	00d4      	lsls	r4, r2, #3
 800affc:	4622      	mov	r2, r4
 800affe:	462b      	mov	r3, r5
 800b000:	1814      	adds	r4, r2, r0
 800b002:	653c      	str	r4, [r7, #80]	; 0x50
 800b004:	414b      	adcs	r3, r1
 800b006:	657b      	str	r3, [r7, #84]	; 0x54
 800b008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	461a      	mov	r2, r3
 800b00e:	f04f 0300 	mov.w	r3, #0
 800b012:	1891      	adds	r1, r2, r2
 800b014:	61b9      	str	r1, [r7, #24]
 800b016:	415b      	adcs	r3, r3
 800b018:	61fb      	str	r3, [r7, #28]
 800b01a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b01e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b022:	f7f5 fe31 	bl	8000c88 <__aeabi_uldivmod>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	4b6c      	ldr	r3, [pc, #432]	; (800b1dc <UART_SetConfig+0x38c>)
 800b02c:	fba3 1302 	umull	r1, r3, r3, r2
 800b030:	095b      	lsrs	r3, r3, #5
 800b032:	2164      	movs	r1, #100	; 0x64
 800b034:	fb01 f303 	mul.w	r3, r1, r3
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	00db      	lsls	r3, r3, #3
 800b03c:	3332      	adds	r3, #50	; 0x32
 800b03e:	4a67      	ldr	r2, [pc, #412]	; (800b1dc <UART_SetConfig+0x38c>)
 800b040:	fba2 2303 	umull	r2, r3, r2, r3
 800b044:	095b      	lsrs	r3, r3, #5
 800b046:	f003 0207 	and.w	r2, r3, #7
 800b04a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4432      	add	r2, r6
 800b050:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b052:	e0b9      	b.n	800b1c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b056:	461c      	mov	r4, r3
 800b058:	f04f 0500 	mov.w	r5, #0
 800b05c:	4622      	mov	r2, r4
 800b05e:	462b      	mov	r3, r5
 800b060:	1891      	adds	r1, r2, r2
 800b062:	6139      	str	r1, [r7, #16]
 800b064:	415b      	adcs	r3, r3
 800b066:	617b      	str	r3, [r7, #20]
 800b068:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b06c:	1912      	adds	r2, r2, r4
 800b06e:	eb45 0303 	adc.w	r3, r5, r3
 800b072:	f04f 0000 	mov.w	r0, #0
 800b076:	f04f 0100 	mov.w	r1, #0
 800b07a:	00d9      	lsls	r1, r3, #3
 800b07c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b080:	00d0      	lsls	r0, r2, #3
 800b082:	4602      	mov	r2, r0
 800b084:	460b      	mov	r3, r1
 800b086:	eb12 0804 	adds.w	r8, r2, r4
 800b08a:	eb43 0905 	adc.w	r9, r3, r5
 800b08e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	4618      	mov	r0, r3
 800b094:	f04f 0100 	mov.w	r1, #0
 800b098:	f04f 0200 	mov.w	r2, #0
 800b09c:	f04f 0300 	mov.w	r3, #0
 800b0a0:	008b      	lsls	r3, r1, #2
 800b0a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b0a6:	0082      	lsls	r2, r0, #2
 800b0a8:	4640      	mov	r0, r8
 800b0aa:	4649      	mov	r1, r9
 800b0ac:	f7f5 fdec 	bl	8000c88 <__aeabi_uldivmod>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	4b49      	ldr	r3, [pc, #292]	; (800b1dc <UART_SetConfig+0x38c>)
 800b0b6:	fba3 2302 	umull	r2, r3, r3, r2
 800b0ba:	095b      	lsrs	r3, r3, #5
 800b0bc:	011e      	lsls	r6, r3, #4
 800b0be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f04f 0100 	mov.w	r1, #0
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	1894      	adds	r4, r2, r2
 800b0cc:	60bc      	str	r4, [r7, #8]
 800b0ce:	415b      	adcs	r3, r3
 800b0d0:	60fb      	str	r3, [r7, #12]
 800b0d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b0d6:	1812      	adds	r2, r2, r0
 800b0d8:	eb41 0303 	adc.w	r3, r1, r3
 800b0dc:	f04f 0400 	mov.w	r4, #0
 800b0e0:	f04f 0500 	mov.w	r5, #0
 800b0e4:	00dd      	lsls	r5, r3, #3
 800b0e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b0ea:	00d4      	lsls	r4, r2, #3
 800b0ec:	4622      	mov	r2, r4
 800b0ee:	462b      	mov	r3, r5
 800b0f0:	1814      	adds	r4, r2, r0
 800b0f2:	64bc      	str	r4, [r7, #72]	; 0x48
 800b0f4:	414b      	adcs	r3, r1
 800b0f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f04f 0100 	mov.w	r1, #0
 800b102:	f04f 0200 	mov.w	r2, #0
 800b106:	f04f 0300 	mov.w	r3, #0
 800b10a:	008b      	lsls	r3, r1, #2
 800b10c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b110:	0082      	lsls	r2, r0, #2
 800b112:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b116:	f7f5 fdb7 	bl	8000c88 <__aeabi_uldivmod>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	4b2f      	ldr	r3, [pc, #188]	; (800b1dc <UART_SetConfig+0x38c>)
 800b120:	fba3 1302 	umull	r1, r3, r3, r2
 800b124:	095b      	lsrs	r3, r3, #5
 800b126:	2164      	movs	r1, #100	; 0x64
 800b128:	fb01 f303 	mul.w	r3, r1, r3
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	011b      	lsls	r3, r3, #4
 800b130:	3332      	adds	r3, #50	; 0x32
 800b132:	4a2a      	ldr	r2, [pc, #168]	; (800b1dc <UART_SetConfig+0x38c>)
 800b134:	fba2 2303 	umull	r2, r3, r2, r3
 800b138:	095b      	lsrs	r3, r3, #5
 800b13a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b13e:	441e      	add	r6, r3
 800b140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b142:	4618      	mov	r0, r3
 800b144:	f04f 0100 	mov.w	r1, #0
 800b148:	4602      	mov	r2, r0
 800b14a:	460b      	mov	r3, r1
 800b14c:	1894      	adds	r4, r2, r2
 800b14e:	603c      	str	r4, [r7, #0]
 800b150:	415b      	adcs	r3, r3
 800b152:	607b      	str	r3, [r7, #4]
 800b154:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b158:	1812      	adds	r2, r2, r0
 800b15a:	eb41 0303 	adc.w	r3, r1, r3
 800b15e:	f04f 0400 	mov.w	r4, #0
 800b162:	f04f 0500 	mov.w	r5, #0
 800b166:	00dd      	lsls	r5, r3, #3
 800b168:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b16c:	00d4      	lsls	r4, r2, #3
 800b16e:	4622      	mov	r2, r4
 800b170:	462b      	mov	r3, r5
 800b172:	eb12 0a00 	adds.w	sl, r2, r0
 800b176:	eb43 0b01 	adc.w	fp, r3, r1
 800b17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	4618      	mov	r0, r3
 800b180:	f04f 0100 	mov.w	r1, #0
 800b184:	f04f 0200 	mov.w	r2, #0
 800b188:	f04f 0300 	mov.w	r3, #0
 800b18c:	008b      	lsls	r3, r1, #2
 800b18e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b192:	0082      	lsls	r2, r0, #2
 800b194:	4650      	mov	r0, sl
 800b196:	4659      	mov	r1, fp
 800b198:	f7f5 fd76 	bl	8000c88 <__aeabi_uldivmod>
 800b19c:	4602      	mov	r2, r0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	4b0e      	ldr	r3, [pc, #56]	; (800b1dc <UART_SetConfig+0x38c>)
 800b1a2:	fba3 1302 	umull	r1, r3, r3, r2
 800b1a6:	095b      	lsrs	r3, r3, #5
 800b1a8:	2164      	movs	r1, #100	; 0x64
 800b1aa:	fb01 f303 	mul.w	r3, r1, r3
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	011b      	lsls	r3, r3, #4
 800b1b2:	3332      	adds	r3, #50	; 0x32
 800b1b4:	4a09      	ldr	r2, [pc, #36]	; (800b1dc <UART_SetConfig+0x38c>)
 800b1b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ba:	095b      	lsrs	r3, r3, #5
 800b1bc:	f003 020f 	and.w	r2, r3, #15
 800b1c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4432      	add	r2, r6
 800b1c6:	609a      	str	r2, [r3, #8]
}
 800b1c8:	bf00      	nop
 800b1ca:	377c      	adds	r7, #124	; 0x7c
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d2:	bf00      	nop
 800b1d4:	40011000 	.word	0x40011000
 800b1d8:	40011400 	.word	0x40011400
 800b1dc:	51eb851f 	.word	0x51eb851f

0800b1e0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	4b20      	ldr	r3, [pc, #128]	; (800b280 <FSMC_NORSRAM_Init+0xa0>)
 800b1fe:	4013      	ands	r3, r2
 800b200:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b20a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800b210:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800b216:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800b21c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800b222:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800b228:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800b22e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800b234:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800b23a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800b240:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800b246:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800b24c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	4313      	orrs	r3, r2
 800b252:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	2b08      	cmp	r3, #8
 800b25a:	d103      	bne.n	800b264 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b262:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	68f9      	ldr	r1, [r7, #12]
 800b26c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	3714      	adds	r7, #20
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	fff00080 	.word	0xfff00080

0800b284 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b284:	b480      	push	{r7}
 800b286:	b087      	sub	sp, #28
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800b290:	2300      	movs	r3, #0
 800b292:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	1c5a      	adds	r2, r3, #1
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b29e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b2a6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b2b2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800b2ba:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800b2c2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	3b01      	subs	r3, #1
 800b2ca:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b2cc:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	695b      	ldr	r3, [r3, #20]
 800b2d2:	3b02      	subs	r3, #2
 800b2d4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800b2d6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	1c5a      	adds	r2, r3, #1
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6979      	ldr	r1, [r7, #20]
 800b2ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	371c      	adds	r7, #28
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
	...

0800b300 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
 800b30c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800b30e:	2300      	movs	r3, #0
 800b310:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b318:	d122      	bne.n	800b360 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b322:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	4b15      	ldr	r3, [pc, #84]	; (800b37c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800b328:	4013      	ands	r3, r2
 800b32a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b336:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800b33e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800b346:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b34c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b34e:	697a      	ldr	r2, [r7, #20]
 800b350:	4313      	orrs	r3, r2
 800b352:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	6979      	ldr	r1, [r7, #20]
 800b35a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b35e:	e005      	b.n	800b36c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	371c      	adds	r7, #28
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	cff00000 	.word	0xcff00000

0800b380 <__errno>:
 800b380:	4b01      	ldr	r3, [pc, #4]	; (800b388 <__errno+0x8>)
 800b382:	6818      	ldr	r0, [r3, #0]
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	20000014 	.word	0x20000014

0800b38c <__libc_init_array>:
 800b38c:	b570      	push	{r4, r5, r6, lr}
 800b38e:	4d0d      	ldr	r5, [pc, #52]	; (800b3c4 <__libc_init_array+0x38>)
 800b390:	4c0d      	ldr	r4, [pc, #52]	; (800b3c8 <__libc_init_array+0x3c>)
 800b392:	1b64      	subs	r4, r4, r5
 800b394:	10a4      	asrs	r4, r4, #2
 800b396:	2600      	movs	r6, #0
 800b398:	42a6      	cmp	r6, r4
 800b39a:	d109      	bne.n	800b3b0 <__libc_init_array+0x24>
 800b39c:	4d0b      	ldr	r5, [pc, #44]	; (800b3cc <__libc_init_array+0x40>)
 800b39e:	4c0c      	ldr	r4, [pc, #48]	; (800b3d0 <__libc_init_array+0x44>)
 800b3a0:	f004 f8e4 	bl	800f56c <_init>
 800b3a4:	1b64      	subs	r4, r4, r5
 800b3a6:	10a4      	asrs	r4, r4, #2
 800b3a8:	2600      	movs	r6, #0
 800b3aa:	42a6      	cmp	r6, r4
 800b3ac:	d105      	bne.n	800b3ba <__libc_init_array+0x2e>
 800b3ae:	bd70      	pop	{r4, r5, r6, pc}
 800b3b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3b4:	4798      	blx	r3
 800b3b6:	3601      	adds	r6, #1
 800b3b8:	e7ee      	b.n	800b398 <__libc_init_array+0xc>
 800b3ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3be:	4798      	blx	r3
 800b3c0:	3601      	adds	r6, #1
 800b3c2:	e7f2      	b.n	800b3aa <__libc_init_array+0x1e>
 800b3c4:	0801cb90 	.word	0x0801cb90
 800b3c8:	0801cb90 	.word	0x0801cb90
 800b3cc:	0801cb90 	.word	0x0801cb90
 800b3d0:	0801cb94 	.word	0x0801cb94

0800b3d4 <memset>:
 800b3d4:	4402      	add	r2, r0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d100      	bne.n	800b3de <memset+0xa>
 800b3dc:	4770      	bx	lr
 800b3de:	f803 1b01 	strb.w	r1, [r3], #1
 800b3e2:	e7f9      	b.n	800b3d8 <memset+0x4>

0800b3e4 <__cvt>:
 800b3e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e8:	ec55 4b10 	vmov	r4, r5, d0
 800b3ec:	2d00      	cmp	r5, #0
 800b3ee:	460e      	mov	r6, r1
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	462b      	mov	r3, r5
 800b3f4:	bfbb      	ittet	lt
 800b3f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b3fa:	461d      	movlt	r5, r3
 800b3fc:	2300      	movge	r3, #0
 800b3fe:	232d      	movlt	r3, #45	; 0x2d
 800b400:	700b      	strb	r3, [r1, #0]
 800b402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b404:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b408:	4691      	mov	r9, r2
 800b40a:	f023 0820 	bic.w	r8, r3, #32
 800b40e:	bfbc      	itt	lt
 800b410:	4622      	movlt	r2, r4
 800b412:	4614      	movlt	r4, r2
 800b414:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b418:	d005      	beq.n	800b426 <__cvt+0x42>
 800b41a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b41e:	d100      	bne.n	800b422 <__cvt+0x3e>
 800b420:	3601      	adds	r6, #1
 800b422:	2102      	movs	r1, #2
 800b424:	e000      	b.n	800b428 <__cvt+0x44>
 800b426:	2103      	movs	r1, #3
 800b428:	ab03      	add	r3, sp, #12
 800b42a:	9301      	str	r3, [sp, #4]
 800b42c:	ab02      	add	r3, sp, #8
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	ec45 4b10 	vmov	d0, r4, r5
 800b434:	4653      	mov	r3, sl
 800b436:	4632      	mov	r2, r6
 800b438:	f000 fe3a 	bl	800c0b0 <_dtoa_r>
 800b43c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b440:	4607      	mov	r7, r0
 800b442:	d102      	bne.n	800b44a <__cvt+0x66>
 800b444:	f019 0f01 	tst.w	r9, #1
 800b448:	d022      	beq.n	800b490 <__cvt+0xac>
 800b44a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b44e:	eb07 0906 	add.w	r9, r7, r6
 800b452:	d110      	bne.n	800b476 <__cvt+0x92>
 800b454:	783b      	ldrb	r3, [r7, #0]
 800b456:	2b30      	cmp	r3, #48	; 0x30
 800b458:	d10a      	bne.n	800b470 <__cvt+0x8c>
 800b45a:	2200      	movs	r2, #0
 800b45c:	2300      	movs	r3, #0
 800b45e:	4620      	mov	r0, r4
 800b460:	4629      	mov	r1, r5
 800b462:	f7f5 fb31 	bl	8000ac8 <__aeabi_dcmpeq>
 800b466:	b918      	cbnz	r0, 800b470 <__cvt+0x8c>
 800b468:	f1c6 0601 	rsb	r6, r6, #1
 800b46c:	f8ca 6000 	str.w	r6, [sl]
 800b470:	f8da 3000 	ldr.w	r3, [sl]
 800b474:	4499      	add	r9, r3
 800b476:	2200      	movs	r2, #0
 800b478:	2300      	movs	r3, #0
 800b47a:	4620      	mov	r0, r4
 800b47c:	4629      	mov	r1, r5
 800b47e:	f7f5 fb23 	bl	8000ac8 <__aeabi_dcmpeq>
 800b482:	b108      	cbz	r0, 800b488 <__cvt+0xa4>
 800b484:	f8cd 900c 	str.w	r9, [sp, #12]
 800b488:	2230      	movs	r2, #48	; 0x30
 800b48a:	9b03      	ldr	r3, [sp, #12]
 800b48c:	454b      	cmp	r3, r9
 800b48e:	d307      	bcc.n	800b4a0 <__cvt+0xbc>
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b494:	1bdb      	subs	r3, r3, r7
 800b496:	4638      	mov	r0, r7
 800b498:	6013      	str	r3, [r2, #0]
 800b49a:	b004      	add	sp, #16
 800b49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a0:	1c59      	adds	r1, r3, #1
 800b4a2:	9103      	str	r1, [sp, #12]
 800b4a4:	701a      	strb	r2, [r3, #0]
 800b4a6:	e7f0      	b.n	800b48a <__cvt+0xa6>

0800b4a8 <__exponent>:
 800b4a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2900      	cmp	r1, #0
 800b4ae:	bfb8      	it	lt
 800b4b0:	4249      	neglt	r1, r1
 800b4b2:	f803 2b02 	strb.w	r2, [r3], #2
 800b4b6:	bfb4      	ite	lt
 800b4b8:	222d      	movlt	r2, #45	; 0x2d
 800b4ba:	222b      	movge	r2, #43	; 0x2b
 800b4bc:	2909      	cmp	r1, #9
 800b4be:	7042      	strb	r2, [r0, #1]
 800b4c0:	dd2a      	ble.n	800b518 <__exponent+0x70>
 800b4c2:	f10d 0407 	add.w	r4, sp, #7
 800b4c6:	46a4      	mov	ip, r4
 800b4c8:	270a      	movs	r7, #10
 800b4ca:	46a6      	mov	lr, r4
 800b4cc:	460a      	mov	r2, r1
 800b4ce:	fb91 f6f7 	sdiv	r6, r1, r7
 800b4d2:	fb07 1516 	mls	r5, r7, r6, r1
 800b4d6:	3530      	adds	r5, #48	; 0x30
 800b4d8:	2a63      	cmp	r2, #99	; 0x63
 800b4da:	f104 34ff 	add.w	r4, r4, #4294967295
 800b4de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b4e2:	4631      	mov	r1, r6
 800b4e4:	dcf1      	bgt.n	800b4ca <__exponent+0x22>
 800b4e6:	3130      	adds	r1, #48	; 0x30
 800b4e8:	f1ae 0502 	sub.w	r5, lr, #2
 800b4ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b4f0:	1c44      	adds	r4, r0, #1
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	4561      	cmp	r1, ip
 800b4f6:	d30a      	bcc.n	800b50e <__exponent+0x66>
 800b4f8:	f10d 0209 	add.w	r2, sp, #9
 800b4fc:	eba2 020e 	sub.w	r2, r2, lr
 800b500:	4565      	cmp	r5, ip
 800b502:	bf88      	it	hi
 800b504:	2200      	movhi	r2, #0
 800b506:	4413      	add	r3, r2
 800b508:	1a18      	subs	r0, r3, r0
 800b50a:	b003      	add	sp, #12
 800b50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b50e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b512:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b516:	e7ed      	b.n	800b4f4 <__exponent+0x4c>
 800b518:	2330      	movs	r3, #48	; 0x30
 800b51a:	3130      	adds	r1, #48	; 0x30
 800b51c:	7083      	strb	r3, [r0, #2]
 800b51e:	70c1      	strb	r1, [r0, #3]
 800b520:	1d03      	adds	r3, r0, #4
 800b522:	e7f1      	b.n	800b508 <__exponent+0x60>

0800b524 <_printf_float>:
 800b524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b528:	ed2d 8b02 	vpush	{d8}
 800b52c:	b08d      	sub	sp, #52	; 0x34
 800b52e:	460c      	mov	r4, r1
 800b530:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b534:	4616      	mov	r6, r2
 800b536:	461f      	mov	r7, r3
 800b538:	4605      	mov	r5, r0
 800b53a:	f001 fd5d 	bl	800cff8 <_localeconv_r>
 800b53e:	f8d0 a000 	ldr.w	sl, [r0]
 800b542:	4650      	mov	r0, sl
 800b544:	f7f4 fe44 	bl	80001d0 <strlen>
 800b548:	2300      	movs	r3, #0
 800b54a:	930a      	str	r3, [sp, #40]	; 0x28
 800b54c:	6823      	ldr	r3, [r4, #0]
 800b54e:	9305      	str	r3, [sp, #20]
 800b550:	f8d8 3000 	ldr.w	r3, [r8]
 800b554:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b558:	3307      	adds	r3, #7
 800b55a:	f023 0307 	bic.w	r3, r3, #7
 800b55e:	f103 0208 	add.w	r2, r3, #8
 800b562:	f8c8 2000 	str.w	r2, [r8]
 800b566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b56e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b572:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b576:	9307      	str	r3, [sp, #28]
 800b578:	f8cd 8018 	str.w	r8, [sp, #24]
 800b57c:	ee08 0a10 	vmov	s16, r0
 800b580:	4b9f      	ldr	r3, [pc, #636]	; (800b800 <_printf_float+0x2dc>)
 800b582:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b586:	f04f 32ff 	mov.w	r2, #4294967295
 800b58a:	f7f5 facf 	bl	8000b2c <__aeabi_dcmpun>
 800b58e:	bb88      	cbnz	r0, 800b5f4 <_printf_float+0xd0>
 800b590:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b594:	4b9a      	ldr	r3, [pc, #616]	; (800b800 <_printf_float+0x2dc>)
 800b596:	f04f 32ff 	mov.w	r2, #4294967295
 800b59a:	f7f5 faa9 	bl	8000af0 <__aeabi_dcmple>
 800b59e:	bb48      	cbnz	r0, 800b5f4 <_printf_float+0xd0>
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	4640      	mov	r0, r8
 800b5a6:	4649      	mov	r1, r9
 800b5a8:	f7f5 fa98 	bl	8000adc <__aeabi_dcmplt>
 800b5ac:	b110      	cbz	r0, 800b5b4 <_printf_float+0x90>
 800b5ae:	232d      	movs	r3, #45	; 0x2d
 800b5b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5b4:	4b93      	ldr	r3, [pc, #588]	; (800b804 <_printf_float+0x2e0>)
 800b5b6:	4894      	ldr	r0, [pc, #592]	; (800b808 <_printf_float+0x2e4>)
 800b5b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b5bc:	bf94      	ite	ls
 800b5be:	4698      	movls	r8, r3
 800b5c0:	4680      	movhi	r8, r0
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	6123      	str	r3, [r4, #16]
 800b5c6:	9b05      	ldr	r3, [sp, #20]
 800b5c8:	f023 0204 	bic.w	r2, r3, #4
 800b5cc:	6022      	str	r2, [r4, #0]
 800b5ce:	f04f 0900 	mov.w	r9, #0
 800b5d2:	9700      	str	r7, [sp, #0]
 800b5d4:	4633      	mov	r3, r6
 800b5d6:	aa0b      	add	r2, sp, #44	; 0x2c
 800b5d8:	4621      	mov	r1, r4
 800b5da:	4628      	mov	r0, r5
 800b5dc:	f000 f9d8 	bl	800b990 <_printf_common>
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	f040 8090 	bne.w	800b706 <_printf_float+0x1e2>
 800b5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ea:	b00d      	add	sp, #52	; 0x34
 800b5ec:	ecbd 8b02 	vpop	{d8}
 800b5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f4:	4642      	mov	r2, r8
 800b5f6:	464b      	mov	r3, r9
 800b5f8:	4640      	mov	r0, r8
 800b5fa:	4649      	mov	r1, r9
 800b5fc:	f7f5 fa96 	bl	8000b2c <__aeabi_dcmpun>
 800b600:	b140      	cbz	r0, 800b614 <_printf_float+0xf0>
 800b602:	464b      	mov	r3, r9
 800b604:	2b00      	cmp	r3, #0
 800b606:	bfbc      	itt	lt
 800b608:	232d      	movlt	r3, #45	; 0x2d
 800b60a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b60e:	487f      	ldr	r0, [pc, #508]	; (800b80c <_printf_float+0x2e8>)
 800b610:	4b7f      	ldr	r3, [pc, #508]	; (800b810 <_printf_float+0x2ec>)
 800b612:	e7d1      	b.n	800b5b8 <_printf_float+0x94>
 800b614:	6863      	ldr	r3, [r4, #4]
 800b616:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b61a:	9206      	str	r2, [sp, #24]
 800b61c:	1c5a      	adds	r2, r3, #1
 800b61e:	d13f      	bne.n	800b6a0 <_printf_float+0x17c>
 800b620:	2306      	movs	r3, #6
 800b622:	6063      	str	r3, [r4, #4]
 800b624:	9b05      	ldr	r3, [sp, #20]
 800b626:	6861      	ldr	r1, [r4, #4]
 800b628:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b62c:	2300      	movs	r3, #0
 800b62e:	9303      	str	r3, [sp, #12]
 800b630:	ab0a      	add	r3, sp, #40	; 0x28
 800b632:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b636:	ab09      	add	r3, sp, #36	; 0x24
 800b638:	ec49 8b10 	vmov	d0, r8, r9
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	6022      	str	r2, [r4, #0]
 800b640:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b644:	4628      	mov	r0, r5
 800b646:	f7ff fecd 	bl	800b3e4 <__cvt>
 800b64a:	9b06      	ldr	r3, [sp, #24]
 800b64c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b64e:	2b47      	cmp	r3, #71	; 0x47
 800b650:	4680      	mov	r8, r0
 800b652:	d108      	bne.n	800b666 <_printf_float+0x142>
 800b654:	1cc8      	adds	r0, r1, #3
 800b656:	db02      	blt.n	800b65e <_printf_float+0x13a>
 800b658:	6863      	ldr	r3, [r4, #4]
 800b65a:	4299      	cmp	r1, r3
 800b65c:	dd41      	ble.n	800b6e2 <_printf_float+0x1be>
 800b65e:	f1ab 0b02 	sub.w	fp, fp, #2
 800b662:	fa5f fb8b 	uxtb.w	fp, fp
 800b666:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b66a:	d820      	bhi.n	800b6ae <_printf_float+0x18a>
 800b66c:	3901      	subs	r1, #1
 800b66e:	465a      	mov	r2, fp
 800b670:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b674:	9109      	str	r1, [sp, #36]	; 0x24
 800b676:	f7ff ff17 	bl	800b4a8 <__exponent>
 800b67a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b67c:	1813      	adds	r3, r2, r0
 800b67e:	2a01      	cmp	r2, #1
 800b680:	4681      	mov	r9, r0
 800b682:	6123      	str	r3, [r4, #16]
 800b684:	dc02      	bgt.n	800b68c <_printf_float+0x168>
 800b686:	6822      	ldr	r2, [r4, #0]
 800b688:	07d2      	lsls	r2, r2, #31
 800b68a:	d501      	bpl.n	800b690 <_printf_float+0x16c>
 800b68c:	3301      	adds	r3, #1
 800b68e:	6123      	str	r3, [r4, #16]
 800b690:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b694:	2b00      	cmp	r3, #0
 800b696:	d09c      	beq.n	800b5d2 <_printf_float+0xae>
 800b698:	232d      	movs	r3, #45	; 0x2d
 800b69a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b69e:	e798      	b.n	800b5d2 <_printf_float+0xae>
 800b6a0:	9a06      	ldr	r2, [sp, #24]
 800b6a2:	2a47      	cmp	r2, #71	; 0x47
 800b6a4:	d1be      	bne.n	800b624 <_printf_float+0x100>
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1bc      	bne.n	800b624 <_printf_float+0x100>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e7b9      	b.n	800b622 <_printf_float+0xfe>
 800b6ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b6b2:	d118      	bne.n	800b6e6 <_printf_float+0x1c2>
 800b6b4:	2900      	cmp	r1, #0
 800b6b6:	6863      	ldr	r3, [r4, #4]
 800b6b8:	dd0b      	ble.n	800b6d2 <_printf_float+0x1ae>
 800b6ba:	6121      	str	r1, [r4, #16]
 800b6bc:	b913      	cbnz	r3, 800b6c4 <_printf_float+0x1a0>
 800b6be:	6822      	ldr	r2, [r4, #0]
 800b6c0:	07d0      	lsls	r0, r2, #31
 800b6c2:	d502      	bpl.n	800b6ca <_printf_float+0x1a6>
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	440b      	add	r3, r1
 800b6c8:	6123      	str	r3, [r4, #16]
 800b6ca:	65a1      	str	r1, [r4, #88]	; 0x58
 800b6cc:	f04f 0900 	mov.w	r9, #0
 800b6d0:	e7de      	b.n	800b690 <_printf_float+0x16c>
 800b6d2:	b913      	cbnz	r3, 800b6da <_printf_float+0x1b6>
 800b6d4:	6822      	ldr	r2, [r4, #0]
 800b6d6:	07d2      	lsls	r2, r2, #31
 800b6d8:	d501      	bpl.n	800b6de <_printf_float+0x1ba>
 800b6da:	3302      	adds	r3, #2
 800b6dc:	e7f4      	b.n	800b6c8 <_printf_float+0x1a4>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e7f2      	b.n	800b6c8 <_printf_float+0x1a4>
 800b6e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6e8:	4299      	cmp	r1, r3
 800b6ea:	db05      	blt.n	800b6f8 <_printf_float+0x1d4>
 800b6ec:	6823      	ldr	r3, [r4, #0]
 800b6ee:	6121      	str	r1, [r4, #16]
 800b6f0:	07d8      	lsls	r0, r3, #31
 800b6f2:	d5ea      	bpl.n	800b6ca <_printf_float+0x1a6>
 800b6f4:	1c4b      	adds	r3, r1, #1
 800b6f6:	e7e7      	b.n	800b6c8 <_printf_float+0x1a4>
 800b6f8:	2900      	cmp	r1, #0
 800b6fa:	bfd4      	ite	le
 800b6fc:	f1c1 0202 	rsble	r2, r1, #2
 800b700:	2201      	movgt	r2, #1
 800b702:	4413      	add	r3, r2
 800b704:	e7e0      	b.n	800b6c8 <_printf_float+0x1a4>
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	055a      	lsls	r2, r3, #21
 800b70a:	d407      	bmi.n	800b71c <_printf_float+0x1f8>
 800b70c:	6923      	ldr	r3, [r4, #16]
 800b70e:	4642      	mov	r2, r8
 800b710:	4631      	mov	r1, r6
 800b712:	4628      	mov	r0, r5
 800b714:	47b8      	blx	r7
 800b716:	3001      	adds	r0, #1
 800b718:	d12c      	bne.n	800b774 <_printf_float+0x250>
 800b71a:	e764      	b.n	800b5e6 <_printf_float+0xc2>
 800b71c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b720:	f240 80e0 	bls.w	800b8e4 <_printf_float+0x3c0>
 800b724:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b728:	2200      	movs	r2, #0
 800b72a:	2300      	movs	r3, #0
 800b72c:	f7f5 f9cc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b730:	2800      	cmp	r0, #0
 800b732:	d034      	beq.n	800b79e <_printf_float+0x27a>
 800b734:	4a37      	ldr	r2, [pc, #220]	; (800b814 <_printf_float+0x2f0>)
 800b736:	2301      	movs	r3, #1
 800b738:	4631      	mov	r1, r6
 800b73a:	4628      	mov	r0, r5
 800b73c:	47b8      	blx	r7
 800b73e:	3001      	adds	r0, #1
 800b740:	f43f af51 	beq.w	800b5e6 <_printf_float+0xc2>
 800b744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b748:	429a      	cmp	r2, r3
 800b74a:	db02      	blt.n	800b752 <_printf_float+0x22e>
 800b74c:	6823      	ldr	r3, [r4, #0]
 800b74e:	07d8      	lsls	r0, r3, #31
 800b750:	d510      	bpl.n	800b774 <_printf_float+0x250>
 800b752:	ee18 3a10 	vmov	r3, s16
 800b756:	4652      	mov	r2, sl
 800b758:	4631      	mov	r1, r6
 800b75a:	4628      	mov	r0, r5
 800b75c:	47b8      	blx	r7
 800b75e:	3001      	adds	r0, #1
 800b760:	f43f af41 	beq.w	800b5e6 <_printf_float+0xc2>
 800b764:	f04f 0800 	mov.w	r8, #0
 800b768:	f104 091a 	add.w	r9, r4, #26
 800b76c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b76e:	3b01      	subs	r3, #1
 800b770:	4543      	cmp	r3, r8
 800b772:	dc09      	bgt.n	800b788 <_printf_float+0x264>
 800b774:	6823      	ldr	r3, [r4, #0]
 800b776:	079b      	lsls	r3, r3, #30
 800b778:	f100 8105 	bmi.w	800b986 <_printf_float+0x462>
 800b77c:	68e0      	ldr	r0, [r4, #12]
 800b77e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b780:	4298      	cmp	r0, r3
 800b782:	bfb8      	it	lt
 800b784:	4618      	movlt	r0, r3
 800b786:	e730      	b.n	800b5ea <_printf_float+0xc6>
 800b788:	2301      	movs	r3, #1
 800b78a:	464a      	mov	r2, r9
 800b78c:	4631      	mov	r1, r6
 800b78e:	4628      	mov	r0, r5
 800b790:	47b8      	blx	r7
 800b792:	3001      	adds	r0, #1
 800b794:	f43f af27 	beq.w	800b5e6 <_printf_float+0xc2>
 800b798:	f108 0801 	add.w	r8, r8, #1
 800b79c:	e7e6      	b.n	800b76c <_printf_float+0x248>
 800b79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	dc39      	bgt.n	800b818 <_printf_float+0x2f4>
 800b7a4:	4a1b      	ldr	r2, [pc, #108]	; (800b814 <_printf_float+0x2f0>)
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	4631      	mov	r1, r6
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	47b8      	blx	r7
 800b7ae:	3001      	adds	r0, #1
 800b7b0:	f43f af19 	beq.w	800b5e6 <_printf_float+0xc2>
 800b7b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	d102      	bne.n	800b7c2 <_printf_float+0x29e>
 800b7bc:	6823      	ldr	r3, [r4, #0]
 800b7be:	07d9      	lsls	r1, r3, #31
 800b7c0:	d5d8      	bpl.n	800b774 <_printf_float+0x250>
 800b7c2:	ee18 3a10 	vmov	r3, s16
 800b7c6:	4652      	mov	r2, sl
 800b7c8:	4631      	mov	r1, r6
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	47b8      	blx	r7
 800b7ce:	3001      	adds	r0, #1
 800b7d0:	f43f af09 	beq.w	800b5e6 <_printf_float+0xc2>
 800b7d4:	f04f 0900 	mov.w	r9, #0
 800b7d8:	f104 0a1a 	add.w	sl, r4, #26
 800b7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7de:	425b      	negs	r3, r3
 800b7e0:	454b      	cmp	r3, r9
 800b7e2:	dc01      	bgt.n	800b7e8 <_printf_float+0x2c4>
 800b7e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7e6:	e792      	b.n	800b70e <_printf_float+0x1ea>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	4652      	mov	r2, sl
 800b7ec:	4631      	mov	r1, r6
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	47b8      	blx	r7
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	f43f aef7 	beq.w	800b5e6 <_printf_float+0xc2>
 800b7f8:	f109 0901 	add.w	r9, r9, #1
 800b7fc:	e7ee      	b.n	800b7dc <_printf_float+0x2b8>
 800b7fe:	bf00      	nop
 800b800:	7fefffff 	.word	0x7fefffff
 800b804:	0801c5d0 	.word	0x0801c5d0
 800b808:	0801c5d4 	.word	0x0801c5d4
 800b80c:	0801c5dc 	.word	0x0801c5dc
 800b810:	0801c5d8 	.word	0x0801c5d8
 800b814:	0801c5e0 	.word	0x0801c5e0
 800b818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b81a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b81c:	429a      	cmp	r2, r3
 800b81e:	bfa8      	it	ge
 800b820:	461a      	movge	r2, r3
 800b822:	2a00      	cmp	r2, #0
 800b824:	4691      	mov	r9, r2
 800b826:	dc37      	bgt.n	800b898 <_printf_float+0x374>
 800b828:	f04f 0b00 	mov.w	fp, #0
 800b82c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b830:	f104 021a 	add.w	r2, r4, #26
 800b834:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b836:	9305      	str	r3, [sp, #20]
 800b838:	eba3 0309 	sub.w	r3, r3, r9
 800b83c:	455b      	cmp	r3, fp
 800b83e:	dc33      	bgt.n	800b8a8 <_printf_float+0x384>
 800b840:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b844:	429a      	cmp	r2, r3
 800b846:	db3b      	blt.n	800b8c0 <_printf_float+0x39c>
 800b848:	6823      	ldr	r3, [r4, #0]
 800b84a:	07da      	lsls	r2, r3, #31
 800b84c:	d438      	bmi.n	800b8c0 <_printf_float+0x39c>
 800b84e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b850:	9b05      	ldr	r3, [sp, #20]
 800b852:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b854:	1ad3      	subs	r3, r2, r3
 800b856:	eba2 0901 	sub.w	r9, r2, r1
 800b85a:	4599      	cmp	r9, r3
 800b85c:	bfa8      	it	ge
 800b85e:	4699      	movge	r9, r3
 800b860:	f1b9 0f00 	cmp.w	r9, #0
 800b864:	dc35      	bgt.n	800b8d2 <_printf_float+0x3ae>
 800b866:	f04f 0800 	mov.w	r8, #0
 800b86a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b86e:	f104 0a1a 	add.w	sl, r4, #26
 800b872:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b876:	1a9b      	subs	r3, r3, r2
 800b878:	eba3 0309 	sub.w	r3, r3, r9
 800b87c:	4543      	cmp	r3, r8
 800b87e:	f77f af79 	ble.w	800b774 <_printf_float+0x250>
 800b882:	2301      	movs	r3, #1
 800b884:	4652      	mov	r2, sl
 800b886:	4631      	mov	r1, r6
 800b888:	4628      	mov	r0, r5
 800b88a:	47b8      	blx	r7
 800b88c:	3001      	adds	r0, #1
 800b88e:	f43f aeaa 	beq.w	800b5e6 <_printf_float+0xc2>
 800b892:	f108 0801 	add.w	r8, r8, #1
 800b896:	e7ec      	b.n	800b872 <_printf_float+0x34e>
 800b898:	4613      	mov	r3, r2
 800b89a:	4631      	mov	r1, r6
 800b89c:	4642      	mov	r2, r8
 800b89e:	4628      	mov	r0, r5
 800b8a0:	47b8      	blx	r7
 800b8a2:	3001      	adds	r0, #1
 800b8a4:	d1c0      	bne.n	800b828 <_printf_float+0x304>
 800b8a6:	e69e      	b.n	800b5e6 <_printf_float+0xc2>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	4631      	mov	r1, r6
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	9205      	str	r2, [sp, #20]
 800b8b0:	47b8      	blx	r7
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	f43f ae97 	beq.w	800b5e6 <_printf_float+0xc2>
 800b8b8:	9a05      	ldr	r2, [sp, #20]
 800b8ba:	f10b 0b01 	add.w	fp, fp, #1
 800b8be:	e7b9      	b.n	800b834 <_printf_float+0x310>
 800b8c0:	ee18 3a10 	vmov	r3, s16
 800b8c4:	4652      	mov	r2, sl
 800b8c6:	4631      	mov	r1, r6
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	47b8      	blx	r7
 800b8cc:	3001      	adds	r0, #1
 800b8ce:	d1be      	bne.n	800b84e <_printf_float+0x32a>
 800b8d0:	e689      	b.n	800b5e6 <_printf_float+0xc2>
 800b8d2:	9a05      	ldr	r2, [sp, #20]
 800b8d4:	464b      	mov	r3, r9
 800b8d6:	4442      	add	r2, r8
 800b8d8:	4631      	mov	r1, r6
 800b8da:	4628      	mov	r0, r5
 800b8dc:	47b8      	blx	r7
 800b8de:	3001      	adds	r0, #1
 800b8e0:	d1c1      	bne.n	800b866 <_printf_float+0x342>
 800b8e2:	e680      	b.n	800b5e6 <_printf_float+0xc2>
 800b8e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8e6:	2a01      	cmp	r2, #1
 800b8e8:	dc01      	bgt.n	800b8ee <_printf_float+0x3ca>
 800b8ea:	07db      	lsls	r3, r3, #31
 800b8ec:	d538      	bpl.n	800b960 <_printf_float+0x43c>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	4642      	mov	r2, r8
 800b8f2:	4631      	mov	r1, r6
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	47b8      	blx	r7
 800b8f8:	3001      	adds	r0, #1
 800b8fa:	f43f ae74 	beq.w	800b5e6 <_printf_float+0xc2>
 800b8fe:	ee18 3a10 	vmov	r3, s16
 800b902:	4652      	mov	r2, sl
 800b904:	4631      	mov	r1, r6
 800b906:	4628      	mov	r0, r5
 800b908:	47b8      	blx	r7
 800b90a:	3001      	adds	r0, #1
 800b90c:	f43f ae6b 	beq.w	800b5e6 <_printf_float+0xc2>
 800b910:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b914:	2200      	movs	r2, #0
 800b916:	2300      	movs	r3, #0
 800b918:	f7f5 f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b91c:	b9d8      	cbnz	r0, 800b956 <_printf_float+0x432>
 800b91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b920:	f108 0201 	add.w	r2, r8, #1
 800b924:	3b01      	subs	r3, #1
 800b926:	4631      	mov	r1, r6
 800b928:	4628      	mov	r0, r5
 800b92a:	47b8      	blx	r7
 800b92c:	3001      	adds	r0, #1
 800b92e:	d10e      	bne.n	800b94e <_printf_float+0x42a>
 800b930:	e659      	b.n	800b5e6 <_printf_float+0xc2>
 800b932:	2301      	movs	r3, #1
 800b934:	4652      	mov	r2, sl
 800b936:	4631      	mov	r1, r6
 800b938:	4628      	mov	r0, r5
 800b93a:	47b8      	blx	r7
 800b93c:	3001      	adds	r0, #1
 800b93e:	f43f ae52 	beq.w	800b5e6 <_printf_float+0xc2>
 800b942:	f108 0801 	add.w	r8, r8, #1
 800b946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b948:	3b01      	subs	r3, #1
 800b94a:	4543      	cmp	r3, r8
 800b94c:	dcf1      	bgt.n	800b932 <_printf_float+0x40e>
 800b94e:	464b      	mov	r3, r9
 800b950:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b954:	e6dc      	b.n	800b710 <_printf_float+0x1ec>
 800b956:	f04f 0800 	mov.w	r8, #0
 800b95a:	f104 0a1a 	add.w	sl, r4, #26
 800b95e:	e7f2      	b.n	800b946 <_printf_float+0x422>
 800b960:	2301      	movs	r3, #1
 800b962:	4642      	mov	r2, r8
 800b964:	e7df      	b.n	800b926 <_printf_float+0x402>
 800b966:	2301      	movs	r3, #1
 800b968:	464a      	mov	r2, r9
 800b96a:	4631      	mov	r1, r6
 800b96c:	4628      	mov	r0, r5
 800b96e:	47b8      	blx	r7
 800b970:	3001      	adds	r0, #1
 800b972:	f43f ae38 	beq.w	800b5e6 <_printf_float+0xc2>
 800b976:	f108 0801 	add.w	r8, r8, #1
 800b97a:	68e3      	ldr	r3, [r4, #12]
 800b97c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b97e:	1a5b      	subs	r3, r3, r1
 800b980:	4543      	cmp	r3, r8
 800b982:	dcf0      	bgt.n	800b966 <_printf_float+0x442>
 800b984:	e6fa      	b.n	800b77c <_printf_float+0x258>
 800b986:	f04f 0800 	mov.w	r8, #0
 800b98a:	f104 0919 	add.w	r9, r4, #25
 800b98e:	e7f4      	b.n	800b97a <_printf_float+0x456>

0800b990 <_printf_common>:
 800b990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b994:	4616      	mov	r6, r2
 800b996:	4699      	mov	r9, r3
 800b998:	688a      	ldr	r2, [r1, #8]
 800b99a:	690b      	ldr	r3, [r1, #16]
 800b99c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	bfb8      	it	lt
 800b9a4:	4613      	movlt	r3, r2
 800b9a6:	6033      	str	r3, [r6, #0]
 800b9a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b9ac:	4607      	mov	r7, r0
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	b10a      	cbz	r2, 800b9b6 <_printf_common+0x26>
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	6033      	str	r3, [r6, #0]
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	0699      	lsls	r1, r3, #26
 800b9ba:	bf42      	ittt	mi
 800b9bc:	6833      	ldrmi	r3, [r6, #0]
 800b9be:	3302      	addmi	r3, #2
 800b9c0:	6033      	strmi	r3, [r6, #0]
 800b9c2:	6825      	ldr	r5, [r4, #0]
 800b9c4:	f015 0506 	ands.w	r5, r5, #6
 800b9c8:	d106      	bne.n	800b9d8 <_printf_common+0x48>
 800b9ca:	f104 0a19 	add.w	sl, r4, #25
 800b9ce:	68e3      	ldr	r3, [r4, #12]
 800b9d0:	6832      	ldr	r2, [r6, #0]
 800b9d2:	1a9b      	subs	r3, r3, r2
 800b9d4:	42ab      	cmp	r3, r5
 800b9d6:	dc26      	bgt.n	800ba26 <_printf_common+0x96>
 800b9d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b9dc:	1e13      	subs	r3, r2, #0
 800b9de:	6822      	ldr	r2, [r4, #0]
 800b9e0:	bf18      	it	ne
 800b9e2:	2301      	movne	r3, #1
 800b9e4:	0692      	lsls	r2, r2, #26
 800b9e6:	d42b      	bmi.n	800ba40 <_printf_common+0xb0>
 800b9e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b9ec:	4649      	mov	r1, r9
 800b9ee:	4638      	mov	r0, r7
 800b9f0:	47c0      	blx	r8
 800b9f2:	3001      	adds	r0, #1
 800b9f4:	d01e      	beq.n	800ba34 <_printf_common+0xa4>
 800b9f6:	6823      	ldr	r3, [r4, #0]
 800b9f8:	68e5      	ldr	r5, [r4, #12]
 800b9fa:	6832      	ldr	r2, [r6, #0]
 800b9fc:	f003 0306 	and.w	r3, r3, #6
 800ba00:	2b04      	cmp	r3, #4
 800ba02:	bf08      	it	eq
 800ba04:	1aad      	subeq	r5, r5, r2
 800ba06:	68a3      	ldr	r3, [r4, #8]
 800ba08:	6922      	ldr	r2, [r4, #16]
 800ba0a:	bf0c      	ite	eq
 800ba0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba10:	2500      	movne	r5, #0
 800ba12:	4293      	cmp	r3, r2
 800ba14:	bfc4      	itt	gt
 800ba16:	1a9b      	subgt	r3, r3, r2
 800ba18:	18ed      	addgt	r5, r5, r3
 800ba1a:	2600      	movs	r6, #0
 800ba1c:	341a      	adds	r4, #26
 800ba1e:	42b5      	cmp	r5, r6
 800ba20:	d11a      	bne.n	800ba58 <_printf_common+0xc8>
 800ba22:	2000      	movs	r0, #0
 800ba24:	e008      	b.n	800ba38 <_printf_common+0xa8>
 800ba26:	2301      	movs	r3, #1
 800ba28:	4652      	mov	r2, sl
 800ba2a:	4649      	mov	r1, r9
 800ba2c:	4638      	mov	r0, r7
 800ba2e:	47c0      	blx	r8
 800ba30:	3001      	adds	r0, #1
 800ba32:	d103      	bne.n	800ba3c <_printf_common+0xac>
 800ba34:	f04f 30ff 	mov.w	r0, #4294967295
 800ba38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba3c:	3501      	adds	r5, #1
 800ba3e:	e7c6      	b.n	800b9ce <_printf_common+0x3e>
 800ba40:	18e1      	adds	r1, r4, r3
 800ba42:	1c5a      	adds	r2, r3, #1
 800ba44:	2030      	movs	r0, #48	; 0x30
 800ba46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba4a:	4422      	add	r2, r4
 800ba4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba54:	3302      	adds	r3, #2
 800ba56:	e7c7      	b.n	800b9e8 <_printf_common+0x58>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	4622      	mov	r2, r4
 800ba5c:	4649      	mov	r1, r9
 800ba5e:	4638      	mov	r0, r7
 800ba60:	47c0      	blx	r8
 800ba62:	3001      	adds	r0, #1
 800ba64:	d0e6      	beq.n	800ba34 <_printf_common+0xa4>
 800ba66:	3601      	adds	r6, #1
 800ba68:	e7d9      	b.n	800ba1e <_printf_common+0x8e>
	...

0800ba6c <_printf_i>:
 800ba6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba70:	460c      	mov	r4, r1
 800ba72:	4691      	mov	r9, r2
 800ba74:	7e27      	ldrb	r7, [r4, #24]
 800ba76:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ba78:	2f78      	cmp	r7, #120	; 0x78
 800ba7a:	4680      	mov	r8, r0
 800ba7c:	469a      	mov	sl, r3
 800ba7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba82:	d807      	bhi.n	800ba94 <_printf_i+0x28>
 800ba84:	2f62      	cmp	r7, #98	; 0x62
 800ba86:	d80a      	bhi.n	800ba9e <_printf_i+0x32>
 800ba88:	2f00      	cmp	r7, #0
 800ba8a:	f000 80d8 	beq.w	800bc3e <_printf_i+0x1d2>
 800ba8e:	2f58      	cmp	r7, #88	; 0x58
 800ba90:	f000 80a3 	beq.w	800bbda <_printf_i+0x16e>
 800ba94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ba98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ba9c:	e03a      	b.n	800bb14 <_printf_i+0xa8>
 800ba9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800baa2:	2b15      	cmp	r3, #21
 800baa4:	d8f6      	bhi.n	800ba94 <_printf_i+0x28>
 800baa6:	a001      	add	r0, pc, #4	; (adr r0, 800baac <_printf_i+0x40>)
 800baa8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800baac:	0800bb05 	.word	0x0800bb05
 800bab0:	0800bb19 	.word	0x0800bb19
 800bab4:	0800ba95 	.word	0x0800ba95
 800bab8:	0800ba95 	.word	0x0800ba95
 800babc:	0800ba95 	.word	0x0800ba95
 800bac0:	0800ba95 	.word	0x0800ba95
 800bac4:	0800bb19 	.word	0x0800bb19
 800bac8:	0800ba95 	.word	0x0800ba95
 800bacc:	0800ba95 	.word	0x0800ba95
 800bad0:	0800ba95 	.word	0x0800ba95
 800bad4:	0800ba95 	.word	0x0800ba95
 800bad8:	0800bc25 	.word	0x0800bc25
 800badc:	0800bb49 	.word	0x0800bb49
 800bae0:	0800bc07 	.word	0x0800bc07
 800bae4:	0800ba95 	.word	0x0800ba95
 800bae8:	0800ba95 	.word	0x0800ba95
 800baec:	0800bc47 	.word	0x0800bc47
 800baf0:	0800ba95 	.word	0x0800ba95
 800baf4:	0800bb49 	.word	0x0800bb49
 800baf8:	0800ba95 	.word	0x0800ba95
 800bafc:	0800ba95 	.word	0x0800ba95
 800bb00:	0800bc0f 	.word	0x0800bc0f
 800bb04:	680b      	ldr	r3, [r1, #0]
 800bb06:	1d1a      	adds	r2, r3, #4
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	600a      	str	r2, [r1, #0]
 800bb0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb14:	2301      	movs	r3, #1
 800bb16:	e0a3      	b.n	800bc60 <_printf_i+0x1f4>
 800bb18:	6825      	ldr	r5, [r4, #0]
 800bb1a:	6808      	ldr	r0, [r1, #0]
 800bb1c:	062e      	lsls	r6, r5, #24
 800bb1e:	f100 0304 	add.w	r3, r0, #4
 800bb22:	d50a      	bpl.n	800bb3a <_printf_i+0xce>
 800bb24:	6805      	ldr	r5, [r0, #0]
 800bb26:	600b      	str	r3, [r1, #0]
 800bb28:	2d00      	cmp	r5, #0
 800bb2a:	da03      	bge.n	800bb34 <_printf_i+0xc8>
 800bb2c:	232d      	movs	r3, #45	; 0x2d
 800bb2e:	426d      	negs	r5, r5
 800bb30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb34:	485e      	ldr	r0, [pc, #376]	; (800bcb0 <_printf_i+0x244>)
 800bb36:	230a      	movs	r3, #10
 800bb38:	e019      	b.n	800bb6e <_printf_i+0x102>
 800bb3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bb3e:	6805      	ldr	r5, [r0, #0]
 800bb40:	600b      	str	r3, [r1, #0]
 800bb42:	bf18      	it	ne
 800bb44:	b22d      	sxthne	r5, r5
 800bb46:	e7ef      	b.n	800bb28 <_printf_i+0xbc>
 800bb48:	680b      	ldr	r3, [r1, #0]
 800bb4a:	6825      	ldr	r5, [r4, #0]
 800bb4c:	1d18      	adds	r0, r3, #4
 800bb4e:	6008      	str	r0, [r1, #0]
 800bb50:	0628      	lsls	r0, r5, #24
 800bb52:	d501      	bpl.n	800bb58 <_printf_i+0xec>
 800bb54:	681d      	ldr	r5, [r3, #0]
 800bb56:	e002      	b.n	800bb5e <_printf_i+0xf2>
 800bb58:	0669      	lsls	r1, r5, #25
 800bb5a:	d5fb      	bpl.n	800bb54 <_printf_i+0xe8>
 800bb5c:	881d      	ldrh	r5, [r3, #0]
 800bb5e:	4854      	ldr	r0, [pc, #336]	; (800bcb0 <_printf_i+0x244>)
 800bb60:	2f6f      	cmp	r7, #111	; 0x6f
 800bb62:	bf0c      	ite	eq
 800bb64:	2308      	moveq	r3, #8
 800bb66:	230a      	movne	r3, #10
 800bb68:	2100      	movs	r1, #0
 800bb6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bb6e:	6866      	ldr	r6, [r4, #4]
 800bb70:	60a6      	str	r6, [r4, #8]
 800bb72:	2e00      	cmp	r6, #0
 800bb74:	bfa2      	ittt	ge
 800bb76:	6821      	ldrge	r1, [r4, #0]
 800bb78:	f021 0104 	bicge.w	r1, r1, #4
 800bb7c:	6021      	strge	r1, [r4, #0]
 800bb7e:	b90d      	cbnz	r5, 800bb84 <_printf_i+0x118>
 800bb80:	2e00      	cmp	r6, #0
 800bb82:	d04d      	beq.n	800bc20 <_printf_i+0x1b4>
 800bb84:	4616      	mov	r6, r2
 800bb86:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb8a:	fb03 5711 	mls	r7, r3, r1, r5
 800bb8e:	5dc7      	ldrb	r7, [r0, r7]
 800bb90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb94:	462f      	mov	r7, r5
 800bb96:	42bb      	cmp	r3, r7
 800bb98:	460d      	mov	r5, r1
 800bb9a:	d9f4      	bls.n	800bb86 <_printf_i+0x11a>
 800bb9c:	2b08      	cmp	r3, #8
 800bb9e:	d10b      	bne.n	800bbb8 <_printf_i+0x14c>
 800bba0:	6823      	ldr	r3, [r4, #0]
 800bba2:	07df      	lsls	r7, r3, #31
 800bba4:	d508      	bpl.n	800bbb8 <_printf_i+0x14c>
 800bba6:	6923      	ldr	r3, [r4, #16]
 800bba8:	6861      	ldr	r1, [r4, #4]
 800bbaa:	4299      	cmp	r1, r3
 800bbac:	bfde      	ittt	le
 800bbae:	2330      	movle	r3, #48	; 0x30
 800bbb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bbb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bbb8:	1b92      	subs	r2, r2, r6
 800bbba:	6122      	str	r2, [r4, #16]
 800bbbc:	f8cd a000 	str.w	sl, [sp]
 800bbc0:	464b      	mov	r3, r9
 800bbc2:	aa03      	add	r2, sp, #12
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	4640      	mov	r0, r8
 800bbc8:	f7ff fee2 	bl	800b990 <_printf_common>
 800bbcc:	3001      	adds	r0, #1
 800bbce:	d14c      	bne.n	800bc6a <_printf_i+0x1fe>
 800bbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd4:	b004      	add	sp, #16
 800bbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbda:	4835      	ldr	r0, [pc, #212]	; (800bcb0 <_printf_i+0x244>)
 800bbdc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	680e      	ldr	r6, [r1, #0]
 800bbe4:	061f      	lsls	r7, r3, #24
 800bbe6:	f856 5b04 	ldr.w	r5, [r6], #4
 800bbea:	600e      	str	r6, [r1, #0]
 800bbec:	d514      	bpl.n	800bc18 <_printf_i+0x1ac>
 800bbee:	07d9      	lsls	r1, r3, #31
 800bbf0:	bf44      	itt	mi
 800bbf2:	f043 0320 	orrmi.w	r3, r3, #32
 800bbf6:	6023      	strmi	r3, [r4, #0]
 800bbf8:	b91d      	cbnz	r5, 800bc02 <_printf_i+0x196>
 800bbfa:	6823      	ldr	r3, [r4, #0]
 800bbfc:	f023 0320 	bic.w	r3, r3, #32
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	2310      	movs	r3, #16
 800bc04:	e7b0      	b.n	800bb68 <_printf_i+0xfc>
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	f043 0320 	orr.w	r3, r3, #32
 800bc0c:	6023      	str	r3, [r4, #0]
 800bc0e:	2378      	movs	r3, #120	; 0x78
 800bc10:	4828      	ldr	r0, [pc, #160]	; (800bcb4 <_printf_i+0x248>)
 800bc12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc16:	e7e3      	b.n	800bbe0 <_printf_i+0x174>
 800bc18:	065e      	lsls	r6, r3, #25
 800bc1a:	bf48      	it	mi
 800bc1c:	b2ad      	uxthmi	r5, r5
 800bc1e:	e7e6      	b.n	800bbee <_printf_i+0x182>
 800bc20:	4616      	mov	r6, r2
 800bc22:	e7bb      	b.n	800bb9c <_printf_i+0x130>
 800bc24:	680b      	ldr	r3, [r1, #0]
 800bc26:	6826      	ldr	r6, [r4, #0]
 800bc28:	6960      	ldr	r0, [r4, #20]
 800bc2a:	1d1d      	adds	r5, r3, #4
 800bc2c:	600d      	str	r5, [r1, #0]
 800bc2e:	0635      	lsls	r5, r6, #24
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	d501      	bpl.n	800bc38 <_printf_i+0x1cc>
 800bc34:	6018      	str	r0, [r3, #0]
 800bc36:	e002      	b.n	800bc3e <_printf_i+0x1d2>
 800bc38:	0671      	lsls	r1, r6, #25
 800bc3a:	d5fb      	bpl.n	800bc34 <_printf_i+0x1c8>
 800bc3c:	8018      	strh	r0, [r3, #0]
 800bc3e:	2300      	movs	r3, #0
 800bc40:	6123      	str	r3, [r4, #16]
 800bc42:	4616      	mov	r6, r2
 800bc44:	e7ba      	b.n	800bbbc <_printf_i+0x150>
 800bc46:	680b      	ldr	r3, [r1, #0]
 800bc48:	1d1a      	adds	r2, r3, #4
 800bc4a:	600a      	str	r2, [r1, #0]
 800bc4c:	681e      	ldr	r6, [r3, #0]
 800bc4e:	6862      	ldr	r2, [r4, #4]
 800bc50:	2100      	movs	r1, #0
 800bc52:	4630      	mov	r0, r6
 800bc54:	f7f4 fac4 	bl	80001e0 <memchr>
 800bc58:	b108      	cbz	r0, 800bc5e <_printf_i+0x1f2>
 800bc5a:	1b80      	subs	r0, r0, r6
 800bc5c:	6060      	str	r0, [r4, #4]
 800bc5e:	6863      	ldr	r3, [r4, #4]
 800bc60:	6123      	str	r3, [r4, #16]
 800bc62:	2300      	movs	r3, #0
 800bc64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc68:	e7a8      	b.n	800bbbc <_printf_i+0x150>
 800bc6a:	6923      	ldr	r3, [r4, #16]
 800bc6c:	4632      	mov	r2, r6
 800bc6e:	4649      	mov	r1, r9
 800bc70:	4640      	mov	r0, r8
 800bc72:	47d0      	blx	sl
 800bc74:	3001      	adds	r0, #1
 800bc76:	d0ab      	beq.n	800bbd0 <_printf_i+0x164>
 800bc78:	6823      	ldr	r3, [r4, #0]
 800bc7a:	079b      	lsls	r3, r3, #30
 800bc7c:	d413      	bmi.n	800bca6 <_printf_i+0x23a>
 800bc7e:	68e0      	ldr	r0, [r4, #12]
 800bc80:	9b03      	ldr	r3, [sp, #12]
 800bc82:	4298      	cmp	r0, r3
 800bc84:	bfb8      	it	lt
 800bc86:	4618      	movlt	r0, r3
 800bc88:	e7a4      	b.n	800bbd4 <_printf_i+0x168>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	4632      	mov	r2, r6
 800bc8e:	4649      	mov	r1, r9
 800bc90:	4640      	mov	r0, r8
 800bc92:	47d0      	blx	sl
 800bc94:	3001      	adds	r0, #1
 800bc96:	d09b      	beq.n	800bbd0 <_printf_i+0x164>
 800bc98:	3501      	adds	r5, #1
 800bc9a:	68e3      	ldr	r3, [r4, #12]
 800bc9c:	9903      	ldr	r1, [sp, #12]
 800bc9e:	1a5b      	subs	r3, r3, r1
 800bca0:	42ab      	cmp	r3, r5
 800bca2:	dcf2      	bgt.n	800bc8a <_printf_i+0x21e>
 800bca4:	e7eb      	b.n	800bc7e <_printf_i+0x212>
 800bca6:	2500      	movs	r5, #0
 800bca8:	f104 0619 	add.w	r6, r4, #25
 800bcac:	e7f5      	b.n	800bc9a <_printf_i+0x22e>
 800bcae:	bf00      	nop
 800bcb0:	0801c5e2 	.word	0x0801c5e2
 800bcb4:	0801c5f3 	.word	0x0801c5f3

0800bcb8 <iprintf>:
 800bcb8:	b40f      	push	{r0, r1, r2, r3}
 800bcba:	4b0a      	ldr	r3, [pc, #40]	; (800bce4 <iprintf+0x2c>)
 800bcbc:	b513      	push	{r0, r1, r4, lr}
 800bcbe:	681c      	ldr	r4, [r3, #0]
 800bcc0:	b124      	cbz	r4, 800bccc <iprintf+0x14>
 800bcc2:	69a3      	ldr	r3, [r4, #24]
 800bcc4:	b913      	cbnz	r3, 800bccc <iprintf+0x14>
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f001 f8f8 	bl	800cebc <__sinit>
 800bccc:	ab05      	add	r3, sp, #20
 800bcce:	9a04      	ldr	r2, [sp, #16]
 800bcd0:	68a1      	ldr	r1, [r4, #8]
 800bcd2:	9301      	str	r3, [sp, #4]
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	f001 ffcf 	bl	800dc78 <_vfiprintf_r>
 800bcda:	b002      	add	sp, #8
 800bcdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bce0:	b004      	add	sp, #16
 800bce2:	4770      	bx	lr
 800bce4:	20000014 	.word	0x20000014

0800bce8 <_puts_r>:
 800bce8:	b570      	push	{r4, r5, r6, lr}
 800bcea:	460e      	mov	r6, r1
 800bcec:	4605      	mov	r5, r0
 800bcee:	b118      	cbz	r0, 800bcf8 <_puts_r+0x10>
 800bcf0:	6983      	ldr	r3, [r0, #24]
 800bcf2:	b90b      	cbnz	r3, 800bcf8 <_puts_r+0x10>
 800bcf4:	f001 f8e2 	bl	800cebc <__sinit>
 800bcf8:	69ab      	ldr	r3, [r5, #24]
 800bcfa:	68ac      	ldr	r4, [r5, #8]
 800bcfc:	b913      	cbnz	r3, 800bd04 <_puts_r+0x1c>
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f001 f8dc 	bl	800cebc <__sinit>
 800bd04:	4b2c      	ldr	r3, [pc, #176]	; (800bdb8 <_puts_r+0xd0>)
 800bd06:	429c      	cmp	r4, r3
 800bd08:	d120      	bne.n	800bd4c <_puts_r+0x64>
 800bd0a:	686c      	ldr	r4, [r5, #4]
 800bd0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd0e:	07db      	lsls	r3, r3, #31
 800bd10:	d405      	bmi.n	800bd1e <_puts_r+0x36>
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	0598      	lsls	r0, r3, #22
 800bd16:	d402      	bmi.n	800bd1e <_puts_r+0x36>
 800bd18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd1a:	f001 f972 	bl	800d002 <__retarget_lock_acquire_recursive>
 800bd1e:	89a3      	ldrh	r3, [r4, #12]
 800bd20:	0719      	lsls	r1, r3, #28
 800bd22:	d51d      	bpl.n	800bd60 <_puts_r+0x78>
 800bd24:	6923      	ldr	r3, [r4, #16]
 800bd26:	b1db      	cbz	r3, 800bd60 <_puts_r+0x78>
 800bd28:	3e01      	subs	r6, #1
 800bd2a:	68a3      	ldr	r3, [r4, #8]
 800bd2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd30:	3b01      	subs	r3, #1
 800bd32:	60a3      	str	r3, [r4, #8]
 800bd34:	bb39      	cbnz	r1, 800bd86 <_puts_r+0x9e>
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	da38      	bge.n	800bdac <_puts_r+0xc4>
 800bd3a:	4622      	mov	r2, r4
 800bd3c:	210a      	movs	r1, #10
 800bd3e:	4628      	mov	r0, r5
 800bd40:	f000 f868 	bl	800be14 <__swbuf_r>
 800bd44:	3001      	adds	r0, #1
 800bd46:	d011      	beq.n	800bd6c <_puts_r+0x84>
 800bd48:	250a      	movs	r5, #10
 800bd4a:	e011      	b.n	800bd70 <_puts_r+0x88>
 800bd4c:	4b1b      	ldr	r3, [pc, #108]	; (800bdbc <_puts_r+0xd4>)
 800bd4e:	429c      	cmp	r4, r3
 800bd50:	d101      	bne.n	800bd56 <_puts_r+0x6e>
 800bd52:	68ac      	ldr	r4, [r5, #8]
 800bd54:	e7da      	b.n	800bd0c <_puts_r+0x24>
 800bd56:	4b1a      	ldr	r3, [pc, #104]	; (800bdc0 <_puts_r+0xd8>)
 800bd58:	429c      	cmp	r4, r3
 800bd5a:	bf08      	it	eq
 800bd5c:	68ec      	ldreq	r4, [r5, #12]
 800bd5e:	e7d5      	b.n	800bd0c <_puts_r+0x24>
 800bd60:	4621      	mov	r1, r4
 800bd62:	4628      	mov	r0, r5
 800bd64:	f000 f8a8 	bl	800beb8 <__swsetup_r>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d0dd      	beq.n	800bd28 <_puts_r+0x40>
 800bd6c:	f04f 35ff 	mov.w	r5, #4294967295
 800bd70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd72:	07da      	lsls	r2, r3, #31
 800bd74:	d405      	bmi.n	800bd82 <_puts_r+0x9a>
 800bd76:	89a3      	ldrh	r3, [r4, #12]
 800bd78:	059b      	lsls	r3, r3, #22
 800bd7a:	d402      	bmi.n	800bd82 <_puts_r+0x9a>
 800bd7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd7e:	f001 f941 	bl	800d004 <__retarget_lock_release_recursive>
 800bd82:	4628      	mov	r0, r5
 800bd84:	bd70      	pop	{r4, r5, r6, pc}
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	da04      	bge.n	800bd94 <_puts_r+0xac>
 800bd8a:	69a2      	ldr	r2, [r4, #24]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	dc06      	bgt.n	800bd9e <_puts_r+0xb6>
 800bd90:	290a      	cmp	r1, #10
 800bd92:	d004      	beq.n	800bd9e <_puts_r+0xb6>
 800bd94:	6823      	ldr	r3, [r4, #0]
 800bd96:	1c5a      	adds	r2, r3, #1
 800bd98:	6022      	str	r2, [r4, #0]
 800bd9a:	7019      	strb	r1, [r3, #0]
 800bd9c:	e7c5      	b.n	800bd2a <_puts_r+0x42>
 800bd9e:	4622      	mov	r2, r4
 800bda0:	4628      	mov	r0, r5
 800bda2:	f000 f837 	bl	800be14 <__swbuf_r>
 800bda6:	3001      	adds	r0, #1
 800bda8:	d1bf      	bne.n	800bd2a <_puts_r+0x42>
 800bdaa:	e7df      	b.n	800bd6c <_puts_r+0x84>
 800bdac:	6823      	ldr	r3, [r4, #0]
 800bdae:	250a      	movs	r5, #10
 800bdb0:	1c5a      	adds	r2, r3, #1
 800bdb2:	6022      	str	r2, [r4, #0]
 800bdb4:	701d      	strb	r5, [r3, #0]
 800bdb6:	e7db      	b.n	800bd70 <_puts_r+0x88>
 800bdb8:	0801c6b8 	.word	0x0801c6b8
 800bdbc:	0801c6d8 	.word	0x0801c6d8
 800bdc0:	0801c698 	.word	0x0801c698

0800bdc4 <puts>:
 800bdc4:	4b02      	ldr	r3, [pc, #8]	; (800bdd0 <puts+0xc>)
 800bdc6:	4601      	mov	r1, r0
 800bdc8:	6818      	ldr	r0, [r3, #0]
 800bdca:	f7ff bf8d 	b.w	800bce8 <_puts_r>
 800bdce:	bf00      	nop
 800bdd0:	20000014 	.word	0x20000014

0800bdd4 <siprintf>:
 800bdd4:	b40e      	push	{r1, r2, r3}
 800bdd6:	b500      	push	{lr}
 800bdd8:	b09c      	sub	sp, #112	; 0x70
 800bdda:	ab1d      	add	r3, sp, #116	; 0x74
 800bddc:	9002      	str	r0, [sp, #8]
 800bdde:	9006      	str	r0, [sp, #24]
 800bde0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bde4:	4809      	ldr	r0, [pc, #36]	; (800be0c <siprintf+0x38>)
 800bde6:	9107      	str	r1, [sp, #28]
 800bde8:	9104      	str	r1, [sp, #16]
 800bdea:	4909      	ldr	r1, [pc, #36]	; (800be10 <siprintf+0x3c>)
 800bdec:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdf0:	9105      	str	r1, [sp, #20]
 800bdf2:	6800      	ldr	r0, [r0, #0]
 800bdf4:	9301      	str	r3, [sp, #4]
 800bdf6:	a902      	add	r1, sp, #8
 800bdf8:	f001 fe14 	bl	800da24 <_svfiprintf_r>
 800bdfc:	9b02      	ldr	r3, [sp, #8]
 800bdfe:	2200      	movs	r2, #0
 800be00:	701a      	strb	r2, [r3, #0]
 800be02:	b01c      	add	sp, #112	; 0x70
 800be04:	f85d eb04 	ldr.w	lr, [sp], #4
 800be08:	b003      	add	sp, #12
 800be0a:	4770      	bx	lr
 800be0c:	20000014 	.word	0x20000014
 800be10:	ffff0208 	.word	0xffff0208

0800be14 <__swbuf_r>:
 800be14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be16:	460e      	mov	r6, r1
 800be18:	4614      	mov	r4, r2
 800be1a:	4605      	mov	r5, r0
 800be1c:	b118      	cbz	r0, 800be26 <__swbuf_r+0x12>
 800be1e:	6983      	ldr	r3, [r0, #24]
 800be20:	b90b      	cbnz	r3, 800be26 <__swbuf_r+0x12>
 800be22:	f001 f84b 	bl	800cebc <__sinit>
 800be26:	4b21      	ldr	r3, [pc, #132]	; (800beac <__swbuf_r+0x98>)
 800be28:	429c      	cmp	r4, r3
 800be2a:	d12b      	bne.n	800be84 <__swbuf_r+0x70>
 800be2c:	686c      	ldr	r4, [r5, #4]
 800be2e:	69a3      	ldr	r3, [r4, #24]
 800be30:	60a3      	str	r3, [r4, #8]
 800be32:	89a3      	ldrh	r3, [r4, #12]
 800be34:	071a      	lsls	r2, r3, #28
 800be36:	d52f      	bpl.n	800be98 <__swbuf_r+0x84>
 800be38:	6923      	ldr	r3, [r4, #16]
 800be3a:	b36b      	cbz	r3, 800be98 <__swbuf_r+0x84>
 800be3c:	6923      	ldr	r3, [r4, #16]
 800be3e:	6820      	ldr	r0, [r4, #0]
 800be40:	1ac0      	subs	r0, r0, r3
 800be42:	6963      	ldr	r3, [r4, #20]
 800be44:	b2f6      	uxtb	r6, r6
 800be46:	4283      	cmp	r3, r0
 800be48:	4637      	mov	r7, r6
 800be4a:	dc04      	bgt.n	800be56 <__swbuf_r+0x42>
 800be4c:	4621      	mov	r1, r4
 800be4e:	4628      	mov	r0, r5
 800be50:	f000 ffa0 	bl	800cd94 <_fflush_r>
 800be54:	bb30      	cbnz	r0, 800bea4 <__swbuf_r+0x90>
 800be56:	68a3      	ldr	r3, [r4, #8]
 800be58:	3b01      	subs	r3, #1
 800be5a:	60a3      	str	r3, [r4, #8]
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	1c5a      	adds	r2, r3, #1
 800be60:	6022      	str	r2, [r4, #0]
 800be62:	701e      	strb	r6, [r3, #0]
 800be64:	6963      	ldr	r3, [r4, #20]
 800be66:	3001      	adds	r0, #1
 800be68:	4283      	cmp	r3, r0
 800be6a:	d004      	beq.n	800be76 <__swbuf_r+0x62>
 800be6c:	89a3      	ldrh	r3, [r4, #12]
 800be6e:	07db      	lsls	r3, r3, #31
 800be70:	d506      	bpl.n	800be80 <__swbuf_r+0x6c>
 800be72:	2e0a      	cmp	r6, #10
 800be74:	d104      	bne.n	800be80 <__swbuf_r+0x6c>
 800be76:	4621      	mov	r1, r4
 800be78:	4628      	mov	r0, r5
 800be7a:	f000 ff8b 	bl	800cd94 <_fflush_r>
 800be7e:	b988      	cbnz	r0, 800bea4 <__swbuf_r+0x90>
 800be80:	4638      	mov	r0, r7
 800be82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be84:	4b0a      	ldr	r3, [pc, #40]	; (800beb0 <__swbuf_r+0x9c>)
 800be86:	429c      	cmp	r4, r3
 800be88:	d101      	bne.n	800be8e <__swbuf_r+0x7a>
 800be8a:	68ac      	ldr	r4, [r5, #8]
 800be8c:	e7cf      	b.n	800be2e <__swbuf_r+0x1a>
 800be8e:	4b09      	ldr	r3, [pc, #36]	; (800beb4 <__swbuf_r+0xa0>)
 800be90:	429c      	cmp	r4, r3
 800be92:	bf08      	it	eq
 800be94:	68ec      	ldreq	r4, [r5, #12]
 800be96:	e7ca      	b.n	800be2e <__swbuf_r+0x1a>
 800be98:	4621      	mov	r1, r4
 800be9a:	4628      	mov	r0, r5
 800be9c:	f000 f80c 	bl	800beb8 <__swsetup_r>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d0cb      	beq.n	800be3c <__swbuf_r+0x28>
 800bea4:	f04f 37ff 	mov.w	r7, #4294967295
 800bea8:	e7ea      	b.n	800be80 <__swbuf_r+0x6c>
 800beaa:	bf00      	nop
 800beac:	0801c6b8 	.word	0x0801c6b8
 800beb0:	0801c6d8 	.word	0x0801c6d8
 800beb4:	0801c698 	.word	0x0801c698

0800beb8 <__swsetup_r>:
 800beb8:	4b32      	ldr	r3, [pc, #200]	; (800bf84 <__swsetup_r+0xcc>)
 800beba:	b570      	push	{r4, r5, r6, lr}
 800bebc:	681d      	ldr	r5, [r3, #0]
 800bebe:	4606      	mov	r6, r0
 800bec0:	460c      	mov	r4, r1
 800bec2:	b125      	cbz	r5, 800bece <__swsetup_r+0x16>
 800bec4:	69ab      	ldr	r3, [r5, #24]
 800bec6:	b913      	cbnz	r3, 800bece <__swsetup_r+0x16>
 800bec8:	4628      	mov	r0, r5
 800beca:	f000 fff7 	bl	800cebc <__sinit>
 800bece:	4b2e      	ldr	r3, [pc, #184]	; (800bf88 <__swsetup_r+0xd0>)
 800bed0:	429c      	cmp	r4, r3
 800bed2:	d10f      	bne.n	800bef4 <__swsetup_r+0x3c>
 800bed4:	686c      	ldr	r4, [r5, #4]
 800bed6:	89a3      	ldrh	r3, [r4, #12]
 800bed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bedc:	0719      	lsls	r1, r3, #28
 800bede:	d42c      	bmi.n	800bf3a <__swsetup_r+0x82>
 800bee0:	06dd      	lsls	r5, r3, #27
 800bee2:	d411      	bmi.n	800bf08 <__swsetup_r+0x50>
 800bee4:	2309      	movs	r3, #9
 800bee6:	6033      	str	r3, [r6, #0]
 800bee8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800beec:	81a3      	strh	r3, [r4, #12]
 800beee:	f04f 30ff 	mov.w	r0, #4294967295
 800bef2:	e03e      	b.n	800bf72 <__swsetup_r+0xba>
 800bef4:	4b25      	ldr	r3, [pc, #148]	; (800bf8c <__swsetup_r+0xd4>)
 800bef6:	429c      	cmp	r4, r3
 800bef8:	d101      	bne.n	800befe <__swsetup_r+0x46>
 800befa:	68ac      	ldr	r4, [r5, #8]
 800befc:	e7eb      	b.n	800bed6 <__swsetup_r+0x1e>
 800befe:	4b24      	ldr	r3, [pc, #144]	; (800bf90 <__swsetup_r+0xd8>)
 800bf00:	429c      	cmp	r4, r3
 800bf02:	bf08      	it	eq
 800bf04:	68ec      	ldreq	r4, [r5, #12]
 800bf06:	e7e6      	b.n	800bed6 <__swsetup_r+0x1e>
 800bf08:	0758      	lsls	r0, r3, #29
 800bf0a:	d512      	bpl.n	800bf32 <__swsetup_r+0x7a>
 800bf0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf0e:	b141      	cbz	r1, 800bf22 <__swsetup_r+0x6a>
 800bf10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf14:	4299      	cmp	r1, r3
 800bf16:	d002      	beq.n	800bf1e <__swsetup_r+0x66>
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f001 fc7d 	bl	800d818 <_free_r>
 800bf1e:	2300      	movs	r3, #0
 800bf20:	6363      	str	r3, [r4, #52]	; 0x34
 800bf22:	89a3      	ldrh	r3, [r4, #12]
 800bf24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf28:	81a3      	strh	r3, [r4, #12]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	6063      	str	r3, [r4, #4]
 800bf2e:	6923      	ldr	r3, [r4, #16]
 800bf30:	6023      	str	r3, [r4, #0]
 800bf32:	89a3      	ldrh	r3, [r4, #12]
 800bf34:	f043 0308 	orr.w	r3, r3, #8
 800bf38:	81a3      	strh	r3, [r4, #12]
 800bf3a:	6923      	ldr	r3, [r4, #16]
 800bf3c:	b94b      	cbnz	r3, 800bf52 <__swsetup_r+0x9a>
 800bf3e:	89a3      	ldrh	r3, [r4, #12]
 800bf40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf48:	d003      	beq.n	800bf52 <__swsetup_r+0x9a>
 800bf4a:	4621      	mov	r1, r4
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	f001 f87f 	bl	800d050 <__smakebuf_r>
 800bf52:	89a0      	ldrh	r0, [r4, #12]
 800bf54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf58:	f010 0301 	ands.w	r3, r0, #1
 800bf5c:	d00a      	beq.n	800bf74 <__swsetup_r+0xbc>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	60a3      	str	r3, [r4, #8]
 800bf62:	6963      	ldr	r3, [r4, #20]
 800bf64:	425b      	negs	r3, r3
 800bf66:	61a3      	str	r3, [r4, #24]
 800bf68:	6923      	ldr	r3, [r4, #16]
 800bf6a:	b943      	cbnz	r3, 800bf7e <__swsetup_r+0xc6>
 800bf6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf70:	d1ba      	bne.n	800bee8 <__swsetup_r+0x30>
 800bf72:	bd70      	pop	{r4, r5, r6, pc}
 800bf74:	0781      	lsls	r1, r0, #30
 800bf76:	bf58      	it	pl
 800bf78:	6963      	ldrpl	r3, [r4, #20]
 800bf7a:	60a3      	str	r3, [r4, #8]
 800bf7c:	e7f4      	b.n	800bf68 <__swsetup_r+0xb0>
 800bf7e:	2000      	movs	r0, #0
 800bf80:	e7f7      	b.n	800bf72 <__swsetup_r+0xba>
 800bf82:	bf00      	nop
 800bf84:	20000014 	.word	0x20000014
 800bf88:	0801c6b8 	.word	0x0801c6b8
 800bf8c:	0801c6d8 	.word	0x0801c6d8
 800bf90:	0801c698 	.word	0x0801c698

0800bf94 <quorem>:
 800bf94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf98:	6903      	ldr	r3, [r0, #16]
 800bf9a:	690c      	ldr	r4, [r1, #16]
 800bf9c:	42a3      	cmp	r3, r4
 800bf9e:	4607      	mov	r7, r0
 800bfa0:	f2c0 8081 	blt.w	800c0a6 <quorem+0x112>
 800bfa4:	3c01      	subs	r4, #1
 800bfa6:	f101 0814 	add.w	r8, r1, #20
 800bfaa:	f100 0514 	add.w	r5, r0, #20
 800bfae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfb2:	9301      	str	r3, [sp, #4]
 800bfb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bfb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bfc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bfc8:	fbb2 f6f3 	udiv	r6, r2, r3
 800bfcc:	d331      	bcc.n	800c032 <quorem+0x9e>
 800bfce:	f04f 0e00 	mov.w	lr, #0
 800bfd2:	4640      	mov	r0, r8
 800bfd4:	46ac      	mov	ip, r5
 800bfd6:	46f2      	mov	sl, lr
 800bfd8:	f850 2b04 	ldr.w	r2, [r0], #4
 800bfdc:	b293      	uxth	r3, r2
 800bfde:	fb06 e303 	mla	r3, r6, r3, lr
 800bfe2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	ebaa 0303 	sub.w	r3, sl, r3
 800bfec:	0c12      	lsrs	r2, r2, #16
 800bfee:	f8dc a000 	ldr.w	sl, [ip]
 800bff2:	fb06 e202 	mla	r2, r6, r2, lr
 800bff6:	fa13 f38a 	uxtah	r3, r3, sl
 800bffa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bffe:	fa1f fa82 	uxth.w	sl, r2
 800c002:	f8dc 2000 	ldr.w	r2, [ip]
 800c006:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c00a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c00e:	b29b      	uxth	r3, r3
 800c010:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c014:	4581      	cmp	r9, r0
 800c016:	f84c 3b04 	str.w	r3, [ip], #4
 800c01a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c01e:	d2db      	bcs.n	800bfd8 <quorem+0x44>
 800c020:	f855 300b 	ldr.w	r3, [r5, fp]
 800c024:	b92b      	cbnz	r3, 800c032 <quorem+0x9e>
 800c026:	9b01      	ldr	r3, [sp, #4]
 800c028:	3b04      	subs	r3, #4
 800c02a:	429d      	cmp	r5, r3
 800c02c:	461a      	mov	r2, r3
 800c02e:	d32e      	bcc.n	800c08e <quorem+0xfa>
 800c030:	613c      	str	r4, [r7, #16]
 800c032:	4638      	mov	r0, r7
 800c034:	f001 fae0 	bl	800d5f8 <__mcmp>
 800c038:	2800      	cmp	r0, #0
 800c03a:	db24      	blt.n	800c086 <quorem+0xf2>
 800c03c:	3601      	adds	r6, #1
 800c03e:	4628      	mov	r0, r5
 800c040:	f04f 0c00 	mov.w	ip, #0
 800c044:	f858 2b04 	ldr.w	r2, [r8], #4
 800c048:	f8d0 e000 	ldr.w	lr, [r0]
 800c04c:	b293      	uxth	r3, r2
 800c04e:	ebac 0303 	sub.w	r3, ip, r3
 800c052:	0c12      	lsrs	r2, r2, #16
 800c054:	fa13 f38e 	uxtah	r3, r3, lr
 800c058:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c05c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c060:	b29b      	uxth	r3, r3
 800c062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c066:	45c1      	cmp	r9, r8
 800c068:	f840 3b04 	str.w	r3, [r0], #4
 800c06c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c070:	d2e8      	bcs.n	800c044 <quorem+0xb0>
 800c072:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c07a:	b922      	cbnz	r2, 800c086 <quorem+0xf2>
 800c07c:	3b04      	subs	r3, #4
 800c07e:	429d      	cmp	r5, r3
 800c080:	461a      	mov	r2, r3
 800c082:	d30a      	bcc.n	800c09a <quorem+0x106>
 800c084:	613c      	str	r4, [r7, #16]
 800c086:	4630      	mov	r0, r6
 800c088:	b003      	add	sp, #12
 800c08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c08e:	6812      	ldr	r2, [r2, #0]
 800c090:	3b04      	subs	r3, #4
 800c092:	2a00      	cmp	r2, #0
 800c094:	d1cc      	bne.n	800c030 <quorem+0x9c>
 800c096:	3c01      	subs	r4, #1
 800c098:	e7c7      	b.n	800c02a <quorem+0x96>
 800c09a:	6812      	ldr	r2, [r2, #0]
 800c09c:	3b04      	subs	r3, #4
 800c09e:	2a00      	cmp	r2, #0
 800c0a0:	d1f0      	bne.n	800c084 <quorem+0xf0>
 800c0a2:	3c01      	subs	r4, #1
 800c0a4:	e7eb      	b.n	800c07e <quorem+0xea>
 800c0a6:	2000      	movs	r0, #0
 800c0a8:	e7ee      	b.n	800c088 <quorem+0xf4>
 800c0aa:	0000      	movs	r0, r0
 800c0ac:	0000      	movs	r0, r0
	...

0800c0b0 <_dtoa_r>:
 800c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b4:	ed2d 8b02 	vpush	{d8}
 800c0b8:	ec57 6b10 	vmov	r6, r7, d0
 800c0bc:	b095      	sub	sp, #84	; 0x54
 800c0be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c0c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c0c4:	9105      	str	r1, [sp, #20]
 800c0c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	9209      	str	r2, [sp, #36]	; 0x24
 800c0ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0d0:	b975      	cbnz	r5, 800c0f0 <_dtoa_r+0x40>
 800c0d2:	2010      	movs	r0, #16
 800c0d4:	f000 fffc 	bl	800d0d0 <malloc>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	6260      	str	r0, [r4, #36]	; 0x24
 800c0dc:	b920      	cbnz	r0, 800c0e8 <_dtoa_r+0x38>
 800c0de:	4bb2      	ldr	r3, [pc, #712]	; (800c3a8 <_dtoa_r+0x2f8>)
 800c0e0:	21ea      	movs	r1, #234	; 0xea
 800c0e2:	48b2      	ldr	r0, [pc, #712]	; (800c3ac <_dtoa_r+0x2fc>)
 800c0e4:	f001 ff5e 	bl	800dfa4 <__assert_func>
 800c0e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c0ec:	6005      	str	r5, [r0, #0]
 800c0ee:	60c5      	str	r5, [r0, #12]
 800c0f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0f2:	6819      	ldr	r1, [r3, #0]
 800c0f4:	b151      	cbz	r1, 800c10c <_dtoa_r+0x5c>
 800c0f6:	685a      	ldr	r2, [r3, #4]
 800c0f8:	604a      	str	r2, [r1, #4]
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	4093      	lsls	r3, r2
 800c0fe:	608b      	str	r3, [r1, #8]
 800c100:	4620      	mov	r0, r4
 800c102:	f001 f83b 	bl	800d17c <_Bfree>
 800c106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c108:	2200      	movs	r2, #0
 800c10a:	601a      	str	r2, [r3, #0]
 800c10c:	1e3b      	subs	r3, r7, #0
 800c10e:	bfb9      	ittee	lt
 800c110:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c114:	9303      	strlt	r3, [sp, #12]
 800c116:	2300      	movge	r3, #0
 800c118:	f8c8 3000 	strge.w	r3, [r8]
 800c11c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c120:	4ba3      	ldr	r3, [pc, #652]	; (800c3b0 <_dtoa_r+0x300>)
 800c122:	bfbc      	itt	lt
 800c124:	2201      	movlt	r2, #1
 800c126:	f8c8 2000 	strlt.w	r2, [r8]
 800c12a:	ea33 0309 	bics.w	r3, r3, r9
 800c12e:	d11b      	bne.n	800c168 <_dtoa_r+0xb8>
 800c130:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c132:	f242 730f 	movw	r3, #9999	; 0x270f
 800c136:	6013      	str	r3, [r2, #0]
 800c138:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c13c:	4333      	orrs	r3, r6
 800c13e:	f000 857a 	beq.w	800cc36 <_dtoa_r+0xb86>
 800c142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c144:	b963      	cbnz	r3, 800c160 <_dtoa_r+0xb0>
 800c146:	4b9b      	ldr	r3, [pc, #620]	; (800c3b4 <_dtoa_r+0x304>)
 800c148:	e024      	b.n	800c194 <_dtoa_r+0xe4>
 800c14a:	4b9b      	ldr	r3, [pc, #620]	; (800c3b8 <_dtoa_r+0x308>)
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	3308      	adds	r3, #8
 800c150:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c152:	6013      	str	r3, [r2, #0]
 800c154:	9800      	ldr	r0, [sp, #0]
 800c156:	b015      	add	sp, #84	; 0x54
 800c158:	ecbd 8b02 	vpop	{d8}
 800c15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c160:	4b94      	ldr	r3, [pc, #592]	; (800c3b4 <_dtoa_r+0x304>)
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	3303      	adds	r3, #3
 800c166:	e7f3      	b.n	800c150 <_dtoa_r+0xa0>
 800c168:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c16c:	2200      	movs	r2, #0
 800c16e:	ec51 0b17 	vmov	r0, r1, d7
 800c172:	2300      	movs	r3, #0
 800c174:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c178:	f7f4 fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800c17c:	4680      	mov	r8, r0
 800c17e:	b158      	cbz	r0, 800c198 <_dtoa_r+0xe8>
 800c180:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c182:	2301      	movs	r3, #1
 800c184:	6013      	str	r3, [r2, #0]
 800c186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f000 8551 	beq.w	800cc30 <_dtoa_r+0xb80>
 800c18e:	488b      	ldr	r0, [pc, #556]	; (800c3bc <_dtoa_r+0x30c>)
 800c190:	6018      	str	r0, [r3, #0]
 800c192:	1e43      	subs	r3, r0, #1
 800c194:	9300      	str	r3, [sp, #0]
 800c196:	e7dd      	b.n	800c154 <_dtoa_r+0xa4>
 800c198:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c19c:	aa12      	add	r2, sp, #72	; 0x48
 800c19e:	a913      	add	r1, sp, #76	; 0x4c
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f001 facd 	bl	800d740 <__d2b>
 800c1a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c1aa:	4683      	mov	fp, r0
 800c1ac:	2d00      	cmp	r5, #0
 800c1ae:	d07c      	beq.n	800c2aa <_dtoa_r+0x1fa>
 800c1b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c1b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c1be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c1c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c1c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c1ca:	4b7d      	ldr	r3, [pc, #500]	; (800c3c0 <_dtoa_r+0x310>)
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	4639      	mov	r1, r7
 800c1d2:	f7f4 f859 	bl	8000288 <__aeabi_dsub>
 800c1d6:	a36e      	add	r3, pc, #440	; (adr r3, 800c390 <_dtoa_r+0x2e0>)
 800c1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1dc:	f7f4 fa0c 	bl	80005f8 <__aeabi_dmul>
 800c1e0:	a36d      	add	r3, pc, #436	; (adr r3, 800c398 <_dtoa_r+0x2e8>)
 800c1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e6:	f7f4 f851 	bl	800028c <__adddf3>
 800c1ea:	4606      	mov	r6, r0
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	460f      	mov	r7, r1
 800c1f0:	f7f4 f998 	bl	8000524 <__aeabi_i2d>
 800c1f4:	a36a      	add	r3, pc, #424	; (adr r3, 800c3a0 <_dtoa_r+0x2f0>)
 800c1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fa:	f7f4 f9fd 	bl	80005f8 <__aeabi_dmul>
 800c1fe:	4602      	mov	r2, r0
 800c200:	460b      	mov	r3, r1
 800c202:	4630      	mov	r0, r6
 800c204:	4639      	mov	r1, r7
 800c206:	f7f4 f841 	bl	800028c <__adddf3>
 800c20a:	4606      	mov	r6, r0
 800c20c:	460f      	mov	r7, r1
 800c20e:	f7f4 fca3 	bl	8000b58 <__aeabi_d2iz>
 800c212:	2200      	movs	r2, #0
 800c214:	4682      	mov	sl, r0
 800c216:	2300      	movs	r3, #0
 800c218:	4630      	mov	r0, r6
 800c21a:	4639      	mov	r1, r7
 800c21c:	f7f4 fc5e 	bl	8000adc <__aeabi_dcmplt>
 800c220:	b148      	cbz	r0, 800c236 <_dtoa_r+0x186>
 800c222:	4650      	mov	r0, sl
 800c224:	f7f4 f97e 	bl	8000524 <__aeabi_i2d>
 800c228:	4632      	mov	r2, r6
 800c22a:	463b      	mov	r3, r7
 800c22c:	f7f4 fc4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c230:	b908      	cbnz	r0, 800c236 <_dtoa_r+0x186>
 800c232:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c236:	f1ba 0f16 	cmp.w	sl, #22
 800c23a:	d854      	bhi.n	800c2e6 <_dtoa_r+0x236>
 800c23c:	4b61      	ldr	r3, [pc, #388]	; (800c3c4 <_dtoa_r+0x314>)
 800c23e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c246:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c24a:	f7f4 fc47 	bl	8000adc <__aeabi_dcmplt>
 800c24e:	2800      	cmp	r0, #0
 800c250:	d04b      	beq.n	800c2ea <_dtoa_r+0x23a>
 800c252:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c256:	2300      	movs	r3, #0
 800c258:	930e      	str	r3, [sp, #56]	; 0x38
 800c25a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c25c:	1b5d      	subs	r5, r3, r5
 800c25e:	1e6b      	subs	r3, r5, #1
 800c260:	9304      	str	r3, [sp, #16]
 800c262:	bf43      	ittte	mi
 800c264:	2300      	movmi	r3, #0
 800c266:	f1c5 0801 	rsbmi	r8, r5, #1
 800c26a:	9304      	strmi	r3, [sp, #16]
 800c26c:	f04f 0800 	movpl.w	r8, #0
 800c270:	f1ba 0f00 	cmp.w	sl, #0
 800c274:	db3b      	blt.n	800c2ee <_dtoa_r+0x23e>
 800c276:	9b04      	ldr	r3, [sp, #16]
 800c278:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c27c:	4453      	add	r3, sl
 800c27e:	9304      	str	r3, [sp, #16]
 800c280:	2300      	movs	r3, #0
 800c282:	9306      	str	r3, [sp, #24]
 800c284:	9b05      	ldr	r3, [sp, #20]
 800c286:	2b09      	cmp	r3, #9
 800c288:	d869      	bhi.n	800c35e <_dtoa_r+0x2ae>
 800c28a:	2b05      	cmp	r3, #5
 800c28c:	bfc4      	itt	gt
 800c28e:	3b04      	subgt	r3, #4
 800c290:	9305      	strgt	r3, [sp, #20]
 800c292:	9b05      	ldr	r3, [sp, #20]
 800c294:	f1a3 0302 	sub.w	r3, r3, #2
 800c298:	bfcc      	ite	gt
 800c29a:	2500      	movgt	r5, #0
 800c29c:	2501      	movle	r5, #1
 800c29e:	2b03      	cmp	r3, #3
 800c2a0:	d869      	bhi.n	800c376 <_dtoa_r+0x2c6>
 800c2a2:	e8df f003 	tbb	[pc, r3]
 800c2a6:	4e2c      	.short	0x4e2c
 800c2a8:	5a4c      	.short	0x5a4c
 800c2aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c2ae:	441d      	add	r5, r3
 800c2b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c2b4:	2b20      	cmp	r3, #32
 800c2b6:	bfc1      	itttt	gt
 800c2b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c2bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c2c0:	fa09 f303 	lslgt.w	r3, r9, r3
 800c2c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c2c8:	bfda      	itte	le
 800c2ca:	f1c3 0320 	rsble	r3, r3, #32
 800c2ce:	fa06 f003 	lslle.w	r0, r6, r3
 800c2d2:	4318      	orrgt	r0, r3
 800c2d4:	f7f4 f916 	bl	8000504 <__aeabi_ui2d>
 800c2d8:	2301      	movs	r3, #1
 800c2da:	4606      	mov	r6, r0
 800c2dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c2e0:	3d01      	subs	r5, #1
 800c2e2:	9310      	str	r3, [sp, #64]	; 0x40
 800c2e4:	e771      	b.n	800c1ca <_dtoa_r+0x11a>
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e7b6      	b.n	800c258 <_dtoa_r+0x1a8>
 800c2ea:	900e      	str	r0, [sp, #56]	; 0x38
 800c2ec:	e7b5      	b.n	800c25a <_dtoa_r+0x1aa>
 800c2ee:	f1ca 0300 	rsb	r3, sl, #0
 800c2f2:	9306      	str	r3, [sp, #24]
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	eba8 080a 	sub.w	r8, r8, sl
 800c2fa:	930d      	str	r3, [sp, #52]	; 0x34
 800c2fc:	e7c2      	b.n	800c284 <_dtoa_r+0x1d4>
 800c2fe:	2300      	movs	r3, #0
 800c300:	9308      	str	r3, [sp, #32]
 800c302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c304:	2b00      	cmp	r3, #0
 800c306:	dc39      	bgt.n	800c37c <_dtoa_r+0x2cc>
 800c308:	f04f 0901 	mov.w	r9, #1
 800c30c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c310:	464b      	mov	r3, r9
 800c312:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c316:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c318:	2200      	movs	r2, #0
 800c31a:	6042      	str	r2, [r0, #4]
 800c31c:	2204      	movs	r2, #4
 800c31e:	f102 0614 	add.w	r6, r2, #20
 800c322:	429e      	cmp	r6, r3
 800c324:	6841      	ldr	r1, [r0, #4]
 800c326:	d92f      	bls.n	800c388 <_dtoa_r+0x2d8>
 800c328:	4620      	mov	r0, r4
 800c32a:	f000 fee7 	bl	800d0fc <_Balloc>
 800c32e:	9000      	str	r0, [sp, #0]
 800c330:	2800      	cmp	r0, #0
 800c332:	d14b      	bne.n	800c3cc <_dtoa_r+0x31c>
 800c334:	4b24      	ldr	r3, [pc, #144]	; (800c3c8 <_dtoa_r+0x318>)
 800c336:	4602      	mov	r2, r0
 800c338:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c33c:	e6d1      	b.n	800c0e2 <_dtoa_r+0x32>
 800c33e:	2301      	movs	r3, #1
 800c340:	e7de      	b.n	800c300 <_dtoa_r+0x250>
 800c342:	2300      	movs	r3, #0
 800c344:	9308      	str	r3, [sp, #32]
 800c346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c348:	eb0a 0903 	add.w	r9, sl, r3
 800c34c:	f109 0301 	add.w	r3, r9, #1
 800c350:	2b01      	cmp	r3, #1
 800c352:	9301      	str	r3, [sp, #4]
 800c354:	bfb8      	it	lt
 800c356:	2301      	movlt	r3, #1
 800c358:	e7dd      	b.n	800c316 <_dtoa_r+0x266>
 800c35a:	2301      	movs	r3, #1
 800c35c:	e7f2      	b.n	800c344 <_dtoa_r+0x294>
 800c35e:	2501      	movs	r5, #1
 800c360:	2300      	movs	r3, #0
 800c362:	9305      	str	r3, [sp, #20]
 800c364:	9508      	str	r5, [sp, #32]
 800c366:	f04f 39ff 	mov.w	r9, #4294967295
 800c36a:	2200      	movs	r2, #0
 800c36c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c370:	2312      	movs	r3, #18
 800c372:	9209      	str	r2, [sp, #36]	; 0x24
 800c374:	e7cf      	b.n	800c316 <_dtoa_r+0x266>
 800c376:	2301      	movs	r3, #1
 800c378:	9308      	str	r3, [sp, #32]
 800c37a:	e7f4      	b.n	800c366 <_dtoa_r+0x2b6>
 800c37c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c380:	f8cd 9004 	str.w	r9, [sp, #4]
 800c384:	464b      	mov	r3, r9
 800c386:	e7c6      	b.n	800c316 <_dtoa_r+0x266>
 800c388:	3101      	adds	r1, #1
 800c38a:	6041      	str	r1, [r0, #4]
 800c38c:	0052      	lsls	r2, r2, #1
 800c38e:	e7c6      	b.n	800c31e <_dtoa_r+0x26e>
 800c390:	636f4361 	.word	0x636f4361
 800c394:	3fd287a7 	.word	0x3fd287a7
 800c398:	8b60c8b3 	.word	0x8b60c8b3
 800c39c:	3fc68a28 	.word	0x3fc68a28
 800c3a0:	509f79fb 	.word	0x509f79fb
 800c3a4:	3fd34413 	.word	0x3fd34413
 800c3a8:	0801c611 	.word	0x0801c611
 800c3ac:	0801c628 	.word	0x0801c628
 800c3b0:	7ff00000 	.word	0x7ff00000
 800c3b4:	0801c60d 	.word	0x0801c60d
 800c3b8:	0801c604 	.word	0x0801c604
 800c3bc:	0801c5e1 	.word	0x0801c5e1
 800c3c0:	3ff80000 	.word	0x3ff80000
 800c3c4:	0801c780 	.word	0x0801c780
 800c3c8:	0801c687 	.word	0x0801c687
 800c3cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3ce:	9a00      	ldr	r2, [sp, #0]
 800c3d0:	601a      	str	r2, [r3, #0]
 800c3d2:	9b01      	ldr	r3, [sp, #4]
 800c3d4:	2b0e      	cmp	r3, #14
 800c3d6:	f200 80ad 	bhi.w	800c534 <_dtoa_r+0x484>
 800c3da:	2d00      	cmp	r5, #0
 800c3dc:	f000 80aa 	beq.w	800c534 <_dtoa_r+0x484>
 800c3e0:	f1ba 0f00 	cmp.w	sl, #0
 800c3e4:	dd36      	ble.n	800c454 <_dtoa_r+0x3a4>
 800c3e6:	4ac3      	ldr	r2, [pc, #780]	; (800c6f4 <_dtoa_r+0x644>)
 800c3e8:	f00a 030f 	and.w	r3, sl, #15
 800c3ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c3f0:	ed93 7b00 	vldr	d7, [r3]
 800c3f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c3f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c3fc:	eeb0 8a47 	vmov.f32	s16, s14
 800c400:	eef0 8a67 	vmov.f32	s17, s15
 800c404:	d016      	beq.n	800c434 <_dtoa_r+0x384>
 800c406:	4bbc      	ldr	r3, [pc, #752]	; (800c6f8 <_dtoa_r+0x648>)
 800c408:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c40c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c410:	f7f4 fa1c 	bl	800084c <__aeabi_ddiv>
 800c414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c418:	f007 070f 	and.w	r7, r7, #15
 800c41c:	2503      	movs	r5, #3
 800c41e:	4eb6      	ldr	r6, [pc, #728]	; (800c6f8 <_dtoa_r+0x648>)
 800c420:	b957      	cbnz	r7, 800c438 <_dtoa_r+0x388>
 800c422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c426:	ec53 2b18 	vmov	r2, r3, d8
 800c42a:	f7f4 fa0f 	bl	800084c <__aeabi_ddiv>
 800c42e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c432:	e029      	b.n	800c488 <_dtoa_r+0x3d8>
 800c434:	2502      	movs	r5, #2
 800c436:	e7f2      	b.n	800c41e <_dtoa_r+0x36e>
 800c438:	07f9      	lsls	r1, r7, #31
 800c43a:	d508      	bpl.n	800c44e <_dtoa_r+0x39e>
 800c43c:	ec51 0b18 	vmov	r0, r1, d8
 800c440:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c444:	f7f4 f8d8 	bl	80005f8 <__aeabi_dmul>
 800c448:	ec41 0b18 	vmov	d8, r0, r1
 800c44c:	3501      	adds	r5, #1
 800c44e:	107f      	asrs	r7, r7, #1
 800c450:	3608      	adds	r6, #8
 800c452:	e7e5      	b.n	800c420 <_dtoa_r+0x370>
 800c454:	f000 80a6 	beq.w	800c5a4 <_dtoa_r+0x4f4>
 800c458:	f1ca 0600 	rsb	r6, sl, #0
 800c45c:	4ba5      	ldr	r3, [pc, #660]	; (800c6f4 <_dtoa_r+0x644>)
 800c45e:	4fa6      	ldr	r7, [pc, #664]	; (800c6f8 <_dtoa_r+0x648>)
 800c460:	f006 020f 	and.w	r2, r6, #15
 800c464:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c470:	f7f4 f8c2 	bl	80005f8 <__aeabi_dmul>
 800c474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c478:	1136      	asrs	r6, r6, #4
 800c47a:	2300      	movs	r3, #0
 800c47c:	2502      	movs	r5, #2
 800c47e:	2e00      	cmp	r6, #0
 800c480:	f040 8085 	bne.w	800c58e <_dtoa_r+0x4de>
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1d2      	bne.n	800c42e <_dtoa_r+0x37e>
 800c488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f000 808c 	beq.w	800c5a8 <_dtoa_r+0x4f8>
 800c490:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c494:	4b99      	ldr	r3, [pc, #612]	; (800c6fc <_dtoa_r+0x64c>)
 800c496:	2200      	movs	r2, #0
 800c498:	4630      	mov	r0, r6
 800c49a:	4639      	mov	r1, r7
 800c49c:	f7f4 fb1e 	bl	8000adc <__aeabi_dcmplt>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	f000 8081 	beq.w	800c5a8 <_dtoa_r+0x4f8>
 800c4a6:	9b01      	ldr	r3, [sp, #4]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d07d      	beq.n	800c5a8 <_dtoa_r+0x4f8>
 800c4ac:	f1b9 0f00 	cmp.w	r9, #0
 800c4b0:	dd3c      	ble.n	800c52c <_dtoa_r+0x47c>
 800c4b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c4b6:	9307      	str	r3, [sp, #28]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	4b91      	ldr	r3, [pc, #580]	; (800c700 <_dtoa_r+0x650>)
 800c4bc:	4630      	mov	r0, r6
 800c4be:	4639      	mov	r1, r7
 800c4c0:	f7f4 f89a 	bl	80005f8 <__aeabi_dmul>
 800c4c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4c8:	3501      	adds	r5, #1
 800c4ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c4ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	f7f4 f826 	bl	8000524 <__aeabi_i2d>
 800c4d8:	4632      	mov	r2, r6
 800c4da:	463b      	mov	r3, r7
 800c4dc:	f7f4 f88c 	bl	80005f8 <__aeabi_dmul>
 800c4e0:	4b88      	ldr	r3, [pc, #544]	; (800c704 <_dtoa_r+0x654>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f7f3 fed2 	bl	800028c <__adddf3>
 800c4e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c4ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4f0:	9303      	str	r3, [sp, #12]
 800c4f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d15c      	bne.n	800c5b2 <_dtoa_r+0x502>
 800c4f8:	4b83      	ldr	r3, [pc, #524]	; (800c708 <_dtoa_r+0x658>)
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	4639      	mov	r1, r7
 800c500:	f7f3 fec2 	bl	8000288 <__aeabi_dsub>
 800c504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c508:	4606      	mov	r6, r0
 800c50a:	460f      	mov	r7, r1
 800c50c:	f7f4 fb04 	bl	8000b18 <__aeabi_dcmpgt>
 800c510:	2800      	cmp	r0, #0
 800c512:	f040 8296 	bne.w	800ca42 <_dtoa_r+0x992>
 800c516:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c51a:	4630      	mov	r0, r6
 800c51c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c520:	4639      	mov	r1, r7
 800c522:	f7f4 fadb 	bl	8000adc <__aeabi_dcmplt>
 800c526:	2800      	cmp	r0, #0
 800c528:	f040 8288 	bne.w	800ca3c <_dtoa_r+0x98c>
 800c52c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c530:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c534:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c536:	2b00      	cmp	r3, #0
 800c538:	f2c0 8158 	blt.w	800c7ec <_dtoa_r+0x73c>
 800c53c:	f1ba 0f0e 	cmp.w	sl, #14
 800c540:	f300 8154 	bgt.w	800c7ec <_dtoa_r+0x73c>
 800c544:	4b6b      	ldr	r3, [pc, #428]	; (800c6f4 <_dtoa_r+0x644>)
 800c546:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c54a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c550:	2b00      	cmp	r3, #0
 800c552:	f280 80e3 	bge.w	800c71c <_dtoa_r+0x66c>
 800c556:	9b01      	ldr	r3, [sp, #4]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f300 80df 	bgt.w	800c71c <_dtoa_r+0x66c>
 800c55e:	f040 826d 	bne.w	800ca3c <_dtoa_r+0x98c>
 800c562:	4b69      	ldr	r3, [pc, #420]	; (800c708 <_dtoa_r+0x658>)
 800c564:	2200      	movs	r2, #0
 800c566:	4640      	mov	r0, r8
 800c568:	4649      	mov	r1, r9
 800c56a:	f7f4 f845 	bl	80005f8 <__aeabi_dmul>
 800c56e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c572:	f7f4 fac7 	bl	8000b04 <__aeabi_dcmpge>
 800c576:	9e01      	ldr	r6, [sp, #4]
 800c578:	4637      	mov	r7, r6
 800c57a:	2800      	cmp	r0, #0
 800c57c:	f040 8243 	bne.w	800ca06 <_dtoa_r+0x956>
 800c580:	9d00      	ldr	r5, [sp, #0]
 800c582:	2331      	movs	r3, #49	; 0x31
 800c584:	f805 3b01 	strb.w	r3, [r5], #1
 800c588:	f10a 0a01 	add.w	sl, sl, #1
 800c58c:	e23f      	b.n	800ca0e <_dtoa_r+0x95e>
 800c58e:	07f2      	lsls	r2, r6, #31
 800c590:	d505      	bpl.n	800c59e <_dtoa_r+0x4ee>
 800c592:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c596:	f7f4 f82f 	bl	80005f8 <__aeabi_dmul>
 800c59a:	3501      	adds	r5, #1
 800c59c:	2301      	movs	r3, #1
 800c59e:	1076      	asrs	r6, r6, #1
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	e76c      	b.n	800c47e <_dtoa_r+0x3ce>
 800c5a4:	2502      	movs	r5, #2
 800c5a6:	e76f      	b.n	800c488 <_dtoa_r+0x3d8>
 800c5a8:	9b01      	ldr	r3, [sp, #4]
 800c5aa:	f8cd a01c 	str.w	sl, [sp, #28]
 800c5ae:	930c      	str	r3, [sp, #48]	; 0x30
 800c5b0:	e78d      	b.n	800c4ce <_dtoa_r+0x41e>
 800c5b2:	9900      	ldr	r1, [sp, #0]
 800c5b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c5b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5b8:	4b4e      	ldr	r3, [pc, #312]	; (800c6f4 <_dtoa_r+0x644>)
 800c5ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c5be:	4401      	add	r1, r0
 800c5c0:	9102      	str	r1, [sp, #8]
 800c5c2:	9908      	ldr	r1, [sp, #32]
 800c5c4:	eeb0 8a47 	vmov.f32	s16, s14
 800c5c8:	eef0 8a67 	vmov.f32	s17, s15
 800c5cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5d4:	2900      	cmp	r1, #0
 800c5d6:	d045      	beq.n	800c664 <_dtoa_r+0x5b4>
 800c5d8:	494c      	ldr	r1, [pc, #304]	; (800c70c <_dtoa_r+0x65c>)
 800c5da:	2000      	movs	r0, #0
 800c5dc:	f7f4 f936 	bl	800084c <__aeabi_ddiv>
 800c5e0:	ec53 2b18 	vmov	r2, r3, d8
 800c5e4:	f7f3 fe50 	bl	8000288 <__aeabi_dsub>
 800c5e8:	9d00      	ldr	r5, [sp, #0]
 800c5ea:	ec41 0b18 	vmov	d8, r0, r1
 800c5ee:	4639      	mov	r1, r7
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f7f4 fab1 	bl	8000b58 <__aeabi_d2iz>
 800c5f6:	900c      	str	r0, [sp, #48]	; 0x30
 800c5f8:	f7f3 ff94 	bl	8000524 <__aeabi_i2d>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	460b      	mov	r3, r1
 800c600:	4630      	mov	r0, r6
 800c602:	4639      	mov	r1, r7
 800c604:	f7f3 fe40 	bl	8000288 <__aeabi_dsub>
 800c608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c60a:	3330      	adds	r3, #48	; 0x30
 800c60c:	f805 3b01 	strb.w	r3, [r5], #1
 800c610:	ec53 2b18 	vmov	r2, r3, d8
 800c614:	4606      	mov	r6, r0
 800c616:	460f      	mov	r7, r1
 800c618:	f7f4 fa60 	bl	8000adc <__aeabi_dcmplt>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d165      	bne.n	800c6ec <_dtoa_r+0x63c>
 800c620:	4632      	mov	r2, r6
 800c622:	463b      	mov	r3, r7
 800c624:	4935      	ldr	r1, [pc, #212]	; (800c6fc <_dtoa_r+0x64c>)
 800c626:	2000      	movs	r0, #0
 800c628:	f7f3 fe2e 	bl	8000288 <__aeabi_dsub>
 800c62c:	ec53 2b18 	vmov	r2, r3, d8
 800c630:	f7f4 fa54 	bl	8000adc <__aeabi_dcmplt>
 800c634:	2800      	cmp	r0, #0
 800c636:	f040 80b9 	bne.w	800c7ac <_dtoa_r+0x6fc>
 800c63a:	9b02      	ldr	r3, [sp, #8]
 800c63c:	429d      	cmp	r5, r3
 800c63e:	f43f af75 	beq.w	800c52c <_dtoa_r+0x47c>
 800c642:	4b2f      	ldr	r3, [pc, #188]	; (800c700 <_dtoa_r+0x650>)
 800c644:	ec51 0b18 	vmov	r0, r1, d8
 800c648:	2200      	movs	r2, #0
 800c64a:	f7f3 ffd5 	bl	80005f8 <__aeabi_dmul>
 800c64e:	4b2c      	ldr	r3, [pc, #176]	; (800c700 <_dtoa_r+0x650>)
 800c650:	ec41 0b18 	vmov	d8, r0, r1
 800c654:	2200      	movs	r2, #0
 800c656:	4630      	mov	r0, r6
 800c658:	4639      	mov	r1, r7
 800c65a:	f7f3 ffcd 	bl	80005f8 <__aeabi_dmul>
 800c65e:	4606      	mov	r6, r0
 800c660:	460f      	mov	r7, r1
 800c662:	e7c4      	b.n	800c5ee <_dtoa_r+0x53e>
 800c664:	ec51 0b17 	vmov	r0, r1, d7
 800c668:	f7f3 ffc6 	bl	80005f8 <__aeabi_dmul>
 800c66c:	9b02      	ldr	r3, [sp, #8]
 800c66e:	9d00      	ldr	r5, [sp, #0]
 800c670:	930c      	str	r3, [sp, #48]	; 0x30
 800c672:	ec41 0b18 	vmov	d8, r0, r1
 800c676:	4639      	mov	r1, r7
 800c678:	4630      	mov	r0, r6
 800c67a:	f7f4 fa6d 	bl	8000b58 <__aeabi_d2iz>
 800c67e:	9011      	str	r0, [sp, #68]	; 0x44
 800c680:	f7f3 ff50 	bl	8000524 <__aeabi_i2d>
 800c684:	4602      	mov	r2, r0
 800c686:	460b      	mov	r3, r1
 800c688:	4630      	mov	r0, r6
 800c68a:	4639      	mov	r1, r7
 800c68c:	f7f3 fdfc 	bl	8000288 <__aeabi_dsub>
 800c690:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c692:	3330      	adds	r3, #48	; 0x30
 800c694:	f805 3b01 	strb.w	r3, [r5], #1
 800c698:	9b02      	ldr	r3, [sp, #8]
 800c69a:	429d      	cmp	r5, r3
 800c69c:	4606      	mov	r6, r0
 800c69e:	460f      	mov	r7, r1
 800c6a0:	f04f 0200 	mov.w	r2, #0
 800c6a4:	d134      	bne.n	800c710 <_dtoa_r+0x660>
 800c6a6:	4b19      	ldr	r3, [pc, #100]	; (800c70c <_dtoa_r+0x65c>)
 800c6a8:	ec51 0b18 	vmov	r0, r1, d8
 800c6ac:	f7f3 fdee 	bl	800028c <__adddf3>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	4639      	mov	r1, r7
 800c6b8:	f7f4 fa2e 	bl	8000b18 <__aeabi_dcmpgt>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	d175      	bne.n	800c7ac <_dtoa_r+0x6fc>
 800c6c0:	ec53 2b18 	vmov	r2, r3, d8
 800c6c4:	4911      	ldr	r1, [pc, #68]	; (800c70c <_dtoa_r+0x65c>)
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	f7f3 fdde 	bl	8000288 <__aeabi_dsub>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	4639      	mov	r1, r7
 800c6d4:	f7f4 fa02 	bl	8000adc <__aeabi_dcmplt>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	f43f af27 	beq.w	800c52c <_dtoa_r+0x47c>
 800c6de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c6e0:	1e6b      	subs	r3, r5, #1
 800c6e2:	930c      	str	r3, [sp, #48]	; 0x30
 800c6e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c6e8:	2b30      	cmp	r3, #48	; 0x30
 800c6ea:	d0f8      	beq.n	800c6de <_dtoa_r+0x62e>
 800c6ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c6f0:	e04a      	b.n	800c788 <_dtoa_r+0x6d8>
 800c6f2:	bf00      	nop
 800c6f4:	0801c780 	.word	0x0801c780
 800c6f8:	0801c758 	.word	0x0801c758
 800c6fc:	3ff00000 	.word	0x3ff00000
 800c700:	40240000 	.word	0x40240000
 800c704:	401c0000 	.word	0x401c0000
 800c708:	40140000 	.word	0x40140000
 800c70c:	3fe00000 	.word	0x3fe00000
 800c710:	4baf      	ldr	r3, [pc, #700]	; (800c9d0 <_dtoa_r+0x920>)
 800c712:	f7f3 ff71 	bl	80005f8 <__aeabi_dmul>
 800c716:	4606      	mov	r6, r0
 800c718:	460f      	mov	r7, r1
 800c71a:	e7ac      	b.n	800c676 <_dtoa_r+0x5c6>
 800c71c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c720:	9d00      	ldr	r5, [sp, #0]
 800c722:	4642      	mov	r2, r8
 800c724:	464b      	mov	r3, r9
 800c726:	4630      	mov	r0, r6
 800c728:	4639      	mov	r1, r7
 800c72a:	f7f4 f88f 	bl	800084c <__aeabi_ddiv>
 800c72e:	f7f4 fa13 	bl	8000b58 <__aeabi_d2iz>
 800c732:	9002      	str	r0, [sp, #8]
 800c734:	f7f3 fef6 	bl	8000524 <__aeabi_i2d>
 800c738:	4642      	mov	r2, r8
 800c73a:	464b      	mov	r3, r9
 800c73c:	f7f3 ff5c 	bl	80005f8 <__aeabi_dmul>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	4630      	mov	r0, r6
 800c746:	4639      	mov	r1, r7
 800c748:	f7f3 fd9e 	bl	8000288 <__aeabi_dsub>
 800c74c:	9e02      	ldr	r6, [sp, #8]
 800c74e:	9f01      	ldr	r7, [sp, #4]
 800c750:	3630      	adds	r6, #48	; 0x30
 800c752:	f805 6b01 	strb.w	r6, [r5], #1
 800c756:	9e00      	ldr	r6, [sp, #0]
 800c758:	1bae      	subs	r6, r5, r6
 800c75a:	42b7      	cmp	r7, r6
 800c75c:	4602      	mov	r2, r0
 800c75e:	460b      	mov	r3, r1
 800c760:	d137      	bne.n	800c7d2 <_dtoa_r+0x722>
 800c762:	f7f3 fd93 	bl	800028c <__adddf3>
 800c766:	4642      	mov	r2, r8
 800c768:	464b      	mov	r3, r9
 800c76a:	4606      	mov	r6, r0
 800c76c:	460f      	mov	r7, r1
 800c76e:	f7f4 f9d3 	bl	8000b18 <__aeabi_dcmpgt>
 800c772:	b9c8      	cbnz	r0, 800c7a8 <_dtoa_r+0x6f8>
 800c774:	4642      	mov	r2, r8
 800c776:	464b      	mov	r3, r9
 800c778:	4630      	mov	r0, r6
 800c77a:	4639      	mov	r1, r7
 800c77c:	f7f4 f9a4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c780:	b110      	cbz	r0, 800c788 <_dtoa_r+0x6d8>
 800c782:	9b02      	ldr	r3, [sp, #8]
 800c784:	07d9      	lsls	r1, r3, #31
 800c786:	d40f      	bmi.n	800c7a8 <_dtoa_r+0x6f8>
 800c788:	4620      	mov	r0, r4
 800c78a:	4659      	mov	r1, fp
 800c78c:	f000 fcf6 	bl	800d17c <_Bfree>
 800c790:	2300      	movs	r3, #0
 800c792:	702b      	strb	r3, [r5, #0]
 800c794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c796:	f10a 0001 	add.w	r0, sl, #1
 800c79a:	6018      	str	r0, [r3, #0]
 800c79c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f43f acd8 	beq.w	800c154 <_dtoa_r+0xa4>
 800c7a4:	601d      	str	r5, [r3, #0]
 800c7a6:	e4d5      	b.n	800c154 <_dtoa_r+0xa4>
 800c7a8:	f8cd a01c 	str.w	sl, [sp, #28]
 800c7ac:	462b      	mov	r3, r5
 800c7ae:	461d      	mov	r5, r3
 800c7b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7b4:	2a39      	cmp	r2, #57	; 0x39
 800c7b6:	d108      	bne.n	800c7ca <_dtoa_r+0x71a>
 800c7b8:	9a00      	ldr	r2, [sp, #0]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d1f7      	bne.n	800c7ae <_dtoa_r+0x6fe>
 800c7be:	9a07      	ldr	r2, [sp, #28]
 800c7c0:	9900      	ldr	r1, [sp, #0]
 800c7c2:	3201      	adds	r2, #1
 800c7c4:	9207      	str	r2, [sp, #28]
 800c7c6:	2230      	movs	r2, #48	; 0x30
 800c7c8:	700a      	strb	r2, [r1, #0]
 800c7ca:	781a      	ldrb	r2, [r3, #0]
 800c7cc:	3201      	adds	r2, #1
 800c7ce:	701a      	strb	r2, [r3, #0]
 800c7d0:	e78c      	b.n	800c6ec <_dtoa_r+0x63c>
 800c7d2:	4b7f      	ldr	r3, [pc, #508]	; (800c9d0 <_dtoa_r+0x920>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f7f3 ff0f 	bl	80005f8 <__aeabi_dmul>
 800c7da:	2200      	movs	r2, #0
 800c7dc:	2300      	movs	r3, #0
 800c7de:	4606      	mov	r6, r0
 800c7e0:	460f      	mov	r7, r1
 800c7e2:	f7f4 f971 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	d09b      	beq.n	800c722 <_dtoa_r+0x672>
 800c7ea:	e7cd      	b.n	800c788 <_dtoa_r+0x6d8>
 800c7ec:	9a08      	ldr	r2, [sp, #32]
 800c7ee:	2a00      	cmp	r2, #0
 800c7f0:	f000 80c4 	beq.w	800c97c <_dtoa_r+0x8cc>
 800c7f4:	9a05      	ldr	r2, [sp, #20]
 800c7f6:	2a01      	cmp	r2, #1
 800c7f8:	f300 80a8 	bgt.w	800c94c <_dtoa_r+0x89c>
 800c7fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c7fe:	2a00      	cmp	r2, #0
 800c800:	f000 80a0 	beq.w	800c944 <_dtoa_r+0x894>
 800c804:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c808:	9e06      	ldr	r6, [sp, #24]
 800c80a:	4645      	mov	r5, r8
 800c80c:	9a04      	ldr	r2, [sp, #16]
 800c80e:	2101      	movs	r1, #1
 800c810:	441a      	add	r2, r3
 800c812:	4620      	mov	r0, r4
 800c814:	4498      	add	r8, r3
 800c816:	9204      	str	r2, [sp, #16]
 800c818:	f000 fd6c 	bl	800d2f4 <__i2b>
 800c81c:	4607      	mov	r7, r0
 800c81e:	2d00      	cmp	r5, #0
 800c820:	dd0b      	ble.n	800c83a <_dtoa_r+0x78a>
 800c822:	9b04      	ldr	r3, [sp, #16]
 800c824:	2b00      	cmp	r3, #0
 800c826:	dd08      	ble.n	800c83a <_dtoa_r+0x78a>
 800c828:	42ab      	cmp	r3, r5
 800c82a:	9a04      	ldr	r2, [sp, #16]
 800c82c:	bfa8      	it	ge
 800c82e:	462b      	movge	r3, r5
 800c830:	eba8 0803 	sub.w	r8, r8, r3
 800c834:	1aed      	subs	r5, r5, r3
 800c836:	1ad3      	subs	r3, r2, r3
 800c838:	9304      	str	r3, [sp, #16]
 800c83a:	9b06      	ldr	r3, [sp, #24]
 800c83c:	b1fb      	cbz	r3, 800c87e <_dtoa_r+0x7ce>
 800c83e:	9b08      	ldr	r3, [sp, #32]
 800c840:	2b00      	cmp	r3, #0
 800c842:	f000 809f 	beq.w	800c984 <_dtoa_r+0x8d4>
 800c846:	2e00      	cmp	r6, #0
 800c848:	dd11      	ble.n	800c86e <_dtoa_r+0x7be>
 800c84a:	4639      	mov	r1, r7
 800c84c:	4632      	mov	r2, r6
 800c84e:	4620      	mov	r0, r4
 800c850:	f000 fe0c 	bl	800d46c <__pow5mult>
 800c854:	465a      	mov	r2, fp
 800c856:	4601      	mov	r1, r0
 800c858:	4607      	mov	r7, r0
 800c85a:	4620      	mov	r0, r4
 800c85c:	f000 fd60 	bl	800d320 <__multiply>
 800c860:	4659      	mov	r1, fp
 800c862:	9007      	str	r0, [sp, #28]
 800c864:	4620      	mov	r0, r4
 800c866:	f000 fc89 	bl	800d17c <_Bfree>
 800c86a:	9b07      	ldr	r3, [sp, #28]
 800c86c:	469b      	mov	fp, r3
 800c86e:	9b06      	ldr	r3, [sp, #24]
 800c870:	1b9a      	subs	r2, r3, r6
 800c872:	d004      	beq.n	800c87e <_dtoa_r+0x7ce>
 800c874:	4659      	mov	r1, fp
 800c876:	4620      	mov	r0, r4
 800c878:	f000 fdf8 	bl	800d46c <__pow5mult>
 800c87c:	4683      	mov	fp, r0
 800c87e:	2101      	movs	r1, #1
 800c880:	4620      	mov	r0, r4
 800c882:	f000 fd37 	bl	800d2f4 <__i2b>
 800c886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c888:	2b00      	cmp	r3, #0
 800c88a:	4606      	mov	r6, r0
 800c88c:	dd7c      	ble.n	800c988 <_dtoa_r+0x8d8>
 800c88e:	461a      	mov	r2, r3
 800c890:	4601      	mov	r1, r0
 800c892:	4620      	mov	r0, r4
 800c894:	f000 fdea 	bl	800d46c <__pow5mult>
 800c898:	9b05      	ldr	r3, [sp, #20]
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	4606      	mov	r6, r0
 800c89e:	dd76      	ble.n	800c98e <_dtoa_r+0x8de>
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	9306      	str	r3, [sp, #24]
 800c8a4:	6933      	ldr	r3, [r6, #16]
 800c8a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c8aa:	6918      	ldr	r0, [r3, #16]
 800c8ac:	f000 fcd2 	bl	800d254 <__hi0bits>
 800c8b0:	f1c0 0020 	rsb	r0, r0, #32
 800c8b4:	9b04      	ldr	r3, [sp, #16]
 800c8b6:	4418      	add	r0, r3
 800c8b8:	f010 001f 	ands.w	r0, r0, #31
 800c8bc:	f000 8086 	beq.w	800c9cc <_dtoa_r+0x91c>
 800c8c0:	f1c0 0320 	rsb	r3, r0, #32
 800c8c4:	2b04      	cmp	r3, #4
 800c8c6:	dd7f      	ble.n	800c9c8 <_dtoa_r+0x918>
 800c8c8:	f1c0 001c 	rsb	r0, r0, #28
 800c8cc:	9b04      	ldr	r3, [sp, #16]
 800c8ce:	4403      	add	r3, r0
 800c8d0:	4480      	add	r8, r0
 800c8d2:	4405      	add	r5, r0
 800c8d4:	9304      	str	r3, [sp, #16]
 800c8d6:	f1b8 0f00 	cmp.w	r8, #0
 800c8da:	dd05      	ble.n	800c8e8 <_dtoa_r+0x838>
 800c8dc:	4659      	mov	r1, fp
 800c8de:	4642      	mov	r2, r8
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f000 fe1d 	bl	800d520 <__lshift>
 800c8e6:	4683      	mov	fp, r0
 800c8e8:	9b04      	ldr	r3, [sp, #16]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	dd05      	ble.n	800c8fa <_dtoa_r+0x84a>
 800c8ee:	4631      	mov	r1, r6
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	f000 fe14 	bl	800d520 <__lshift>
 800c8f8:	4606      	mov	r6, r0
 800c8fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d069      	beq.n	800c9d4 <_dtoa_r+0x924>
 800c900:	4631      	mov	r1, r6
 800c902:	4658      	mov	r0, fp
 800c904:	f000 fe78 	bl	800d5f8 <__mcmp>
 800c908:	2800      	cmp	r0, #0
 800c90a:	da63      	bge.n	800c9d4 <_dtoa_r+0x924>
 800c90c:	2300      	movs	r3, #0
 800c90e:	4659      	mov	r1, fp
 800c910:	220a      	movs	r2, #10
 800c912:	4620      	mov	r0, r4
 800c914:	f000 fc54 	bl	800d1c0 <__multadd>
 800c918:	9b08      	ldr	r3, [sp, #32]
 800c91a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c91e:	4683      	mov	fp, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	f000 818f 	beq.w	800cc44 <_dtoa_r+0xb94>
 800c926:	4639      	mov	r1, r7
 800c928:	2300      	movs	r3, #0
 800c92a:	220a      	movs	r2, #10
 800c92c:	4620      	mov	r0, r4
 800c92e:	f000 fc47 	bl	800d1c0 <__multadd>
 800c932:	f1b9 0f00 	cmp.w	r9, #0
 800c936:	4607      	mov	r7, r0
 800c938:	f300 808e 	bgt.w	800ca58 <_dtoa_r+0x9a8>
 800c93c:	9b05      	ldr	r3, [sp, #20]
 800c93e:	2b02      	cmp	r3, #2
 800c940:	dc50      	bgt.n	800c9e4 <_dtoa_r+0x934>
 800c942:	e089      	b.n	800ca58 <_dtoa_r+0x9a8>
 800c944:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c946:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c94a:	e75d      	b.n	800c808 <_dtoa_r+0x758>
 800c94c:	9b01      	ldr	r3, [sp, #4]
 800c94e:	1e5e      	subs	r6, r3, #1
 800c950:	9b06      	ldr	r3, [sp, #24]
 800c952:	42b3      	cmp	r3, r6
 800c954:	bfbf      	itttt	lt
 800c956:	9b06      	ldrlt	r3, [sp, #24]
 800c958:	9606      	strlt	r6, [sp, #24]
 800c95a:	1af2      	sublt	r2, r6, r3
 800c95c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c95e:	bfb6      	itet	lt
 800c960:	189b      	addlt	r3, r3, r2
 800c962:	1b9e      	subge	r6, r3, r6
 800c964:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c966:	9b01      	ldr	r3, [sp, #4]
 800c968:	bfb8      	it	lt
 800c96a:	2600      	movlt	r6, #0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	bfb5      	itete	lt
 800c970:	eba8 0503 	sublt.w	r5, r8, r3
 800c974:	9b01      	ldrge	r3, [sp, #4]
 800c976:	2300      	movlt	r3, #0
 800c978:	4645      	movge	r5, r8
 800c97a:	e747      	b.n	800c80c <_dtoa_r+0x75c>
 800c97c:	9e06      	ldr	r6, [sp, #24]
 800c97e:	9f08      	ldr	r7, [sp, #32]
 800c980:	4645      	mov	r5, r8
 800c982:	e74c      	b.n	800c81e <_dtoa_r+0x76e>
 800c984:	9a06      	ldr	r2, [sp, #24]
 800c986:	e775      	b.n	800c874 <_dtoa_r+0x7c4>
 800c988:	9b05      	ldr	r3, [sp, #20]
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	dc18      	bgt.n	800c9c0 <_dtoa_r+0x910>
 800c98e:	9b02      	ldr	r3, [sp, #8]
 800c990:	b9b3      	cbnz	r3, 800c9c0 <_dtoa_r+0x910>
 800c992:	9b03      	ldr	r3, [sp, #12]
 800c994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c998:	b9a3      	cbnz	r3, 800c9c4 <_dtoa_r+0x914>
 800c99a:	9b03      	ldr	r3, [sp, #12]
 800c99c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9a0:	0d1b      	lsrs	r3, r3, #20
 800c9a2:	051b      	lsls	r3, r3, #20
 800c9a4:	b12b      	cbz	r3, 800c9b2 <_dtoa_r+0x902>
 800c9a6:	9b04      	ldr	r3, [sp, #16]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	9304      	str	r3, [sp, #16]
 800c9ac:	f108 0801 	add.w	r8, r8, #1
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	9306      	str	r3, [sp, #24]
 800c9b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f47f af74 	bne.w	800c8a4 <_dtoa_r+0x7f4>
 800c9bc:	2001      	movs	r0, #1
 800c9be:	e779      	b.n	800c8b4 <_dtoa_r+0x804>
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	e7f6      	b.n	800c9b2 <_dtoa_r+0x902>
 800c9c4:	9b02      	ldr	r3, [sp, #8]
 800c9c6:	e7f4      	b.n	800c9b2 <_dtoa_r+0x902>
 800c9c8:	d085      	beq.n	800c8d6 <_dtoa_r+0x826>
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	301c      	adds	r0, #28
 800c9ce:	e77d      	b.n	800c8cc <_dtoa_r+0x81c>
 800c9d0:	40240000 	.word	0x40240000
 800c9d4:	9b01      	ldr	r3, [sp, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	dc38      	bgt.n	800ca4c <_dtoa_r+0x99c>
 800c9da:	9b05      	ldr	r3, [sp, #20]
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	dd35      	ble.n	800ca4c <_dtoa_r+0x99c>
 800c9e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c9e4:	f1b9 0f00 	cmp.w	r9, #0
 800c9e8:	d10d      	bne.n	800ca06 <_dtoa_r+0x956>
 800c9ea:	4631      	mov	r1, r6
 800c9ec:	464b      	mov	r3, r9
 800c9ee:	2205      	movs	r2, #5
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	f000 fbe5 	bl	800d1c0 <__multadd>
 800c9f6:	4601      	mov	r1, r0
 800c9f8:	4606      	mov	r6, r0
 800c9fa:	4658      	mov	r0, fp
 800c9fc:	f000 fdfc 	bl	800d5f8 <__mcmp>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	f73f adbd 	bgt.w	800c580 <_dtoa_r+0x4d0>
 800ca06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca08:	9d00      	ldr	r5, [sp, #0]
 800ca0a:	ea6f 0a03 	mvn.w	sl, r3
 800ca0e:	f04f 0800 	mov.w	r8, #0
 800ca12:	4631      	mov	r1, r6
 800ca14:	4620      	mov	r0, r4
 800ca16:	f000 fbb1 	bl	800d17c <_Bfree>
 800ca1a:	2f00      	cmp	r7, #0
 800ca1c:	f43f aeb4 	beq.w	800c788 <_dtoa_r+0x6d8>
 800ca20:	f1b8 0f00 	cmp.w	r8, #0
 800ca24:	d005      	beq.n	800ca32 <_dtoa_r+0x982>
 800ca26:	45b8      	cmp	r8, r7
 800ca28:	d003      	beq.n	800ca32 <_dtoa_r+0x982>
 800ca2a:	4641      	mov	r1, r8
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f000 fba5 	bl	800d17c <_Bfree>
 800ca32:	4639      	mov	r1, r7
 800ca34:	4620      	mov	r0, r4
 800ca36:	f000 fba1 	bl	800d17c <_Bfree>
 800ca3a:	e6a5      	b.n	800c788 <_dtoa_r+0x6d8>
 800ca3c:	2600      	movs	r6, #0
 800ca3e:	4637      	mov	r7, r6
 800ca40:	e7e1      	b.n	800ca06 <_dtoa_r+0x956>
 800ca42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ca44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ca48:	4637      	mov	r7, r6
 800ca4a:	e599      	b.n	800c580 <_dtoa_r+0x4d0>
 800ca4c:	9b08      	ldr	r3, [sp, #32]
 800ca4e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f000 80fd 	beq.w	800cc52 <_dtoa_r+0xba2>
 800ca58:	2d00      	cmp	r5, #0
 800ca5a:	dd05      	ble.n	800ca68 <_dtoa_r+0x9b8>
 800ca5c:	4639      	mov	r1, r7
 800ca5e:	462a      	mov	r2, r5
 800ca60:	4620      	mov	r0, r4
 800ca62:	f000 fd5d 	bl	800d520 <__lshift>
 800ca66:	4607      	mov	r7, r0
 800ca68:	9b06      	ldr	r3, [sp, #24]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d05c      	beq.n	800cb28 <_dtoa_r+0xa78>
 800ca6e:	6879      	ldr	r1, [r7, #4]
 800ca70:	4620      	mov	r0, r4
 800ca72:	f000 fb43 	bl	800d0fc <_Balloc>
 800ca76:	4605      	mov	r5, r0
 800ca78:	b928      	cbnz	r0, 800ca86 <_dtoa_r+0x9d6>
 800ca7a:	4b80      	ldr	r3, [pc, #512]	; (800cc7c <_dtoa_r+0xbcc>)
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ca82:	f7ff bb2e 	b.w	800c0e2 <_dtoa_r+0x32>
 800ca86:	693a      	ldr	r2, [r7, #16]
 800ca88:	3202      	adds	r2, #2
 800ca8a:	0092      	lsls	r2, r2, #2
 800ca8c:	f107 010c 	add.w	r1, r7, #12
 800ca90:	300c      	adds	r0, #12
 800ca92:	f000 fb25 	bl	800d0e0 <memcpy>
 800ca96:	2201      	movs	r2, #1
 800ca98:	4629      	mov	r1, r5
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f000 fd40 	bl	800d520 <__lshift>
 800caa0:	9b00      	ldr	r3, [sp, #0]
 800caa2:	3301      	adds	r3, #1
 800caa4:	9301      	str	r3, [sp, #4]
 800caa6:	9b00      	ldr	r3, [sp, #0]
 800caa8:	444b      	add	r3, r9
 800caaa:	9307      	str	r3, [sp, #28]
 800caac:	9b02      	ldr	r3, [sp, #8]
 800caae:	f003 0301 	and.w	r3, r3, #1
 800cab2:	46b8      	mov	r8, r7
 800cab4:	9306      	str	r3, [sp, #24]
 800cab6:	4607      	mov	r7, r0
 800cab8:	9b01      	ldr	r3, [sp, #4]
 800caba:	4631      	mov	r1, r6
 800cabc:	3b01      	subs	r3, #1
 800cabe:	4658      	mov	r0, fp
 800cac0:	9302      	str	r3, [sp, #8]
 800cac2:	f7ff fa67 	bl	800bf94 <quorem>
 800cac6:	4603      	mov	r3, r0
 800cac8:	3330      	adds	r3, #48	; 0x30
 800caca:	9004      	str	r0, [sp, #16]
 800cacc:	4641      	mov	r1, r8
 800cace:	4658      	mov	r0, fp
 800cad0:	9308      	str	r3, [sp, #32]
 800cad2:	f000 fd91 	bl	800d5f8 <__mcmp>
 800cad6:	463a      	mov	r2, r7
 800cad8:	4681      	mov	r9, r0
 800cada:	4631      	mov	r1, r6
 800cadc:	4620      	mov	r0, r4
 800cade:	f000 fda7 	bl	800d630 <__mdiff>
 800cae2:	68c2      	ldr	r2, [r0, #12]
 800cae4:	9b08      	ldr	r3, [sp, #32]
 800cae6:	4605      	mov	r5, r0
 800cae8:	bb02      	cbnz	r2, 800cb2c <_dtoa_r+0xa7c>
 800caea:	4601      	mov	r1, r0
 800caec:	4658      	mov	r0, fp
 800caee:	f000 fd83 	bl	800d5f8 <__mcmp>
 800caf2:	9b08      	ldr	r3, [sp, #32]
 800caf4:	4602      	mov	r2, r0
 800caf6:	4629      	mov	r1, r5
 800caf8:	4620      	mov	r0, r4
 800cafa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800cafe:	f000 fb3d 	bl	800d17c <_Bfree>
 800cb02:	9b05      	ldr	r3, [sp, #20]
 800cb04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb06:	9d01      	ldr	r5, [sp, #4]
 800cb08:	ea43 0102 	orr.w	r1, r3, r2
 800cb0c:	9b06      	ldr	r3, [sp, #24]
 800cb0e:	430b      	orrs	r3, r1
 800cb10:	9b08      	ldr	r3, [sp, #32]
 800cb12:	d10d      	bne.n	800cb30 <_dtoa_r+0xa80>
 800cb14:	2b39      	cmp	r3, #57	; 0x39
 800cb16:	d029      	beq.n	800cb6c <_dtoa_r+0xabc>
 800cb18:	f1b9 0f00 	cmp.w	r9, #0
 800cb1c:	dd01      	ble.n	800cb22 <_dtoa_r+0xa72>
 800cb1e:	9b04      	ldr	r3, [sp, #16]
 800cb20:	3331      	adds	r3, #49	; 0x31
 800cb22:	9a02      	ldr	r2, [sp, #8]
 800cb24:	7013      	strb	r3, [r2, #0]
 800cb26:	e774      	b.n	800ca12 <_dtoa_r+0x962>
 800cb28:	4638      	mov	r0, r7
 800cb2a:	e7b9      	b.n	800caa0 <_dtoa_r+0x9f0>
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	e7e2      	b.n	800caf6 <_dtoa_r+0xa46>
 800cb30:	f1b9 0f00 	cmp.w	r9, #0
 800cb34:	db06      	blt.n	800cb44 <_dtoa_r+0xa94>
 800cb36:	9905      	ldr	r1, [sp, #20]
 800cb38:	ea41 0909 	orr.w	r9, r1, r9
 800cb3c:	9906      	ldr	r1, [sp, #24]
 800cb3e:	ea59 0101 	orrs.w	r1, r9, r1
 800cb42:	d120      	bne.n	800cb86 <_dtoa_r+0xad6>
 800cb44:	2a00      	cmp	r2, #0
 800cb46:	ddec      	ble.n	800cb22 <_dtoa_r+0xa72>
 800cb48:	4659      	mov	r1, fp
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	9301      	str	r3, [sp, #4]
 800cb50:	f000 fce6 	bl	800d520 <__lshift>
 800cb54:	4631      	mov	r1, r6
 800cb56:	4683      	mov	fp, r0
 800cb58:	f000 fd4e 	bl	800d5f8 <__mcmp>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	9b01      	ldr	r3, [sp, #4]
 800cb60:	dc02      	bgt.n	800cb68 <_dtoa_r+0xab8>
 800cb62:	d1de      	bne.n	800cb22 <_dtoa_r+0xa72>
 800cb64:	07da      	lsls	r2, r3, #31
 800cb66:	d5dc      	bpl.n	800cb22 <_dtoa_r+0xa72>
 800cb68:	2b39      	cmp	r3, #57	; 0x39
 800cb6a:	d1d8      	bne.n	800cb1e <_dtoa_r+0xa6e>
 800cb6c:	9a02      	ldr	r2, [sp, #8]
 800cb6e:	2339      	movs	r3, #57	; 0x39
 800cb70:	7013      	strb	r3, [r2, #0]
 800cb72:	462b      	mov	r3, r5
 800cb74:	461d      	mov	r5, r3
 800cb76:	3b01      	subs	r3, #1
 800cb78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cb7c:	2a39      	cmp	r2, #57	; 0x39
 800cb7e:	d050      	beq.n	800cc22 <_dtoa_r+0xb72>
 800cb80:	3201      	adds	r2, #1
 800cb82:	701a      	strb	r2, [r3, #0]
 800cb84:	e745      	b.n	800ca12 <_dtoa_r+0x962>
 800cb86:	2a00      	cmp	r2, #0
 800cb88:	dd03      	ble.n	800cb92 <_dtoa_r+0xae2>
 800cb8a:	2b39      	cmp	r3, #57	; 0x39
 800cb8c:	d0ee      	beq.n	800cb6c <_dtoa_r+0xabc>
 800cb8e:	3301      	adds	r3, #1
 800cb90:	e7c7      	b.n	800cb22 <_dtoa_r+0xa72>
 800cb92:	9a01      	ldr	r2, [sp, #4]
 800cb94:	9907      	ldr	r1, [sp, #28]
 800cb96:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cb9a:	428a      	cmp	r2, r1
 800cb9c:	d02a      	beq.n	800cbf4 <_dtoa_r+0xb44>
 800cb9e:	4659      	mov	r1, fp
 800cba0:	2300      	movs	r3, #0
 800cba2:	220a      	movs	r2, #10
 800cba4:	4620      	mov	r0, r4
 800cba6:	f000 fb0b 	bl	800d1c0 <__multadd>
 800cbaa:	45b8      	cmp	r8, r7
 800cbac:	4683      	mov	fp, r0
 800cbae:	f04f 0300 	mov.w	r3, #0
 800cbb2:	f04f 020a 	mov.w	r2, #10
 800cbb6:	4641      	mov	r1, r8
 800cbb8:	4620      	mov	r0, r4
 800cbba:	d107      	bne.n	800cbcc <_dtoa_r+0xb1c>
 800cbbc:	f000 fb00 	bl	800d1c0 <__multadd>
 800cbc0:	4680      	mov	r8, r0
 800cbc2:	4607      	mov	r7, r0
 800cbc4:	9b01      	ldr	r3, [sp, #4]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	9301      	str	r3, [sp, #4]
 800cbca:	e775      	b.n	800cab8 <_dtoa_r+0xa08>
 800cbcc:	f000 faf8 	bl	800d1c0 <__multadd>
 800cbd0:	4639      	mov	r1, r7
 800cbd2:	4680      	mov	r8, r0
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	220a      	movs	r2, #10
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f000 faf1 	bl	800d1c0 <__multadd>
 800cbde:	4607      	mov	r7, r0
 800cbe0:	e7f0      	b.n	800cbc4 <_dtoa_r+0xb14>
 800cbe2:	f1b9 0f00 	cmp.w	r9, #0
 800cbe6:	9a00      	ldr	r2, [sp, #0]
 800cbe8:	bfcc      	ite	gt
 800cbea:	464d      	movgt	r5, r9
 800cbec:	2501      	movle	r5, #1
 800cbee:	4415      	add	r5, r2
 800cbf0:	f04f 0800 	mov.w	r8, #0
 800cbf4:	4659      	mov	r1, fp
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	9301      	str	r3, [sp, #4]
 800cbfc:	f000 fc90 	bl	800d520 <__lshift>
 800cc00:	4631      	mov	r1, r6
 800cc02:	4683      	mov	fp, r0
 800cc04:	f000 fcf8 	bl	800d5f8 <__mcmp>
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	dcb2      	bgt.n	800cb72 <_dtoa_r+0xac2>
 800cc0c:	d102      	bne.n	800cc14 <_dtoa_r+0xb64>
 800cc0e:	9b01      	ldr	r3, [sp, #4]
 800cc10:	07db      	lsls	r3, r3, #31
 800cc12:	d4ae      	bmi.n	800cb72 <_dtoa_r+0xac2>
 800cc14:	462b      	mov	r3, r5
 800cc16:	461d      	mov	r5, r3
 800cc18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc1c:	2a30      	cmp	r2, #48	; 0x30
 800cc1e:	d0fa      	beq.n	800cc16 <_dtoa_r+0xb66>
 800cc20:	e6f7      	b.n	800ca12 <_dtoa_r+0x962>
 800cc22:	9a00      	ldr	r2, [sp, #0]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d1a5      	bne.n	800cb74 <_dtoa_r+0xac4>
 800cc28:	f10a 0a01 	add.w	sl, sl, #1
 800cc2c:	2331      	movs	r3, #49	; 0x31
 800cc2e:	e779      	b.n	800cb24 <_dtoa_r+0xa74>
 800cc30:	4b13      	ldr	r3, [pc, #76]	; (800cc80 <_dtoa_r+0xbd0>)
 800cc32:	f7ff baaf 	b.w	800c194 <_dtoa_r+0xe4>
 800cc36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	f47f aa86 	bne.w	800c14a <_dtoa_r+0x9a>
 800cc3e:	4b11      	ldr	r3, [pc, #68]	; (800cc84 <_dtoa_r+0xbd4>)
 800cc40:	f7ff baa8 	b.w	800c194 <_dtoa_r+0xe4>
 800cc44:	f1b9 0f00 	cmp.w	r9, #0
 800cc48:	dc03      	bgt.n	800cc52 <_dtoa_r+0xba2>
 800cc4a:	9b05      	ldr	r3, [sp, #20]
 800cc4c:	2b02      	cmp	r3, #2
 800cc4e:	f73f aec9 	bgt.w	800c9e4 <_dtoa_r+0x934>
 800cc52:	9d00      	ldr	r5, [sp, #0]
 800cc54:	4631      	mov	r1, r6
 800cc56:	4658      	mov	r0, fp
 800cc58:	f7ff f99c 	bl	800bf94 <quorem>
 800cc5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cc60:	f805 3b01 	strb.w	r3, [r5], #1
 800cc64:	9a00      	ldr	r2, [sp, #0]
 800cc66:	1aaa      	subs	r2, r5, r2
 800cc68:	4591      	cmp	r9, r2
 800cc6a:	ddba      	ble.n	800cbe2 <_dtoa_r+0xb32>
 800cc6c:	4659      	mov	r1, fp
 800cc6e:	2300      	movs	r3, #0
 800cc70:	220a      	movs	r2, #10
 800cc72:	4620      	mov	r0, r4
 800cc74:	f000 faa4 	bl	800d1c0 <__multadd>
 800cc78:	4683      	mov	fp, r0
 800cc7a:	e7eb      	b.n	800cc54 <_dtoa_r+0xba4>
 800cc7c:	0801c687 	.word	0x0801c687
 800cc80:	0801c5e0 	.word	0x0801c5e0
 800cc84:	0801c604 	.word	0x0801c604

0800cc88 <__sflush_r>:
 800cc88:	898a      	ldrh	r2, [r1, #12]
 800cc8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc8e:	4605      	mov	r5, r0
 800cc90:	0710      	lsls	r0, r2, #28
 800cc92:	460c      	mov	r4, r1
 800cc94:	d458      	bmi.n	800cd48 <__sflush_r+0xc0>
 800cc96:	684b      	ldr	r3, [r1, #4]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	dc05      	bgt.n	800cca8 <__sflush_r+0x20>
 800cc9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	dc02      	bgt.n	800cca8 <__sflush_r+0x20>
 800cca2:	2000      	movs	r0, #0
 800cca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccaa:	2e00      	cmp	r6, #0
 800ccac:	d0f9      	beq.n	800cca2 <__sflush_r+0x1a>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ccb4:	682f      	ldr	r7, [r5, #0]
 800ccb6:	602b      	str	r3, [r5, #0]
 800ccb8:	d032      	beq.n	800cd20 <__sflush_r+0x98>
 800ccba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccbc:	89a3      	ldrh	r3, [r4, #12]
 800ccbe:	075a      	lsls	r2, r3, #29
 800ccc0:	d505      	bpl.n	800ccce <__sflush_r+0x46>
 800ccc2:	6863      	ldr	r3, [r4, #4]
 800ccc4:	1ac0      	subs	r0, r0, r3
 800ccc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccc8:	b10b      	cbz	r3, 800ccce <__sflush_r+0x46>
 800ccca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cccc:	1ac0      	subs	r0, r0, r3
 800ccce:	2300      	movs	r3, #0
 800ccd0:	4602      	mov	r2, r0
 800ccd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccd4:	6a21      	ldr	r1, [r4, #32]
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	47b0      	blx	r6
 800ccda:	1c43      	adds	r3, r0, #1
 800ccdc:	89a3      	ldrh	r3, [r4, #12]
 800ccde:	d106      	bne.n	800ccee <__sflush_r+0x66>
 800cce0:	6829      	ldr	r1, [r5, #0]
 800cce2:	291d      	cmp	r1, #29
 800cce4:	d82c      	bhi.n	800cd40 <__sflush_r+0xb8>
 800cce6:	4a2a      	ldr	r2, [pc, #168]	; (800cd90 <__sflush_r+0x108>)
 800cce8:	40ca      	lsrs	r2, r1
 800ccea:	07d6      	lsls	r6, r2, #31
 800ccec:	d528      	bpl.n	800cd40 <__sflush_r+0xb8>
 800ccee:	2200      	movs	r2, #0
 800ccf0:	6062      	str	r2, [r4, #4]
 800ccf2:	04d9      	lsls	r1, r3, #19
 800ccf4:	6922      	ldr	r2, [r4, #16]
 800ccf6:	6022      	str	r2, [r4, #0]
 800ccf8:	d504      	bpl.n	800cd04 <__sflush_r+0x7c>
 800ccfa:	1c42      	adds	r2, r0, #1
 800ccfc:	d101      	bne.n	800cd02 <__sflush_r+0x7a>
 800ccfe:	682b      	ldr	r3, [r5, #0]
 800cd00:	b903      	cbnz	r3, 800cd04 <__sflush_r+0x7c>
 800cd02:	6560      	str	r0, [r4, #84]	; 0x54
 800cd04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd06:	602f      	str	r7, [r5, #0]
 800cd08:	2900      	cmp	r1, #0
 800cd0a:	d0ca      	beq.n	800cca2 <__sflush_r+0x1a>
 800cd0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd10:	4299      	cmp	r1, r3
 800cd12:	d002      	beq.n	800cd1a <__sflush_r+0x92>
 800cd14:	4628      	mov	r0, r5
 800cd16:	f000 fd7f 	bl	800d818 <_free_r>
 800cd1a:	2000      	movs	r0, #0
 800cd1c:	6360      	str	r0, [r4, #52]	; 0x34
 800cd1e:	e7c1      	b.n	800cca4 <__sflush_r+0x1c>
 800cd20:	6a21      	ldr	r1, [r4, #32]
 800cd22:	2301      	movs	r3, #1
 800cd24:	4628      	mov	r0, r5
 800cd26:	47b0      	blx	r6
 800cd28:	1c41      	adds	r1, r0, #1
 800cd2a:	d1c7      	bne.n	800ccbc <__sflush_r+0x34>
 800cd2c:	682b      	ldr	r3, [r5, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d0c4      	beq.n	800ccbc <__sflush_r+0x34>
 800cd32:	2b1d      	cmp	r3, #29
 800cd34:	d001      	beq.n	800cd3a <__sflush_r+0xb2>
 800cd36:	2b16      	cmp	r3, #22
 800cd38:	d101      	bne.n	800cd3e <__sflush_r+0xb6>
 800cd3a:	602f      	str	r7, [r5, #0]
 800cd3c:	e7b1      	b.n	800cca2 <__sflush_r+0x1a>
 800cd3e:	89a3      	ldrh	r3, [r4, #12]
 800cd40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd44:	81a3      	strh	r3, [r4, #12]
 800cd46:	e7ad      	b.n	800cca4 <__sflush_r+0x1c>
 800cd48:	690f      	ldr	r7, [r1, #16]
 800cd4a:	2f00      	cmp	r7, #0
 800cd4c:	d0a9      	beq.n	800cca2 <__sflush_r+0x1a>
 800cd4e:	0793      	lsls	r3, r2, #30
 800cd50:	680e      	ldr	r6, [r1, #0]
 800cd52:	bf08      	it	eq
 800cd54:	694b      	ldreq	r3, [r1, #20]
 800cd56:	600f      	str	r7, [r1, #0]
 800cd58:	bf18      	it	ne
 800cd5a:	2300      	movne	r3, #0
 800cd5c:	eba6 0807 	sub.w	r8, r6, r7
 800cd60:	608b      	str	r3, [r1, #8]
 800cd62:	f1b8 0f00 	cmp.w	r8, #0
 800cd66:	dd9c      	ble.n	800cca2 <__sflush_r+0x1a>
 800cd68:	6a21      	ldr	r1, [r4, #32]
 800cd6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd6c:	4643      	mov	r3, r8
 800cd6e:	463a      	mov	r2, r7
 800cd70:	4628      	mov	r0, r5
 800cd72:	47b0      	blx	r6
 800cd74:	2800      	cmp	r0, #0
 800cd76:	dc06      	bgt.n	800cd86 <__sflush_r+0xfe>
 800cd78:	89a3      	ldrh	r3, [r4, #12]
 800cd7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd7e:	81a3      	strh	r3, [r4, #12]
 800cd80:	f04f 30ff 	mov.w	r0, #4294967295
 800cd84:	e78e      	b.n	800cca4 <__sflush_r+0x1c>
 800cd86:	4407      	add	r7, r0
 800cd88:	eba8 0800 	sub.w	r8, r8, r0
 800cd8c:	e7e9      	b.n	800cd62 <__sflush_r+0xda>
 800cd8e:	bf00      	nop
 800cd90:	20400001 	.word	0x20400001

0800cd94 <_fflush_r>:
 800cd94:	b538      	push	{r3, r4, r5, lr}
 800cd96:	690b      	ldr	r3, [r1, #16]
 800cd98:	4605      	mov	r5, r0
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	b913      	cbnz	r3, 800cda4 <_fflush_r+0x10>
 800cd9e:	2500      	movs	r5, #0
 800cda0:	4628      	mov	r0, r5
 800cda2:	bd38      	pop	{r3, r4, r5, pc}
 800cda4:	b118      	cbz	r0, 800cdae <_fflush_r+0x1a>
 800cda6:	6983      	ldr	r3, [r0, #24]
 800cda8:	b90b      	cbnz	r3, 800cdae <_fflush_r+0x1a>
 800cdaa:	f000 f887 	bl	800cebc <__sinit>
 800cdae:	4b14      	ldr	r3, [pc, #80]	; (800ce00 <_fflush_r+0x6c>)
 800cdb0:	429c      	cmp	r4, r3
 800cdb2:	d11b      	bne.n	800cdec <_fflush_r+0x58>
 800cdb4:	686c      	ldr	r4, [r5, #4]
 800cdb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d0ef      	beq.n	800cd9e <_fflush_r+0xa>
 800cdbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cdc0:	07d0      	lsls	r0, r2, #31
 800cdc2:	d404      	bmi.n	800cdce <_fflush_r+0x3a>
 800cdc4:	0599      	lsls	r1, r3, #22
 800cdc6:	d402      	bmi.n	800cdce <_fflush_r+0x3a>
 800cdc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdca:	f000 f91a 	bl	800d002 <__retarget_lock_acquire_recursive>
 800cdce:	4628      	mov	r0, r5
 800cdd0:	4621      	mov	r1, r4
 800cdd2:	f7ff ff59 	bl	800cc88 <__sflush_r>
 800cdd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdd8:	07da      	lsls	r2, r3, #31
 800cdda:	4605      	mov	r5, r0
 800cddc:	d4e0      	bmi.n	800cda0 <_fflush_r+0xc>
 800cdde:	89a3      	ldrh	r3, [r4, #12]
 800cde0:	059b      	lsls	r3, r3, #22
 800cde2:	d4dd      	bmi.n	800cda0 <_fflush_r+0xc>
 800cde4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cde6:	f000 f90d 	bl	800d004 <__retarget_lock_release_recursive>
 800cdea:	e7d9      	b.n	800cda0 <_fflush_r+0xc>
 800cdec:	4b05      	ldr	r3, [pc, #20]	; (800ce04 <_fflush_r+0x70>)
 800cdee:	429c      	cmp	r4, r3
 800cdf0:	d101      	bne.n	800cdf6 <_fflush_r+0x62>
 800cdf2:	68ac      	ldr	r4, [r5, #8]
 800cdf4:	e7df      	b.n	800cdb6 <_fflush_r+0x22>
 800cdf6:	4b04      	ldr	r3, [pc, #16]	; (800ce08 <_fflush_r+0x74>)
 800cdf8:	429c      	cmp	r4, r3
 800cdfa:	bf08      	it	eq
 800cdfc:	68ec      	ldreq	r4, [r5, #12]
 800cdfe:	e7da      	b.n	800cdb6 <_fflush_r+0x22>
 800ce00:	0801c6b8 	.word	0x0801c6b8
 800ce04:	0801c6d8 	.word	0x0801c6d8
 800ce08:	0801c698 	.word	0x0801c698

0800ce0c <std>:
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	b510      	push	{r4, lr}
 800ce10:	4604      	mov	r4, r0
 800ce12:	e9c0 3300 	strd	r3, r3, [r0]
 800ce16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce1a:	6083      	str	r3, [r0, #8]
 800ce1c:	8181      	strh	r1, [r0, #12]
 800ce1e:	6643      	str	r3, [r0, #100]	; 0x64
 800ce20:	81c2      	strh	r2, [r0, #14]
 800ce22:	6183      	str	r3, [r0, #24]
 800ce24:	4619      	mov	r1, r3
 800ce26:	2208      	movs	r2, #8
 800ce28:	305c      	adds	r0, #92	; 0x5c
 800ce2a:	f7fe fad3 	bl	800b3d4 <memset>
 800ce2e:	4b05      	ldr	r3, [pc, #20]	; (800ce44 <std+0x38>)
 800ce30:	6263      	str	r3, [r4, #36]	; 0x24
 800ce32:	4b05      	ldr	r3, [pc, #20]	; (800ce48 <std+0x3c>)
 800ce34:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce36:	4b05      	ldr	r3, [pc, #20]	; (800ce4c <std+0x40>)
 800ce38:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce3a:	4b05      	ldr	r3, [pc, #20]	; (800ce50 <std+0x44>)
 800ce3c:	6224      	str	r4, [r4, #32]
 800ce3e:	6323      	str	r3, [r4, #48]	; 0x30
 800ce40:	bd10      	pop	{r4, pc}
 800ce42:	bf00      	nop
 800ce44:	0800def9 	.word	0x0800def9
 800ce48:	0800df1b 	.word	0x0800df1b
 800ce4c:	0800df53 	.word	0x0800df53
 800ce50:	0800df77 	.word	0x0800df77

0800ce54 <_cleanup_r>:
 800ce54:	4901      	ldr	r1, [pc, #4]	; (800ce5c <_cleanup_r+0x8>)
 800ce56:	f000 b8af 	b.w	800cfb8 <_fwalk_reent>
 800ce5a:	bf00      	nop
 800ce5c:	0800cd95 	.word	0x0800cd95

0800ce60 <__sfmoreglue>:
 800ce60:	b570      	push	{r4, r5, r6, lr}
 800ce62:	1e4a      	subs	r2, r1, #1
 800ce64:	2568      	movs	r5, #104	; 0x68
 800ce66:	4355      	muls	r5, r2
 800ce68:	460e      	mov	r6, r1
 800ce6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce6e:	f000 fd23 	bl	800d8b8 <_malloc_r>
 800ce72:	4604      	mov	r4, r0
 800ce74:	b140      	cbz	r0, 800ce88 <__sfmoreglue+0x28>
 800ce76:	2100      	movs	r1, #0
 800ce78:	e9c0 1600 	strd	r1, r6, [r0]
 800ce7c:	300c      	adds	r0, #12
 800ce7e:	60a0      	str	r0, [r4, #8]
 800ce80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce84:	f7fe faa6 	bl	800b3d4 <memset>
 800ce88:	4620      	mov	r0, r4
 800ce8a:	bd70      	pop	{r4, r5, r6, pc}

0800ce8c <__sfp_lock_acquire>:
 800ce8c:	4801      	ldr	r0, [pc, #4]	; (800ce94 <__sfp_lock_acquire+0x8>)
 800ce8e:	f000 b8b8 	b.w	800d002 <__retarget_lock_acquire_recursive>
 800ce92:	bf00      	nop
 800ce94:	200005ec 	.word	0x200005ec

0800ce98 <__sfp_lock_release>:
 800ce98:	4801      	ldr	r0, [pc, #4]	; (800cea0 <__sfp_lock_release+0x8>)
 800ce9a:	f000 b8b3 	b.w	800d004 <__retarget_lock_release_recursive>
 800ce9e:	bf00      	nop
 800cea0:	200005ec 	.word	0x200005ec

0800cea4 <__sinit_lock_acquire>:
 800cea4:	4801      	ldr	r0, [pc, #4]	; (800ceac <__sinit_lock_acquire+0x8>)
 800cea6:	f000 b8ac 	b.w	800d002 <__retarget_lock_acquire_recursive>
 800ceaa:	bf00      	nop
 800ceac:	200005e7 	.word	0x200005e7

0800ceb0 <__sinit_lock_release>:
 800ceb0:	4801      	ldr	r0, [pc, #4]	; (800ceb8 <__sinit_lock_release+0x8>)
 800ceb2:	f000 b8a7 	b.w	800d004 <__retarget_lock_release_recursive>
 800ceb6:	bf00      	nop
 800ceb8:	200005e7 	.word	0x200005e7

0800cebc <__sinit>:
 800cebc:	b510      	push	{r4, lr}
 800cebe:	4604      	mov	r4, r0
 800cec0:	f7ff fff0 	bl	800cea4 <__sinit_lock_acquire>
 800cec4:	69a3      	ldr	r3, [r4, #24]
 800cec6:	b11b      	cbz	r3, 800ced0 <__sinit+0x14>
 800cec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cecc:	f7ff bff0 	b.w	800ceb0 <__sinit_lock_release>
 800ced0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ced4:	6523      	str	r3, [r4, #80]	; 0x50
 800ced6:	4b13      	ldr	r3, [pc, #76]	; (800cf24 <__sinit+0x68>)
 800ced8:	4a13      	ldr	r2, [pc, #76]	; (800cf28 <__sinit+0x6c>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	62a2      	str	r2, [r4, #40]	; 0x28
 800cede:	42a3      	cmp	r3, r4
 800cee0:	bf04      	itt	eq
 800cee2:	2301      	moveq	r3, #1
 800cee4:	61a3      	streq	r3, [r4, #24]
 800cee6:	4620      	mov	r0, r4
 800cee8:	f000 f820 	bl	800cf2c <__sfp>
 800ceec:	6060      	str	r0, [r4, #4]
 800ceee:	4620      	mov	r0, r4
 800cef0:	f000 f81c 	bl	800cf2c <__sfp>
 800cef4:	60a0      	str	r0, [r4, #8]
 800cef6:	4620      	mov	r0, r4
 800cef8:	f000 f818 	bl	800cf2c <__sfp>
 800cefc:	2200      	movs	r2, #0
 800cefe:	60e0      	str	r0, [r4, #12]
 800cf00:	2104      	movs	r1, #4
 800cf02:	6860      	ldr	r0, [r4, #4]
 800cf04:	f7ff ff82 	bl	800ce0c <std>
 800cf08:	68a0      	ldr	r0, [r4, #8]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	2109      	movs	r1, #9
 800cf0e:	f7ff ff7d 	bl	800ce0c <std>
 800cf12:	68e0      	ldr	r0, [r4, #12]
 800cf14:	2202      	movs	r2, #2
 800cf16:	2112      	movs	r1, #18
 800cf18:	f7ff ff78 	bl	800ce0c <std>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	61a3      	str	r3, [r4, #24]
 800cf20:	e7d2      	b.n	800cec8 <__sinit+0xc>
 800cf22:	bf00      	nop
 800cf24:	0801c5cc 	.word	0x0801c5cc
 800cf28:	0800ce55 	.word	0x0800ce55

0800cf2c <__sfp>:
 800cf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2e:	4607      	mov	r7, r0
 800cf30:	f7ff ffac 	bl	800ce8c <__sfp_lock_acquire>
 800cf34:	4b1e      	ldr	r3, [pc, #120]	; (800cfb0 <__sfp+0x84>)
 800cf36:	681e      	ldr	r6, [r3, #0]
 800cf38:	69b3      	ldr	r3, [r6, #24]
 800cf3a:	b913      	cbnz	r3, 800cf42 <__sfp+0x16>
 800cf3c:	4630      	mov	r0, r6
 800cf3e:	f7ff ffbd 	bl	800cebc <__sinit>
 800cf42:	3648      	adds	r6, #72	; 0x48
 800cf44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	d503      	bpl.n	800cf54 <__sfp+0x28>
 800cf4c:	6833      	ldr	r3, [r6, #0]
 800cf4e:	b30b      	cbz	r3, 800cf94 <__sfp+0x68>
 800cf50:	6836      	ldr	r6, [r6, #0]
 800cf52:	e7f7      	b.n	800cf44 <__sfp+0x18>
 800cf54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf58:	b9d5      	cbnz	r5, 800cf90 <__sfp+0x64>
 800cf5a:	4b16      	ldr	r3, [pc, #88]	; (800cfb4 <__sfp+0x88>)
 800cf5c:	60e3      	str	r3, [r4, #12]
 800cf5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf62:	6665      	str	r5, [r4, #100]	; 0x64
 800cf64:	f000 f84c 	bl	800d000 <__retarget_lock_init_recursive>
 800cf68:	f7ff ff96 	bl	800ce98 <__sfp_lock_release>
 800cf6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf74:	6025      	str	r5, [r4, #0]
 800cf76:	61a5      	str	r5, [r4, #24]
 800cf78:	2208      	movs	r2, #8
 800cf7a:	4629      	mov	r1, r5
 800cf7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf80:	f7fe fa28 	bl	800b3d4 <memset>
 800cf84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf90:	3468      	adds	r4, #104	; 0x68
 800cf92:	e7d9      	b.n	800cf48 <__sfp+0x1c>
 800cf94:	2104      	movs	r1, #4
 800cf96:	4638      	mov	r0, r7
 800cf98:	f7ff ff62 	bl	800ce60 <__sfmoreglue>
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	6030      	str	r0, [r6, #0]
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d1d5      	bne.n	800cf50 <__sfp+0x24>
 800cfa4:	f7ff ff78 	bl	800ce98 <__sfp_lock_release>
 800cfa8:	230c      	movs	r3, #12
 800cfaa:	603b      	str	r3, [r7, #0]
 800cfac:	e7ee      	b.n	800cf8c <__sfp+0x60>
 800cfae:	bf00      	nop
 800cfb0:	0801c5cc 	.word	0x0801c5cc
 800cfb4:	ffff0001 	.word	0xffff0001

0800cfb8 <_fwalk_reent>:
 800cfb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	4688      	mov	r8, r1
 800cfc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cfc4:	2700      	movs	r7, #0
 800cfc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfca:	f1b9 0901 	subs.w	r9, r9, #1
 800cfce:	d505      	bpl.n	800cfdc <_fwalk_reent+0x24>
 800cfd0:	6824      	ldr	r4, [r4, #0]
 800cfd2:	2c00      	cmp	r4, #0
 800cfd4:	d1f7      	bne.n	800cfc6 <_fwalk_reent+0xe>
 800cfd6:	4638      	mov	r0, r7
 800cfd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfdc:	89ab      	ldrh	r3, [r5, #12]
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d907      	bls.n	800cff2 <_fwalk_reent+0x3a>
 800cfe2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	d003      	beq.n	800cff2 <_fwalk_reent+0x3a>
 800cfea:	4629      	mov	r1, r5
 800cfec:	4630      	mov	r0, r6
 800cfee:	47c0      	blx	r8
 800cff0:	4307      	orrs	r7, r0
 800cff2:	3568      	adds	r5, #104	; 0x68
 800cff4:	e7e9      	b.n	800cfca <_fwalk_reent+0x12>
	...

0800cff8 <_localeconv_r>:
 800cff8:	4800      	ldr	r0, [pc, #0]	; (800cffc <_localeconv_r+0x4>)
 800cffa:	4770      	bx	lr
 800cffc:	20000168 	.word	0x20000168

0800d000 <__retarget_lock_init_recursive>:
 800d000:	4770      	bx	lr

0800d002 <__retarget_lock_acquire_recursive>:
 800d002:	4770      	bx	lr

0800d004 <__retarget_lock_release_recursive>:
 800d004:	4770      	bx	lr

0800d006 <__swhatbuf_r>:
 800d006:	b570      	push	{r4, r5, r6, lr}
 800d008:	460e      	mov	r6, r1
 800d00a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d00e:	2900      	cmp	r1, #0
 800d010:	b096      	sub	sp, #88	; 0x58
 800d012:	4614      	mov	r4, r2
 800d014:	461d      	mov	r5, r3
 800d016:	da07      	bge.n	800d028 <__swhatbuf_r+0x22>
 800d018:	2300      	movs	r3, #0
 800d01a:	602b      	str	r3, [r5, #0]
 800d01c:	89b3      	ldrh	r3, [r6, #12]
 800d01e:	061a      	lsls	r2, r3, #24
 800d020:	d410      	bmi.n	800d044 <__swhatbuf_r+0x3e>
 800d022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d026:	e00e      	b.n	800d046 <__swhatbuf_r+0x40>
 800d028:	466a      	mov	r2, sp
 800d02a:	f000 fffb 	bl	800e024 <_fstat_r>
 800d02e:	2800      	cmp	r0, #0
 800d030:	dbf2      	blt.n	800d018 <__swhatbuf_r+0x12>
 800d032:	9a01      	ldr	r2, [sp, #4]
 800d034:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d038:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d03c:	425a      	negs	r2, r3
 800d03e:	415a      	adcs	r2, r3
 800d040:	602a      	str	r2, [r5, #0]
 800d042:	e7ee      	b.n	800d022 <__swhatbuf_r+0x1c>
 800d044:	2340      	movs	r3, #64	; 0x40
 800d046:	2000      	movs	r0, #0
 800d048:	6023      	str	r3, [r4, #0]
 800d04a:	b016      	add	sp, #88	; 0x58
 800d04c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d050 <__smakebuf_r>:
 800d050:	898b      	ldrh	r3, [r1, #12]
 800d052:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d054:	079d      	lsls	r5, r3, #30
 800d056:	4606      	mov	r6, r0
 800d058:	460c      	mov	r4, r1
 800d05a:	d507      	bpl.n	800d06c <__smakebuf_r+0x1c>
 800d05c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d060:	6023      	str	r3, [r4, #0]
 800d062:	6123      	str	r3, [r4, #16]
 800d064:	2301      	movs	r3, #1
 800d066:	6163      	str	r3, [r4, #20]
 800d068:	b002      	add	sp, #8
 800d06a:	bd70      	pop	{r4, r5, r6, pc}
 800d06c:	ab01      	add	r3, sp, #4
 800d06e:	466a      	mov	r2, sp
 800d070:	f7ff ffc9 	bl	800d006 <__swhatbuf_r>
 800d074:	9900      	ldr	r1, [sp, #0]
 800d076:	4605      	mov	r5, r0
 800d078:	4630      	mov	r0, r6
 800d07a:	f000 fc1d 	bl	800d8b8 <_malloc_r>
 800d07e:	b948      	cbnz	r0, 800d094 <__smakebuf_r+0x44>
 800d080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d084:	059a      	lsls	r2, r3, #22
 800d086:	d4ef      	bmi.n	800d068 <__smakebuf_r+0x18>
 800d088:	f023 0303 	bic.w	r3, r3, #3
 800d08c:	f043 0302 	orr.w	r3, r3, #2
 800d090:	81a3      	strh	r3, [r4, #12]
 800d092:	e7e3      	b.n	800d05c <__smakebuf_r+0xc>
 800d094:	4b0d      	ldr	r3, [pc, #52]	; (800d0cc <__smakebuf_r+0x7c>)
 800d096:	62b3      	str	r3, [r6, #40]	; 0x28
 800d098:	89a3      	ldrh	r3, [r4, #12]
 800d09a:	6020      	str	r0, [r4, #0]
 800d09c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0a0:	81a3      	strh	r3, [r4, #12]
 800d0a2:	9b00      	ldr	r3, [sp, #0]
 800d0a4:	6163      	str	r3, [r4, #20]
 800d0a6:	9b01      	ldr	r3, [sp, #4]
 800d0a8:	6120      	str	r0, [r4, #16]
 800d0aa:	b15b      	cbz	r3, 800d0c4 <__smakebuf_r+0x74>
 800d0ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	f000 ffc9 	bl	800e048 <_isatty_r>
 800d0b6:	b128      	cbz	r0, 800d0c4 <__smakebuf_r+0x74>
 800d0b8:	89a3      	ldrh	r3, [r4, #12]
 800d0ba:	f023 0303 	bic.w	r3, r3, #3
 800d0be:	f043 0301 	orr.w	r3, r3, #1
 800d0c2:	81a3      	strh	r3, [r4, #12]
 800d0c4:	89a0      	ldrh	r0, [r4, #12]
 800d0c6:	4305      	orrs	r5, r0
 800d0c8:	81a5      	strh	r5, [r4, #12]
 800d0ca:	e7cd      	b.n	800d068 <__smakebuf_r+0x18>
 800d0cc:	0800ce55 	.word	0x0800ce55

0800d0d0 <malloc>:
 800d0d0:	4b02      	ldr	r3, [pc, #8]	; (800d0dc <malloc+0xc>)
 800d0d2:	4601      	mov	r1, r0
 800d0d4:	6818      	ldr	r0, [r3, #0]
 800d0d6:	f000 bbef 	b.w	800d8b8 <_malloc_r>
 800d0da:	bf00      	nop
 800d0dc:	20000014 	.word	0x20000014

0800d0e0 <memcpy>:
 800d0e0:	440a      	add	r2, r1
 800d0e2:	4291      	cmp	r1, r2
 800d0e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0e8:	d100      	bne.n	800d0ec <memcpy+0xc>
 800d0ea:	4770      	bx	lr
 800d0ec:	b510      	push	{r4, lr}
 800d0ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0f6:	4291      	cmp	r1, r2
 800d0f8:	d1f9      	bne.n	800d0ee <memcpy+0xe>
 800d0fa:	bd10      	pop	{r4, pc}

0800d0fc <_Balloc>:
 800d0fc:	b570      	push	{r4, r5, r6, lr}
 800d0fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d100:	4604      	mov	r4, r0
 800d102:	460d      	mov	r5, r1
 800d104:	b976      	cbnz	r6, 800d124 <_Balloc+0x28>
 800d106:	2010      	movs	r0, #16
 800d108:	f7ff ffe2 	bl	800d0d0 <malloc>
 800d10c:	4602      	mov	r2, r0
 800d10e:	6260      	str	r0, [r4, #36]	; 0x24
 800d110:	b920      	cbnz	r0, 800d11c <_Balloc+0x20>
 800d112:	4b18      	ldr	r3, [pc, #96]	; (800d174 <_Balloc+0x78>)
 800d114:	4818      	ldr	r0, [pc, #96]	; (800d178 <_Balloc+0x7c>)
 800d116:	2166      	movs	r1, #102	; 0x66
 800d118:	f000 ff44 	bl	800dfa4 <__assert_func>
 800d11c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d120:	6006      	str	r6, [r0, #0]
 800d122:	60c6      	str	r6, [r0, #12]
 800d124:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d126:	68f3      	ldr	r3, [r6, #12]
 800d128:	b183      	cbz	r3, 800d14c <_Balloc+0x50>
 800d12a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d132:	b9b8      	cbnz	r0, 800d164 <_Balloc+0x68>
 800d134:	2101      	movs	r1, #1
 800d136:	fa01 f605 	lsl.w	r6, r1, r5
 800d13a:	1d72      	adds	r2, r6, #5
 800d13c:	0092      	lsls	r2, r2, #2
 800d13e:	4620      	mov	r0, r4
 800d140:	f000 fb5a 	bl	800d7f8 <_calloc_r>
 800d144:	b160      	cbz	r0, 800d160 <_Balloc+0x64>
 800d146:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d14a:	e00e      	b.n	800d16a <_Balloc+0x6e>
 800d14c:	2221      	movs	r2, #33	; 0x21
 800d14e:	2104      	movs	r1, #4
 800d150:	4620      	mov	r0, r4
 800d152:	f000 fb51 	bl	800d7f8 <_calloc_r>
 800d156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d158:	60f0      	str	r0, [r6, #12]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1e4      	bne.n	800d12a <_Balloc+0x2e>
 800d160:	2000      	movs	r0, #0
 800d162:	bd70      	pop	{r4, r5, r6, pc}
 800d164:	6802      	ldr	r2, [r0, #0]
 800d166:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d16a:	2300      	movs	r3, #0
 800d16c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d170:	e7f7      	b.n	800d162 <_Balloc+0x66>
 800d172:	bf00      	nop
 800d174:	0801c611 	.word	0x0801c611
 800d178:	0801c6f8 	.word	0x0801c6f8

0800d17c <_Bfree>:
 800d17c:	b570      	push	{r4, r5, r6, lr}
 800d17e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d180:	4605      	mov	r5, r0
 800d182:	460c      	mov	r4, r1
 800d184:	b976      	cbnz	r6, 800d1a4 <_Bfree+0x28>
 800d186:	2010      	movs	r0, #16
 800d188:	f7ff ffa2 	bl	800d0d0 <malloc>
 800d18c:	4602      	mov	r2, r0
 800d18e:	6268      	str	r0, [r5, #36]	; 0x24
 800d190:	b920      	cbnz	r0, 800d19c <_Bfree+0x20>
 800d192:	4b09      	ldr	r3, [pc, #36]	; (800d1b8 <_Bfree+0x3c>)
 800d194:	4809      	ldr	r0, [pc, #36]	; (800d1bc <_Bfree+0x40>)
 800d196:	218a      	movs	r1, #138	; 0x8a
 800d198:	f000 ff04 	bl	800dfa4 <__assert_func>
 800d19c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1a0:	6006      	str	r6, [r0, #0]
 800d1a2:	60c6      	str	r6, [r0, #12]
 800d1a4:	b13c      	cbz	r4, 800d1b6 <_Bfree+0x3a>
 800d1a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d1a8:	6862      	ldr	r2, [r4, #4]
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1b0:	6021      	str	r1, [r4, #0]
 800d1b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1b6:	bd70      	pop	{r4, r5, r6, pc}
 800d1b8:	0801c611 	.word	0x0801c611
 800d1bc:	0801c6f8 	.word	0x0801c6f8

0800d1c0 <__multadd>:
 800d1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1c4:	690e      	ldr	r6, [r1, #16]
 800d1c6:	4607      	mov	r7, r0
 800d1c8:	4698      	mov	r8, r3
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	f101 0014 	add.w	r0, r1, #20
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	6805      	ldr	r5, [r0, #0]
 800d1d4:	b2a9      	uxth	r1, r5
 800d1d6:	fb02 8101 	mla	r1, r2, r1, r8
 800d1da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d1de:	0c2d      	lsrs	r5, r5, #16
 800d1e0:	fb02 c505 	mla	r5, r2, r5, ip
 800d1e4:	b289      	uxth	r1, r1
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d1ec:	429e      	cmp	r6, r3
 800d1ee:	f840 1b04 	str.w	r1, [r0], #4
 800d1f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d1f6:	dcec      	bgt.n	800d1d2 <__multadd+0x12>
 800d1f8:	f1b8 0f00 	cmp.w	r8, #0
 800d1fc:	d022      	beq.n	800d244 <__multadd+0x84>
 800d1fe:	68a3      	ldr	r3, [r4, #8]
 800d200:	42b3      	cmp	r3, r6
 800d202:	dc19      	bgt.n	800d238 <__multadd+0x78>
 800d204:	6861      	ldr	r1, [r4, #4]
 800d206:	4638      	mov	r0, r7
 800d208:	3101      	adds	r1, #1
 800d20a:	f7ff ff77 	bl	800d0fc <_Balloc>
 800d20e:	4605      	mov	r5, r0
 800d210:	b928      	cbnz	r0, 800d21e <__multadd+0x5e>
 800d212:	4602      	mov	r2, r0
 800d214:	4b0d      	ldr	r3, [pc, #52]	; (800d24c <__multadd+0x8c>)
 800d216:	480e      	ldr	r0, [pc, #56]	; (800d250 <__multadd+0x90>)
 800d218:	21b5      	movs	r1, #181	; 0xb5
 800d21a:	f000 fec3 	bl	800dfa4 <__assert_func>
 800d21e:	6922      	ldr	r2, [r4, #16]
 800d220:	3202      	adds	r2, #2
 800d222:	f104 010c 	add.w	r1, r4, #12
 800d226:	0092      	lsls	r2, r2, #2
 800d228:	300c      	adds	r0, #12
 800d22a:	f7ff ff59 	bl	800d0e0 <memcpy>
 800d22e:	4621      	mov	r1, r4
 800d230:	4638      	mov	r0, r7
 800d232:	f7ff ffa3 	bl	800d17c <_Bfree>
 800d236:	462c      	mov	r4, r5
 800d238:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d23c:	3601      	adds	r6, #1
 800d23e:	f8c3 8014 	str.w	r8, [r3, #20]
 800d242:	6126      	str	r6, [r4, #16]
 800d244:	4620      	mov	r0, r4
 800d246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d24a:	bf00      	nop
 800d24c:	0801c687 	.word	0x0801c687
 800d250:	0801c6f8 	.word	0x0801c6f8

0800d254 <__hi0bits>:
 800d254:	0c03      	lsrs	r3, r0, #16
 800d256:	041b      	lsls	r3, r3, #16
 800d258:	b9d3      	cbnz	r3, 800d290 <__hi0bits+0x3c>
 800d25a:	0400      	lsls	r0, r0, #16
 800d25c:	2310      	movs	r3, #16
 800d25e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d262:	bf04      	itt	eq
 800d264:	0200      	lsleq	r0, r0, #8
 800d266:	3308      	addeq	r3, #8
 800d268:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d26c:	bf04      	itt	eq
 800d26e:	0100      	lsleq	r0, r0, #4
 800d270:	3304      	addeq	r3, #4
 800d272:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d276:	bf04      	itt	eq
 800d278:	0080      	lsleq	r0, r0, #2
 800d27a:	3302      	addeq	r3, #2
 800d27c:	2800      	cmp	r0, #0
 800d27e:	db05      	blt.n	800d28c <__hi0bits+0x38>
 800d280:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d284:	f103 0301 	add.w	r3, r3, #1
 800d288:	bf08      	it	eq
 800d28a:	2320      	moveq	r3, #32
 800d28c:	4618      	mov	r0, r3
 800d28e:	4770      	bx	lr
 800d290:	2300      	movs	r3, #0
 800d292:	e7e4      	b.n	800d25e <__hi0bits+0xa>

0800d294 <__lo0bits>:
 800d294:	6803      	ldr	r3, [r0, #0]
 800d296:	f013 0207 	ands.w	r2, r3, #7
 800d29a:	4601      	mov	r1, r0
 800d29c:	d00b      	beq.n	800d2b6 <__lo0bits+0x22>
 800d29e:	07da      	lsls	r2, r3, #31
 800d2a0:	d424      	bmi.n	800d2ec <__lo0bits+0x58>
 800d2a2:	0798      	lsls	r0, r3, #30
 800d2a4:	bf49      	itett	mi
 800d2a6:	085b      	lsrmi	r3, r3, #1
 800d2a8:	089b      	lsrpl	r3, r3, #2
 800d2aa:	2001      	movmi	r0, #1
 800d2ac:	600b      	strmi	r3, [r1, #0]
 800d2ae:	bf5c      	itt	pl
 800d2b0:	600b      	strpl	r3, [r1, #0]
 800d2b2:	2002      	movpl	r0, #2
 800d2b4:	4770      	bx	lr
 800d2b6:	b298      	uxth	r0, r3
 800d2b8:	b9b0      	cbnz	r0, 800d2e8 <__lo0bits+0x54>
 800d2ba:	0c1b      	lsrs	r3, r3, #16
 800d2bc:	2010      	movs	r0, #16
 800d2be:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d2c2:	bf04      	itt	eq
 800d2c4:	0a1b      	lsreq	r3, r3, #8
 800d2c6:	3008      	addeq	r0, #8
 800d2c8:	071a      	lsls	r2, r3, #28
 800d2ca:	bf04      	itt	eq
 800d2cc:	091b      	lsreq	r3, r3, #4
 800d2ce:	3004      	addeq	r0, #4
 800d2d0:	079a      	lsls	r2, r3, #30
 800d2d2:	bf04      	itt	eq
 800d2d4:	089b      	lsreq	r3, r3, #2
 800d2d6:	3002      	addeq	r0, #2
 800d2d8:	07da      	lsls	r2, r3, #31
 800d2da:	d403      	bmi.n	800d2e4 <__lo0bits+0x50>
 800d2dc:	085b      	lsrs	r3, r3, #1
 800d2de:	f100 0001 	add.w	r0, r0, #1
 800d2e2:	d005      	beq.n	800d2f0 <__lo0bits+0x5c>
 800d2e4:	600b      	str	r3, [r1, #0]
 800d2e6:	4770      	bx	lr
 800d2e8:	4610      	mov	r0, r2
 800d2ea:	e7e8      	b.n	800d2be <__lo0bits+0x2a>
 800d2ec:	2000      	movs	r0, #0
 800d2ee:	4770      	bx	lr
 800d2f0:	2020      	movs	r0, #32
 800d2f2:	4770      	bx	lr

0800d2f4 <__i2b>:
 800d2f4:	b510      	push	{r4, lr}
 800d2f6:	460c      	mov	r4, r1
 800d2f8:	2101      	movs	r1, #1
 800d2fa:	f7ff feff 	bl	800d0fc <_Balloc>
 800d2fe:	4602      	mov	r2, r0
 800d300:	b928      	cbnz	r0, 800d30e <__i2b+0x1a>
 800d302:	4b05      	ldr	r3, [pc, #20]	; (800d318 <__i2b+0x24>)
 800d304:	4805      	ldr	r0, [pc, #20]	; (800d31c <__i2b+0x28>)
 800d306:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d30a:	f000 fe4b 	bl	800dfa4 <__assert_func>
 800d30e:	2301      	movs	r3, #1
 800d310:	6144      	str	r4, [r0, #20]
 800d312:	6103      	str	r3, [r0, #16]
 800d314:	bd10      	pop	{r4, pc}
 800d316:	bf00      	nop
 800d318:	0801c687 	.word	0x0801c687
 800d31c:	0801c6f8 	.word	0x0801c6f8

0800d320 <__multiply>:
 800d320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d324:	4614      	mov	r4, r2
 800d326:	690a      	ldr	r2, [r1, #16]
 800d328:	6923      	ldr	r3, [r4, #16]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	bfb8      	it	lt
 800d32e:	460b      	movlt	r3, r1
 800d330:	460d      	mov	r5, r1
 800d332:	bfbc      	itt	lt
 800d334:	4625      	movlt	r5, r4
 800d336:	461c      	movlt	r4, r3
 800d338:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d33c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d340:	68ab      	ldr	r3, [r5, #8]
 800d342:	6869      	ldr	r1, [r5, #4]
 800d344:	eb0a 0709 	add.w	r7, sl, r9
 800d348:	42bb      	cmp	r3, r7
 800d34a:	b085      	sub	sp, #20
 800d34c:	bfb8      	it	lt
 800d34e:	3101      	addlt	r1, #1
 800d350:	f7ff fed4 	bl	800d0fc <_Balloc>
 800d354:	b930      	cbnz	r0, 800d364 <__multiply+0x44>
 800d356:	4602      	mov	r2, r0
 800d358:	4b42      	ldr	r3, [pc, #264]	; (800d464 <__multiply+0x144>)
 800d35a:	4843      	ldr	r0, [pc, #268]	; (800d468 <__multiply+0x148>)
 800d35c:	f240 115d 	movw	r1, #349	; 0x15d
 800d360:	f000 fe20 	bl	800dfa4 <__assert_func>
 800d364:	f100 0614 	add.w	r6, r0, #20
 800d368:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d36c:	4633      	mov	r3, r6
 800d36e:	2200      	movs	r2, #0
 800d370:	4543      	cmp	r3, r8
 800d372:	d31e      	bcc.n	800d3b2 <__multiply+0x92>
 800d374:	f105 0c14 	add.w	ip, r5, #20
 800d378:	f104 0314 	add.w	r3, r4, #20
 800d37c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d380:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d384:	9202      	str	r2, [sp, #8]
 800d386:	ebac 0205 	sub.w	r2, ip, r5
 800d38a:	3a15      	subs	r2, #21
 800d38c:	f022 0203 	bic.w	r2, r2, #3
 800d390:	3204      	adds	r2, #4
 800d392:	f105 0115 	add.w	r1, r5, #21
 800d396:	458c      	cmp	ip, r1
 800d398:	bf38      	it	cc
 800d39a:	2204      	movcc	r2, #4
 800d39c:	9201      	str	r2, [sp, #4]
 800d39e:	9a02      	ldr	r2, [sp, #8]
 800d3a0:	9303      	str	r3, [sp, #12]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d808      	bhi.n	800d3b8 <__multiply+0x98>
 800d3a6:	2f00      	cmp	r7, #0
 800d3a8:	dc55      	bgt.n	800d456 <__multiply+0x136>
 800d3aa:	6107      	str	r7, [r0, #16]
 800d3ac:	b005      	add	sp, #20
 800d3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b2:	f843 2b04 	str.w	r2, [r3], #4
 800d3b6:	e7db      	b.n	800d370 <__multiply+0x50>
 800d3b8:	f8b3 a000 	ldrh.w	sl, [r3]
 800d3bc:	f1ba 0f00 	cmp.w	sl, #0
 800d3c0:	d020      	beq.n	800d404 <__multiply+0xe4>
 800d3c2:	f105 0e14 	add.w	lr, r5, #20
 800d3c6:	46b1      	mov	r9, r6
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d3ce:	f8d9 b000 	ldr.w	fp, [r9]
 800d3d2:	b2a1      	uxth	r1, r4
 800d3d4:	fa1f fb8b 	uxth.w	fp, fp
 800d3d8:	fb0a b101 	mla	r1, sl, r1, fp
 800d3dc:	4411      	add	r1, r2
 800d3de:	f8d9 2000 	ldr.w	r2, [r9]
 800d3e2:	0c24      	lsrs	r4, r4, #16
 800d3e4:	0c12      	lsrs	r2, r2, #16
 800d3e6:	fb0a 2404 	mla	r4, sl, r4, r2
 800d3ea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d3ee:	b289      	uxth	r1, r1
 800d3f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d3f4:	45f4      	cmp	ip, lr
 800d3f6:	f849 1b04 	str.w	r1, [r9], #4
 800d3fa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d3fe:	d8e4      	bhi.n	800d3ca <__multiply+0xaa>
 800d400:	9901      	ldr	r1, [sp, #4]
 800d402:	5072      	str	r2, [r6, r1]
 800d404:	9a03      	ldr	r2, [sp, #12]
 800d406:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d40a:	3304      	adds	r3, #4
 800d40c:	f1b9 0f00 	cmp.w	r9, #0
 800d410:	d01f      	beq.n	800d452 <__multiply+0x132>
 800d412:	6834      	ldr	r4, [r6, #0]
 800d414:	f105 0114 	add.w	r1, r5, #20
 800d418:	46b6      	mov	lr, r6
 800d41a:	f04f 0a00 	mov.w	sl, #0
 800d41e:	880a      	ldrh	r2, [r1, #0]
 800d420:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d424:	fb09 b202 	mla	r2, r9, r2, fp
 800d428:	4492      	add	sl, r2
 800d42a:	b2a4      	uxth	r4, r4
 800d42c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d430:	f84e 4b04 	str.w	r4, [lr], #4
 800d434:	f851 4b04 	ldr.w	r4, [r1], #4
 800d438:	f8be 2000 	ldrh.w	r2, [lr]
 800d43c:	0c24      	lsrs	r4, r4, #16
 800d43e:	fb09 2404 	mla	r4, r9, r4, r2
 800d442:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d446:	458c      	cmp	ip, r1
 800d448:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d44c:	d8e7      	bhi.n	800d41e <__multiply+0xfe>
 800d44e:	9a01      	ldr	r2, [sp, #4]
 800d450:	50b4      	str	r4, [r6, r2]
 800d452:	3604      	adds	r6, #4
 800d454:	e7a3      	b.n	800d39e <__multiply+0x7e>
 800d456:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d1a5      	bne.n	800d3aa <__multiply+0x8a>
 800d45e:	3f01      	subs	r7, #1
 800d460:	e7a1      	b.n	800d3a6 <__multiply+0x86>
 800d462:	bf00      	nop
 800d464:	0801c687 	.word	0x0801c687
 800d468:	0801c6f8 	.word	0x0801c6f8

0800d46c <__pow5mult>:
 800d46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d470:	4615      	mov	r5, r2
 800d472:	f012 0203 	ands.w	r2, r2, #3
 800d476:	4606      	mov	r6, r0
 800d478:	460f      	mov	r7, r1
 800d47a:	d007      	beq.n	800d48c <__pow5mult+0x20>
 800d47c:	4c25      	ldr	r4, [pc, #148]	; (800d514 <__pow5mult+0xa8>)
 800d47e:	3a01      	subs	r2, #1
 800d480:	2300      	movs	r3, #0
 800d482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d486:	f7ff fe9b 	bl	800d1c0 <__multadd>
 800d48a:	4607      	mov	r7, r0
 800d48c:	10ad      	asrs	r5, r5, #2
 800d48e:	d03d      	beq.n	800d50c <__pow5mult+0xa0>
 800d490:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d492:	b97c      	cbnz	r4, 800d4b4 <__pow5mult+0x48>
 800d494:	2010      	movs	r0, #16
 800d496:	f7ff fe1b 	bl	800d0d0 <malloc>
 800d49a:	4602      	mov	r2, r0
 800d49c:	6270      	str	r0, [r6, #36]	; 0x24
 800d49e:	b928      	cbnz	r0, 800d4ac <__pow5mult+0x40>
 800d4a0:	4b1d      	ldr	r3, [pc, #116]	; (800d518 <__pow5mult+0xac>)
 800d4a2:	481e      	ldr	r0, [pc, #120]	; (800d51c <__pow5mult+0xb0>)
 800d4a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d4a8:	f000 fd7c 	bl	800dfa4 <__assert_func>
 800d4ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4b0:	6004      	str	r4, [r0, #0]
 800d4b2:	60c4      	str	r4, [r0, #12]
 800d4b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d4b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4bc:	b94c      	cbnz	r4, 800d4d2 <__pow5mult+0x66>
 800d4be:	f240 2171 	movw	r1, #625	; 0x271
 800d4c2:	4630      	mov	r0, r6
 800d4c4:	f7ff ff16 	bl	800d2f4 <__i2b>
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	6003      	str	r3, [r0, #0]
 800d4d2:	f04f 0900 	mov.w	r9, #0
 800d4d6:	07eb      	lsls	r3, r5, #31
 800d4d8:	d50a      	bpl.n	800d4f0 <__pow5mult+0x84>
 800d4da:	4639      	mov	r1, r7
 800d4dc:	4622      	mov	r2, r4
 800d4de:	4630      	mov	r0, r6
 800d4e0:	f7ff ff1e 	bl	800d320 <__multiply>
 800d4e4:	4639      	mov	r1, r7
 800d4e6:	4680      	mov	r8, r0
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	f7ff fe47 	bl	800d17c <_Bfree>
 800d4ee:	4647      	mov	r7, r8
 800d4f0:	106d      	asrs	r5, r5, #1
 800d4f2:	d00b      	beq.n	800d50c <__pow5mult+0xa0>
 800d4f4:	6820      	ldr	r0, [r4, #0]
 800d4f6:	b938      	cbnz	r0, 800d508 <__pow5mult+0x9c>
 800d4f8:	4622      	mov	r2, r4
 800d4fa:	4621      	mov	r1, r4
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	f7ff ff0f 	bl	800d320 <__multiply>
 800d502:	6020      	str	r0, [r4, #0]
 800d504:	f8c0 9000 	str.w	r9, [r0]
 800d508:	4604      	mov	r4, r0
 800d50a:	e7e4      	b.n	800d4d6 <__pow5mult+0x6a>
 800d50c:	4638      	mov	r0, r7
 800d50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d512:	bf00      	nop
 800d514:	0801c848 	.word	0x0801c848
 800d518:	0801c611 	.word	0x0801c611
 800d51c:	0801c6f8 	.word	0x0801c6f8

0800d520 <__lshift>:
 800d520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d524:	460c      	mov	r4, r1
 800d526:	6849      	ldr	r1, [r1, #4]
 800d528:	6923      	ldr	r3, [r4, #16]
 800d52a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d52e:	68a3      	ldr	r3, [r4, #8]
 800d530:	4607      	mov	r7, r0
 800d532:	4691      	mov	r9, r2
 800d534:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d538:	f108 0601 	add.w	r6, r8, #1
 800d53c:	42b3      	cmp	r3, r6
 800d53e:	db0b      	blt.n	800d558 <__lshift+0x38>
 800d540:	4638      	mov	r0, r7
 800d542:	f7ff fddb 	bl	800d0fc <_Balloc>
 800d546:	4605      	mov	r5, r0
 800d548:	b948      	cbnz	r0, 800d55e <__lshift+0x3e>
 800d54a:	4602      	mov	r2, r0
 800d54c:	4b28      	ldr	r3, [pc, #160]	; (800d5f0 <__lshift+0xd0>)
 800d54e:	4829      	ldr	r0, [pc, #164]	; (800d5f4 <__lshift+0xd4>)
 800d550:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d554:	f000 fd26 	bl	800dfa4 <__assert_func>
 800d558:	3101      	adds	r1, #1
 800d55a:	005b      	lsls	r3, r3, #1
 800d55c:	e7ee      	b.n	800d53c <__lshift+0x1c>
 800d55e:	2300      	movs	r3, #0
 800d560:	f100 0114 	add.w	r1, r0, #20
 800d564:	f100 0210 	add.w	r2, r0, #16
 800d568:	4618      	mov	r0, r3
 800d56a:	4553      	cmp	r3, sl
 800d56c:	db33      	blt.n	800d5d6 <__lshift+0xb6>
 800d56e:	6920      	ldr	r0, [r4, #16]
 800d570:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d574:	f104 0314 	add.w	r3, r4, #20
 800d578:	f019 091f 	ands.w	r9, r9, #31
 800d57c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d580:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d584:	d02b      	beq.n	800d5de <__lshift+0xbe>
 800d586:	f1c9 0e20 	rsb	lr, r9, #32
 800d58a:	468a      	mov	sl, r1
 800d58c:	2200      	movs	r2, #0
 800d58e:	6818      	ldr	r0, [r3, #0]
 800d590:	fa00 f009 	lsl.w	r0, r0, r9
 800d594:	4302      	orrs	r2, r0
 800d596:	f84a 2b04 	str.w	r2, [sl], #4
 800d59a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d59e:	459c      	cmp	ip, r3
 800d5a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d5a4:	d8f3      	bhi.n	800d58e <__lshift+0x6e>
 800d5a6:	ebac 0304 	sub.w	r3, ip, r4
 800d5aa:	3b15      	subs	r3, #21
 800d5ac:	f023 0303 	bic.w	r3, r3, #3
 800d5b0:	3304      	adds	r3, #4
 800d5b2:	f104 0015 	add.w	r0, r4, #21
 800d5b6:	4584      	cmp	ip, r0
 800d5b8:	bf38      	it	cc
 800d5ba:	2304      	movcc	r3, #4
 800d5bc:	50ca      	str	r2, [r1, r3]
 800d5be:	b10a      	cbz	r2, 800d5c4 <__lshift+0xa4>
 800d5c0:	f108 0602 	add.w	r6, r8, #2
 800d5c4:	3e01      	subs	r6, #1
 800d5c6:	4638      	mov	r0, r7
 800d5c8:	612e      	str	r6, [r5, #16]
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	f7ff fdd6 	bl	800d17c <_Bfree>
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d5da:	3301      	adds	r3, #1
 800d5dc:	e7c5      	b.n	800d56a <__lshift+0x4a>
 800d5de:	3904      	subs	r1, #4
 800d5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d5e8:	459c      	cmp	ip, r3
 800d5ea:	d8f9      	bhi.n	800d5e0 <__lshift+0xc0>
 800d5ec:	e7ea      	b.n	800d5c4 <__lshift+0xa4>
 800d5ee:	bf00      	nop
 800d5f0:	0801c687 	.word	0x0801c687
 800d5f4:	0801c6f8 	.word	0x0801c6f8

0800d5f8 <__mcmp>:
 800d5f8:	b530      	push	{r4, r5, lr}
 800d5fa:	6902      	ldr	r2, [r0, #16]
 800d5fc:	690c      	ldr	r4, [r1, #16]
 800d5fe:	1b12      	subs	r2, r2, r4
 800d600:	d10e      	bne.n	800d620 <__mcmp+0x28>
 800d602:	f100 0314 	add.w	r3, r0, #20
 800d606:	3114      	adds	r1, #20
 800d608:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d60c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d610:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d614:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d618:	42a5      	cmp	r5, r4
 800d61a:	d003      	beq.n	800d624 <__mcmp+0x2c>
 800d61c:	d305      	bcc.n	800d62a <__mcmp+0x32>
 800d61e:	2201      	movs	r2, #1
 800d620:	4610      	mov	r0, r2
 800d622:	bd30      	pop	{r4, r5, pc}
 800d624:	4283      	cmp	r3, r0
 800d626:	d3f3      	bcc.n	800d610 <__mcmp+0x18>
 800d628:	e7fa      	b.n	800d620 <__mcmp+0x28>
 800d62a:	f04f 32ff 	mov.w	r2, #4294967295
 800d62e:	e7f7      	b.n	800d620 <__mcmp+0x28>

0800d630 <__mdiff>:
 800d630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d634:	460c      	mov	r4, r1
 800d636:	4606      	mov	r6, r0
 800d638:	4611      	mov	r1, r2
 800d63a:	4620      	mov	r0, r4
 800d63c:	4617      	mov	r7, r2
 800d63e:	f7ff ffdb 	bl	800d5f8 <__mcmp>
 800d642:	1e05      	subs	r5, r0, #0
 800d644:	d110      	bne.n	800d668 <__mdiff+0x38>
 800d646:	4629      	mov	r1, r5
 800d648:	4630      	mov	r0, r6
 800d64a:	f7ff fd57 	bl	800d0fc <_Balloc>
 800d64e:	b930      	cbnz	r0, 800d65e <__mdiff+0x2e>
 800d650:	4b39      	ldr	r3, [pc, #228]	; (800d738 <__mdiff+0x108>)
 800d652:	4602      	mov	r2, r0
 800d654:	f240 2132 	movw	r1, #562	; 0x232
 800d658:	4838      	ldr	r0, [pc, #224]	; (800d73c <__mdiff+0x10c>)
 800d65a:	f000 fca3 	bl	800dfa4 <__assert_func>
 800d65e:	2301      	movs	r3, #1
 800d660:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d668:	bfa4      	itt	ge
 800d66a:	463b      	movge	r3, r7
 800d66c:	4627      	movge	r7, r4
 800d66e:	4630      	mov	r0, r6
 800d670:	6879      	ldr	r1, [r7, #4]
 800d672:	bfa6      	itte	ge
 800d674:	461c      	movge	r4, r3
 800d676:	2500      	movge	r5, #0
 800d678:	2501      	movlt	r5, #1
 800d67a:	f7ff fd3f 	bl	800d0fc <_Balloc>
 800d67e:	b920      	cbnz	r0, 800d68a <__mdiff+0x5a>
 800d680:	4b2d      	ldr	r3, [pc, #180]	; (800d738 <__mdiff+0x108>)
 800d682:	4602      	mov	r2, r0
 800d684:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d688:	e7e6      	b.n	800d658 <__mdiff+0x28>
 800d68a:	693e      	ldr	r6, [r7, #16]
 800d68c:	60c5      	str	r5, [r0, #12]
 800d68e:	6925      	ldr	r5, [r4, #16]
 800d690:	f107 0114 	add.w	r1, r7, #20
 800d694:	f104 0914 	add.w	r9, r4, #20
 800d698:	f100 0e14 	add.w	lr, r0, #20
 800d69c:	f107 0210 	add.w	r2, r7, #16
 800d6a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d6a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d6a8:	46f2      	mov	sl, lr
 800d6aa:	2700      	movs	r7, #0
 800d6ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800d6b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d6b4:	fa1f f883 	uxth.w	r8, r3
 800d6b8:	fa17 f78b 	uxtah	r7, r7, fp
 800d6bc:	0c1b      	lsrs	r3, r3, #16
 800d6be:	eba7 0808 	sub.w	r8, r7, r8
 800d6c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d6c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d6ca:	fa1f f888 	uxth.w	r8, r8
 800d6ce:	141f      	asrs	r7, r3, #16
 800d6d0:	454d      	cmp	r5, r9
 800d6d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d6d6:	f84a 3b04 	str.w	r3, [sl], #4
 800d6da:	d8e7      	bhi.n	800d6ac <__mdiff+0x7c>
 800d6dc:	1b2b      	subs	r3, r5, r4
 800d6de:	3b15      	subs	r3, #21
 800d6e0:	f023 0303 	bic.w	r3, r3, #3
 800d6e4:	3304      	adds	r3, #4
 800d6e6:	3415      	adds	r4, #21
 800d6e8:	42a5      	cmp	r5, r4
 800d6ea:	bf38      	it	cc
 800d6ec:	2304      	movcc	r3, #4
 800d6ee:	4419      	add	r1, r3
 800d6f0:	4473      	add	r3, lr
 800d6f2:	469e      	mov	lr, r3
 800d6f4:	460d      	mov	r5, r1
 800d6f6:	4565      	cmp	r5, ip
 800d6f8:	d30e      	bcc.n	800d718 <__mdiff+0xe8>
 800d6fa:	f10c 0203 	add.w	r2, ip, #3
 800d6fe:	1a52      	subs	r2, r2, r1
 800d700:	f022 0203 	bic.w	r2, r2, #3
 800d704:	3903      	subs	r1, #3
 800d706:	458c      	cmp	ip, r1
 800d708:	bf38      	it	cc
 800d70a:	2200      	movcc	r2, #0
 800d70c:	441a      	add	r2, r3
 800d70e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d712:	b17b      	cbz	r3, 800d734 <__mdiff+0x104>
 800d714:	6106      	str	r6, [r0, #16]
 800d716:	e7a5      	b.n	800d664 <__mdiff+0x34>
 800d718:	f855 8b04 	ldr.w	r8, [r5], #4
 800d71c:	fa17 f488 	uxtah	r4, r7, r8
 800d720:	1422      	asrs	r2, r4, #16
 800d722:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d726:	b2a4      	uxth	r4, r4
 800d728:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d72c:	f84e 4b04 	str.w	r4, [lr], #4
 800d730:	1417      	asrs	r7, r2, #16
 800d732:	e7e0      	b.n	800d6f6 <__mdiff+0xc6>
 800d734:	3e01      	subs	r6, #1
 800d736:	e7ea      	b.n	800d70e <__mdiff+0xde>
 800d738:	0801c687 	.word	0x0801c687
 800d73c:	0801c6f8 	.word	0x0801c6f8

0800d740 <__d2b>:
 800d740:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d744:	4689      	mov	r9, r1
 800d746:	2101      	movs	r1, #1
 800d748:	ec57 6b10 	vmov	r6, r7, d0
 800d74c:	4690      	mov	r8, r2
 800d74e:	f7ff fcd5 	bl	800d0fc <_Balloc>
 800d752:	4604      	mov	r4, r0
 800d754:	b930      	cbnz	r0, 800d764 <__d2b+0x24>
 800d756:	4602      	mov	r2, r0
 800d758:	4b25      	ldr	r3, [pc, #148]	; (800d7f0 <__d2b+0xb0>)
 800d75a:	4826      	ldr	r0, [pc, #152]	; (800d7f4 <__d2b+0xb4>)
 800d75c:	f240 310a 	movw	r1, #778	; 0x30a
 800d760:	f000 fc20 	bl	800dfa4 <__assert_func>
 800d764:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d768:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d76c:	bb35      	cbnz	r5, 800d7bc <__d2b+0x7c>
 800d76e:	2e00      	cmp	r6, #0
 800d770:	9301      	str	r3, [sp, #4]
 800d772:	d028      	beq.n	800d7c6 <__d2b+0x86>
 800d774:	4668      	mov	r0, sp
 800d776:	9600      	str	r6, [sp, #0]
 800d778:	f7ff fd8c 	bl	800d294 <__lo0bits>
 800d77c:	9900      	ldr	r1, [sp, #0]
 800d77e:	b300      	cbz	r0, 800d7c2 <__d2b+0x82>
 800d780:	9a01      	ldr	r2, [sp, #4]
 800d782:	f1c0 0320 	rsb	r3, r0, #32
 800d786:	fa02 f303 	lsl.w	r3, r2, r3
 800d78a:	430b      	orrs	r3, r1
 800d78c:	40c2      	lsrs	r2, r0
 800d78e:	6163      	str	r3, [r4, #20]
 800d790:	9201      	str	r2, [sp, #4]
 800d792:	9b01      	ldr	r3, [sp, #4]
 800d794:	61a3      	str	r3, [r4, #24]
 800d796:	2b00      	cmp	r3, #0
 800d798:	bf14      	ite	ne
 800d79a:	2202      	movne	r2, #2
 800d79c:	2201      	moveq	r2, #1
 800d79e:	6122      	str	r2, [r4, #16]
 800d7a0:	b1d5      	cbz	r5, 800d7d8 <__d2b+0x98>
 800d7a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d7a6:	4405      	add	r5, r0
 800d7a8:	f8c9 5000 	str.w	r5, [r9]
 800d7ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7b0:	f8c8 0000 	str.w	r0, [r8]
 800d7b4:	4620      	mov	r0, r4
 800d7b6:	b003      	add	sp, #12
 800d7b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7c0:	e7d5      	b.n	800d76e <__d2b+0x2e>
 800d7c2:	6161      	str	r1, [r4, #20]
 800d7c4:	e7e5      	b.n	800d792 <__d2b+0x52>
 800d7c6:	a801      	add	r0, sp, #4
 800d7c8:	f7ff fd64 	bl	800d294 <__lo0bits>
 800d7cc:	9b01      	ldr	r3, [sp, #4]
 800d7ce:	6163      	str	r3, [r4, #20]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	6122      	str	r2, [r4, #16]
 800d7d4:	3020      	adds	r0, #32
 800d7d6:	e7e3      	b.n	800d7a0 <__d2b+0x60>
 800d7d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d7dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d7e0:	f8c9 0000 	str.w	r0, [r9]
 800d7e4:	6918      	ldr	r0, [r3, #16]
 800d7e6:	f7ff fd35 	bl	800d254 <__hi0bits>
 800d7ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d7ee:	e7df      	b.n	800d7b0 <__d2b+0x70>
 800d7f0:	0801c687 	.word	0x0801c687
 800d7f4:	0801c6f8 	.word	0x0801c6f8

0800d7f8 <_calloc_r>:
 800d7f8:	b513      	push	{r0, r1, r4, lr}
 800d7fa:	434a      	muls	r2, r1
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	9201      	str	r2, [sp, #4]
 800d800:	f000 f85a 	bl	800d8b8 <_malloc_r>
 800d804:	4604      	mov	r4, r0
 800d806:	b118      	cbz	r0, 800d810 <_calloc_r+0x18>
 800d808:	9a01      	ldr	r2, [sp, #4]
 800d80a:	2100      	movs	r1, #0
 800d80c:	f7fd fde2 	bl	800b3d4 <memset>
 800d810:	4620      	mov	r0, r4
 800d812:	b002      	add	sp, #8
 800d814:	bd10      	pop	{r4, pc}
	...

0800d818 <_free_r>:
 800d818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d81a:	2900      	cmp	r1, #0
 800d81c:	d048      	beq.n	800d8b0 <_free_r+0x98>
 800d81e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d822:	9001      	str	r0, [sp, #4]
 800d824:	2b00      	cmp	r3, #0
 800d826:	f1a1 0404 	sub.w	r4, r1, #4
 800d82a:	bfb8      	it	lt
 800d82c:	18e4      	addlt	r4, r4, r3
 800d82e:	f000 fc59 	bl	800e0e4 <__malloc_lock>
 800d832:	4a20      	ldr	r2, [pc, #128]	; (800d8b4 <_free_r+0x9c>)
 800d834:	9801      	ldr	r0, [sp, #4]
 800d836:	6813      	ldr	r3, [r2, #0]
 800d838:	4615      	mov	r5, r2
 800d83a:	b933      	cbnz	r3, 800d84a <_free_r+0x32>
 800d83c:	6063      	str	r3, [r4, #4]
 800d83e:	6014      	str	r4, [r2, #0]
 800d840:	b003      	add	sp, #12
 800d842:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d846:	f000 bc53 	b.w	800e0f0 <__malloc_unlock>
 800d84a:	42a3      	cmp	r3, r4
 800d84c:	d90b      	bls.n	800d866 <_free_r+0x4e>
 800d84e:	6821      	ldr	r1, [r4, #0]
 800d850:	1862      	adds	r2, r4, r1
 800d852:	4293      	cmp	r3, r2
 800d854:	bf04      	itt	eq
 800d856:	681a      	ldreq	r2, [r3, #0]
 800d858:	685b      	ldreq	r3, [r3, #4]
 800d85a:	6063      	str	r3, [r4, #4]
 800d85c:	bf04      	itt	eq
 800d85e:	1852      	addeq	r2, r2, r1
 800d860:	6022      	streq	r2, [r4, #0]
 800d862:	602c      	str	r4, [r5, #0]
 800d864:	e7ec      	b.n	800d840 <_free_r+0x28>
 800d866:	461a      	mov	r2, r3
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	b10b      	cbz	r3, 800d870 <_free_r+0x58>
 800d86c:	42a3      	cmp	r3, r4
 800d86e:	d9fa      	bls.n	800d866 <_free_r+0x4e>
 800d870:	6811      	ldr	r1, [r2, #0]
 800d872:	1855      	adds	r5, r2, r1
 800d874:	42a5      	cmp	r5, r4
 800d876:	d10b      	bne.n	800d890 <_free_r+0x78>
 800d878:	6824      	ldr	r4, [r4, #0]
 800d87a:	4421      	add	r1, r4
 800d87c:	1854      	adds	r4, r2, r1
 800d87e:	42a3      	cmp	r3, r4
 800d880:	6011      	str	r1, [r2, #0]
 800d882:	d1dd      	bne.n	800d840 <_free_r+0x28>
 800d884:	681c      	ldr	r4, [r3, #0]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	6053      	str	r3, [r2, #4]
 800d88a:	4421      	add	r1, r4
 800d88c:	6011      	str	r1, [r2, #0]
 800d88e:	e7d7      	b.n	800d840 <_free_r+0x28>
 800d890:	d902      	bls.n	800d898 <_free_r+0x80>
 800d892:	230c      	movs	r3, #12
 800d894:	6003      	str	r3, [r0, #0]
 800d896:	e7d3      	b.n	800d840 <_free_r+0x28>
 800d898:	6825      	ldr	r5, [r4, #0]
 800d89a:	1961      	adds	r1, r4, r5
 800d89c:	428b      	cmp	r3, r1
 800d89e:	bf04      	itt	eq
 800d8a0:	6819      	ldreq	r1, [r3, #0]
 800d8a2:	685b      	ldreq	r3, [r3, #4]
 800d8a4:	6063      	str	r3, [r4, #4]
 800d8a6:	bf04      	itt	eq
 800d8a8:	1949      	addeq	r1, r1, r5
 800d8aa:	6021      	streq	r1, [r4, #0]
 800d8ac:	6054      	str	r4, [r2, #4]
 800d8ae:	e7c7      	b.n	800d840 <_free_r+0x28>
 800d8b0:	b003      	add	sp, #12
 800d8b2:	bd30      	pop	{r4, r5, pc}
 800d8b4:	200002b8 	.word	0x200002b8

0800d8b8 <_malloc_r>:
 800d8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ba:	1ccd      	adds	r5, r1, #3
 800d8bc:	f025 0503 	bic.w	r5, r5, #3
 800d8c0:	3508      	adds	r5, #8
 800d8c2:	2d0c      	cmp	r5, #12
 800d8c4:	bf38      	it	cc
 800d8c6:	250c      	movcc	r5, #12
 800d8c8:	2d00      	cmp	r5, #0
 800d8ca:	4606      	mov	r6, r0
 800d8cc:	db01      	blt.n	800d8d2 <_malloc_r+0x1a>
 800d8ce:	42a9      	cmp	r1, r5
 800d8d0:	d903      	bls.n	800d8da <_malloc_r+0x22>
 800d8d2:	230c      	movs	r3, #12
 800d8d4:	6033      	str	r3, [r6, #0]
 800d8d6:	2000      	movs	r0, #0
 800d8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8da:	f000 fc03 	bl	800e0e4 <__malloc_lock>
 800d8de:	4921      	ldr	r1, [pc, #132]	; (800d964 <_malloc_r+0xac>)
 800d8e0:	680a      	ldr	r2, [r1, #0]
 800d8e2:	4614      	mov	r4, r2
 800d8e4:	b99c      	cbnz	r4, 800d90e <_malloc_r+0x56>
 800d8e6:	4f20      	ldr	r7, [pc, #128]	; (800d968 <_malloc_r+0xb0>)
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	b923      	cbnz	r3, 800d8f6 <_malloc_r+0x3e>
 800d8ec:	4621      	mov	r1, r4
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	f000 faf2 	bl	800ded8 <_sbrk_r>
 800d8f4:	6038      	str	r0, [r7, #0]
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	4630      	mov	r0, r6
 800d8fa:	f000 faed 	bl	800ded8 <_sbrk_r>
 800d8fe:	1c43      	adds	r3, r0, #1
 800d900:	d123      	bne.n	800d94a <_malloc_r+0x92>
 800d902:	230c      	movs	r3, #12
 800d904:	6033      	str	r3, [r6, #0]
 800d906:	4630      	mov	r0, r6
 800d908:	f000 fbf2 	bl	800e0f0 <__malloc_unlock>
 800d90c:	e7e3      	b.n	800d8d6 <_malloc_r+0x1e>
 800d90e:	6823      	ldr	r3, [r4, #0]
 800d910:	1b5b      	subs	r3, r3, r5
 800d912:	d417      	bmi.n	800d944 <_malloc_r+0x8c>
 800d914:	2b0b      	cmp	r3, #11
 800d916:	d903      	bls.n	800d920 <_malloc_r+0x68>
 800d918:	6023      	str	r3, [r4, #0]
 800d91a:	441c      	add	r4, r3
 800d91c:	6025      	str	r5, [r4, #0]
 800d91e:	e004      	b.n	800d92a <_malloc_r+0x72>
 800d920:	6863      	ldr	r3, [r4, #4]
 800d922:	42a2      	cmp	r2, r4
 800d924:	bf0c      	ite	eq
 800d926:	600b      	streq	r3, [r1, #0]
 800d928:	6053      	strne	r3, [r2, #4]
 800d92a:	4630      	mov	r0, r6
 800d92c:	f000 fbe0 	bl	800e0f0 <__malloc_unlock>
 800d930:	f104 000b 	add.w	r0, r4, #11
 800d934:	1d23      	adds	r3, r4, #4
 800d936:	f020 0007 	bic.w	r0, r0, #7
 800d93a:	1ac2      	subs	r2, r0, r3
 800d93c:	d0cc      	beq.n	800d8d8 <_malloc_r+0x20>
 800d93e:	1a1b      	subs	r3, r3, r0
 800d940:	50a3      	str	r3, [r4, r2]
 800d942:	e7c9      	b.n	800d8d8 <_malloc_r+0x20>
 800d944:	4622      	mov	r2, r4
 800d946:	6864      	ldr	r4, [r4, #4]
 800d948:	e7cc      	b.n	800d8e4 <_malloc_r+0x2c>
 800d94a:	1cc4      	adds	r4, r0, #3
 800d94c:	f024 0403 	bic.w	r4, r4, #3
 800d950:	42a0      	cmp	r0, r4
 800d952:	d0e3      	beq.n	800d91c <_malloc_r+0x64>
 800d954:	1a21      	subs	r1, r4, r0
 800d956:	4630      	mov	r0, r6
 800d958:	f000 fabe 	bl	800ded8 <_sbrk_r>
 800d95c:	3001      	adds	r0, #1
 800d95e:	d1dd      	bne.n	800d91c <_malloc_r+0x64>
 800d960:	e7cf      	b.n	800d902 <_malloc_r+0x4a>
 800d962:	bf00      	nop
 800d964:	200002b8 	.word	0x200002b8
 800d968:	200002bc 	.word	0x200002bc

0800d96c <__ssputs_r>:
 800d96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d970:	688e      	ldr	r6, [r1, #8]
 800d972:	429e      	cmp	r6, r3
 800d974:	4682      	mov	sl, r0
 800d976:	460c      	mov	r4, r1
 800d978:	4690      	mov	r8, r2
 800d97a:	461f      	mov	r7, r3
 800d97c:	d838      	bhi.n	800d9f0 <__ssputs_r+0x84>
 800d97e:	898a      	ldrh	r2, [r1, #12]
 800d980:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d984:	d032      	beq.n	800d9ec <__ssputs_r+0x80>
 800d986:	6825      	ldr	r5, [r4, #0]
 800d988:	6909      	ldr	r1, [r1, #16]
 800d98a:	eba5 0901 	sub.w	r9, r5, r1
 800d98e:	6965      	ldr	r5, [r4, #20]
 800d990:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d994:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d998:	3301      	adds	r3, #1
 800d99a:	444b      	add	r3, r9
 800d99c:	106d      	asrs	r5, r5, #1
 800d99e:	429d      	cmp	r5, r3
 800d9a0:	bf38      	it	cc
 800d9a2:	461d      	movcc	r5, r3
 800d9a4:	0553      	lsls	r3, r2, #21
 800d9a6:	d531      	bpl.n	800da0c <__ssputs_r+0xa0>
 800d9a8:	4629      	mov	r1, r5
 800d9aa:	f7ff ff85 	bl	800d8b8 <_malloc_r>
 800d9ae:	4606      	mov	r6, r0
 800d9b0:	b950      	cbnz	r0, 800d9c8 <__ssputs_r+0x5c>
 800d9b2:	230c      	movs	r3, #12
 800d9b4:	f8ca 3000 	str.w	r3, [sl]
 800d9b8:	89a3      	ldrh	r3, [r4, #12]
 800d9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9be:	81a3      	strh	r3, [r4, #12]
 800d9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9c8:	6921      	ldr	r1, [r4, #16]
 800d9ca:	464a      	mov	r2, r9
 800d9cc:	f7ff fb88 	bl	800d0e0 <memcpy>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9da:	81a3      	strh	r3, [r4, #12]
 800d9dc:	6126      	str	r6, [r4, #16]
 800d9de:	6165      	str	r5, [r4, #20]
 800d9e0:	444e      	add	r6, r9
 800d9e2:	eba5 0509 	sub.w	r5, r5, r9
 800d9e6:	6026      	str	r6, [r4, #0]
 800d9e8:	60a5      	str	r5, [r4, #8]
 800d9ea:	463e      	mov	r6, r7
 800d9ec:	42be      	cmp	r6, r7
 800d9ee:	d900      	bls.n	800d9f2 <__ssputs_r+0x86>
 800d9f0:	463e      	mov	r6, r7
 800d9f2:	4632      	mov	r2, r6
 800d9f4:	6820      	ldr	r0, [r4, #0]
 800d9f6:	4641      	mov	r1, r8
 800d9f8:	f000 fb5a 	bl	800e0b0 <memmove>
 800d9fc:	68a3      	ldr	r3, [r4, #8]
 800d9fe:	6822      	ldr	r2, [r4, #0]
 800da00:	1b9b      	subs	r3, r3, r6
 800da02:	4432      	add	r2, r6
 800da04:	60a3      	str	r3, [r4, #8]
 800da06:	6022      	str	r2, [r4, #0]
 800da08:	2000      	movs	r0, #0
 800da0a:	e7db      	b.n	800d9c4 <__ssputs_r+0x58>
 800da0c:	462a      	mov	r2, r5
 800da0e:	f000 fb75 	bl	800e0fc <_realloc_r>
 800da12:	4606      	mov	r6, r0
 800da14:	2800      	cmp	r0, #0
 800da16:	d1e1      	bne.n	800d9dc <__ssputs_r+0x70>
 800da18:	6921      	ldr	r1, [r4, #16]
 800da1a:	4650      	mov	r0, sl
 800da1c:	f7ff fefc 	bl	800d818 <_free_r>
 800da20:	e7c7      	b.n	800d9b2 <__ssputs_r+0x46>
	...

0800da24 <_svfiprintf_r>:
 800da24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da28:	4698      	mov	r8, r3
 800da2a:	898b      	ldrh	r3, [r1, #12]
 800da2c:	061b      	lsls	r3, r3, #24
 800da2e:	b09d      	sub	sp, #116	; 0x74
 800da30:	4607      	mov	r7, r0
 800da32:	460d      	mov	r5, r1
 800da34:	4614      	mov	r4, r2
 800da36:	d50e      	bpl.n	800da56 <_svfiprintf_r+0x32>
 800da38:	690b      	ldr	r3, [r1, #16]
 800da3a:	b963      	cbnz	r3, 800da56 <_svfiprintf_r+0x32>
 800da3c:	2140      	movs	r1, #64	; 0x40
 800da3e:	f7ff ff3b 	bl	800d8b8 <_malloc_r>
 800da42:	6028      	str	r0, [r5, #0]
 800da44:	6128      	str	r0, [r5, #16]
 800da46:	b920      	cbnz	r0, 800da52 <_svfiprintf_r+0x2e>
 800da48:	230c      	movs	r3, #12
 800da4a:	603b      	str	r3, [r7, #0]
 800da4c:	f04f 30ff 	mov.w	r0, #4294967295
 800da50:	e0d1      	b.n	800dbf6 <_svfiprintf_r+0x1d2>
 800da52:	2340      	movs	r3, #64	; 0x40
 800da54:	616b      	str	r3, [r5, #20]
 800da56:	2300      	movs	r3, #0
 800da58:	9309      	str	r3, [sp, #36]	; 0x24
 800da5a:	2320      	movs	r3, #32
 800da5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da60:	f8cd 800c 	str.w	r8, [sp, #12]
 800da64:	2330      	movs	r3, #48	; 0x30
 800da66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dc10 <_svfiprintf_r+0x1ec>
 800da6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da6e:	f04f 0901 	mov.w	r9, #1
 800da72:	4623      	mov	r3, r4
 800da74:	469a      	mov	sl, r3
 800da76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da7a:	b10a      	cbz	r2, 800da80 <_svfiprintf_r+0x5c>
 800da7c:	2a25      	cmp	r2, #37	; 0x25
 800da7e:	d1f9      	bne.n	800da74 <_svfiprintf_r+0x50>
 800da80:	ebba 0b04 	subs.w	fp, sl, r4
 800da84:	d00b      	beq.n	800da9e <_svfiprintf_r+0x7a>
 800da86:	465b      	mov	r3, fp
 800da88:	4622      	mov	r2, r4
 800da8a:	4629      	mov	r1, r5
 800da8c:	4638      	mov	r0, r7
 800da8e:	f7ff ff6d 	bl	800d96c <__ssputs_r>
 800da92:	3001      	adds	r0, #1
 800da94:	f000 80aa 	beq.w	800dbec <_svfiprintf_r+0x1c8>
 800da98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da9a:	445a      	add	r2, fp
 800da9c:	9209      	str	r2, [sp, #36]	; 0x24
 800da9e:	f89a 3000 	ldrb.w	r3, [sl]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f000 80a2 	beq.w	800dbec <_svfiprintf_r+0x1c8>
 800daa8:	2300      	movs	r3, #0
 800daaa:	f04f 32ff 	mov.w	r2, #4294967295
 800daae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dab2:	f10a 0a01 	add.w	sl, sl, #1
 800dab6:	9304      	str	r3, [sp, #16]
 800dab8:	9307      	str	r3, [sp, #28]
 800daba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dabe:	931a      	str	r3, [sp, #104]	; 0x68
 800dac0:	4654      	mov	r4, sl
 800dac2:	2205      	movs	r2, #5
 800dac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dac8:	4851      	ldr	r0, [pc, #324]	; (800dc10 <_svfiprintf_r+0x1ec>)
 800daca:	f7f2 fb89 	bl	80001e0 <memchr>
 800dace:	9a04      	ldr	r2, [sp, #16]
 800dad0:	b9d8      	cbnz	r0, 800db0a <_svfiprintf_r+0xe6>
 800dad2:	06d0      	lsls	r0, r2, #27
 800dad4:	bf44      	itt	mi
 800dad6:	2320      	movmi	r3, #32
 800dad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dadc:	0711      	lsls	r1, r2, #28
 800dade:	bf44      	itt	mi
 800dae0:	232b      	movmi	r3, #43	; 0x2b
 800dae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dae6:	f89a 3000 	ldrb.w	r3, [sl]
 800daea:	2b2a      	cmp	r3, #42	; 0x2a
 800daec:	d015      	beq.n	800db1a <_svfiprintf_r+0xf6>
 800daee:	9a07      	ldr	r2, [sp, #28]
 800daf0:	4654      	mov	r4, sl
 800daf2:	2000      	movs	r0, #0
 800daf4:	f04f 0c0a 	mov.w	ip, #10
 800daf8:	4621      	mov	r1, r4
 800dafa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dafe:	3b30      	subs	r3, #48	; 0x30
 800db00:	2b09      	cmp	r3, #9
 800db02:	d94e      	bls.n	800dba2 <_svfiprintf_r+0x17e>
 800db04:	b1b0      	cbz	r0, 800db34 <_svfiprintf_r+0x110>
 800db06:	9207      	str	r2, [sp, #28]
 800db08:	e014      	b.n	800db34 <_svfiprintf_r+0x110>
 800db0a:	eba0 0308 	sub.w	r3, r0, r8
 800db0e:	fa09 f303 	lsl.w	r3, r9, r3
 800db12:	4313      	orrs	r3, r2
 800db14:	9304      	str	r3, [sp, #16]
 800db16:	46a2      	mov	sl, r4
 800db18:	e7d2      	b.n	800dac0 <_svfiprintf_r+0x9c>
 800db1a:	9b03      	ldr	r3, [sp, #12]
 800db1c:	1d19      	adds	r1, r3, #4
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	9103      	str	r1, [sp, #12]
 800db22:	2b00      	cmp	r3, #0
 800db24:	bfbb      	ittet	lt
 800db26:	425b      	neglt	r3, r3
 800db28:	f042 0202 	orrlt.w	r2, r2, #2
 800db2c:	9307      	strge	r3, [sp, #28]
 800db2e:	9307      	strlt	r3, [sp, #28]
 800db30:	bfb8      	it	lt
 800db32:	9204      	strlt	r2, [sp, #16]
 800db34:	7823      	ldrb	r3, [r4, #0]
 800db36:	2b2e      	cmp	r3, #46	; 0x2e
 800db38:	d10c      	bne.n	800db54 <_svfiprintf_r+0x130>
 800db3a:	7863      	ldrb	r3, [r4, #1]
 800db3c:	2b2a      	cmp	r3, #42	; 0x2a
 800db3e:	d135      	bne.n	800dbac <_svfiprintf_r+0x188>
 800db40:	9b03      	ldr	r3, [sp, #12]
 800db42:	1d1a      	adds	r2, r3, #4
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	9203      	str	r2, [sp, #12]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	bfb8      	it	lt
 800db4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800db50:	3402      	adds	r4, #2
 800db52:	9305      	str	r3, [sp, #20]
 800db54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dc20 <_svfiprintf_r+0x1fc>
 800db58:	7821      	ldrb	r1, [r4, #0]
 800db5a:	2203      	movs	r2, #3
 800db5c:	4650      	mov	r0, sl
 800db5e:	f7f2 fb3f 	bl	80001e0 <memchr>
 800db62:	b140      	cbz	r0, 800db76 <_svfiprintf_r+0x152>
 800db64:	2340      	movs	r3, #64	; 0x40
 800db66:	eba0 000a 	sub.w	r0, r0, sl
 800db6a:	fa03 f000 	lsl.w	r0, r3, r0
 800db6e:	9b04      	ldr	r3, [sp, #16]
 800db70:	4303      	orrs	r3, r0
 800db72:	3401      	adds	r4, #1
 800db74:	9304      	str	r3, [sp, #16]
 800db76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db7a:	4826      	ldr	r0, [pc, #152]	; (800dc14 <_svfiprintf_r+0x1f0>)
 800db7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db80:	2206      	movs	r2, #6
 800db82:	f7f2 fb2d 	bl	80001e0 <memchr>
 800db86:	2800      	cmp	r0, #0
 800db88:	d038      	beq.n	800dbfc <_svfiprintf_r+0x1d8>
 800db8a:	4b23      	ldr	r3, [pc, #140]	; (800dc18 <_svfiprintf_r+0x1f4>)
 800db8c:	bb1b      	cbnz	r3, 800dbd6 <_svfiprintf_r+0x1b2>
 800db8e:	9b03      	ldr	r3, [sp, #12]
 800db90:	3307      	adds	r3, #7
 800db92:	f023 0307 	bic.w	r3, r3, #7
 800db96:	3308      	adds	r3, #8
 800db98:	9303      	str	r3, [sp, #12]
 800db9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db9c:	4433      	add	r3, r6
 800db9e:	9309      	str	r3, [sp, #36]	; 0x24
 800dba0:	e767      	b.n	800da72 <_svfiprintf_r+0x4e>
 800dba2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dba6:	460c      	mov	r4, r1
 800dba8:	2001      	movs	r0, #1
 800dbaa:	e7a5      	b.n	800daf8 <_svfiprintf_r+0xd4>
 800dbac:	2300      	movs	r3, #0
 800dbae:	3401      	adds	r4, #1
 800dbb0:	9305      	str	r3, [sp, #20]
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	f04f 0c0a 	mov.w	ip, #10
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbbe:	3a30      	subs	r2, #48	; 0x30
 800dbc0:	2a09      	cmp	r2, #9
 800dbc2:	d903      	bls.n	800dbcc <_svfiprintf_r+0x1a8>
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d0c5      	beq.n	800db54 <_svfiprintf_r+0x130>
 800dbc8:	9105      	str	r1, [sp, #20]
 800dbca:	e7c3      	b.n	800db54 <_svfiprintf_r+0x130>
 800dbcc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e7f0      	b.n	800dbb8 <_svfiprintf_r+0x194>
 800dbd6:	ab03      	add	r3, sp, #12
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	462a      	mov	r2, r5
 800dbdc:	4b0f      	ldr	r3, [pc, #60]	; (800dc1c <_svfiprintf_r+0x1f8>)
 800dbde:	a904      	add	r1, sp, #16
 800dbe0:	4638      	mov	r0, r7
 800dbe2:	f7fd fc9f 	bl	800b524 <_printf_float>
 800dbe6:	1c42      	adds	r2, r0, #1
 800dbe8:	4606      	mov	r6, r0
 800dbea:	d1d6      	bne.n	800db9a <_svfiprintf_r+0x176>
 800dbec:	89ab      	ldrh	r3, [r5, #12]
 800dbee:	065b      	lsls	r3, r3, #25
 800dbf0:	f53f af2c 	bmi.w	800da4c <_svfiprintf_r+0x28>
 800dbf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbf6:	b01d      	add	sp, #116	; 0x74
 800dbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfc:	ab03      	add	r3, sp, #12
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	462a      	mov	r2, r5
 800dc02:	4b06      	ldr	r3, [pc, #24]	; (800dc1c <_svfiprintf_r+0x1f8>)
 800dc04:	a904      	add	r1, sp, #16
 800dc06:	4638      	mov	r0, r7
 800dc08:	f7fd ff30 	bl	800ba6c <_printf_i>
 800dc0c:	e7eb      	b.n	800dbe6 <_svfiprintf_r+0x1c2>
 800dc0e:	bf00      	nop
 800dc10:	0801c854 	.word	0x0801c854
 800dc14:	0801c85e 	.word	0x0801c85e
 800dc18:	0800b525 	.word	0x0800b525
 800dc1c:	0800d96d 	.word	0x0800d96d
 800dc20:	0801c85a 	.word	0x0801c85a

0800dc24 <__sfputc_r>:
 800dc24:	6893      	ldr	r3, [r2, #8]
 800dc26:	3b01      	subs	r3, #1
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	b410      	push	{r4}
 800dc2c:	6093      	str	r3, [r2, #8]
 800dc2e:	da08      	bge.n	800dc42 <__sfputc_r+0x1e>
 800dc30:	6994      	ldr	r4, [r2, #24]
 800dc32:	42a3      	cmp	r3, r4
 800dc34:	db01      	blt.n	800dc3a <__sfputc_r+0x16>
 800dc36:	290a      	cmp	r1, #10
 800dc38:	d103      	bne.n	800dc42 <__sfputc_r+0x1e>
 800dc3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc3e:	f7fe b8e9 	b.w	800be14 <__swbuf_r>
 800dc42:	6813      	ldr	r3, [r2, #0]
 800dc44:	1c58      	adds	r0, r3, #1
 800dc46:	6010      	str	r0, [r2, #0]
 800dc48:	7019      	strb	r1, [r3, #0]
 800dc4a:	4608      	mov	r0, r1
 800dc4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc50:	4770      	bx	lr

0800dc52 <__sfputs_r>:
 800dc52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc54:	4606      	mov	r6, r0
 800dc56:	460f      	mov	r7, r1
 800dc58:	4614      	mov	r4, r2
 800dc5a:	18d5      	adds	r5, r2, r3
 800dc5c:	42ac      	cmp	r4, r5
 800dc5e:	d101      	bne.n	800dc64 <__sfputs_r+0x12>
 800dc60:	2000      	movs	r0, #0
 800dc62:	e007      	b.n	800dc74 <__sfputs_r+0x22>
 800dc64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc68:	463a      	mov	r2, r7
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	f7ff ffda 	bl	800dc24 <__sfputc_r>
 800dc70:	1c43      	adds	r3, r0, #1
 800dc72:	d1f3      	bne.n	800dc5c <__sfputs_r+0xa>
 800dc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc78 <_vfiprintf_r>:
 800dc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7c:	460d      	mov	r5, r1
 800dc7e:	b09d      	sub	sp, #116	; 0x74
 800dc80:	4614      	mov	r4, r2
 800dc82:	4698      	mov	r8, r3
 800dc84:	4606      	mov	r6, r0
 800dc86:	b118      	cbz	r0, 800dc90 <_vfiprintf_r+0x18>
 800dc88:	6983      	ldr	r3, [r0, #24]
 800dc8a:	b90b      	cbnz	r3, 800dc90 <_vfiprintf_r+0x18>
 800dc8c:	f7ff f916 	bl	800cebc <__sinit>
 800dc90:	4b89      	ldr	r3, [pc, #548]	; (800deb8 <_vfiprintf_r+0x240>)
 800dc92:	429d      	cmp	r5, r3
 800dc94:	d11b      	bne.n	800dcce <_vfiprintf_r+0x56>
 800dc96:	6875      	ldr	r5, [r6, #4]
 800dc98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc9a:	07d9      	lsls	r1, r3, #31
 800dc9c:	d405      	bmi.n	800dcaa <_vfiprintf_r+0x32>
 800dc9e:	89ab      	ldrh	r3, [r5, #12]
 800dca0:	059a      	lsls	r2, r3, #22
 800dca2:	d402      	bmi.n	800dcaa <_vfiprintf_r+0x32>
 800dca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dca6:	f7ff f9ac 	bl	800d002 <__retarget_lock_acquire_recursive>
 800dcaa:	89ab      	ldrh	r3, [r5, #12]
 800dcac:	071b      	lsls	r3, r3, #28
 800dcae:	d501      	bpl.n	800dcb4 <_vfiprintf_r+0x3c>
 800dcb0:	692b      	ldr	r3, [r5, #16]
 800dcb2:	b9eb      	cbnz	r3, 800dcf0 <_vfiprintf_r+0x78>
 800dcb4:	4629      	mov	r1, r5
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	f7fe f8fe 	bl	800beb8 <__swsetup_r>
 800dcbc:	b1c0      	cbz	r0, 800dcf0 <_vfiprintf_r+0x78>
 800dcbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcc0:	07dc      	lsls	r4, r3, #31
 800dcc2:	d50e      	bpl.n	800dce2 <_vfiprintf_r+0x6a>
 800dcc4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc8:	b01d      	add	sp, #116	; 0x74
 800dcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcce:	4b7b      	ldr	r3, [pc, #492]	; (800debc <_vfiprintf_r+0x244>)
 800dcd0:	429d      	cmp	r5, r3
 800dcd2:	d101      	bne.n	800dcd8 <_vfiprintf_r+0x60>
 800dcd4:	68b5      	ldr	r5, [r6, #8]
 800dcd6:	e7df      	b.n	800dc98 <_vfiprintf_r+0x20>
 800dcd8:	4b79      	ldr	r3, [pc, #484]	; (800dec0 <_vfiprintf_r+0x248>)
 800dcda:	429d      	cmp	r5, r3
 800dcdc:	bf08      	it	eq
 800dcde:	68f5      	ldreq	r5, [r6, #12]
 800dce0:	e7da      	b.n	800dc98 <_vfiprintf_r+0x20>
 800dce2:	89ab      	ldrh	r3, [r5, #12]
 800dce4:	0598      	lsls	r0, r3, #22
 800dce6:	d4ed      	bmi.n	800dcc4 <_vfiprintf_r+0x4c>
 800dce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcea:	f7ff f98b 	bl	800d004 <__retarget_lock_release_recursive>
 800dcee:	e7e9      	b.n	800dcc4 <_vfiprintf_r+0x4c>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	9309      	str	r3, [sp, #36]	; 0x24
 800dcf4:	2320      	movs	r3, #32
 800dcf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcfa:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcfe:	2330      	movs	r3, #48	; 0x30
 800dd00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dec4 <_vfiprintf_r+0x24c>
 800dd04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd08:	f04f 0901 	mov.w	r9, #1
 800dd0c:	4623      	mov	r3, r4
 800dd0e:	469a      	mov	sl, r3
 800dd10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd14:	b10a      	cbz	r2, 800dd1a <_vfiprintf_r+0xa2>
 800dd16:	2a25      	cmp	r2, #37	; 0x25
 800dd18:	d1f9      	bne.n	800dd0e <_vfiprintf_r+0x96>
 800dd1a:	ebba 0b04 	subs.w	fp, sl, r4
 800dd1e:	d00b      	beq.n	800dd38 <_vfiprintf_r+0xc0>
 800dd20:	465b      	mov	r3, fp
 800dd22:	4622      	mov	r2, r4
 800dd24:	4629      	mov	r1, r5
 800dd26:	4630      	mov	r0, r6
 800dd28:	f7ff ff93 	bl	800dc52 <__sfputs_r>
 800dd2c:	3001      	adds	r0, #1
 800dd2e:	f000 80aa 	beq.w	800de86 <_vfiprintf_r+0x20e>
 800dd32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd34:	445a      	add	r2, fp
 800dd36:	9209      	str	r2, [sp, #36]	; 0x24
 800dd38:	f89a 3000 	ldrb.w	r3, [sl]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f000 80a2 	beq.w	800de86 <_vfiprintf_r+0x20e>
 800dd42:	2300      	movs	r3, #0
 800dd44:	f04f 32ff 	mov.w	r2, #4294967295
 800dd48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd4c:	f10a 0a01 	add.w	sl, sl, #1
 800dd50:	9304      	str	r3, [sp, #16]
 800dd52:	9307      	str	r3, [sp, #28]
 800dd54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd58:	931a      	str	r3, [sp, #104]	; 0x68
 800dd5a:	4654      	mov	r4, sl
 800dd5c:	2205      	movs	r2, #5
 800dd5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd62:	4858      	ldr	r0, [pc, #352]	; (800dec4 <_vfiprintf_r+0x24c>)
 800dd64:	f7f2 fa3c 	bl	80001e0 <memchr>
 800dd68:	9a04      	ldr	r2, [sp, #16]
 800dd6a:	b9d8      	cbnz	r0, 800dda4 <_vfiprintf_r+0x12c>
 800dd6c:	06d1      	lsls	r1, r2, #27
 800dd6e:	bf44      	itt	mi
 800dd70:	2320      	movmi	r3, #32
 800dd72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd76:	0713      	lsls	r3, r2, #28
 800dd78:	bf44      	itt	mi
 800dd7a:	232b      	movmi	r3, #43	; 0x2b
 800dd7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd80:	f89a 3000 	ldrb.w	r3, [sl]
 800dd84:	2b2a      	cmp	r3, #42	; 0x2a
 800dd86:	d015      	beq.n	800ddb4 <_vfiprintf_r+0x13c>
 800dd88:	9a07      	ldr	r2, [sp, #28]
 800dd8a:	4654      	mov	r4, sl
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	f04f 0c0a 	mov.w	ip, #10
 800dd92:	4621      	mov	r1, r4
 800dd94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd98:	3b30      	subs	r3, #48	; 0x30
 800dd9a:	2b09      	cmp	r3, #9
 800dd9c:	d94e      	bls.n	800de3c <_vfiprintf_r+0x1c4>
 800dd9e:	b1b0      	cbz	r0, 800ddce <_vfiprintf_r+0x156>
 800dda0:	9207      	str	r2, [sp, #28]
 800dda2:	e014      	b.n	800ddce <_vfiprintf_r+0x156>
 800dda4:	eba0 0308 	sub.w	r3, r0, r8
 800dda8:	fa09 f303 	lsl.w	r3, r9, r3
 800ddac:	4313      	orrs	r3, r2
 800ddae:	9304      	str	r3, [sp, #16]
 800ddb0:	46a2      	mov	sl, r4
 800ddb2:	e7d2      	b.n	800dd5a <_vfiprintf_r+0xe2>
 800ddb4:	9b03      	ldr	r3, [sp, #12]
 800ddb6:	1d19      	adds	r1, r3, #4
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	9103      	str	r1, [sp, #12]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	bfbb      	ittet	lt
 800ddc0:	425b      	neglt	r3, r3
 800ddc2:	f042 0202 	orrlt.w	r2, r2, #2
 800ddc6:	9307      	strge	r3, [sp, #28]
 800ddc8:	9307      	strlt	r3, [sp, #28]
 800ddca:	bfb8      	it	lt
 800ddcc:	9204      	strlt	r2, [sp, #16]
 800ddce:	7823      	ldrb	r3, [r4, #0]
 800ddd0:	2b2e      	cmp	r3, #46	; 0x2e
 800ddd2:	d10c      	bne.n	800ddee <_vfiprintf_r+0x176>
 800ddd4:	7863      	ldrb	r3, [r4, #1]
 800ddd6:	2b2a      	cmp	r3, #42	; 0x2a
 800ddd8:	d135      	bne.n	800de46 <_vfiprintf_r+0x1ce>
 800ddda:	9b03      	ldr	r3, [sp, #12]
 800dddc:	1d1a      	adds	r2, r3, #4
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	9203      	str	r2, [sp, #12]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	bfb8      	it	lt
 800dde6:	f04f 33ff 	movlt.w	r3, #4294967295
 800ddea:	3402      	adds	r4, #2
 800ddec:	9305      	str	r3, [sp, #20]
 800ddee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ded4 <_vfiprintf_r+0x25c>
 800ddf2:	7821      	ldrb	r1, [r4, #0]
 800ddf4:	2203      	movs	r2, #3
 800ddf6:	4650      	mov	r0, sl
 800ddf8:	f7f2 f9f2 	bl	80001e0 <memchr>
 800ddfc:	b140      	cbz	r0, 800de10 <_vfiprintf_r+0x198>
 800ddfe:	2340      	movs	r3, #64	; 0x40
 800de00:	eba0 000a 	sub.w	r0, r0, sl
 800de04:	fa03 f000 	lsl.w	r0, r3, r0
 800de08:	9b04      	ldr	r3, [sp, #16]
 800de0a:	4303      	orrs	r3, r0
 800de0c:	3401      	adds	r4, #1
 800de0e:	9304      	str	r3, [sp, #16]
 800de10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de14:	482c      	ldr	r0, [pc, #176]	; (800dec8 <_vfiprintf_r+0x250>)
 800de16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de1a:	2206      	movs	r2, #6
 800de1c:	f7f2 f9e0 	bl	80001e0 <memchr>
 800de20:	2800      	cmp	r0, #0
 800de22:	d03f      	beq.n	800dea4 <_vfiprintf_r+0x22c>
 800de24:	4b29      	ldr	r3, [pc, #164]	; (800decc <_vfiprintf_r+0x254>)
 800de26:	bb1b      	cbnz	r3, 800de70 <_vfiprintf_r+0x1f8>
 800de28:	9b03      	ldr	r3, [sp, #12]
 800de2a:	3307      	adds	r3, #7
 800de2c:	f023 0307 	bic.w	r3, r3, #7
 800de30:	3308      	adds	r3, #8
 800de32:	9303      	str	r3, [sp, #12]
 800de34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de36:	443b      	add	r3, r7
 800de38:	9309      	str	r3, [sp, #36]	; 0x24
 800de3a:	e767      	b.n	800dd0c <_vfiprintf_r+0x94>
 800de3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800de40:	460c      	mov	r4, r1
 800de42:	2001      	movs	r0, #1
 800de44:	e7a5      	b.n	800dd92 <_vfiprintf_r+0x11a>
 800de46:	2300      	movs	r3, #0
 800de48:	3401      	adds	r4, #1
 800de4a:	9305      	str	r3, [sp, #20]
 800de4c:	4619      	mov	r1, r3
 800de4e:	f04f 0c0a 	mov.w	ip, #10
 800de52:	4620      	mov	r0, r4
 800de54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de58:	3a30      	subs	r2, #48	; 0x30
 800de5a:	2a09      	cmp	r2, #9
 800de5c:	d903      	bls.n	800de66 <_vfiprintf_r+0x1ee>
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d0c5      	beq.n	800ddee <_vfiprintf_r+0x176>
 800de62:	9105      	str	r1, [sp, #20]
 800de64:	e7c3      	b.n	800ddee <_vfiprintf_r+0x176>
 800de66:	fb0c 2101 	mla	r1, ip, r1, r2
 800de6a:	4604      	mov	r4, r0
 800de6c:	2301      	movs	r3, #1
 800de6e:	e7f0      	b.n	800de52 <_vfiprintf_r+0x1da>
 800de70:	ab03      	add	r3, sp, #12
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	462a      	mov	r2, r5
 800de76:	4b16      	ldr	r3, [pc, #88]	; (800ded0 <_vfiprintf_r+0x258>)
 800de78:	a904      	add	r1, sp, #16
 800de7a:	4630      	mov	r0, r6
 800de7c:	f7fd fb52 	bl	800b524 <_printf_float>
 800de80:	4607      	mov	r7, r0
 800de82:	1c78      	adds	r0, r7, #1
 800de84:	d1d6      	bne.n	800de34 <_vfiprintf_r+0x1bc>
 800de86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de88:	07d9      	lsls	r1, r3, #31
 800de8a:	d405      	bmi.n	800de98 <_vfiprintf_r+0x220>
 800de8c:	89ab      	ldrh	r3, [r5, #12]
 800de8e:	059a      	lsls	r2, r3, #22
 800de90:	d402      	bmi.n	800de98 <_vfiprintf_r+0x220>
 800de92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de94:	f7ff f8b6 	bl	800d004 <__retarget_lock_release_recursive>
 800de98:	89ab      	ldrh	r3, [r5, #12]
 800de9a:	065b      	lsls	r3, r3, #25
 800de9c:	f53f af12 	bmi.w	800dcc4 <_vfiprintf_r+0x4c>
 800dea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dea2:	e711      	b.n	800dcc8 <_vfiprintf_r+0x50>
 800dea4:	ab03      	add	r3, sp, #12
 800dea6:	9300      	str	r3, [sp, #0]
 800dea8:	462a      	mov	r2, r5
 800deaa:	4b09      	ldr	r3, [pc, #36]	; (800ded0 <_vfiprintf_r+0x258>)
 800deac:	a904      	add	r1, sp, #16
 800deae:	4630      	mov	r0, r6
 800deb0:	f7fd fddc 	bl	800ba6c <_printf_i>
 800deb4:	e7e4      	b.n	800de80 <_vfiprintf_r+0x208>
 800deb6:	bf00      	nop
 800deb8:	0801c6b8 	.word	0x0801c6b8
 800debc:	0801c6d8 	.word	0x0801c6d8
 800dec0:	0801c698 	.word	0x0801c698
 800dec4:	0801c854 	.word	0x0801c854
 800dec8:	0801c85e 	.word	0x0801c85e
 800decc:	0800b525 	.word	0x0800b525
 800ded0:	0800dc53 	.word	0x0800dc53
 800ded4:	0801c85a 	.word	0x0801c85a

0800ded8 <_sbrk_r>:
 800ded8:	b538      	push	{r3, r4, r5, lr}
 800deda:	4d06      	ldr	r5, [pc, #24]	; (800def4 <_sbrk_r+0x1c>)
 800dedc:	2300      	movs	r3, #0
 800dede:	4604      	mov	r4, r0
 800dee0:	4608      	mov	r0, r1
 800dee2:	602b      	str	r3, [r5, #0]
 800dee4:	f7f8 fd48 	bl	8006978 <_sbrk>
 800dee8:	1c43      	adds	r3, r0, #1
 800deea:	d102      	bne.n	800def2 <_sbrk_r+0x1a>
 800deec:	682b      	ldr	r3, [r5, #0]
 800deee:	b103      	cbz	r3, 800def2 <_sbrk_r+0x1a>
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	bd38      	pop	{r3, r4, r5, pc}
 800def4:	200005f0 	.word	0x200005f0

0800def8 <__sread>:
 800def8:	b510      	push	{r4, lr}
 800defa:	460c      	mov	r4, r1
 800defc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df00:	f000 f922 	bl	800e148 <_read_r>
 800df04:	2800      	cmp	r0, #0
 800df06:	bfab      	itete	ge
 800df08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df0a:	89a3      	ldrhlt	r3, [r4, #12]
 800df0c:	181b      	addge	r3, r3, r0
 800df0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df12:	bfac      	ite	ge
 800df14:	6563      	strge	r3, [r4, #84]	; 0x54
 800df16:	81a3      	strhlt	r3, [r4, #12]
 800df18:	bd10      	pop	{r4, pc}

0800df1a <__swrite>:
 800df1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df1e:	461f      	mov	r7, r3
 800df20:	898b      	ldrh	r3, [r1, #12]
 800df22:	05db      	lsls	r3, r3, #23
 800df24:	4605      	mov	r5, r0
 800df26:	460c      	mov	r4, r1
 800df28:	4616      	mov	r6, r2
 800df2a:	d505      	bpl.n	800df38 <__swrite+0x1e>
 800df2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df30:	2302      	movs	r3, #2
 800df32:	2200      	movs	r2, #0
 800df34:	f000 f898 	bl	800e068 <_lseek_r>
 800df38:	89a3      	ldrh	r3, [r4, #12]
 800df3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df42:	81a3      	strh	r3, [r4, #12]
 800df44:	4632      	mov	r2, r6
 800df46:	463b      	mov	r3, r7
 800df48:	4628      	mov	r0, r5
 800df4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df4e:	f000 b817 	b.w	800df80 <_write_r>

0800df52 <__sseek>:
 800df52:	b510      	push	{r4, lr}
 800df54:	460c      	mov	r4, r1
 800df56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df5a:	f000 f885 	bl	800e068 <_lseek_r>
 800df5e:	1c43      	adds	r3, r0, #1
 800df60:	89a3      	ldrh	r3, [r4, #12]
 800df62:	bf15      	itete	ne
 800df64:	6560      	strne	r0, [r4, #84]	; 0x54
 800df66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df6e:	81a3      	strheq	r3, [r4, #12]
 800df70:	bf18      	it	ne
 800df72:	81a3      	strhne	r3, [r4, #12]
 800df74:	bd10      	pop	{r4, pc}

0800df76 <__sclose>:
 800df76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df7a:	f000 b831 	b.w	800dfe0 <_close_r>
	...

0800df80 <_write_r>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	4d07      	ldr	r5, [pc, #28]	; (800dfa0 <_write_r+0x20>)
 800df84:	4604      	mov	r4, r0
 800df86:	4608      	mov	r0, r1
 800df88:	4611      	mov	r1, r2
 800df8a:	2200      	movs	r2, #0
 800df8c:	602a      	str	r2, [r5, #0]
 800df8e:	461a      	mov	r2, r3
 800df90:	f7f8 fca1 	bl	80068d6 <_write>
 800df94:	1c43      	adds	r3, r0, #1
 800df96:	d102      	bne.n	800df9e <_write_r+0x1e>
 800df98:	682b      	ldr	r3, [r5, #0]
 800df9a:	b103      	cbz	r3, 800df9e <_write_r+0x1e>
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	bd38      	pop	{r3, r4, r5, pc}
 800dfa0:	200005f0 	.word	0x200005f0

0800dfa4 <__assert_func>:
 800dfa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfa6:	4614      	mov	r4, r2
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	4b09      	ldr	r3, [pc, #36]	; (800dfd0 <__assert_func+0x2c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4605      	mov	r5, r0
 800dfb0:	68d8      	ldr	r0, [r3, #12]
 800dfb2:	b14c      	cbz	r4, 800dfc8 <__assert_func+0x24>
 800dfb4:	4b07      	ldr	r3, [pc, #28]	; (800dfd4 <__assert_func+0x30>)
 800dfb6:	9100      	str	r1, [sp, #0]
 800dfb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dfbc:	4906      	ldr	r1, [pc, #24]	; (800dfd8 <__assert_func+0x34>)
 800dfbe:	462b      	mov	r3, r5
 800dfc0:	f000 f81e 	bl	800e000 <fiprintf>
 800dfc4:	f000 f8df 	bl	800e186 <abort>
 800dfc8:	4b04      	ldr	r3, [pc, #16]	; (800dfdc <__assert_func+0x38>)
 800dfca:	461c      	mov	r4, r3
 800dfcc:	e7f3      	b.n	800dfb6 <__assert_func+0x12>
 800dfce:	bf00      	nop
 800dfd0:	20000014 	.word	0x20000014
 800dfd4:	0801c865 	.word	0x0801c865
 800dfd8:	0801c872 	.word	0x0801c872
 800dfdc:	0801c8a0 	.word	0x0801c8a0

0800dfe0 <_close_r>:
 800dfe0:	b538      	push	{r3, r4, r5, lr}
 800dfe2:	4d06      	ldr	r5, [pc, #24]	; (800dffc <_close_r+0x1c>)
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	4608      	mov	r0, r1
 800dfea:	602b      	str	r3, [r5, #0]
 800dfec:	f7f8 fc8f 	bl	800690e <_close>
 800dff0:	1c43      	adds	r3, r0, #1
 800dff2:	d102      	bne.n	800dffa <_close_r+0x1a>
 800dff4:	682b      	ldr	r3, [r5, #0]
 800dff6:	b103      	cbz	r3, 800dffa <_close_r+0x1a>
 800dff8:	6023      	str	r3, [r4, #0]
 800dffa:	bd38      	pop	{r3, r4, r5, pc}
 800dffc:	200005f0 	.word	0x200005f0

0800e000 <fiprintf>:
 800e000:	b40e      	push	{r1, r2, r3}
 800e002:	b503      	push	{r0, r1, lr}
 800e004:	4601      	mov	r1, r0
 800e006:	ab03      	add	r3, sp, #12
 800e008:	4805      	ldr	r0, [pc, #20]	; (800e020 <fiprintf+0x20>)
 800e00a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e00e:	6800      	ldr	r0, [r0, #0]
 800e010:	9301      	str	r3, [sp, #4]
 800e012:	f7ff fe31 	bl	800dc78 <_vfiprintf_r>
 800e016:	b002      	add	sp, #8
 800e018:	f85d eb04 	ldr.w	lr, [sp], #4
 800e01c:	b003      	add	sp, #12
 800e01e:	4770      	bx	lr
 800e020:	20000014 	.word	0x20000014

0800e024 <_fstat_r>:
 800e024:	b538      	push	{r3, r4, r5, lr}
 800e026:	4d07      	ldr	r5, [pc, #28]	; (800e044 <_fstat_r+0x20>)
 800e028:	2300      	movs	r3, #0
 800e02a:	4604      	mov	r4, r0
 800e02c:	4608      	mov	r0, r1
 800e02e:	4611      	mov	r1, r2
 800e030:	602b      	str	r3, [r5, #0]
 800e032:	f7f8 fc78 	bl	8006926 <_fstat>
 800e036:	1c43      	adds	r3, r0, #1
 800e038:	d102      	bne.n	800e040 <_fstat_r+0x1c>
 800e03a:	682b      	ldr	r3, [r5, #0]
 800e03c:	b103      	cbz	r3, 800e040 <_fstat_r+0x1c>
 800e03e:	6023      	str	r3, [r4, #0]
 800e040:	bd38      	pop	{r3, r4, r5, pc}
 800e042:	bf00      	nop
 800e044:	200005f0 	.word	0x200005f0

0800e048 <_isatty_r>:
 800e048:	b538      	push	{r3, r4, r5, lr}
 800e04a:	4d06      	ldr	r5, [pc, #24]	; (800e064 <_isatty_r+0x1c>)
 800e04c:	2300      	movs	r3, #0
 800e04e:	4604      	mov	r4, r0
 800e050:	4608      	mov	r0, r1
 800e052:	602b      	str	r3, [r5, #0]
 800e054:	f7f8 fc77 	bl	8006946 <_isatty>
 800e058:	1c43      	adds	r3, r0, #1
 800e05a:	d102      	bne.n	800e062 <_isatty_r+0x1a>
 800e05c:	682b      	ldr	r3, [r5, #0]
 800e05e:	b103      	cbz	r3, 800e062 <_isatty_r+0x1a>
 800e060:	6023      	str	r3, [r4, #0]
 800e062:	bd38      	pop	{r3, r4, r5, pc}
 800e064:	200005f0 	.word	0x200005f0

0800e068 <_lseek_r>:
 800e068:	b538      	push	{r3, r4, r5, lr}
 800e06a:	4d07      	ldr	r5, [pc, #28]	; (800e088 <_lseek_r+0x20>)
 800e06c:	4604      	mov	r4, r0
 800e06e:	4608      	mov	r0, r1
 800e070:	4611      	mov	r1, r2
 800e072:	2200      	movs	r2, #0
 800e074:	602a      	str	r2, [r5, #0]
 800e076:	461a      	mov	r2, r3
 800e078:	f7f8 fc70 	bl	800695c <_lseek>
 800e07c:	1c43      	adds	r3, r0, #1
 800e07e:	d102      	bne.n	800e086 <_lseek_r+0x1e>
 800e080:	682b      	ldr	r3, [r5, #0]
 800e082:	b103      	cbz	r3, 800e086 <_lseek_r+0x1e>
 800e084:	6023      	str	r3, [r4, #0]
 800e086:	bd38      	pop	{r3, r4, r5, pc}
 800e088:	200005f0 	.word	0x200005f0

0800e08c <__ascii_mbtowc>:
 800e08c:	b082      	sub	sp, #8
 800e08e:	b901      	cbnz	r1, 800e092 <__ascii_mbtowc+0x6>
 800e090:	a901      	add	r1, sp, #4
 800e092:	b142      	cbz	r2, 800e0a6 <__ascii_mbtowc+0x1a>
 800e094:	b14b      	cbz	r3, 800e0aa <__ascii_mbtowc+0x1e>
 800e096:	7813      	ldrb	r3, [r2, #0]
 800e098:	600b      	str	r3, [r1, #0]
 800e09a:	7812      	ldrb	r2, [r2, #0]
 800e09c:	1e10      	subs	r0, r2, #0
 800e09e:	bf18      	it	ne
 800e0a0:	2001      	movne	r0, #1
 800e0a2:	b002      	add	sp, #8
 800e0a4:	4770      	bx	lr
 800e0a6:	4610      	mov	r0, r2
 800e0a8:	e7fb      	b.n	800e0a2 <__ascii_mbtowc+0x16>
 800e0aa:	f06f 0001 	mvn.w	r0, #1
 800e0ae:	e7f8      	b.n	800e0a2 <__ascii_mbtowc+0x16>

0800e0b0 <memmove>:
 800e0b0:	4288      	cmp	r0, r1
 800e0b2:	b510      	push	{r4, lr}
 800e0b4:	eb01 0402 	add.w	r4, r1, r2
 800e0b8:	d902      	bls.n	800e0c0 <memmove+0x10>
 800e0ba:	4284      	cmp	r4, r0
 800e0bc:	4623      	mov	r3, r4
 800e0be:	d807      	bhi.n	800e0d0 <memmove+0x20>
 800e0c0:	1e43      	subs	r3, r0, #1
 800e0c2:	42a1      	cmp	r1, r4
 800e0c4:	d008      	beq.n	800e0d8 <memmove+0x28>
 800e0c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0ce:	e7f8      	b.n	800e0c2 <memmove+0x12>
 800e0d0:	4402      	add	r2, r0
 800e0d2:	4601      	mov	r1, r0
 800e0d4:	428a      	cmp	r2, r1
 800e0d6:	d100      	bne.n	800e0da <memmove+0x2a>
 800e0d8:	bd10      	pop	{r4, pc}
 800e0da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0e2:	e7f7      	b.n	800e0d4 <memmove+0x24>

0800e0e4 <__malloc_lock>:
 800e0e4:	4801      	ldr	r0, [pc, #4]	; (800e0ec <__malloc_lock+0x8>)
 800e0e6:	f7fe bf8c 	b.w	800d002 <__retarget_lock_acquire_recursive>
 800e0ea:	bf00      	nop
 800e0ec:	200005e8 	.word	0x200005e8

0800e0f0 <__malloc_unlock>:
 800e0f0:	4801      	ldr	r0, [pc, #4]	; (800e0f8 <__malloc_unlock+0x8>)
 800e0f2:	f7fe bf87 	b.w	800d004 <__retarget_lock_release_recursive>
 800e0f6:	bf00      	nop
 800e0f8:	200005e8 	.word	0x200005e8

0800e0fc <_realloc_r>:
 800e0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0fe:	4607      	mov	r7, r0
 800e100:	4614      	mov	r4, r2
 800e102:	460e      	mov	r6, r1
 800e104:	b921      	cbnz	r1, 800e110 <_realloc_r+0x14>
 800e106:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e10a:	4611      	mov	r1, r2
 800e10c:	f7ff bbd4 	b.w	800d8b8 <_malloc_r>
 800e110:	b922      	cbnz	r2, 800e11c <_realloc_r+0x20>
 800e112:	f7ff fb81 	bl	800d818 <_free_r>
 800e116:	4625      	mov	r5, r4
 800e118:	4628      	mov	r0, r5
 800e11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e11c:	f000 f83a 	bl	800e194 <_malloc_usable_size_r>
 800e120:	42a0      	cmp	r0, r4
 800e122:	d20f      	bcs.n	800e144 <_realloc_r+0x48>
 800e124:	4621      	mov	r1, r4
 800e126:	4638      	mov	r0, r7
 800e128:	f7ff fbc6 	bl	800d8b8 <_malloc_r>
 800e12c:	4605      	mov	r5, r0
 800e12e:	2800      	cmp	r0, #0
 800e130:	d0f2      	beq.n	800e118 <_realloc_r+0x1c>
 800e132:	4631      	mov	r1, r6
 800e134:	4622      	mov	r2, r4
 800e136:	f7fe ffd3 	bl	800d0e0 <memcpy>
 800e13a:	4631      	mov	r1, r6
 800e13c:	4638      	mov	r0, r7
 800e13e:	f7ff fb6b 	bl	800d818 <_free_r>
 800e142:	e7e9      	b.n	800e118 <_realloc_r+0x1c>
 800e144:	4635      	mov	r5, r6
 800e146:	e7e7      	b.n	800e118 <_realloc_r+0x1c>

0800e148 <_read_r>:
 800e148:	b538      	push	{r3, r4, r5, lr}
 800e14a:	4d07      	ldr	r5, [pc, #28]	; (800e168 <_read_r+0x20>)
 800e14c:	4604      	mov	r4, r0
 800e14e:	4608      	mov	r0, r1
 800e150:	4611      	mov	r1, r2
 800e152:	2200      	movs	r2, #0
 800e154:	602a      	str	r2, [r5, #0]
 800e156:	461a      	mov	r2, r3
 800e158:	f7f8 fba0 	bl	800689c <_read>
 800e15c:	1c43      	adds	r3, r0, #1
 800e15e:	d102      	bne.n	800e166 <_read_r+0x1e>
 800e160:	682b      	ldr	r3, [r5, #0]
 800e162:	b103      	cbz	r3, 800e166 <_read_r+0x1e>
 800e164:	6023      	str	r3, [r4, #0]
 800e166:	bd38      	pop	{r3, r4, r5, pc}
 800e168:	200005f0 	.word	0x200005f0

0800e16c <__ascii_wctomb>:
 800e16c:	b149      	cbz	r1, 800e182 <__ascii_wctomb+0x16>
 800e16e:	2aff      	cmp	r2, #255	; 0xff
 800e170:	bf85      	ittet	hi
 800e172:	238a      	movhi	r3, #138	; 0x8a
 800e174:	6003      	strhi	r3, [r0, #0]
 800e176:	700a      	strbls	r2, [r1, #0]
 800e178:	f04f 30ff 	movhi.w	r0, #4294967295
 800e17c:	bf98      	it	ls
 800e17e:	2001      	movls	r0, #1
 800e180:	4770      	bx	lr
 800e182:	4608      	mov	r0, r1
 800e184:	4770      	bx	lr

0800e186 <abort>:
 800e186:	b508      	push	{r3, lr}
 800e188:	2006      	movs	r0, #6
 800e18a:	f000 f833 	bl	800e1f4 <raise>
 800e18e:	2001      	movs	r0, #1
 800e190:	f7f8 fb7a 	bl	8006888 <_exit>

0800e194 <_malloc_usable_size_r>:
 800e194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e198:	1f18      	subs	r0, r3, #4
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	bfbc      	itt	lt
 800e19e:	580b      	ldrlt	r3, [r1, r0]
 800e1a0:	18c0      	addlt	r0, r0, r3
 800e1a2:	4770      	bx	lr

0800e1a4 <_raise_r>:
 800e1a4:	291f      	cmp	r1, #31
 800e1a6:	b538      	push	{r3, r4, r5, lr}
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	460d      	mov	r5, r1
 800e1ac:	d904      	bls.n	800e1b8 <_raise_r+0x14>
 800e1ae:	2316      	movs	r3, #22
 800e1b0:	6003      	str	r3, [r0, #0]
 800e1b2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b6:	bd38      	pop	{r3, r4, r5, pc}
 800e1b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e1ba:	b112      	cbz	r2, 800e1c2 <_raise_r+0x1e>
 800e1bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1c0:	b94b      	cbnz	r3, 800e1d6 <_raise_r+0x32>
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f000 f830 	bl	800e228 <_getpid_r>
 800e1c8:	462a      	mov	r2, r5
 800e1ca:	4601      	mov	r1, r0
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1d2:	f000 b817 	b.w	800e204 <_kill_r>
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d00a      	beq.n	800e1f0 <_raise_r+0x4c>
 800e1da:	1c59      	adds	r1, r3, #1
 800e1dc:	d103      	bne.n	800e1e6 <_raise_r+0x42>
 800e1de:	2316      	movs	r3, #22
 800e1e0:	6003      	str	r3, [r0, #0]
 800e1e2:	2001      	movs	r0, #1
 800e1e4:	e7e7      	b.n	800e1b6 <_raise_r+0x12>
 800e1e6:	2400      	movs	r4, #0
 800e1e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e1ec:	4628      	mov	r0, r5
 800e1ee:	4798      	blx	r3
 800e1f0:	2000      	movs	r0, #0
 800e1f2:	e7e0      	b.n	800e1b6 <_raise_r+0x12>

0800e1f4 <raise>:
 800e1f4:	4b02      	ldr	r3, [pc, #8]	; (800e200 <raise+0xc>)
 800e1f6:	4601      	mov	r1, r0
 800e1f8:	6818      	ldr	r0, [r3, #0]
 800e1fa:	f7ff bfd3 	b.w	800e1a4 <_raise_r>
 800e1fe:	bf00      	nop
 800e200:	20000014 	.word	0x20000014

0800e204 <_kill_r>:
 800e204:	b538      	push	{r3, r4, r5, lr}
 800e206:	4d07      	ldr	r5, [pc, #28]	; (800e224 <_kill_r+0x20>)
 800e208:	2300      	movs	r3, #0
 800e20a:	4604      	mov	r4, r0
 800e20c:	4608      	mov	r0, r1
 800e20e:	4611      	mov	r1, r2
 800e210:	602b      	str	r3, [r5, #0]
 800e212:	f7f8 fb29 	bl	8006868 <_kill>
 800e216:	1c43      	adds	r3, r0, #1
 800e218:	d102      	bne.n	800e220 <_kill_r+0x1c>
 800e21a:	682b      	ldr	r3, [r5, #0]
 800e21c:	b103      	cbz	r3, 800e220 <_kill_r+0x1c>
 800e21e:	6023      	str	r3, [r4, #0]
 800e220:	bd38      	pop	{r3, r4, r5, pc}
 800e222:	bf00      	nop
 800e224:	200005f0 	.word	0x200005f0

0800e228 <_getpid_r>:
 800e228:	f7f8 bb16 	b.w	8006858 <_getpid>
 800e22c:	0000      	movs	r0, r0
	...

0800e230 <cos>:
 800e230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e232:	ec53 2b10 	vmov	r2, r3, d0
 800e236:	4824      	ldr	r0, [pc, #144]	; (800e2c8 <cos+0x98>)
 800e238:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e23c:	4281      	cmp	r1, r0
 800e23e:	dc06      	bgt.n	800e24e <cos+0x1e>
 800e240:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800e2c0 <cos+0x90>
 800e244:	f000 fc44 	bl	800ead0 <__kernel_cos>
 800e248:	ec51 0b10 	vmov	r0, r1, d0
 800e24c:	e007      	b.n	800e25e <cos+0x2e>
 800e24e:	481f      	ldr	r0, [pc, #124]	; (800e2cc <cos+0x9c>)
 800e250:	4281      	cmp	r1, r0
 800e252:	dd09      	ble.n	800e268 <cos+0x38>
 800e254:	ee10 0a10 	vmov	r0, s0
 800e258:	4619      	mov	r1, r3
 800e25a:	f7f2 f815 	bl	8000288 <__aeabi_dsub>
 800e25e:	ec41 0b10 	vmov	d0, r0, r1
 800e262:	b005      	add	sp, #20
 800e264:	f85d fb04 	ldr.w	pc, [sp], #4
 800e268:	4668      	mov	r0, sp
 800e26a:	f000 f96d 	bl	800e548 <__ieee754_rem_pio2>
 800e26e:	f000 0003 	and.w	r0, r0, #3
 800e272:	2801      	cmp	r0, #1
 800e274:	d007      	beq.n	800e286 <cos+0x56>
 800e276:	2802      	cmp	r0, #2
 800e278:	d012      	beq.n	800e2a0 <cos+0x70>
 800e27a:	b9c0      	cbnz	r0, 800e2ae <cos+0x7e>
 800e27c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e280:	ed9d 0b00 	vldr	d0, [sp]
 800e284:	e7de      	b.n	800e244 <cos+0x14>
 800e286:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e28a:	ed9d 0b00 	vldr	d0, [sp]
 800e28e:	f001 f827 	bl	800f2e0 <__kernel_sin>
 800e292:	ec53 2b10 	vmov	r2, r3, d0
 800e296:	ee10 0a10 	vmov	r0, s0
 800e29a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e29e:	e7de      	b.n	800e25e <cos+0x2e>
 800e2a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2a4:	ed9d 0b00 	vldr	d0, [sp]
 800e2a8:	f000 fc12 	bl	800ead0 <__kernel_cos>
 800e2ac:	e7f1      	b.n	800e292 <cos+0x62>
 800e2ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2b2:	ed9d 0b00 	vldr	d0, [sp]
 800e2b6:	2001      	movs	r0, #1
 800e2b8:	f001 f812 	bl	800f2e0 <__kernel_sin>
 800e2bc:	e7c4      	b.n	800e248 <cos+0x18>
 800e2be:	bf00      	nop
	...
 800e2c8:	3fe921fb 	.word	0x3fe921fb
 800e2cc:	7fefffff 	.word	0x7fefffff

0800e2d0 <fabs>:
 800e2d0:	ec51 0b10 	vmov	r0, r1, d0
 800e2d4:	ee10 2a10 	vmov	r2, s0
 800e2d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e2dc:	ec43 2b10 	vmov	d0, r2, r3
 800e2e0:	4770      	bx	lr
 800e2e2:	0000      	movs	r0, r0
 800e2e4:	0000      	movs	r0, r0
	...

0800e2e8 <floor>:
 800e2e8:	ec51 0b10 	vmov	r0, r1, d0
 800e2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e2f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e2f8:	2e13      	cmp	r6, #19
 800e2fa:	ee10 5a10 	vmov	r5, s0
 800e2fe:	ee10 8a10 	vmov	r8, s0
 800e302:	460c      	mov	r4, r1
 800e304:	dc32      	bgt.n	800e36c <floor+0x84>
 800e306:	2e00      	cmp	r6, #0
 800e308:	da14      	bge.n	800e334 <floor+0x4c>
 800e30a:	a333      	add	r3, pc, #204	; (adr r3, 800e3d8 <floor+0xf0>)
 800e30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e310:	f7f1 ffbc 	bl	800028c <__adddf3>
 800e314:	2200      	movs	r2, #0
 800e316:	2300      	movs	r3, #0
 800e318:	f7f2 fbfe 	bl	8000b18 <__aeabi_dcmpgt>
 800e31c:	b138      	cbz	r0, 800e32e <floor+0x46>
 800e31e:	2c00      	cmp	r4, #0
 800e320:	da57      	bge.n	800e3d2 <floor+0xea>
 800e322:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e326:	431d      	orrs	r5, r3
 800e328:	d001      	beq.n	800e32e <floor+0x46>
 800e32a:	4c2d      	ldr	r4, [pc, #180]	; (800e3e0 <floor+0xf8>)
 800e32c:	2500      	movs	r5, #0
 800e32e:	4621      	mov	r1, r4
 800e330:	4628      	mov	r0, r5
 800e332:	e025      	b.n	800e380 <floor+0x98>
 800e334:	4f2b      	ldr	r7, [pc, #172]	; (800e3e4 <floor+0xfc>)
 800e336:	4137      	asrs	r7, r6
 800e338:	ea01 0307 	and.w	r3, r1, r7
 800e33c:	4303      	orrs	r3, r0
 800e33e:	d01f      	beq.n	800e380 <floor+0x98>
 800e340:	a325      	add	r3, pc, #148	; (adr r3, 800e3d8 <floor+0xf0>)
 800e342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e346:	f7f1 ffa1 	bl	800028c <__adddf3>
 800e34a:	2200      	movs	r2, #0
 800e34c:	2300      	movs	r3, #0
 800e34e:	f7f2 fbe3 	bl	8000b18 <__aeabi_dcmpgt>
 800e352:	2800      	cmp	r0, #0
 800e354:	d0eb      	beq.n	800e32e <floor+0x46>
 800e356:	2c00      	cmp	r4, #0
 800e358:	bfbe      	ittt	lt
 800e35a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e35e:	fa43 f606 	asrlt.w	r6, r3, r6
 800e362:	19a4      	addlt	r4, r4, r6
 800e364:	ea24 0407 	bic.w	r4, r4, r7
 800e368:	2500      	movs	r5, #0
 800e36a:	e7e0      	b.n	800e32e <floor+0x46>
 800e36c:	2e33      	cmp	r6, #51	; 0x33
 800e36e:	dd0b      	ble.n	800e388 <floor+0xa0>
 800e370:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e374:	d104      	bne.n	800e380 <floor+0x98>
 800e376:	ee10 2a10 	vmov	r2, s0
 800e37a:	460b      	mov	r3, r1
 800e37c:	f7f1 ff86 	bl	800028c <__adddf3>
 800e380:	ec41 0b10 	vmov	d0, r0, r1
 800e384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e388:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e38c:	f04f 33ff 	mov.w	r3, #4294967295
 800e390:	fa23 f707 	lsr.w	r7, r3, r7
 800e394:	4207      	tst	r7, r0
 800e396:	d0f3      	beq.n	800e380 <floor+0x98>
 800e398:	a30f      	add	r3, pc, #60	; (adr r3, 800e3d8 <floor+0xf0>)
 800e39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39e:	f7f1 ff75 	bl	800028c <__adddf3>
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	f7f2 fbb7 	bl	8000b18 <__aeabi_dcmpgt>
 800e3aa:	2800      	cmp	r0, #0
 800e3ac:	d0bf      	beq.n	800e32e <floor+0x46>
 800e3ae:	2c00      	cmp	r4, #0
 800e3b0:	da02      	bge.n	800e3b8 <floor+0xd0>
 800e3b2:	2e14      	cmp	r6, #20
 800e3b4:	d103      	bne.n	800e3be <floor+0xd6>
 800e3b6:	3401      	adds	r4, #1
 800e3b8:	ea25 0507 	bic.w	r5, r5, r7
 800e3bc:	e7b7      	b.n	800e32e <floor+0x46>
 800e3be:	2301      	movs	r3, #1
 800e3c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e3c4:	fa03 f606 	lsl.w	r6, r3, r6
 800e3c8:	4435      	add	r5, r6
 800e3ca:	4545      	cmp	r5, r8
 800e3cc:	bf38      	it	cc
 800e3ce:	18e4      	addcc	r4, r4, r3
 800e3d0:	e7f2      	b.n	800e3b8 <floor+0xd0>
 800e3d2:	2500      	movs	r5, #0
 800e3d4:	462c      	mov	r4, r5
 800e3d6:	e7aa      	b.n	800e32e <floor+0x46>
 800e3d8:	8800759c 	.word	0x8800759c
 800e3dc:	7e37e43c 	.word	0x7e37e43c
 800e3e0:	bff00000 	.word	0xbff00000
 800e3e4:	000fffff 	.word	0x000fffff

0800e3e8 <sin>:
 800e3e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3ea:	ec53 2b10 	vmov	r2, r3, d0
 800e3ee:	4826      	ldr	r0, [pc, #152]	; (800e488 <sin+0xa0>)
 800e3f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e3f4:	4281      	cmp	r1, r0
 800e3f6:	dc07      	bgt.n	800e408 <sin+0x20>
 800e3f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800e480 <sin+0x98>
 800e3fc:	2000      	movs	r0, #0
 800e3fe:	f000 ff6f 	bl	800f2e0 <__kernel_sin>
 800e402:	ec51 0b10 	vmov	r0, r1, d0
 800e406:	e007      	b.n	800e418 <sin+0x30>
 800e408:	4820      	ldr	r0, [pc, #128]	; (800e48c <sin+0xa4>)
 800e40a:	4281      	cmp	r1, r0
 800e40c:	dd09      	ble.n	800e422 <sin+0x3a>
 800e40e:	ee10 0a10 	vmov	r0, s0
 800e412:	4619      	mov	r1, r3
 800e414:	f7f1 ff38 	bl	8000288 <__aeabi_dsub>
 800e418:	ec41 0b10 	vmov	d0, r0, r1
 800e41c:	b005      	add	sp, #20
 800e41e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e422:	4668      	mov	r0, sp
 800e424:	f000 f890 	bl	800e548 <__ieee754_rem_pio2>
 800e428:	f000 0003 	and.w	r0, r0, #3
 800e42c:	2801      	cmp	r0, #1
 800e42e:	d008      	beq.n	800e442 <sin+0x5a>
 800e430:	2802      	cmp	r0, #2
 800e432:	d00d      	beq.n	800e450 <sin+0x68>
 800e434:	b9d0      	cbnz	r0, 800e46c <sin+0x84>
 800e436:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e43a:	ed9d 0b00 	vldr	d0, [sp]
 800e43e:	2001      	movs	r0, #1
 800e440:	e7dd      	b.n	800e3fe <sin+0x16>
 800e442:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e446:	ed9d 0b00 	vldr	d0, [sp]
 800e44a:	f000 fb41 	bl	800ead0 <__kernel_cos>
 800e44e:	e7d8      	b.n	800e402 <sin+0x1a>
 800e450:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e454:	ed9d 0b00 	vldr	d0, [sp]
 800e458:	2001      	movs	r0, #1
 800e45a:	f000 ff41 	bl	800f2e0 <__kernel_sin>
 800e45e:	ec53 2b10 	vmov	r2, r3, d0
 800e462:	ee10 0a10 	vmov	r0, s0
 800e466:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e46a:	e7d5      	b.n	800e418 <sin+0x30>
 800e46c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e470:	ed9d 0b00 	vldr	d0, [sp]
 800e474:	f000 fb2c 	bl	800ead0 <__kernel_cos>
 800e478:	e7f1      	b.n	800e45e <sin+0x76>
 800e47a:	bf00      	nop
 800e47c:	f3af 8000 	nop.w
	...
 800e488:	3fe921fb 	.word	0x3fe921fb
 800e48c:	7fefffff 	.word	0x7fefffff

0800e490 <sqrt>:
 800e490:	b538      	push	{r3, r4, r5, lr}
 800e492:	ed2d 8b02 	vpush	{d8}
 800e496:	ec55 4b10 	vmov	r4, r5, d0
 800e49a:	f000 fa5f 	bl	800e95c <__ieee754_sqrt>
 800e49e:	4b15      	ldr	r3, [pc, #84]	; (800e4f4 <sqrt+0x64>)
 800e4a0:	eeb0 8a40 	vmov.f32	s16, s0
 800e4a4:	eef0 8a60 	vmov.f32	s17, s1
 800e4a8:	f993 3000 	ldrsb.w	r3, [r3]
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	d019      	beq.n	800e4e4 <sqrt+0x54>
 800e4b0:	4622      	mov	r2, r4
 800e4b2:	462b      	mov	r3, r5
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	4629      	mov	r1, r5
 800e4b8:	f7f2 fb38 	bl	8000b2c <__aeabi_dcmpun>
 800e4bc:	b990      	cbnz	r0, 800e4e4 <sqrt+0x54>
 800e4be:	2200      	movs	r2, #0
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	4629      	mov	r1, r5
 800e4c6:	f7f2 fb09 	bl	8000adc <__aeabi_dcmplt>
 800e4ca:	b158      	cbz	r0, 800e4e4 <sqrt+0x54>
 800e4cc:	f7fc ff58 	bl	800b380 <__errno>
 800e4d0:	2321      	movs	r3, #33	; 0x21
 800e4d2:	6003      	str	r3, [r0, #0]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	4610      	mov	r0, r2
 800e4da:	4619      	mov	r1, r3
 800e4dc:	f7f2 f9b6 	bl	800084c <__aeabi_ddiv>
 800e4e0:	ec41 0b18 	vmov	d8, r0, r1
 800e4e4:	eeb0 0a48 	vmov.f32	s0, s16
 800e4e8:	eef0 0a68 	vmov.f32	s1, s17
 800e4ec:	ecbd 8b02 	vpop	{d8}
 800e4f0:	bd38      	pop	{r3, r4, r5, pc}
 800e4f2:	bf00      	nop
 800e4f4:	200001e4 	.word	0x200001e4

0800e4f8 <sqrtf>:
 800e4f8:	b508      	push	{r3, lr}
 800e4fa:	ed2d 8b02 	vpush	{d8}
 800e4fe:	eeb0 8a40 	vmov.f32	s16, s0
 800e502:	f000 fadf 	bl	800eac4 <__ieee754_sqrtf>
 800e506:	4b0d      	ldr	r3, [pc, #52]	; (800e53c <sqrtf+0x44>)
 800e508:	f993 3000 	ldrsb.w	r3, [r3]
 800e50c:	3301      	adds	r3, #1
 800e50e:	d011      	beq.n	800e534 <sqrtf+0x3c>
 800e510:	eeb4 8a48 	vcmp.f32	s16, s16
 800e514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e518:	d60c      	bvs.n	800e534 <sqrtf+0x3c>
 800e51a:	eddf 8a09 	vldr	s17, [pc, #36]	; 800e540 <sqrtf+0x48>
 800e51e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e526:	d505      	bpl.n	800e534 <sqrtf+0x3c>
 800e528:	f7fc ff2a 	bl	800b380 <__errno>
 800e52c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e530:	2321      	movs	r3, #33	; 0x21
 800e532:	6003      	str	r3, [r0, #0]
 800e534:	ecbd 8b02 	vpop	{d8}
 800e538:	bd08      	pop	{r3, pc}
 800e53a:	bf00      	nop
 800e53c:	200001e4 	.word	0x200001e4
	...

0800e548 <__ieee754_rem_pio2>:
 800e548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e54c:	ed2d 8b02 	vpush	{d8}
 800e550:	ec55 4b10 	vmov	r4, r5, d0
 800e554:	4bca      	ldr	r3, [pc, #808]	; (800e880 <__ieee754_rem_pio2+0x338>)
 800e556:	b08b      	sub	sp, #44	; 0x2c
 800e558:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e55c:	4598      	cmp	r8, r3
 800e55e:	4682      	mov	sl, r0
 800e560:	9502      	str	r5, [sp, #8]
 800e562:	dc08      	bgt.n	800e576 <__ieee754_rem_pio2+0x2e>
 800e564:	2200      	movs	r2, #0
 800e566:	2300      	movs	r3, #0
 800e568:	ed80 0b00 	vstr	d0, [r0]
 800e56c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e570:	f04f 0b00 	mov.w	fp, #0
 800e574:	e028      	b.n	800e5c8 <__ieee754_rem_pio2+0x80>
 800e576:	4bc3      	ldr	r3, [pc, #780]	; (800e884 <__ieee754_rem_pio2+0x33c>)
 800e578:	4598      	cmp	r8, r3
 800e57a:	dc78      	bgt.n	800e66e <__ieee754_rem_pio2+0x126>
 800e57c:	9b02      	ldr	r3, [sp, #8]
 800e57e:	4ec2      	ldr	r6, [pc, #776]	; (800e888 <__ieee754_rem_pio2+0x340>)
 800e580:	2b00      	cmp	r3, #0
 800e582:	ee10 0a10 	vmov	r0, s0
 800e586:	a3b0      	add	r3, pc, #704	; (adr r3, 800e848 <__ieee754_rem_pio2+0x300>)
 800e588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58c:	4629      	mov	r1, r5
 800e58e:	dd39      	ble.n	800e604 <__ieee754_rem_pio2+0xbc>
 800e590:	f7f1 fe7a 	bl	8000288 <__aeabi_dsub>
 800e594:	45b0      	cmp	r8, r6
 800e596:	4604      	mov	r4, r0
 800e598:	460d      	mov	r5, r1
 800e59a:	d01b      	beq.n	800e5d4 <__ieee754_rem_pio2+0x8c>
 800e59c:	a3ac      	add	r3, pc, #688	; (adr r3, 800e850 <__ieee754_rem_pio2+0x308>)
 800e59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a2:	f7f1 fe71 	bl	8000288 <__aeabi_dsub>
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	e9ca 2300 	strd	r2, r3, [sl]
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	4629      	mov	r1, r5
 800e5b2:	f7f1 fe69 	bl	8000288 <__aeabi_dsub>
 800e5b6:	a3a6      	add	r3, pc, #664	; (adr r3, 800e850 <__ieee754_rem_pio2+0x308>)
 800e5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5bc:	f7f1 fe64 	bl	8000288 <__aeabi_dsub>
 800e5c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e5c4:	f04f 0b01 	mov.w	fp, #1
 800e5c8:	4658      	mov	r0, fp
 800e5ca:	b00b      	add	sp, #44	; 0x2c
 800e5cc:	ecbd 8b02 	vpop	{d8}
 800e5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d4:	a3a0      	add	r3, pc, #640	; (adr r3, 800e858 <__ieee754_rem_pio2+0x310>)
 800e5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5da:	f7f1 fe55 	bl	8000288 <__aeabi_dsub>
 800e5de:	a3a0      	add	r3, pc, #640	; (adr r3, 800e860 <__ieee754_rem_pio2+0x318>)
 800e5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e4:	4604      	mov	r4, r0
 800e5e6:	460d      	mov	r5, r1
 800e5e8:	f7f1 fe4e 	bl	8000288 <__aeabi_dsub>
 800e5ec:	4602      	mov	r2, r0
 800e5ee:	460b      	mov	r3, r1
 800e5f0:	e9ca 2300 	strd	r2, r3, [sl]
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	f7f1 fe46 	bl	8000288 <__aeabi_dsub>
 800e5fc:	a398      	add	r3, pc, #608	; (adr r3, 800e860 <__ieee754_rem_pio2+0x318>)
 800e5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e602:	e7db      	b.n	800e5bc <__ieee754_rem_pio2+0x74>
 800e604:	f7f1 fe42 	bl	800028c <__adddf3>
 800e608:	45b0      	cmp	r8, r6
 800e60a:	4604      	mov	r4, r0
 800e60c:	460d      	mov	r5, r1
 800e60e:	d016      	beq.n	800e63e <__ieee754_rem_pio2+0xf6>
 800e610:	a38f      	add	r3, pc, #572	; (adr r3, 800e850 <__ieee754_rem_pio2+0x308>)
 800e612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e616:	f7f1 fe39 	bl	800028c <__adddf3>
 800e61a:	4602      	mov	r2, r0
 800e61c:	460b      	mov	r3, r1
 800e61e:	e9ca 2300 	strd	r2, r3, [sl]
 800e622:	4620      	mov	r0, r4
 800e624:	4629      	mov	r1, r5
 800e626:	f7f1 fe2f 	bl	8000288 <__aeabi_dsub>
 800e62a:	a389      	add	r3, pc, #548	; (adr r3, 800e850 <__ieee754_rem_pio2+0x308>)
 800e62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e630:	f7f1 fe2c 	bl	800028c <__adddf3>
 800e634:	f04f 3bff 	mov.w	fp, #4294967295
 800e638:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e63c:	e7c4      	b.n	800e5c8 <__ieee754_rem_pio2+0x80>
 800e63e:	a386      	add	r3, pc, #536	; (adr r3, 800e858 <__ieee754_rem_pio2+0x310>)
 800e640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e644:	f7f1 fe22 	bl	800028c <__adddf3>
 800e648:	a385      	add	r3, pc, #532	; (adr r3, 800e860 <__ieee754_rem_pio2+0x318>)
 800e64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64e:	4604      	mov	r4, r0
 800e650:	460d      	mov	r5, r1
 800e652:	f7f1 fe1b 	bl	800028c <__adddf3>
 800e656:	4602      	mov	r2, r0
 800e658:	460b      	mov	r3, r1
 800e65a:	e9ca 2300 	strd	r2, r3, [sl]
 800e65e:	4620      	mov	r0, r4
 800e660:	4629      	mov	r1, r5
 800e662:	f7f1 fe11 	bl	8000288 <__aeabi_dsub>
 800e666:	a37e      	add	r3, pc, #504	; (adr r3, 800e860 <__ieee754_rem_pio2+0x318>)
 800e668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66c:	e7e0      	b.n	800e630 <__ieee754_rem_pio2+0xe8>
 800e66e:	4b87      	ldr	r3, [pc, #540]	; (800e88c <__ieee754_rem_pio2+0x344>)
 800e670:	4598      	cmp	r8, r3
 800e672:	f300 80d9 	bgt.w	800e828 <__ieee754_rem_pio2+0x2e0>
 800e676:	f7ff fe2b 	bl	800e2d0 <fabs>
 800e67a:	ec55 4b10 	vmov	r4, r5, d0
 800e67e:	ee10 0a10 	vmov	r0, s0
 800e682:	a379      	add	r3, pc, #484	; (adr r3, 800e868 <__ieee754_rem_pio2+0x320>)
 800e684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e688:	4629      	mov	r1, r5
 800e68a:	f7f1 ffb5 	bl	80005f8 <__aeabi_dmul>
 800e68e:	4b80      	ldr	r3, [pc, #512]	; (800e890 <__ieee754_rem_pio2+0x348>)
 800e690:	2200      	movs	r2, #0
 800e692:	f7f1 fdfb 	bl	800028c <__adddf3>
 800e696:	f7f2 fa5f 	bl	8000b58 <__aeabi_d2iz>
 800e69a:	4683      	mov	fp, r0
 800e69c:	f7f1 ff42 	bl	8000524 <__aeabi_i2d>
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	460b      	mov	r3, r1
 800e6a4:	ec43 2b18 	vmov	d8, r2, r3
 800e6a8:	a367      	add	r3, pc, #412	; (adr r3, 800e848 <__ieee754_rem_pio2+0x300>)
 800e6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ae:	f7f1 ffa3 	bl	80005f8 <__aeabi_dmul>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	f7f1 fde5 	bl	8000288 <__aeabi_dsub>
 800e6be:	a364      	add	r3, pc, #400	; (adr r3, 800e850 <__ieee754_rem_pio2+0x308>)
 800e6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c4:	4606      	mov	r6, r0
 800e6c6:	460f      	mov	r7, r1
 800e6c8:	ec51 0b18 	vmov	r0, r1, d8
 800e6cc:	f7f1 ff94 	bl	80005f8 <__aeabi_dmul>
 800e6d0:	f1bb 0f1f 	cmp.w	fp, #31
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	460d      	mov	r5, r1
 800e6d8:	dc0d      	bgt.n	800e6f6 <__ieee754_rem_pio2+0x1ae>
 800e6da:	4b6e      	ldr	r3, [pc, #440]	; (800e894 <__ieee754_rem_pio2+0x34c>)
 800e6dc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6e4:	4543      	cmp	r3, r8
 800e6e6:	d006      	beq.n	800e6f6 <__ieee754_rem_pio2+0x1ae>
 800e6e8:	4622      	mov	r2, r4
 800e6ea:	462b      	mov	r3, r5
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	4639      	mov	r1, r7
 800e6f0:	f7f1 fdca 	bl	8000288 <__aeabi_dsub>
 800e6f4:	e00f      	b.n	800e716 <__ieee754_rem_pio2+0x1ce>
 800e6f6:	462b      	mov	r3, r5
 800e6f8:	4622      	mov	r2, r4
 800e6fa:	4630      	mov	r0, r6
 800e6fc:	4639      	mov	r1, r7
 800e6fe:	f7f1 fdc3 	bl	8000288 <__aeabi_dsub>
 800e702:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e706:	9303      	str	r3, [sp, #12]
 800e708:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e70c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e710:	f1b8 0f10 	cmp.w	r8, #16
 800e714:	dc02      	bgt.n	800e71c <__ieee754_rem_pio2+0x1d4>
 800e716:	e9ca 0100 	strd	r0, r1, [sl]
 800e71a:	e039      	b.n	800e790 <__ieee754_rem_pio2+0x248>
 800e71c:	a34e      	add	r3, pc, #312	; (adr r3, 800e858 <__ieee754_rem_pio2+0x310>)
 800e71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e722:	ec51 0b18 	vmov	r0, r1, d8
 800e726:	f7f1 ff67 	bl	80005f8 <__aeabi_dmul>
 800e72a:	4604      	mov	r4, r0
 800e72c:	460d      	mov	r5, r1
 800e72e:	4602      	mov	r2, r0
 800e730:	460b      	mov	r3, r1
 800e732:	4630      	mov	r0, r6
 800e734:	4639      	mov	r1, r7
 800e736:	f7f1 fda7 	bl	8000288 <__aeabi_dsub>
 800e73a:	4602      	mov	r2, r0
 800e73c:	460b      	mov	r3, r1
 800e73e:	4680      	mov	r8, r0
 800e740:	4689      	mov	r9, r1
 800e742:	4630      	mov	r0, r6
 800e744:	4639      	mov	r1, r7
 800e746:	f7f1 fd9f 	bl	8000288 <__aeabi_dsub>
 800e74a:	4622      	mov	r2, r4
 800e74c:	462b      	mov	r3, r5
 800e74e:	f7f1 fd9b 	bl	8000288 <__aeabi_dsub>
 800e752:	a343      	add	r3, pc, #268	; (adr r3, 800e860 <__ieee754_rem_pio2+0x318>)
 800e754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e758:	4604      	mov	r4, r0
 800e75a:	460d      	mov	r5, r1
 800e75c:	ec51 0b18 	vmov	r0, r1, d8
 800e760:	f7f1 ff4a 	bl	80005f8 <__aeabi_dmul>
 800e764:	4622      	mov	r2, r4
 800e766:	462b      	mov	r3, r5
 800e768:	f7f1 fd8e 	bl	8000288 <__aeabi_dsub>
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	4604      	mov	r4, r0
 800e772:	460d      	mov	r5, r1
 800e774:	4640      	mov	r0, r8
 800e776:	4649      	mov	r1, r9
 800e778:	f7f1 fd86 	bl	8000288 <__aeabi_dsub>
 800e77c:	9a03      	ldr	r2, [sp, #12]
 800e77e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e782:	1ad3      	subs	r3, r2, r3
 800e784:	2b31      	cmp	r3, #49	; 0x31
 800e786:	dc24      	bgt.n	800e7d2 <__ieee754_rem_pio2+0x28a>
 800e788:	e9ca 0100 	strd	r0, r1, [sl]
 800e78c:	4646      	mov	r6, r8
 800e78e:	464f      	mov	r7, r9
 800e790:	e9da 8900 	ldrd	r8, r9, [sl]
 800e794:	4630      	mov	r0, r6
 800e796:	4642      	mov	r2, r8
 800e798:	464b      	mov	r3, r9
 800e79a:	4639      	mov	r1, r7
 800e79c:	f7f1 fd74 	bl	8000288 <__aeabi_dsub>
 800e7a0:	462b      	mov	r3, r5
 800e7a2:	4622      	mov	r2, r4
 800e7a4:	f7f1 fd70 	bl	8000288 <__aeabi_dsub>
 800e7a8:	9b02      	ldr	r3, [sp, #8]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e7b0:	f6bf af0a 	bge.w	800e5c8 <__ieee754_rem_pio2+0x80>
 800e7b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e7b8:	f8ca 3004 	str.w	r3, [sl, #4]
 800e7bc:	f8ca 8000 	str.w	r8, [sl]
 800e7c0:	f8ca 0008 	str.w	r0, [sl, #8]
 800e7c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7c8:	f8ca 300c 	str.w	r3, [sl, #12]
 800e7cc:	f1cb 0b00 	rsb	fp, fp, #0
 800e7d0:	e6fa      	b.n	800e5c8 <__ieee754_rem_pio2+0x80>
 800e7d2:	a327      	add	r3, pc, #156	; (adr r3, 800e870 <__ieee754_rem_pio2+0x328>)
 800e7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d8:	ec51 0b18 	vmov	r0, r1, d8
 800e7dc:	f7f1 ff0c 	bl	80005f8 <__aeabi_dmul>
 800e7e0:	4604      	mov	r4, r0
 800e7e2:	460d      	mov	r5, r1
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	4640      	mov	r0, r8
 800e7ea:	4649      	mov	r1, r9
 800e7ec:	f7f1 fd4c 	bl	8000288 <__aeabi_dsub>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	4606      	mov	r6, r0
 800e7f6:	460f      	mov	r7, r1
 800e7f8:	4640      	mov	r0, r8
 800e7fa:	4649      	mov	r1, r9
 800e7fc:	f7f1 fd44 	bl	8000288 <__aeabi_dsub>
 800e800:	4622      	mov	r2, r4
 800e802:	462b      	mov	r3, r5
 800e804:	f7f1 fd40 	bl	8000288 <__aeabi_dsub>
 800e808:	a31b      	add	r3, pc, #108	; (adr r3, 800e878 <__ieee754_rem_pio2+0x330>)
 800e80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80e:	4604      	mov	r4, r0
 800e810:	460d      	mov	r5, r1
 800e812:	ec51 0b18 	vmov	r0, r1, d8
 800e816:	f7f1 feef 	bl	80005f8 <__aeabi_dmul>
 800e81a:	4622      	mov	r2, r4
 800e81c:	462b      	mov	r3, r5
 800e81e:	f7f1 fd33 	bl	8000288 <__aeabi_dsub>
 800e822:	4604      	mov	r4, r0
 800e824:	460d      	mov	r5, r1
 800e826:	e75f      	b.n	800e6e8 <__ieee754_rem_pio2+0x1a0>
 800e828:	4b1b      	ldr	r3, [pc, #108]	; (800e898 <__ieee754_rem_pio2+0x350>)
 800e82a:	4598      	cmp	r8, r3
 800e82c:	dd36      	ble.n	800e89c <__ieee754_rem_pio2+0x354>
 800e82e:	ee10 2a10 	vmov	r2, s0
 800e832:	462b      	mov	r3, r5
 800e834:	4620      	mov	r0, r4
 800e836:	4629      	mov	r1, r5
 800e838:	f7f1 fd26 	bl	8000288 <__aeabi_dsub>
 800e83c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e840:	e9ca 0100 	strd	r0, r1, [sl]
 800e844:	e694      	b.n	800e570 <__ieee754_rem_pio2+0x28>
 800e846:	bf00      	nop
 800e848:	54400000 	.word	0x54400000
 800e84c:	3ff921fb 	.word	0x3ff921fb
 800e850:	1a626331 	.word	0x1a626331
 800e854:	3dd0b461 	.word	0x3dd0b461
 800e858:	1a600000 	.word	0x1a600000
 800e85c:	3dd0b461 	.word	0x3dd0b461
 800e860:	2e037073 	.word	0x2e037073
 800e864:	3ba3198a 	.word	0x3ba3198a
 800e868:	6dc9c883 	.word	0x6dc9c883
 800e86c:	3fe45f30 	.word	0x3fe45f30
 800e870:	2e000000 	.word	0x2e000000
 800e874:	3ba3198a 	.word	0x3ba3198a
 800e878:	252049c1 	.word	0x252049c1
 800e87c:	397b839a 	.word	0x397b839a
 800e880:	3fe921fb 	.word	0x3fe921fb
 800e884:	4002d97b 	.word	0x4002d97b
 800e888:	3ff921fb 	.word	0x3ff921fb
 800e88c:	413921fb 	.word	0x413921fb
 800e890:	3fe00000 	.word	0x3fe00000
 800e894:	0801c9ac 	.word	0x0801c9ac
 800e898:	7fefffff 	.word	0x7fefffff
 800e89c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e8a0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e8a4:	ee10 0a10 	vmov	r0, s0
 800e8a8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e8ac:	ee10 6a10 	vmov	r6, s0
 800e8b0:	460f      	mov	r7, r1
 800e8b2:	f7f2 f951 	bl	8000b58 <__aeabi_d2iz>
 800e8b6:	f7f1 fe35 	bl	8000524 <__aeabi_i2d>
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	460b      	mov	r3, r1
 800e8be:	4630      	mov	r0, r6
 800e8c0:	4639      	mov	r1, r7
 800e8c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e8c6:	f7f1 fcdf 	bl	8000288 <__aeabi_dsub>
 800e8ca:	4b22      	ldr	r3, [pc, #136]	; (800e954 <__ieee754_rem_pio2+0x40c>)
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	f7f1 fe93 	bl	80005f8 <__aeabi_dmul>
 800e8d2:	460f      	mov	r7, r1
 800e8d4:	4606      	mov	r6, r0
 800e8d6:	f7f2 f93f 	bl	8000b58 <__aeabi_d2iz>
 800e8da:	f7f1 fe23 	bl	8000524 <__aeabi_i2d>
 800e8de:	4602      	mov	r2, r0
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	4630      	mov	r0, r6
 800e8e4:	4639      	mov	r1, r7
 800e8e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e8ea:	f7f1 fccd 	bl	8000288 <__aeabi_dsub>
 800e8ee:	4b19      	ldr	r3, [pc, #100]	; (800e954 <__ieee754_rem_pio2+0x40c>)
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	f7f1 fe81 	bl	80005f8 <__aeabi_dmul>
 800e8f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e8fa:	ad04      	add	r5, sp, #16
 800e8fc:	f04f 0803 	mov.w	r8, #3
 800e900:	46a9      	mov	r9, r5
 800e902:	2600      	movs	r6, #0
 800e904:	2700      	movs	r7, #0
 800e906:	4632      	mov	r2, r6
 800e908:	463b      	mov	r3, r7
 800e90a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e90e:	46c3      	mov	fp, r8
 800e910:	3d08      	subs	r5, #8
 800e912:	f108 38ff 	add.w	r8, r8, #4294967295
 800e916:	f7f2 f8d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800e91a:	2800      	cmp	r0, #0
 800e91c:	d1f3      	bne.n	800e906 <__ieee754_rem_pio2+0x3be>
 800e91e:	4b0e      	ldr	r3, [pc, #56]	; (800e958 <__ieee754_rem_pio2+0x410>)
 800e920:	9301      	str	r3, [sp, #4]
 800e922:	2302      	movs	r3, #2
 800e924:	9300      	str	r3, [sp, #0]
 800e926:	4622      	mov	r2, r4
 800e928:	465b      	mov	r3, fp
 800e92a:	4651      	mov	r1, sl
 800e92c:	4648      	mov	r0, r9
 800e92e:	f000 f997 	bl	800ec60 <__kernel_rem_pio2>
 800e932:	9b02      	ldr	r3, [sp, #8]
 800e934:	2b00      	cmp	r3, #0
 800e936:	4683      	mov	fp, r0
 800e938:	f6bf ae46 	bge.w	800e5c8 <__ieee754_rem_pio2+0x80>
 800e93c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e940:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e944:	f8ca 3004 	str.w	r3, [sl, #4]
 800e948:	f8da 300c 	ldr.w	r3, [sl, #12]
 800e94c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e950:	e73a      	b.n	800e7c8 <__ieee754_rem_pio2+0x280>
 800e952:	bf00      	nop
 800e954:	41700000 	.word	0x41700000
 800e958:	0801ca2c 	.word	0x0801ca2c

0800e95c <__ieee754_sqrt>:
 800e95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e960:	ec55 4b10 	vmov	r4, r5, d0
 800e964:	4e56      	ldr	r6, [pc, #344]	; (800eac0 <__ieee754_sqrt+0x164>)
 800e966:	43ae      	bics	r6, r5
 800e968:	ee10 0a10 	vmov	r0, s0
 800e96c:	ee10 3a10 	vmov	r3, s0
 800e970:	4629      	mov	r1, r5
 800e972:	462a      	mov	r2, r5
 800e974:	d110      	bne.n	800e998 <__ieee754_sqrt+0x3c>
 800e976:	ee10 2a10 	vmov	r2, s0
 800e97a:	462b      	mov	r3, r5
 800e97c:	f7f1 fe3c 	bl	80005f8 <__aeabi_dmul>
 800e980:	4602      	mov	r2, r0
 800e982:	460b      	mov	r3, r1
 800e984:	4620      	mov	r0, r4
 800e986:	4629      	mov	r1, r5
 800e988:	f7f1 fc80 	bl	800028c <__adddf3>
 800e98c:	4604      	mov	r4, r0
 800e98e:	460d      	mov	r5, r1
 800e990:	ec45 4b10 	vmov	d0, r4, r5
 800e994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e998:	2d00      	cmp	r5, #0
 800e99a:	dc10      	bgt.n	800e9be <__ieee754_sqrt+0x62>
 800e99c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e9a0:	4330      	orrs	r0, r6
 800e9a2:	d0f5      	beq.n	800e990 <__ieee754_sqrt+0x34>
 800e9a4:	b15d      	cbz	r5, 800e9be <__ieee754_sqrt+0x62>
 800e9a6:	ee10 2a10 	vmov	r2, s0
 800e9aa:	462b      	mov	r3, r5
 800e9ac:	ee10 0a10 	vmov	r0, s0
 800e9b0:	f7f1 fc6a 	bl	8000288 <__aeabi_dsub>
 800e9b4:	4602      	mov	r2, r0
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	f7f1 ff48 	bl	800084c <__aeabi_ddiv>
 800e9bc:	e7e6      	b.n	800e98c <__ieee754_sqrt+0x30>
 800e9be:	1509      	asrs	r1, r1, #20
 800e9c0:	d076      	beq.n	800eab0 <__ieee754_sqrt+0x154>
 800e9c2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e9c6:	07ce      	lsls	r6, r1, #31
 800e9c8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800e9cc:	bf5e      	ittt	pl
 800e9ce:	0fda      	lsrpl	r2, r3, #31
 800e9d0:	005b      	lslpl	r3, r3, #1
 800e9d2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800e9d6:	0fda      	lsrs	r2, r3, #31
 800e9d8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800e9dc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800e9e0:	2000      	movs	r0, #0
 800e9e2:	106d      	asrs	r5, r5, #1
 800e9e4:	005b      	lsls	r3, r3, #1
 800e9e6:	f04f 0e16 	mov.w	lr, #22
 800e9ea:	4684      	mov	ip, r0
 800e9ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e9f0:	eb0c 0401 	add.w	r4, ip, r1
 800e9f4:	4294      	cmp	r4, r2
 800e9f6:	bfde      	ittt	le
 800e9f8:	1b12      	suble	r2, r2, r4
 800e9fa:	eb04 0c01 	addle.w	ip, r4, r1
 800e9fe:	1840      	addle	r0, r0, r1
 800ea00:	0052      	lsls	r2, r2, #1
 800ea02:	f1be 0e01 	subs.w	lr, lr, #1
 800ea06:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ea0a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ea0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ea12:	d1ed      	bne.n	800e9f0 <__ieee754_sqrt+0x94>
 800ea14:	4671      	mov	r1, lr
 800ea16:	2720      	movs	r7, #32
 800ea18:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ea1c:	4562      	cmp	r2, ip
 800ea1e:	eb04 060e 	add.w	r6, r4, lr
 800ea22:	dc02      	bgt.n	800ea2a <__ieee754_sqrt+0xce>
 800ea24:	d113      	bne.n	800ea4e <__ieee754_sqrt+0xf2>
 800ea26:	429e      	cmp	r6, r3
 800ea28:	d811      	bhi.n	800ea4e <__ieee754_sqrt+0xf2>
 800ea2a:	2e00      	cmp	r6, #0
 800ea2c:	eb06 0e04 	add.w	lr, r6, r4
 800ea30:	da43      	bge.n	800eaba <__ieee754_sqrt+0x15e>
 800ea32:	f1be 0f00 	cmp.w	lr, #0
 800ea36:	db40      	blt.n	800eaba <__ieee754_sqrt+0x15e>
 800ea38:	f10c 0801 	add.w	r8, ip, #1
 800ea3c:	eba2 020c 	sub.w	r2, r2, ip
 800ea40:	429e      	cmp	r6, r3
 800ea42:	bf88      	it	hi
 800ea44:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ea48:	1b9b      	subs	r3, r3, r6
 800ea4a:	4421      	add	r1, r4
 800ea4c:	46c4      	mov	ip, r8
 800ea4e:	0052      	lsls	r2, r2, #1
 800ea50:	3f01      	subs	r7, #1
 800ea52:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ea56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ea5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ea5e:	d1dd      	bne.n	800ea1c <__ieee754_sqrt+0xc0>
 800ea60:	4313      	orrs	r3, r2
 800ea62:	d006      	beq.n	800ea72 <__ieee754_sqrt+0x116>
 800ea64:	1c4c      	adds	r4, r1, #1
 800ea66:	bf13      	iteet	ne
 800ea68:	3101      	addne	r1, #1
 800ea6a:	3001      	addeq	r0, #1
 800ea6c:	4639      	moveq	r1, r7
 800ea6e:	f021 0101 	bicne.w	r1, r1, #1
 800ea72:	1043      	asrs	r3, r0, #1
 800ea74:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ea78:	0849      	lsrs	r1, r1, #1
 800ea7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ea7e:	07c2      	lsls	r2, r0, #31
 800ea80:	bf48      	it	mi
 800ea82:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ea86:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ea8a:	460c      	mov	r4, r1
 800ea8c:	463d      	mov	r5, r7
 800ea8e:	e77f      	b.n	800e990 <__ieee754_sqrt+0x34>
 800ea90:	0ada      	lsrs	r2, r3, #11
 800ea92:	3815      	subs	r0, #21
 800ea94:	055b      	lsls	r3, r3, #21
 800ea96:	2a00      	cmp	r2, #0
 800ea98:	d0fa      	beq.n	800ea90 <__ieee754_sqrt+0x134>
 800ea9a:	02d7      	lsls	r7, r2, #11
 800ea9c:	d50a      	bpl.n	800eab4 <__ieee754_sqrt+0x158>
 800ea9e:	f1c1 0420 	rsb	r4, r1, #32
 800eaa2:	fa23 f404 	lsr.w	r4, r3, r4
 800eaa6:	1e4d      	subs	r5, r1, #1
 800eaa8:	408b      	lsls	r3, r1
 800eaaa:	4322      	orrs	r2, r4
 800eaac:	1b41      	subs	r1, r0, r5
 800eaae:	e788      	b.n	800e9c2 <__ieee754_sqrt+0x66>
 800eab0:	4608      	mov	r0, r1
 800eab2:	e7f0      	b.n	800ea96 <__ieee754_sqrt+0x13a>
 800eab4:	0052      	lsls	r2, r2, #1
 800eab6:	3101      	adds	r1, #1
 800eab8:	e7ef      	b.n	800ea9a <__ieee754_sqrt+0x13e>
 800eaba:	46e0      	mov	r8, ip
 800eabc:	e7be      	b.n	800ea3c <__ieee754_sqrt+0xe0>
 800eabe:	bf00      	nop
 800eac0:	7ff00000 	.word	0x7ff00000

0800eac4 <__ieee754_sqrtf>:
 800eac4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800eac8:	4770      	bx	lr
 800eaca:	0000      	movs	r0, r0
 800eacc:	0000      	movs	r0, r0
	...

0800ead0 <__kernel_cos>:
 800ead0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ead4:	ec57 6b10 	vmov	r6, r7, d0
 800ead8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800eadc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800eae0:	ed8d 1b00 	vstr	d1, [sp]
 800eae4:	da07      	bge.n	800eaf6 <__kernel_cos+0x26>
 800eae6:	ee10 0a10 	vmov	r0, s0
 800eaea:	4639      	mov	r1, r7
 800eaec:	f7f2 f834 	bl	8000b58 <__aeabi_d2iz>
 800eaf0:	2800      	cmp	r0, #0
 800eaf2:	f000 8088 	beq.w	800ec06 <__kernel_cos+0x136>
 800eaf6:	4632      	mov	r2, r6
 800eaf8:	463b      	mov	r3, r7
 800eafa:	4630      	mov	r0, r6
 800eafc:	4639      	mov	r1, r7
 800eafe:	f7f1 fd7b 	bl	80005f8 <__aeabi_dmul>
 800eb02:	4b51      	ldr	r3, [pc, #324]	; (800ec48 <__kernel_cos+0x178>)
 800eb04:	2200      	movs	r2, #0
 800eb06:	4604      	mov	r4, r0
 800eb08:	460d      	mov	r5, r1
 800eb0a:	f7f1 fd75 	bl	80005f8 <__aeabi_dmul>
 800eb0e:	a340      	add	r3, pc, #256	; (adr r3, 800ec10 <__kernel_cos+0x140>)
 800eb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb14:	4682      	mov	sl, r0
 800eb16:	468b      	mov	fp, r1
 800eb18:	4620      	mov	r0, r4
 800eb1a:	4629      	mov	r1, r5
 800eb1c:	f7f1 fd6c 	bl	80005f8 <__aeabi_dmul>
 800eb20:	a33d      	add	r3, pc, #244	; (adr r3, 800ec18 <__kernel_cos+0x148>)
 800eb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb26:	f7f1 fbb1 	bl	800028c <__adddf3>
 800eb2a:	4622      	mov	r2, r4
 800eb2c:	462b      	mov	r3, r5
 800eb2e:	f7f1 fd63 	bl	80005f8 <__aeabi_dmul>
 800eb32:	a33b      	add	r3, pc, #236	; (adr r3, 800ec20 <__kernel_cos+0x150>)
 800eb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb38:	f7f1 fba6 	bl	8000288 <__aeabi_dsub>
 800eb3c:	4622      	mov	r2, r4
 800eb3e:	462b      	mov	r3, r5
 800eb40:	f7f1 fd5a 	bl	80005f8 <__aeabi_dmul>
 800eb44:	a338      	add	r3, pc, #224	; (adr r3, 800ec28 <__kernel_cos+0x158>)
 800eb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4a:	f7f1 fb9f 	bl	800028c <__adddf3>
 800eb4e:	4622      	mov	r2, r4
 800eb50:	462b      	mov	r3, r5
 800eb52:	f7f1 fd51 	bl	80005f8 <__aeabi_dmul>
 800eb56:	a336      	add	r3, pc, #216	; (adr r3, 800ec30 <__kernel_cos+0x160>)
 800eb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5c:	f7f1 fb94 	bl	8000288 <__aeabi_dsub>
 800eb60:	4622      	mov	r2, r4
 800eb62:	462b      	mov	r3, r5
 800eb64:	f7f1 fd48 	bl	80005f8 <__aeabi_dmul>
 800eb68:	a333      	add	r3, pc, #204	; (adr r3, 800ec38 <__kernel_cos+0x168>)
 800eb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6e:	f7f1 fb8d 	bl	800028c <__adddf3>
 800eb72:	4622      	mov	r2, r4
 800eb74:	462b      	mov	r3, r5
 800eb76:	f7f1 fd3f 	bl	80005f8 <__aeabi_dmul>
 800eb7a:	4622      	mov	r2, r4
 800eb7c:	462b      	mov	r3, r5
 800eb7e:	f7f1 fd3b 	bl	80005f8 <__aeabi_dmul>
 800eb82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb86:	4604      	mov	r4, r0
 800eb88:	460d      	mov	r5, r1
 800eb8a:	4630      	mov	r0, r6
 800eb8c:	4639      	mov	r1, r7
 800eb8e:	f7f1 fd33 	bl	80005f8 <__aeabi_dmul>
 800eb92:	460b      	mov	r3, r1
 800eb94:	4602      	mov	r2, r0
 800eb96:	4629      	mov	r1, r5
 800eb98:	4620      	mov	r0, r4
 800eb9a:	f7f1 fb75 	bl	8000288 <__aeabi_dsub>
 800eb9e:	4b2b      	ldr	r3, [pc, #172]	; (800ec4c <__kernel_cos+0x17c>)
 800eba0:	4598      	cmp	r8, r3
 800eba2:	4606      	mov	r6, r0
 800eba4:	460f      	mov	r7, r1
 800eba6:	dc10      	bgt.n	800ebca <__kernel_cos+0xfa>
 800eba8:	4602      	mov	r2, r0
 800ebaa:	460b      	mov	r3, r1
 800ebac:	4650      	mov	r0, sl
 800ebae:	4659      	mov	r1, fp
 800ebb0:	f7f1 fb6a 	bl	8000288 <__aeabi_dsub>
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	4926      	ldr	r1, [pc, #152]	; (800ec50 <__kernel_cos+0x180>)
 800ebb8:	4602      	mov	r2, r0
 800ebba:	2000      	movs	r0, #0
 800ebbc:	f7f1 fb64 	bl	8000288 <__aeabi_dsub>
 800ebc0:	ec41 0b10 	vmov	d0, r0, r1
 800ebc4:	b003      	add	sp, #12
 800ebc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebca:	4b22      	ldr	r3, [pc, #136]	; (800ec54 <__kernel_cos+0x184>)
 800ebcc:	4920      	ldr	r1, [pc, #128]	; (800ec50 <__kernel_cos+0x180>)
 800ebce:	4598      	cmp	r8, r3
 800ebd0:	bfcc      	ite	gt
 800ebd2:	4d21      	ldrgt	r5, [pc, #132]	; (800ec58 <__kernel_cos+0x188>)
 800ebd4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ebd8:	2400      	movs	r4, #0
 800ebda:	4622      	mov	r2, r4
 800ebdc:	462b      	mov	r3, r5
 800ebde:	2000      	movs	r0, #0
 800ebe0:	f7f1 fb52 	bl	8000288 <__aeabi_dsub>
 800ebe4:	4622      	mov	r2, r4
 800ebe6:	4680      	mov	r8, r0
 800ebe8:	4689      	mov	r9, r1
 800ebea:	462b      	mov	r3, r5
 800ebec:	4650      	mov	r0, sl
 800ebee:	4659      	mov	r1, fp
 800ebf0:	f7f1 fb4a 	bl	8000288 <__aeabi_dsub>
 800ebf4:	4632      	mov	r2, r6
 800ebf6:	463b      	mov	r3, r7
 800ebf8:	f7f1 fb46 	bl	8000288 <__aeabi_dsub>
 800ebfc:	4602      	mov	r2, r0
 800ebfe:	460b      	mov	r3, r1
 800ec00:	4640      	mov	r0, r8
 800ec02:	4649      	mov	r1, r9
 800ec04:	e7da      	b.n	800ebbc <__kernel_cos+0xec>
 800ec06:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ec40 <__kernel_cos+0x170>
 800ec0a:	e7db      	b.n	800ebc4 <__kernel_cos+0xf4>
 800ec0c:	f3af 8000 	nop.w
 800ec10:	be8838d4 	.word	0xbe8838d4
 800ec14:	bda8fae9 	.word	0xbda8fae9
 800ec18:	bdb4b1c4 	.word	0xbdb4b1c4
 800ec1c:	3e21ee9e 	.word	0x3e21ee9e
 800ec20:	809c52ad 	.word	0x809c52ad
 800ec24:	3e927e4f 	.word	0x3e927e4f
 800ec28:	19cb1590 	.word	0x19cb1590
 800ec2c:	3efa01a0 	.word	0x3efa01a0
 800ec30:	16c15177 	.word	0x16c15177
 800ec34:	3f56c16c 	.word	0x3f56c16c
 800ec38:	5555554c 	.word	0x5555554c
 800ec3c:	3fa55555 	.word	0x3fa55555
 800ec40:	00000000 	.word	0x00000000
 800ec44:	3ff00000 	.word	0x3ff00000
 800ec48:	3fe00000 	.word	0x3fe00000
 800ec4c:	3fd33332 	.word	0x3fd33332
 800ec50:	3ff00000 	.word	0x3ff00000
 800ec54:	3fe90000 	.word	0x3fe90000
 800ec58:	3fd20000 	.word	0x3fd20000
 800ec5c:	00000000 	.word	0x00000000

0800ec60 <__kernel_rem_pio2>:
 800ec60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec64:	ed2d 8b02 	vpush	{d8}
 800ec68:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ec6c:	f112 0f14 	cmn.w	r2, #20
 800ec70:	9308      	str	r3, [sp, #32]
 800ec72:	9101      	str	r1, [sp, #4]
 800ec74:	4bc6      	ldr	r3, [pc, #792]	; (800ef90 <__kernel_rem_pio2+0x330>)
 800ec76:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ec78:	9009      	str	r0, [sp, #36]	; 0x24
 800ec7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ec7e:	9304      	str	r3, [sp, #16]
 800ec80:	9b08      	ldr	r3, [sp, #32]
 800ec82:	f103 33ff 	add.w	r3, r3, #4294967295
 800ec86:	bfa8      	it	ge
 800ec88:	1ed4      	subge	r4, r2, #3
 800ec8a:	9306      	str	r3, [sp, #24]
 800ec8c:	bfb2      	itee	lt
 800ec8e:	2400      	movlt	r4, #0
 800ec90:	2318      	movge	r3, #24
 800ec92:	fb94 f4f3 	sdivge	r4, r4, r3
 800ec96:	f06f 0317 	mvn.w	r3, #23
 800ec9a:	fb04 3303 	mla	r3, r4, r3, r3
 800ec9e:	eb03 0a02 	add.w	sl, r3, r2
 800eca2:	9b04      	ldr	r3, [sp, #16]
 800eca4:	9a06      	ldr	r2, [sp, #24]
 800eca6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800ef80 <__kernel_rem_pio2+0x320>
 800ecaa:	eb03 0802 	add.w	r8, r3, r2
 800ecae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ecb0:	1aa7      	subs	r7, r4, r2
 800ecb2:	ae20      	add	r6, sp, #128	; 0x80
 800ecb4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ecb8:	2500      	movs	r5, #0
 800ecba:	4545      	cmp	r5, r8
 800ecbc:	dd18      	ble.n	800ecf0 <__kernel_rem_pio2+0x90>
 800ecbe:	9b08      	ldr	r3, [sp, #32]
 800ecc0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ecc4:	aa20      	add	r2, sp, #128	; 0x80
 800ecc6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800ef80 <__kernel_rem_pio2+0x320>
 800ecca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ecce:	f1c3 0301 	rsb	r3, r3, #1
 800ecd2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ecd6:	9307      	str	r3, [sp, #28]
 800ecd8:	9b07      	ldr	r3, [sp, #28]
 800ecda:	9a04      	ldr	r2, [sp, #16]
 800ecdc:	4443      	add	r3, r8
 800ecde:	429a      	cmp	r2, r3
 800ece0:	db2f      	blt.n	800ed42 <__kernel_rem_pio2+0xe2>
 800ece2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ece6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ecea:	462f      	mov	r7, r5
 800ecec:	2600      	movs	r6, #0
 800ecee:	e01b      	b.n	800ed28 <__kernel_rem_pio2+0xc8>
 800ecf0:	42ef      	cmn	r7, r5
 800ecf2:	d407      	bmi.n	800ed04 <__kernel_rem_pio2+0xa4>
 800ecf4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ecf8:	f7f1 fc14 	bl	8000524 <__aeabi_i2d>
 800ecfc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ed00:	3501      	adds	r5, #1
 800ed02:	e7da      	b.n	800ecba <__kernel_rem_pio2+0x5a>
 800ed04:	ec51 0b18 	vmov	r0, r1, d8
 800ed08:	e7f8      	b.n	800ecfc <__kernel_rem_pio2+0x9c>
 800ed0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed0e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ed12:	f7f1 fc71 	bl	80005f8 <__aeabi_dmul>
 800ed16:	4602      	mov	r2, r0
 800ed18:	460b      	mov	r3, r1
 800ed1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed1e:	f7f1 fab5 	bl	800028c <__adddf3>
 800ed22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed26:	3601      	adds	r6, #1
 800ed28:	9b06      	ldr	r3, [sp, #24]
 800ed2a:	429e      	cmp	r6, r3
 800ed2c:	f1a7 0708 	sub.w	r7, r7, #8
 800ed30:	ddeb      	ble.n	800ed0a <__kernel_rem_pio2+0xaa>
 800ed32:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed36:	3508      	adds	r5, #8
 800ed38:	ecab 7b02 	vstmia	fp!, {d7}
 800ed3c:	f108 0801 	add.w	r8, r8, #1
 800ed40:	e7ca      	b.n	800ecd8 <__kernel_rem_pio2+0x78>
 800ed42:	9b04      	ldr	r3, [sp, #16]
 800ed44:	aa0c      	add	r2, sp, #48	; 0x30
 800ed46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed4c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ed4e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ed52:	9c04      	ldr	r4, [sp, #16]
 800ed54:	930a      	str	r3, [sp, #40]	; 0x28
 800ed56:	ab98      	add	r3, sp, #608	; 0x260
 800ed58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ed5c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ed60:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ed64:	f8cd b008 	str.w	fp, [sp, #8]
 800ed68:	4625      	mov	r5, r4
 800ed6a:	2d00      	cmp	r5, #0
 800ed6c:	dc78      	bgt.n	800ee60 <__kernel_rem_pio2+0x200>
 800ed6e:	ec47 6b10 	vmov	d0, r6, r7
 800ed72:	4650      	mov	r0, sl
 800ed74:	f000 fb74 	bl	800f460 <scalbn>
 800ed78:	ec57 6b10 	vmov	r6, r7, d0
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ed82:	ee10 0a10 	vmov	r0, s0
 800ed86:	4639      	mov	r1, r7
 800ed88:	f7f1 fc36 	bl	80005f8 <__aeabi_dmul>
 800ed8c:	ec41 0b10 	vmov	d0, r0, r1
 800ed90:	f7ff faaa 	bl	800e2e8 <floor>
 800ed94:	4b7f      	ldr	r3, [pc, #508]	; (800ef94 <__kernel_rem_pio2+0x334>)
 800ed96:	ec51 0b10 	vmov	r0, r1, d0
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f7f1 fc2c 	bl	80005f8 <__aeabi_dmul>
 800eda0:	4602      	mov	r2, r0
 800eda2:	460b      	mov	r3, r1
 800eda4:	4630      	mov	r0, r6
 800eda6:	4639      	mov	r1, r7
 800eda8:	f7f1 fa6e 	bl	8000288 <__aeabi_dsub>
 800edac:	460f      	mov	r7, r1
 800edae:	4606      	mov	r6, r0
 800edb0:	f7f1 fed2 	bl	8000b58 <__aeabi_d2iz>
 800edb4:	9007      	str	r0, [sp, #28]
 800edb6:	f7f1 fbb5 	bl	8000524 <__aeabi_i2d>
 800edba:	4602      	mov	r2, r0
 800edbc:	460b      	mov	r3, r1
 800edbe:	4630      	mov	r0, r6
 800edc0:	4639      	mov	r1, r7
 800edc2:	f7f1 fa61 	bl	8000288 <__aeabi_dsub>
 800edc6:	f1ba 0f00 	cmp.w	sl, #0
 800edca:	4606      	mov	r6, r0
 800edcc:	460f      	mov	r7, r1
 800edce:	dd70      	ble.n	800eeb2 <__kernel_rem_pio2+0x252>
 800edd0:	1e62      	subs	r2, r4, #1
 800edd2:	ab0c      	add	r3, sp, #48	; 0x30
 800edd4:	9d07      	ldr	r5, [sp, #28]
 800edd6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800edda:	f1ca 0118 	rsb	r1, sl, #24
 800edde:	fa40 f301 	asr.w	r3, r0, r1
 800ede2:	441d      	add	r5, r3
 800ede4:	408b      	lsls	r3, r1
 800ede6:	1ac0      	subs	r0, r0, r3
 800ede8:	ab0c      	add	r3, sp, #48	; 0x30
 800edea:	9507      	str	r5, [sp, #28]
 800edec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800edf0:	f1ca 0317 	rsb	r3, sl, #23
 800edf4:	fa40 f303 	asr.w	r3, r0, r3
 800edf8:	9302      	str	r3, [sp, #8]
 800edfa:	9b02      	ldr	r3, [sp, #8]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	dd66      	ble.n	800eece <__kernel_rem_pio2+0x26e>
 800ee00:	9b07      	ldr	r3, [sp, #28]
 800ee02:	2200      	movs	r2, #0
 800ee04:	3301      	adds	r3, #1
 800ee06:	9307      	str	r3, [sp, #28]
 800ee08:	4615      	mov	r5, r2
 800ee0a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ee0e:	4294      	cmp	r4, r2
 800ee10:	f300 8099 	bgt.w	800ef46 <__kernel_rem_pio2+0x2e6>
 800ee14:	f1ba 0f00 	cmp.w	sl, #0
 800ee18:	dd07      	ble.n	800ee2a <__kernel_rem_pio2+0x1ca>
 800ee1a:	f1ba 0f01 	cmp.w	sl, #1
 800ee1e:	f000 80a5 	beq.w	800ef6c <__kernel_rem_pio2+0x30c>
 800ee22:	f1ba 0f02 	cmp.w	sl, #2
 800ee26:	f000 80c1 	beq.w	800efac <__kernel_rem_pio2+0x34c>
 800ee2a:	9b02      	ldr	r3, [sp, #8]
 800ee2c:	2b02      	cmp	r3, #2
 800ee2e:	d14e      	bne.n	800eece <__kernel_rem_pio2+0x26e>
 800ee30:	4632      	mov	r2, r6
 800ee32:	463b      	mov	r3, r7
 800ee34:	4958      	ldr	r1, [pc, #352]	; (800ef98 <__kernel_rem_pio2+0x338>)
 800ee36:	2000      	movs	r0, #0
 800ee38:	f7f1 fa26 	bl	8000288 <__aeabi_dsub>
 800ee3c:	4606      	mov	r6, r0
 800ee3e:	460f      	mov	r7, r1
 800ee40:	2d00      	cmp	r5, #0
 800ee42:	d044      	beq.n	800eece <__kernel_rem_pio2+0x26e>
 800ee44:	4650      	mov	r0, sl
 800ee46:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800ef88 <__kernel_rem_pio2+0x328>
 800ee4a:	f000 fb09 	bl	800f460 <scalbn>
 800ee4e:	4630      	mov	r0, r6
 800ee50:	4639      	mov	r1, r7
 800ee52:	ec53 2b10 	vmov	r2, r3, d0
 800ee56:	f7f1 fa17 	bl	8000288 <__aeabi_dsub>
 800ee5a:	4606      	mov	r6, r0
 800ee5c:	460f      	mov	r7, r1
 800ee5e:	e036      	b.n	800eece <__kernel_rem_pio2+0x26e>
 800ee60:	4b4e      	ldr	r3, [pc, #312]	; (800ef9c <__kernel_rem_pio2+0x33c>)
 800ee62:	2200      	movs	r2, #0
 800ee64:	4630      	mov	r0, r6
 800ee66:	4639      	mov	r1, r7
 800ee68:	f7f1 fbc6 	bl	80005f8 <__aeabi_dmul>
 800ee6c:	f7f1 fe74 	bl	8000b58 <__aeabi_d2iz>
 800ee70:	f7f1 fb58 	bl	8000524 <__aeabi_i2d>
 800ee74:	4b4a      	ldr	r3, [pc, #296]	; (800efa0 <__kernel_rem_pio2+0x340>)
 800ee76:	2200      	movs	r2, #0
 800ee78:	4680      	mov	r8, r0
 800ee7a:	4689      	mov	r9, r1
 800ee7c:	f7f1 fbbc 	bl	80005f8 <__aeabi_dmul>
 800ee80:	4602      	mov	r2, r0
 800ee82:	460b      	mov	r3, r1
 800ee84:	4630      	mov	r0, r6
 800ee86:	4639      	mov	r1, r7
 800ee88:	f7f1 f9fe 	bl	8000288 <__aeabi_dsub>
 800ee8c:	f7f1 fe64 	bl	8000b58 <__aeabi_d2iz>
 800ee90:	9b02      	ldr	r3, [sp, #8]
 800ee92:	f843 0b04 	str.w	r0, [r3], #4
 800ee96:	3d01      	subs	r5, #1
 800ee98:	9302      	str	r3, [sp, #8]
 800ee9a:	ab70      	add	r3, sp, #448	; 0x1c0
 800ee9c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800eea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea4:	4640      	mov	r0, r8
 800eea6:	4649      	mov	r1, r9
 800eea8:	f7f1 f9f0 	bl	800028c <__adddf3>
 800eeac:	4606      	mov	r6, r0
 800eeae:	460f      	mov	r7, r1
 800eeb0:	e75b      	b.n	800ed6a <__kernel_rem_pio2+0x10a>
 800eeb2:	d105      	bne.n	800eec0 <__kernel_rem_pio2+0x260>
 800eeb4:	1e63      	subs	r3, r4, #1
 800eeb6:	aa0c      	add	r2, sp, #48	; 0x30
 800eeb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800eebc:	15c3      	asrs	r3, r0, #23
 800eebe:	e79b      	b.n	800edf8 <__kernel_rem_pio2+0x198>
 800eec0:	4b38      	ldr	r3, [pc, #224]	; (800efa4 <__kernel_rem_pio2+0x344>)
 800eec2:	2200      	movs	r2, #0
 800eec4:	f7f1 fe1e 	bl	8000b04 <__aeabi_dcmpge>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	d139      	bne.n	800ef40 <__kernel_rem_pio2+0x2e0>
 800eecc:	9002      	str	r0, [sp, #8]
 800eece:	2200      	movs	r2, #0
 800eed0:	2300      	movs	r3, #0
 800eed2:	4630      	mov	r0, r6
 800eed4:	4639      	mov	r1, r7
 800eed6:	f7f1 fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 800eeda:	2800      	cmp	r0, #0
 800eedc:	f000 80b4 	beq.w	800f048 <__kernel_rem_pio2+0x3e8>
 800eee0:	f104 3bff 	add.w	fp, r4, #4294967295
 800eee4:	465b      	mov	r3, fp
 800eee6:	2200      	movs	r2, #0
 800eee8:	9904      	ldr	r1, [sp, #16]
 800eeea:	428b      	cmp	r3, r1
 800eeec:	da65      	bge.n	800efba <__kernel_rem_pio2+0x35a>
 800eeee:	2a00      	cmp	r2, #0
 800eef0:	d07b      	beq.n	800efea <__kernel_rem_pio2+0x38a>
 800eef2:	ab0c      	add	r3, sp, #48	; 0x30
 800eef4:	f1aa 0a18 	sub.w	sl, sl, #24
 800eef8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	f000 80a0 	beq.w	800f042 <__kernel_rem_pio2+0x3e2>
 800ef02:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800ef88 <__kernel_rem_pio2+0x328>
 800ef06:	4650      	mov	r0, sl
 800ef08:	f000 faaa 	bl	800f460 <scalbn>
 800ef0c:	4f23      	ldr	r7, [pc, #140]	; (800ef9c <__kernel_rem_pio2+0x33c>)
 800ef0e:	ec55 4b10 	vmov	r4, r5, d0
 800ef12:	46d8      	mov	r8, fp
 800ef14:	2600      	movs	r6, #0
 800ef16:	f1b8 0f00 	cmp.w	r8, #0
 800ef1a:	f280 80cf 	bge.w	800f0bc <__kernel_rem_pio2+0x45c>
 800ef1e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800ef80 <__kernel_rem_pio2+0x320>
 800ef22:	465f      	mov	r7, fp
 800ef24:	f04f 0800 	mov.w	r8, #0
 800ef28:	2f00      	cmp	r7, #0
 800ef2a:	f2c0 80fd 	blt.w	800f128 <__kernel_rem_pio2+0x4c8>
 800ef2e:	ab70      	add	r3, sp, #448	; 0x1c0
 800ef30:	f8df a074 	ldr.w	sl, [pc, #116]	; 800efa8 <__kernel_rem_pio2+0x348>
 800ef34:	ec55 4b18 	vmov	r4, r5, d8
 800ef38:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800ef3c:	2600      	movs	r6, #0
 800ef3e:	e0e5      	b.n	800f10c <__kernel_rem_pio2+0x4ac>
 800ef40:	2302      	movs	r3, #2
 800ef42:	9302      	str	r3, [sp, #8]
 800ef44:	e75c      	b.n	800ee00 <__kernel_rem_pio2+0x1a0>
 800ef46:	f8db 3000 	ldr.w	r3, [fp]
 800ef4a:	b955      	cbnz	r5, 800ef62 <__kernel_rem_pio2+0x302>
 800ef4c:	b123      	cbz	r3, 800ef58 <__kernel_rem_pio2+0x2f8>
 800ef4e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ef52:	f8cb 3000 	str.w	r3, [fp]
 800ef56:	2301      	movs	r3, #1
 800ef58:	3201      	adds	r2, #1
 800ef5a:	f10b 0b04 	add.w	fp, fp, #4
 800ef5e:	461d      	mov	r5, r3
 800ef60:	e755      	b.n	800ee0e <__kernel_rem_pio2+0x1ae>
 800ef62:	1acb      	subs	r3, r1, r3
 800ef64:	f8cb 3000 	str.w	r3, [fp]
 800ef68:	462b      	mov	r3, r5
 800ef6a:	e7f5      	b.n	800ef58 <__kernel_rem_pio2+0x2f8>
 800ef6c:	1e62      	subs	r2, r4, #1
 800ef6e:	ab0c      	add	r3, sp, #48	; 0x30
 800ef70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef74:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ef78:	a90c      	add	r1, sp, #48	; 0x30
 800ef7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ef7e:	e754      	b.n	800ee2a <__kernel_rem_pio2+0x1ca>
	...
 800ef8c:	3ff00000 	.word	0x3ff00000
 800ef90:	0801cb78 	.word	0x0801cb78
 800ef94:	40200000 	.word	0x40200000
 800ef98:	3ff00000 	.word	0x3ff00000
 800ef9c:	3e700000 	.word	0x3e700000
 800efa0:	41700000 	.word	0x41700000
 800efa4:	3fe00000 	.word	0x3fe00000
 800efa8:	0801cb38 	.word	0x0801cb38
 800efac:	1e62      	subs	r2, r4, #1
 800efae:	ab0c      	add	r3, sp, #48	; 0x30
 800efb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efb4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800efb8:	e7de      	b.n	800ef78 <__kernel_rem_pio2+0x318>
 800efba:	a90c      	add	r1, sp, #48	; 0x30
 800efbc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	430a      	orrs	r2, r1
 800efc4:	e790      	b.n	800eee8 <__kernel_rem_pio2+0x288>
 800efc6:	3301      	adds	r3, #1
 800efc8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800efcc:	2900      	cmp	r1, #0
 800efce:	d0fa      	beq.n	800efc6 <__kernel_rem_pio2+0x366>
 800efd0:	9a08      	ldr	r2, [sp, #32]
 800efd2:	18e3      	adds	r3, r4, r3
 800efd4:	18a6      	adds	r6, r4, r2
 800efd6:	aa20      	add	r2, sp, #128	; 0x80
 800efd8:	1c65      	adds	r5, r4, #1
 800efda:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800efde:	9302      	str	r3, [sp, #8]
 800efe0:	9b02      	ldr	r3, [sp, #8]
 800efe2:	42ab      	cmp	r3, r5
 800efe4:	da04      	bge.n	800eff0 <__kernel_rem_pio2+0x390>
 800efe6:	461c      	mov	r4, r3
 800efe8:	e6b5      	b.n	800ed56 <__kernel_rem_pio2+0xf6>
 800efea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800efec:	2301      	movs	r3, #1
 800efee:	e7eb      	b.n	800efc8 <__kernel_rem_pio2+0x368>
 800eff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eff2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eff6:	f7f1 fa95 	bl	8000524 <__aeabi_i2d>
 800effa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800effe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f000:	46b3      	mov	fp, r6
 800f002:	461c      	mov	r4, r3
 800f004:	2700      	movs	r7, #0
 800f006:	f04f 0800 	mov.w	r8, #0
 800f00a:	f04f 0900 	mov.w	r9, #0
 800f00e:	9b06      	ldr	r3, [sp, #24]
 800f010:	429f      	cmp	r7, r3
 800f012:	dd06      	ble.n	800f022 <__kernel_rem_pio2+0x3c2>
 800f014:	ab70      	add	r3, sp, #448	; 0x1c0
 800f016:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f01a:	e9c3 8900 	strd	r8, r9, [r3]
 800f01e:	3501      	adds	r5, #1
 800f020:	e7de      	b.n	800efe0 <__kernel_rem_pio2+0x380>
 800f022:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f026:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f02a:	f7f1 fae5 	bl	80005f8 <__aeabi_dmul>
 800f02e:	4602      	mov	r2, r0
 800f030:	460b      	mov	r3, r1
 800f032:	4640      	mov	r0, r8
 800f034:	4649      	mov	r1, r9
 800f036:	f7f1 f929 	bl	800028c <__adddf3>
 800f03a:	3701      	adds	r7, #1
 800f03c:	4680      	mov	r8, r0
 800f03e:	4689      	mov	r9, r1
 800f040:	e7e5      	b.n	800f00e <__kernel_rem_pio2+0x3ae>
 800f042:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f046:	e754      	b.n	800eef2 <__kernel_rem_pio2+0x292>
 800f048:	ec47 6b10 	vmov	d0, r6, r7
 800f04c:	f1ca 0000 	rsb	r0, sl, #0
 800f050:	f000 fa06 	bl	800f460 <scalbn>
 800f054:	ec57 6b10 	vmov	r6, r7, d0
 800f058:	4b9f      	ldr	r3, [pc, #636]	; (800f2d8 <__kernel_rem_pio2+0x678>)
 800f05a:	ee10 0a10 	vmov	r0, s0
 800f05e:	2200      	movs	r2, #0
 800f060:	4639      	mov	r1, r7
 800f062:	f7f1 fd4f 	bl	8000b04 <__aeabi_dcmpge>
 800f066:	b300      	cbz	r0, 800f0aa <__kernel_rem_pio2+0x44a>
 800f068:	4b9c      	ldr	r3, [pc, #624]	; (800f2dc <__kernel_rem_pio2+0x67c>)
 800f06a:	2200      	movs	r2, #0
 800f06c:	4630      	mov	r0, r6
 800f06e:	4639      	mov	r1, r7
 800f070:	f7f1 fac2 	bl	80005f8 <__aeabi_dmul>
 800f074:	f7f1 fd70 	bl	8000b58 <__aeabi_d2iz>
 800f078:	4605      	mov	r5, r0
 800f07a:	f7f1 fa53 	bl	8000524 <__aeabi_i2d>
 800f07e:	4b96      	ldr	r3, [pc, #600]	; (800f2d8 <__kernel_rem_pio2+0x678>)
 800f080:	2200      	movs	r2, #0
 800f082:	f7f1 fab9 	bl	80005f8 <__aeabi_dmul>
 800f086:	460b      	mov	r3, r1
 800f088:	4602      	mov	r2, r0
 800f08a:	4639      	mov	r1, r7
 800f08c:	4630      	mov	r0, r6
 800f08e:	f7f1 f8fb 	bl	8000288 <__aeabi_dsub>
 800f092:	f7f1 fd61 	bl	8000b58 <__aeabi_d2iz>
 800f096:	f104 0b01 	add.w	fp, r4, #1
 800f09a:	ab0c      	add	r3, sp, #48	; 0x30
 800f09c:	f10a 0a18 	add.w	sl, sl, #24
 800f0a0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f0a4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800f0a8:	e72b      	b.n	800ef02 <__kernel_rem_pio2+0x2a2>
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	4639      	mov	r1, r7
 800f0ae:	f7f1 fd53 	bl	8000b58 <__aeabi_d2iz>
 800f0b2:	ab0c      	add	r3, sp, #48	; 0x30
 800f0b4:	46a3      	mov	fp, r4
 800f0b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f0ba:	e722      	b.n	800ef02 <__kernel_rem_pio2+0x2a2>
 800f0bc:	ab70      	add	r3, sp, #448	; 0x1c0
 800f0be:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800f0c2:	ab0c      	add	r3, sp, #48	; 0x30
 800f0c4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f0c8:	f7f1 fa2c 	bl	8000524 <__aeabi_i2d>
 800f0cc:	4622      	mov	r2, r4
 800f0ce:	462b      	mov	r3, r5
 800f0d0:	f7f1 fa92 	bl	80005f8 <__aeabi_dmul>
 800f0d4:	4632      	mov	r2, r6
 800f0d6:	e9c9 0100 	strd	r0, r1, [r9]
 800f0da:	463b      	mov	r3, r7
 800f0dc:	4620      	mov	r0, r4
 800f0de:	4629      	mov	r1, r5
 800f0e0:	f7f1 fa8a 	bl	80005f8 <__aeabi_dmul>
 800f0e4:	f108 38ff 	add.w	r8, r8, #4294967295
 800f0e8:	4604      	mov	r4, r0
 800f0ea:	460d      	mov	r5, r1
 800f0ec:	e713      	b.n	800ef16 <__kernel_rem_pio2+0x2b6>
 800f0ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f0f2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f0f6:	f7f1 fa7f 	bl	80005f8 <__aeabi_dmul>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	460b      	mov	r3, r1
 800f0fe:	4620      	mov	r0, r4
 800f100:	4629      	mov	r1, r5
 800f102:	f7f1 f8c3 	bl	800028c <__adddf3>
 800f106:	3601      	adds	r6, #1
 800f108:	4604      	mov	r4, r0
 800f10a:	460d      	mov	r5, r1
 800f10c:	9b04      	ldr	r3, [sp, #16]
 800f10e:	429e      	cmp	r6, r3
 800f110:	dc01      	bgt.n	800f116 <__kernel_rem_pio2+0x4b6>
 800f112:	45b0      	cmp	r8, r6
 800f114:	daeb      	bge.n	800f0ee <__kernel_rem_pio2+0x48e>
 800f116:	ab48      	add	r3, sp, #288	; 0x120
 800f118:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f11c:	e9c3 4500 	strd	r4, r5, [r3]
 800f120:	3f01      	subs	r7, #1
 800f122:	f108 0801 	add.w	r8, r8, #1
 800f126:	e6ff      	b.n	800ef28 <__kernel_rem_pio2+0x2c8>
 800f128:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f12a:	2b02      	cmp	r3, #2
 800f12c:	dc0b      	bgt.n	800f146 <__kernel_rem_pio2+0x4e6>
 800f12e:	2b00      	cmp	r3, #0
 800f130:	dc6e      	bgt.n	800f210 <__kernel_rem_pio2+0x5b0>
 800f132:	d045      	beq.n	800f1c0 <__kernel_rem_pio2+0x560>
 800f134:	9b07      	ldr	r3, [sp, #28]
 800f136:	f003 0007 	and.w	r0, r3, #7
 800f13a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f13e:	ecbd 8b02 	vpop	{d8}
 800f142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f146:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f148:	2b03      	cmp	r3, #3
 800f14a:	d1f3      	bne.n	800f134 <__kernel_rem_pio2+0x4d4>
 800f14c:	ab48      	add	r3, sp, #288	; 0x120
 800f14e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800f152:	46d0      	mov	r8, sl
 800f154:	46d9      	mov	r9, fp
 800f156:	f1b9 0f00 	cmp.w	r9, #0
 800f15a:	f1a8 0808 	sub.w	r8, r8, #8
 800f15e:	dc64      	bgt.n	800f22a <__kernel_rem_pio2+0x5ca>
 800f160:	465c      	mov	r4, fp
 800f162:	2c01      	cmp	r4, #1
 800f164:	f1aa 0a08 	sub.w	sl, sl, #8
 800f168:	dc7e      	bgt.n	800f268 <__kernel_rem_pio2+0x608>
 800f16a:	2000      	movs	r0, #0
 800f16c:	2100      	movs	r1, #0
 800f16e:	f1bb 0f01 	cmp.w	fp, #1
 800f172:	f300 8097 	bgt.w	800f2a4 <__kernel_rem_pio2+0x644>
 800f176:	9b02      	ldr	r3, [sp, #8]
 800f178:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800f17c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f180:	2b00      	cmp	r3, #0
 800f182:	f040 8099 	bne.w	800f2b8 <__kernel_rem_pio2+0x658>
 800f186:	9b01      	ldr	r3, [sp, #4]
 800f188:	e9c3 5600 	strd	r5, r6, [r3]
 800f18c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f190:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f194:	e7ce      	b.n	800f134 <__kernel_rem_pio2+0x4d4>
 800f196:	ab48      	add	r3, sp, #288	; 0x120
 800f198:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a0:	f7f1 f874 	bl	800028c <__adddf3>
 800f1a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f1a8:	f1bb 0f00 	cmp.w	fp, #0
 800f1ac:	daf3      	bge.n	800f196 <__kernel_rem_pio2+0x536>
 800f1ae:	9b02      	ldr	r3, [sp, #8]
 800f1b0:	b113      	cbz	r3, 800f1b8 <__kernel_rem_pio2+0x558>
 800f1b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	9b01      	ldr	r3, [sp, #4]
 800f1ba:	e9c3 0100 	strd	r0, r1, [r3]
 800f1be:	e7b9      	b.n	800f134 <__kernel_rem_pio2+0x4d4>
 800f1c0:	2000      	movs	r0, #0
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	e7f0      	b.n	800f1a8 <__kernel_rem_pio2+0x548>
 800f1c6:	ab48      	add	r3, sp, #288	; 0x120
 800f1c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d0:	f7f1 f85c 	bl	800028c <__adddf3>
 800f1d4:	3c01      	subs	r4, #1
 800f1d6:	2c00      	cmp	r4, #0
 800f1d8:	daf5      	bge.n	800f1c6 <__kernel_rem_pio2+0x566>
 800f1da:	9b02      	ldr	r3, [sp, #8]
 800f1dc:	b1e3      	cbz	r3, 800f218 <__kernel_rem_pio2+0x5b8>
 800f1de:	4602      	mov	r2, r0
 800f1e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1e4:	9c01      	ldr	r4, [sp, #4]
 800f1e6:	e9c4 2300 	strd	r2, r3, [r4]
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f1f2:	f7f1 f849 	bl	8000288 <__aeabi_dsub>
 800f1f6:	ad4a      	add	r5, sp, #296	; 0x128
 800f1f8:	2401      	movs	r4, #1
 800f1fa:	45a3      	cmp	fp, r4
 800f1fc:	da0f      	bge.n	800f21e <__kernel_rem_pio2+0x5be>
 800f1fe:	9b02      	ldr	r3, [sp, #8]
 800f200:	b113      	cbz	r3, 800f208 <__kernel_rem_pio2+0x5a8>
 800f202:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f206:	4619      	mov	r1, r3
 800f208:	9b01      	ldr	r3, [sp, #4]
 800f20a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f20e:	e791      	b.n	800f134 <__kernel_rem_pio2+0x4d4>
 800f210:	465c      	mov	r4, fp
 800f212:	2000      	movs	r0, #0
 800f214:	2100      	movs	r1, #0
 800f216:	e7de      	b.n	800f1d6 <__kernel_rem_pio2+0x576>
 800f218:	4602      	mov	r2, r0
 800f21a:	460b      	mov	r3, r1
 800f21c:	e7e2      	b.n	800f1e4 <__kernel_rem_pio2+0x584>
 800f21e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f222:	f7f1 f833 	bl	800028c <__adddf3>
 800f226:	3401      	adds	r4, #1
 800f228:	e7e7      	b.n	800f1fa <__kernel_rem_pio2+0x59a>
 800f22a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800f22e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800f232:	4620      	mov	r0, r4
 800f234:	4632      	mov	r2, r6
 800f236:	463b      	mov	r3, r7
 800f238:	4629      	mov	r1, r5
 800f23a:	f7f1 f827 	bl	800028c <__adddf3>
 800f23e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f242:	4602      	mov	r2, r0
 800f244:	460b      	mov	r3, r1
 800f246:	4620      	mov	r0, r4
 800f248:	4629      	mov	r1, r5
 800f24a:	f7f1 f81d 	bl	8000288 <__aeabi_dsub>
 800f24e:	4632      	mov	r2, r6
 800f250:	463b      	mov	r3, r7
 800f252:	f7f1 f81b 	bl	800028c <__adddf3>
 800f256:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f25a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800f25e:	ed88 7b00 	vstr	d7, [r8]
 800f262:	f109 39ff 	add.w	r9, r9, #4294967295
 800f266:	e776      	b.n	800f156 <__kernel_rem_pio2+0x4f6>
 800f268:	e9da 8900 	ldrd	r8, r9, [sl]
 800f26c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f270:	4640      	mov	r0, r8
 800f272:	4632      	mov	r2, r6
 800f274:	463b      	mov	r3, r7
 800f276:	4649      	mov	r1, r9
 800f278:	f7f1 f808 	bl	800028c <__adddf3>
 800f27c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f280:	4602      	mov	r2, r0
 800f282:	460b      	mov	r3, r1
 800f284:	4640      	mov	r0, r8
 800f286:	4649      	mov	r1, r9
 800f288:	f7f0 fffe 	bl	8000288 <__aeabi_dsub>
 800f28c:	4632      	mov	r2, r6
 800f28e:	463b      	mov	r3, r7
 800f290:	f7f0 fffc 	bl	800028c <__adddf3>
 800f294:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f298:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f29c:	ed8a 7b00 	vstr	d7, [sl]
 800f2a0:	3c01      	subs	r4, #1
 800f2a2:	e75e      	b.n	800f162 <__kernel_rem_pio2+0x502>
 800f2a4:	ab48      	add	r3, sp, #288	; 0x120
 800f2a6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ae:	f7f0 ffed 	bl	800028c <__adddf3>
 800f2b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2b6:	e75a      	b.n	800f16e <__kernel_rem_pio2+0x50e>
 800f2b8:	9b01      	ldr	r3, [sp, #4]
 800f2ba:	9a01      	ldr	r2, [sp, #4]
 800f2bc:	601d      	str	r5, [r3, #0]
 800f2be:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f2c2:	605c      	str	r4, [r3, #4]
 800f2c4:	609f      	str	r7, [r3, #8]
 800f2c6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f2ca:	60d3      	str	r3, [r2, #12]
 800f2cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f2d0:	6110      	str	r0, [r2, #16]
 800f2d2:	6153      	str	r3, [r2, #20]
 800f2d4:	e72e      	b.n	800f134 <__kernel_rem_pio2+0x4d4>
 800f2d6:	bf00      	nop
 800f2d8:	41700000 	.word	0x41700000
 800f2dc:	3e700000 	.word	0x3e700000

0800f2e0 <__kernel_sin>:
 800f2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e4:	ed2d 8b04 	vpush	{d8-d9}
 800f2e8:	eeb0 8a41 	vmov.f32	s16, s2
 800f2ec:	eef0 8a61 	vmov.f32	s17, s3
 800f2f0:	ec55 4b10 	vmov	r4, r5, d0
 800f2f4:	b083      	sub	sp, #12
 800f2f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f2fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f2fe:	9001      	str	r0, [sp, #4]
 800f300:	da06      	bge.n	800f310 <__kernel_sin+0x30>
 800f302:	ee10 0a10 	vmov	r0, s0
 800f306:	4629      	mov	r1, r5
 800f308:	f7f1 fc26 	bl	8000b58 <__aeabi_d2iz>
 800f30c:	2800      	cmp	r0, #0
 800f30e:	d051      	beq.n	800f3b4 <__kernel_sin+0xd4>
 800f310:	4622      	mov	r2, r4
 800f312:	462b      	mov	r3, r5
 800f314:	4620      	mov	r0, r4
 800f316:	4629      	mov	r1, r5
 800f318:	f7f1 f96e 	bl	80005f8 <__aeabi_dmul>
 800f31c:	4682      	mov	sl, r0
 800f31e:	468b      	mov	fp, r1
 800f320:	4602      	mov	r2, r0
 800f322:	460b      	mov	r3, r1
 800f324:	4620      	mov	r0, r4
 800f326:	4629      	mov	r1, r5
 800f328:	f7f1 f966 	bl	80005f8 <__aeabi_dmul>
 800f32c:	a341      	add	r3, pc, #260	; (adr r3, 800f434 <__kernel_sin+0x154>)
 800f32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f332:	4680      	mov	r8, r0
 800f334:	4689      	mov	r9, r1
 800f336:	4650      	mov	r0, sl
 800f338:	4659      	mov	r1, fp
 800f33a:	f7f1 f95d 	bl	80005f8 <__aeabi_dmul>
 800f33e:	a33f      	add	r3, pc, #252	; (adr r3, 800f43c <__kernel_sin+0x15c>)
 800f340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f344:	f7f0 ffa0 	bl	8000288 <__aeabi_dsub>
 800f348:	4652      	mov	r2, sl
 800f34a:	465b      	mov	r3, fp
 800f34c:	f7f1 f954 	bl	80005f8 <__aeabi_dmul>
 800f350:	a33c      	add	r3, pc, #240	; (adr r3, 800f444 <__kernel_sin+0x164>)
 800f352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f356:	f7f0 ff99 	bl	800028c <__adddf3>
 800f35a:	4652      	mov	r2, sl
 800f35c:	465b      	mov	r3, fp
 800f35e:	f7f1 f94b 	bl	80005f8 <__aeabi_dmul>
 800f362:	a33a      	add	r3, pc, #232	; (adr r3, 800f44c <__kernel_sin+0x16c>)
 800f364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f368:	f7f0 ff8e 	bl	8000288 <__aeabi_dsub>
 800f36c:	4652      	mov	r2, sl
 800f36e:	465b      	mov	r3, fp
 800f370:	f7f1 f942 	bl	80005f8 <__aeabi_dmul>
 800f374:	a337      	add	r3, pc, #220	; (adr r3, 800f454 <__kernel_sin+0x174>)
 800f376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f37a:	f7f0 ff87 	bl	800028c <__adddf3>
 800f37e:	9b01      	ldr	r3, [sp, #4]
 800f380:	4606      	mov	r6, r0
 800f382:	460f      	mov	r7, r1
 800f384:	b9eb      	cbnz	r3, 800f3c2 <__kernel_sin+0xe2>
 800f386:	4602      	mov	r2, r0
 800f388:	460b      	mov	r3, r1
 800f38a:	4650      	mov	r0, sl
 800f38c:	4659      	mov	r1, fp
 800f38e:	f7f1 f933 	bl	80005f8 <__aeabi_dmul>
 800f392:	a325      	add	r3, pc, #148	; (adr r3, 800f428 <__kernel_sin+0x148>)
 800f394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f398:	f7f0 ff76 	bl	8000288 <__aeabi_dsub>
 800f39c:	4642      	mov	r2, r8
 800f39e:	464b      	mov	r3, r9
 800f3a0:	f7f1 f92a 	bl	80005f8 <__aeabi_dmul>
 800f3a4:	4602      	mov	r2, r0
 800f3a6:	460b      	mov	r3, r1
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	4629      	mov	r1, r5
 800f3ac:	f7f0 ff6e 	bl	800028c <__adddf3>
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	460d      	mov	r5, r1
 800f3b4:	ec45 4b10 	vmov	d0, r4, r5
 800f3b8:	b003      	add	sp, #12
 800f3ba:	ecbd 8b04 	vpop	{d8-d9}
 800f3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3c2:	4b1b      	ldr	r3, [pc, #108]	; (800f430 <__kernel_sin+0x150>)
 800f3c4:	ec51 0b18 	vmov	r0, r1, d8
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	f7f1 f915 	bl	80005f8 <__aeabi_dmul>
 800f3ce:	4632      	mov	r2, r6
 800f3d0:	ec41 0b19 	vmov	d9, r0, r1
 800f3d4:	463b      	mov	r3, r7
 800f3d6:	4640      	mov	r0, r8
 800f3d8:	4649      	mov	r1, r9
 800f3da:	f7f1 f90d 	bl	80005f8 <__aeabi_dmul>
 800f3de:	4602      	mov	r2, r0
 800f3e0:	460b      	mov	r3, r1
 800f3e2:	ec51 0b19 	vmov	r0, r1, d9
 800f3e6:	f7f0 ff4f 	bl	8000288 <__aeabi_dsub>
 800f3ea:	4652      	mov	r2, sl
 800f3ec:	465b      	mov	r3, fp
 800f3ee:	f7f1 f903 	bl	80005f8 <__aeabi_dmul>
 800f3f2:	ec53 2b18 	vmov	r2, r3, d8
 800f3f6:	f7f0 ff47 	bl	8000288 <__aeabi_dsub>
 800f3fa:	a30b      	add	r3, pc, #44	; (adr r3, 800f428 <__kernel_sin+0x148>)
 800f3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f400:	4606      	mov	r6, r0
 800f402:	460f      	mov	r7, r1
 800f404:	4640      	mov	r0, r8
 800f406:	4649      	mov	r1, r9
 800f408:	f7f1 f8f6 	bl	80005f8 <__aeabi_dmul>
 800f40c:	4602      	mov	r2, r0
 800f40e:	460b      	mov	r3, r1
 800f410:	4630      	mov	r0, r6
 800f412:	4639      	mov	r1, r7
 800f414:	f7f0 ff3a 	bl	800028c <__adddf3>
 800f418:	4602      	mov	r2, r0
 800f41a:	460b      	mov	r3, r1
 800f41c:	4620      	mov	r0, r4
 800f41e:	4629      	mov	r1, r5
 800f420:	f7f0 ff32 	bl	8000288 <__aeabi_dsub>
 800f424:	e7c4      	b.n	800f3b0 <__kernel_sin+0xd0>
 800f426:	bf00      	nop
 800f428:	55555549 	.word	0x55555549
 800f42c:	3fc55555 	.word	0x3fc55555
 800f430:	3fe00000 	.word	0x3fe00000
 800f434:	5acfd57c 	.word	0x5acfd57c
 800f438:	3de5d93a 	.word	0x3de5d93a
 800f43c:	8a2b9ceb 	.word	0x8a2b9ceb
 800f440:	3e5ae5e6 	.word	0x3e5ae5e6
 800f444:	57b1fe7d 	.word	0x57b1fe7d
 800f448:	3ec71de3 	.word	0x3ec71de3
 800f44c:	19c161d5 	.word	0x19c161d5
 800f450:	3f2a01a0 	.word	0x3f2a01a0
 800f454:	1110f8a6 	.word	0x1110f8a6
 800f458:	3f811111 	.word	0x3f811111
 800f45c:	00000000 	.word	0x00000000

0800f460 <scalbn>:
 800f460:	b570      	push	{r4, r5, r6, lr}
 800f462:	ec55 4b10 	vmov	r4, r5, d0
 800f466:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f46a:	4606      	mov	r6, r0
 800f46c:	462b      	mov	r3, r5
 800f46e:	b99a      	cbnz	r2, 800f498 <scalbn+0x38>
 800f470:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f474:	4323      	orrs	r3, r4
 800f476:	d036      	beq.n	800f4e6 <scalbn+0x86>
 800f478:	4b39      	ldr	r3, [pc, #228]	; (800f560 <scalbn+0x100>)
 800f47a:	4629      	mov	r1, r5
 800f47c:	ee10 0a10 	vmov	r0, s0
 800f480:	2200      	movs	r2, #0
 800f482:	f7f1 f8b9 	bl	80005f8 <__aeabi_dmul>
 800f486:	4b37      	ldr	r3, [pc, #220]	; (800f564 <scalbn+0x104>)
 800f488:	429e      	cmp	r6, r3
 800f48a:	4604      	mov	r4, r0
 800f48c:	460d      	mov	r5, r1
 800f48e:	da10      	bge.n	800f4b2 <scalbn+0x52>
 800f490:	a32b      	add	r3, pc, #172	; (adr r3, 800f540 <scalbn+0xe0>)
 800f492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f496:	e03a      	b.n	800f50e <scalbn+0xae>
 800f498:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f49c:	428a      	cmp	r2, r1
 800f49e:	d10c      	bne.n	800f4ba <scalbn+0x5a>
 800f4a0:	ee10 2a10 	vmov	r2, s0
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	4629      	mov	r1, r5
 800f4a8:	f7f0 fef0 	bl	800028c <__adddf3>
 800f4ac:	4604      	mov	r4, r0
 800f4ae:	460d      	mov	r5, r1
 800f4b0:	e019      	b.n	800f4e6 <scalbn+0x86>
 800f4b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	3a36      	subs	r2, #54	; 0x36
 800f4ba:	4432      	add	r2, r6
 800f4bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f4c0:	428a      	cmp	r2, r1
 800f4c2:	dd08      	ble.n	800f4d6 <scalbn+0x76>
 800f4c4:	2d00      	cmp	r5, #0
 800f4c6:	a120      	add	r1, pc, #128	; (adr r1, 800f548 <scalbn+0xe8>)
 800f4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4cc:	da1c      	bge.n	800f508 <scalbn+0xa8>
 800f4ce:	a120      	add	r1, pc, #128	; (adr r1, 800f550 <scalbn+0xf0>)
 800f4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4d4:	e018      	b.n	800f508 <scalbn+0xa8>
 800f4d6:	2a00      	cmp	r2, #0
 800f4d8:	dd08      	ble.n	800f4ec <scalbn+0x8c>
 800f4da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f4e6:	ec45 4b10 	vmov	d0, r4, r5
 800f4ea:	bd70      	pop	{r4, r5, r6, pc}
 800f4ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f4f0:	da19      	bge.n	800f526 <scalbn+0xc6>
 800f4f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f4f6:	429e      	cmp	r6, r3
 800f4f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f4fc:	dd0a      	ble.n	800f514 <scalbn+0xb4>
 800f4fe:	a112      	add	r1, pc, #72	; (adr r1, 800f548 <scalbn+0xe8>)
 800f500:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d1e2      	bne.n	800f4ce <scalbn+0x6e>
 800f508:	a30f      	add	r3, pc, #60	; (adr r3, 800f548 <scalbn+0xe8>)
 800f50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50e:	f7f1 f873 	bl	80005f8 <__aeabi_dmul>
 800f512:	e7cb      	b.n	800f4ac <scalbn+0x4c>
 800f514:	a10a      	add	r1, pc, #40	; (adr r1, 800f540 <scalbn+0xe0>)
 800f516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d0b8      	beq.n	800f490 <scalbn+0x30>
 800f51e:	a10e      	add	r1, pc, #56	; (adr r1, 800f558 <scalbn+0xf8>)
 800f520:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f524:	e7b4      	b.n	800f490 <scalbn+0x30>
 800f526:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f52a:	3236      	adds	r2, #54	; 0x36
 800f52c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f530:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f534:	4620      	mov	r0, r4
 800f536:	4b0c      	ldr	r3, [pc, #48]	; (800f568 <scalbn+0x108>)
 800f538:	2200      	movs	r2, #0
 800f53a:	e7e8      	b.n	800f50e <scalbn+0xae>
 800f53c:	f3af 8000 	nop.w
 800f540:	c2f8f359 	.word	0xc2f8f359
 800f544:	01a56e1f 	.word	0x01a56e1f
 800f548:	8800759c 	.word	0x8800759c
 800f54c:	7e37e43c 	.word	0x7e37e43c
 800f550:	8800759c 	.word	0x8800759c
 800f554:	fe37e43c 	.word	0xfe37e43c
 800f558:	c2f8f359 	.word	0xc2f8f359
 800f55c:	81a56e1f 	.word	0x81a56e1f
 800f560:	43500000 	.word	0x43500000
 800f564:	ffff3cb0 	.word	0xffff3cb0
 800f568:	3c900000 	.word	0x3c900000

0800f56c <_init>:
 800f56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56e:	bf00      	nop
 800f570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f572:	bc08      	pop	{r3}
 800f574:	469e      	mov	lr, r3
 800f576:	4770      	bx	lr

0800f578 <_fini>:
 800f578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f57a:	bf00      	nop
 800f57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f57e:	bc08      	pop	{r3}
 800f580:	469e      	mov	lr, r3
 800f582:	4770      	bx	lr
