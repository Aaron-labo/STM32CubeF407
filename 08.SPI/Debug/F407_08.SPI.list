
F407_08.SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000304c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  080031dc  080031dc  000131dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039a0  080039a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080039a0  080039a0  000139a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039a8  080039a8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039a8  080039a8  000139a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080039b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000078  08003a28  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005e4  08003a28  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb62  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002133  00000000  00000000  0002cc0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002ed40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  0002f6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002173e  00000000  00000000  0002ff20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7f2  00000000  00000000  0005165e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c50a2  00000000  00000000  0005ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121ef2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002834  00000000  00000000  00121f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080031c4 	.word	0x080031c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080031c4 	.word	0x080031c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2110      	movs	r1, #16
 8000570:	480a      	ldr	r0, [pc, #40]	; (800059c <ssd1306_Reset+0x34>)
 8000572:	f001 f893 	bl	800169c <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2104      	movs	r1, #4
 800057a:	4808      	ldr	r0, [pc, #32]	; (800059c <ssd1306_Reset+0x34>)
 800057c:	f001 f88e 	bl	800169c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000580:	200a      	movs	r0, #10
 8000582:	f000 fde5 	bl	8001150 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2104      	movs	r1, #4
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <ssd1306_Reset+0x34>)
 800058c:	f001 f886 	bl	800169c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000590:	200a      	movs	r0, #10
 8000592:	f000 fddd 	bl	8001150 <HAL_Delay>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000

080005a0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80005aa:	2200      	movs	r2, #0
 80005ac:	2110      	movs	r1, #16
 80005ae:	480c      	ldr	r0, [pc, #48]	; (80005e0 <ssd1306_WriteCommand+0x40>)
 80005b0:	f001 f874 	bl	800169c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 80005b4:	2200      	movs	r2, #0
 80005b6:	2108      	movs	r1, #8
 80005b8:	4809      	ldr	r0, [pc, #36]	; (80005e0 <ssd1306_WriteCommand+0x40>)
 80005ba:	f001 f86f 	bl	800169c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80005be:	1df9      	adds	r1, r7, #7
 80005c0:	f04f 33ff 	mov.w	r3, #4294967295
 80005c4:	2201      	movs	r2, #1
 80005c6:	4807      	ldr	r0, [pc, #28]	; (80005e4 <ssd1306_WriteCommand+0x44>)
 80005c8:	f001 fd7f 	bl	80020ca <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80005cc:	2201      	movs	r2, #1
 80005ce:	2110      	movs	r1, #16
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <ssd1306_WriteCommand+0x40>)
 80005d2:	f001 f863 	bl	800169c <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000
 80005e4:	20000534 	.word	0x20000534

080005e8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80005f2:	2200      	movs	r2, #0
 80005f4:	2110      	movs	r1, #16
 80005f6:	480c      	ldr	r0, [pc, #48]	; (8000628 <ssd1306_WriteData+0x40>)
 80005f8:	f001 f850 	bl	800169c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 80005fc:	2201      	movs	r2, #1
 80005fe:	2108      	movs	r1, #8
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <ssd1306_WriteData+0x40>)
 8000602:	f001 f84b 	bl	800169c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	b29a      	uxth	r2, r3
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	6879      	ldr	r1, [r7, #4]
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <ssd1306_WriteData+0x44>)
 8000612:	f001 fd5a 	bl	80020ca <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8000616:	2201      	movs	r2, #1
 8000618:	2110      	movs	r1, #16
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <ssd1306_WriteData+0x40>)
 800061c:	f001 f83e 	bl	800169c <HAL_GPIO_WritePin>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40021000 	.word	0x40021000
 800062c:	20000534 	.word	0x20000534

08000630 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000634:	f7ff ff98 	bl	8000568 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000638:	2064      	movs	r0, #100	; 0x64
 800063a:	f000 fd89 	bl	8001150 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800063e:	2000      	movs	r0, #0
 8000640:	f000 f9e6 	bl	8000a10 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000644:	2020      	movs	r0, #32
 8000646:	f7ff ffab 	bl	80005a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff ffa8 	bl	80005a0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000650:	20b0      	movs	r0, #176	; 0xb0
 8000652:	f7ff ffa5 	bl	80005a0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000656:	20c8      	movs	r0, #200	; 0xc8
 8000658:	f7ff ffa2 	bl	80005a0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800065c:	2000      	movs	r0, #0
 800065e:	f7ff ff9f 	bl	80005a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000662:	2010      	movs	r0, #16
 8000664:	f7ff ff9c 	bl	80005a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000668:	2040      	movs	r0, #64	; 0x40
 800066a:	f7ff ff99 	bl	80005a0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800066e:	20ff      	movs	r0, #255	; 0xff
 8000670:	f000 f9ba 	bl	80009e8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000674:	20a1      	movs	r0, #161	; 0xa1
 8000676:	f7ff ff93 	bl	80005a0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800067a:	20a6      	movs	r0, #166	; 0xa6
 800067c:	f7ff ff90 	bl	80005a0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000680:	20a8      	movs	r0, #168	; 0xa8
 8000682:	f7ff ff8d 	bl	80005a0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000686:	203f      	movs	r0, #63	; 0x3f
 8000688:	f7ff ff8a 	bl	80005a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800068c:	20a4      	movs	r0, #164	; 0xa4
 800068e:	f7ff ff87 	bl	80005a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000692:	20d3      	movs	r0, #211	; 0xd3
 8000694:	f7ff ff84 	bl	80005a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff ff81 	bl	80005a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800069e:	20d5      	movs	r0, #213	; 0xd5
 80006a0:	f7ff ff7e 	bl	80005a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80006a4:	20f0      	movs	r0, #240	; 0xf0
 80006a6:	f7ff ff7b 	bl	80005a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80006aa:	20d9      	movs	r0, #217	; 0xd9
 80006ac:	f7ff ff78 	bl	80005a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80006b0:	2022      	movs	r0, #34	; 0x22
 80006b2:	f7ff ff75 	bl	80005a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80006b6:	20da      	movs	r0, #218	; 0xda
 80006b8:	f7ff ff72 	bl	80005a0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80006bc:	2012      	movs	r0, #18
 80006be:	f7ff ff6f 	bl	80005a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80006c2:	20db      	movs	r0, #219	; 0xdb
 80006c4:	f7ff ff6c 	bl	80005a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80006c8:	2020      	movs	r0, #32
 80006ca:	f7ff ff69 	bl	80005a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80006ce:	208d      	movs	r0, #141	; 0x8d
 80006d0:	f7ff ff66 	bl	80005a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80006d4:	2014      	movs	r0, #20
 80006d6:	f7ff ff63 	bl	80005a0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 f998 	bl	8000a10 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 f80f 	bl	8000704 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80006e6:	f000 f831 	bl	800074c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <ssd1306_Init+0xd0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <ssd1306_Init+0xd0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80006f6:	4b02      	ldr	r3, [pc, #8]	; (8000700 <ssd1306_Init+0xd0>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	715a      	strb	r2, [r3, #5]
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000494 	.word	0x20000494

08000704 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e00d      	b.n	8000730 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d101      	bne.n	800071e <ssd1306_Fill+0x1a>
 800071a:	2100      	movs	r1, #0
 800071c:	e000      	b.n	8000720 <ssd1306_Fill+0x1c>
 800071e:	21ff      	movs	r1, #255	; 0xff
 8000720:	4a09      	ldr	r2, [pc, #36]	; (8000748 <ssd1306_Fill+0x44>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4413      	add	r3, r2
 8000726:	460a      	mov	r2, r1
 8000728:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3301      	adds	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000736:	d3ed      	bcc.n	8000714 <ssd1306_Fill+0x10>
    }
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000094 	.word	0x20000094

0800074c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000752:	2300      	movs	r3, #0
 8000754:	71fb      	strb	r3, [r7, #7]
 8000756:	e016      	b.n	8000786 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	3b50      	subs	r3, #80	; 0x50
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff1e 	bl	80005a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff ff1b 	bl	80005a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800076a:	2010      	movs	r0, #16
 800076c:	f7ff ff18 	bl	80005a0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	01db      	lsls	r3, r3, #7
 8000774:	4a08      	ldr	r2, [pc, #32]	; (8000798 <ssd1306_UpdateScreen+0x4c>)
 8000776:	4413      	add	r3, r2
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff34 	bl	80005e8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	3301      	adds	r3, #1
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b07      	cmp	r3, #7
 800078a:	d9e5      	bls.n	8000758 <ssd1306_UpdateScreen+0xc>
    }
}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000094 	.word	0x20000094

0800079c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
 80007a6:	460b      	mov	r3, r1
 80007a8:	71bb      	strb	r3, [r7, #6]
 80007aa:	4613      	mov	r3, r2
 80007ac:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	db48      	blt.n	8000848 <ssd1306_DrawPixel+0xac>
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	2b3f      	cmp	r3, #63	; 0x3f
 80007ba:	d845      	bhi.n	8000848 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80007bc:	4b25      	ldr	r3, [pc, #148]	; (8000854 <ssd1306_DrawPixel+0xb8>)
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d006      	beq.n	80007d2 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80007c4:	797b      	ldrb	r3, [r7, #5]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	bf0c      	ite	eq
 80007ca:	2301      	moveq	r3, #1
 80007cc:	2300      	movne	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80007d2:	797b      	ldrb	r3, [r7, #5]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d11a      	bne.n	800080e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	79bb      	ldrb	r3, [r7, #6]
 80007dc:	08db      	lsrs	r3, r3, #3
 80007de:	b2d8      	uxtb	r0, r3
 80007e0:	4603      	mov	r3, r0
 80007e2:	01db      	lsls	r3, r3, #7
 80007e4:	4413      	add	r3, r2
 80007e6:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <ssd1306_DrawPixel+0xbc>)
 80007e8:	5cd3      	ldrb	r3, [r2, r3]
 80007ea:	b25a      	sxtb	r2, r3
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	2101      	movs	r1, #1
 80007f4:	fa01 f303 	lsl.w	r3, r1, r3
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	4313      	orrs	r3, r2
 80007fc:	b259      	sxtb	r1, r3
 80007fe:	79fa      	ldrb	r2, [r7, #7]
 8000800:	4603      	mov	r3, r0
 8000802:	01db      	lsls	r3, r3, #7
 8000804:	4413      	add	r3, r2
 8000806:	b2c9      	uxtb	r1, r1
 8000808:	4a13      	ldr	r2, [pc, #76]	; (8000858 <ssd1306_DrawPixel+0xbc>)
 800080a:	54d1      	strb	r1, [r2, r3]
 800080c:	e01d      	b.n	800084a <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800080e:	79fa      	ldrb	r2, [r7, #7]
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	b2d8      	uxtb	r0, r3
 8000816:	4603      	mov	r3, r0
 8000818:	01db      	lsls	r3, r3, #7
 800081a:	4413      	add	r3, r2
 800081c:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <ssd1306_DrawPixel+0xbc>)
 800081e:	5cd3      	ldrb	r3, [r2, r3]
 8000820:	b25a      	sxtb	r2, r3
 8000822:	79bb      	ldrb	r3, [r7, #6]
 8000824:	f003 0307 	and.w	r3, r3, #7
 8000828:	2101      	movs	r1, #1
 800082a:	fa01 f303 	lsl.w	r3, r1, r3
 800082e:	b25b      	sxtb	r3, r3
 8000830:	43db      	mvns	r3, r3
 8000832:	b25b      	sxtb	r3, r3
 8000834:	4013      	ands	r3, r2
 8000836:	b259      	sxtb	r1, r3
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	4603      	mov	r3, r0
 800083c:	01db      	lsls	r3, r3, #7
 800083e:	4413      	add	r3, r2
 8000840:	b2c9      	uxtb	r1, r1
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <ssd1306_DrawPixel+0xbc>)
 8000844:	54d1      	strb	r1, [r2, r3]
 8000846:	e000      	b.n	800084a <ssd1306_DrawPixel+0xae>
        return;
 8000848:	bf00      	nop
    }
}
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	20000494 	.word	0x20000494
 8000858:	20000094 	.word	0x20000094

0800085c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	4604      	mov	r4, r0
 8000864:	1d38      	adds	r0, r7, #4
 8000866:	e880 0006 	stmia.w	r0, {r1, r2}
 800086a:	461a      	mov	r2, r3
 800086c:	4623      	mov	r3, r4
 800086e:	73fb      	strb	r3, [r7, #15]
 8000870:	4613      	mov	r3, r2
 8000872:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	2b1f      	cmp	r3, #31
 8000878:	d902      	bls.n	8000880 <ssd1306_WriteChar+0x24>
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	2b7e      	cmp	r3, #126	; 0x7e
 800087e:	d901      	bls.n	8000884 <ssd1306_WriteChar+0x28>
        return 0;
 8000880:	2300      	movs	r3, #0
 8000882:	e06d      	b.n	8000960 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000884:	4b38      	ldr	r3, [pc, #224]	; (8000968 <ssd1306_WriteChar+0x10c>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	793b      	ldrb	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	2b80      	cmp	r3, #128	; 0x80
 8000890:	dc06      	bgt.n	80008a0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000892:	4b35      	ldr	r3, [pc, #212]	; (8000968 <ssd1306_WriteChar+0x10c>)
 8000894:	885b      	ldrh	r3, [r3, #2]
 8000896:	461a      	mov	r2, r3
 8000898:	797b      	ldrb	r3, [r7, #5]
 800089a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800089c:	2b40      	cmp	r3, #64	; 0x40
 800089e:	dd01      	ble.n	80008a4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	e05d      	b.n	8000960 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
 80008a8:	e04c      	b.n	8000944 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	3b20      	subs	r3, #32
 80008b0:	7979      	ldrb	r1, [r7, #5]
 80008b2:	fb01 f303 	mul.w	r3, r1, r3
 80008b6:	4619      	mov	r1, r3
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	440b      	add	r3, r1
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	4413      	add	r3, r2
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
 80008c8:	e034      	b.n	8000934 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d012      	beq.n	8000900 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <ssd1306_WriteChar+0x10c>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4413      	add	r3, r2
 80008e6:	b2d8      	uxtb	r0, r3
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <ssd1306_WriteChar+0x10c>)
 80008ea:	885b      	ldrh	r3, [r3, #2]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	4413      	add	r3, r2
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	7bba      	ldrb	r2, [r7, #14]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f7ff ff4f 	bl	800079c <ssd1306_DrawPixel>
 80008fe:	e016      	b.n	800092e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000900:	4b19      	ldr	r3, [pc, #100]	; (8000968 <ssd1306_WriteChar+0x10c>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	4413      	add	r3, r2
 800090c:	b2d8      	uxtb	r0, r3
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <ssd1306_WriteChar+0x10c>)
 8000910:	885b      	ldrh	r3, [r3, #2]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4413      	add	r3, r2
 800091a:	b2d9      	uxtb	r1, r3
 800091c:	7bbb      	ldrb	r3, [r7, #14]
 800091e:	2b00      	cmp	r3, #0
 8000920:	bf0c      	ite	eq
 8000922:	2301      	moveq	r3, #1
 8000924:	2300      	movne	r3, #0
 8000926:	b2db      	uxtb	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	f7ff ff37 	bl	800079c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	3301      	adds	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	793b      	ldrb	r3, [r7, #4]
 8000936:	461a      	mov	r2, r3
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	4293      	cmp	r3, r2
 800093c:	d3c5      	bcc.n	80008ca <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3301      	adds	r3, #1
 8000942:	61fb      	str	r3, [r7, #28]
 8000944:	797b      	ldrb	r3, [r7, #5]
 8000946:	461a      	mov	r2, r3
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	4293      	cmp	r3, r2
 800094c:	d3ad      	bcc.n	80008aa <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <ssd1306_WriteChar+0x10c>)
 8000950:	881a      	ldrh	r2, [r3, #0]
 8000952:	793b      	ldrb	r3, [r7, #4]
 8000954:	b29b      	uxth	r3, r3
 8000956:	4413      	add	r3, r2
 8000958:	b29a      	uxth	r2, r3
 800095a:	4b03      	ldr	r3, [pc, #12]	; (8000968 <ssd1306_WriteChar+0x10c>)
 800095c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800095e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3724      	adds	r7, #36	; 0x24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd90      	pop	{r4, r7, pc}
 8000968:	20000494 	.word	0x20000494

0800096c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	1d38      	adds	r0, r7, #4
 8000976:	e880 0006 	stmia.w	r0, {r1, r2}
 800097a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 800097c:	e012      	b.n	80009a4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	7818      	ldrb	r0, [r3, #0]
 8000982:	78fb      	ldrb	r3, [r7, #3]
 8000984:	1d3a      	adds	r2, r7, #4
 8000986:	ca06      	ldmia	r2, {r1, r2}
 8000988:	f7ff ff68 	bl	800085c <ssd1306_WriteChar>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	429a      	cmp	r2, r3
 8000996:	d002      	beq.n	800099e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	e008      	b.n	80009b0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	3301      	adds	r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1e8      	bne.n	800097e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	781b      	ldrb	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	460a      	mov	r2, r1
 80009c2:	71fb      	strb	r3, [r7, #7]
 80009c4:	4613      	mov	r3, r2
 80009c6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <ssd1306_SetCursor+0x2c>)
 80009ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80009d0:	79bb      	ldrb	r3, [r7, #6]
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <ssd1306_SetCursor+0x2c>)
 80009d6:	805a      	strh	r2, [r3, #2]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	20000494 	.word	0x20000494

080009e8 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80009f2:	2381      	movs	r3, #129	; 0x81
 80009f4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fdd1 	bl	80005a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fdcd 	bl	80005a0 <ssd1306_WriteCommand>
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d005      	beq.n	8000a2c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000a20:	23af      	movs	r3, #175	; 0xaf
 8000a22:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <ssd1306_SetDisplayOn+0x38>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	719a      	strb	r2, [r3, #6]
 8000a2a:	e004      	b.n	8000a36 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000a2c:	23ae      	movs	r3, #174	; 0xae
 8000a2e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <ssd1306_SetDisplayOn+0x38>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fdb1 	bl	80005a0 <ssd1306_WriteCommand>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000494 	.word	0x20000494

08000a4c <app_main_init>:
#include "ssd1306.h"

char Tx_Buffer[32];
uint8_t count = 0;

void app_main_init() {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	ssd1306_Init();
 8000a50:	f7ff fdee 	bl	8000630 <ssd1306_Init>
	ssd1306_Fill(Black);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff fe55 	bl	8000704 <ssd1306_Fill>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <app_main>:

void app_main() {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	sprintf(Tx_Buffer, "time:%2d", count);
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <app_main+0x50>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4912      	ldr	r1, [pc, #72]	; (8000ab4 <app_main+0x54>)
 8000a6c:	4812      	ldr	r0, [pc, #72]	; (8000ab8 <app_main+0x58>)
 8000a6e:	f001 ff89 	bl	8002984 <siprintf>
	ssd1306_SetCursor(25, 15);
 8000a72:	210f      	movs	r1, #15
 8000a74:	2019      	movs	r0, #25
 8000a76:	f7ff ff9f 	bl	80009b8 <ssd1306_SetCursor>
	ssd1306_WriteString(Tx_Buffer, Font_7x10, White);
 8000a7a:	4a10      	ldr	r2, [pc, #64]	; (8000abc <app_main+0x5c>)
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	ca06      	ldmia	r2, {r1, r2}
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <app_main+0x58>)
 8000a82:	f7ff ff73 	bl	800096c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000a86:	f7ff fe61 	bl	800074c <ssd1306_UpdateScreen>
	if((++count) == 20 ){
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <app_main+0x50>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <app_main+0x50>)
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <app_main+0x50>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b14      	cmp	r3, #20
 8000a9c:	d102      	bne.n	8000aa4 <app_main+0x44>
		count = 0;
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <app_main+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1000);
 8000aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa8:	f000 fb52 	bl	8001150 <HAL_Delay>
//	ssd1306_Fill(Black);

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000049c 	.word	0x2000049c
 8000ab4:	080031dc 	.word	0x080031dc
 8000ab8:	200004ac 	.word	0x200004ac
 8000abc:	20000000 	.word	0x20000000

08000ac0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b37      	ldr	r3, [pc, #220]	; (8000bb8 <MX_GPIO_Init+0xf8>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a36      	ldr	r2, [pc, #216]	; (8000bb8 <MX_GPIO_Init+0xf8>)
 8000ae0:	f043 0310 	orr.w	r3, r3, #16
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b34      	ldr	r3, [pc, #208]	; (8000bb8 <MX_GPIO_Init+0xf8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <MX_GPIO_Init+0xf8>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a2f      	ldr	r2, [pc, #188]	; (8000bb8 <MX_GPIO_Init+0xf8>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <MX_GPIO_Init+0xf8>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <MX_GPIO_Init+0xf8>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a28      	ldr	r2, [pc, #160]	; (8000bb8 <MX_GPIO_Init+0xf8>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <MX_GPIO_Init+0xf8>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <MX_GPIO_Init+0xf8>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <MX_GPIO_Init+0xf8>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <MX_GPIO_Init+0xf8>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_Res_GPIO_Port, OLED_Res_Pin, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2104      	movs	r1, #4
 8000b4a:	481c      	ldr	r0, [pc, #112]	; (8000bbc <MX_GPIO_Init+0xfc>)
 8000b4c:	f000 fda6 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2118      	movs	r1, #24
 8000b54:	4819      	ldr	r0, [pc, #100]	; (8000bbc <MX_GPIO_Init+0xfc>)
 8000b56:	f000 fda1 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_Res_Pin;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_Res_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4812      	ldr	r0, [pc, #72]	; (8000bbc <MX_GPIO_Init+0xfc>)
 8000b72:	f000 fbf7 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8000b76:	2308      	movs	r3, #8
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480b      	ldr	r0, [pc, #44]	; (8000bbc <MX_GPIO_Init+0xfc>)
 8000b8e:	f000 fbe9 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000b92:	2310      	movs	r3, #16
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <MX_GPIO_Init+0xfc>)
 8000baa:	f000 fbdb 	bl	8001364 <HAL_GPIO_Init>

}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc4:	f000 fa52 	bl	800106c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc8:	f000 f80c 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bcc:	f7ff ff78 	bl	8000ac0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bd0:	f000 f878 	bl	8000cc4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000bd4:	f000 f9ae 	bl	8000f34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 8000bd8:	f7ff ff38 	bl	8000a4c <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main();
 8000bdc:	f7ff ff40 	bl	8000a60 <app_main>
 8000be0:	e7fc      	b.n	8000bdc <main+0x1c>
	...

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b094      	sub	sp, #80	; 0x50
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0320 	add.w	r3, r7, #32
 8000bee:	2230      	movs	r2, #48	; 0x30
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 febe 	bl	8002974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	4b28      	ldr	r3, [pc, #160]	; (8000cb0 <SystemClock_Config+0xcc>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	4a27      	ldr	r2, [pc, #156]	; (8000cb0 <SystemClock_Config+0xcc>)
 8000c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c16:	6413      	str	r3, [r2, #64]	; 0x40
 8000c18:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <SystemClock_Config+0xcc>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <SystemClock_Config+0xd0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemClock_Config+0xd0>)
 8000c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <SystemClock_Config+0xd0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c54:	2304      	movs	r3, #4
 8000c56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c58:	23a8      	movs	r3, #168	; 0xa8
 8000c5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c60:	2304      	movs	r3, #4
 8000c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c64:	f107 0320 	add.w	r3, r7, #32
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 fd31 	bl	80016d0 <HAL_RCC_OscConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c74:	f000 f820 	bl	8000cb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c78:	230f      	movs	r3, #15
 8000c7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2105      	movs	r1, #5
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 ff92 	bl	8001bc0 <HAL_RCC_ClockConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ca2:	f000 f809 	bl	8000cb8 <Error_Handler>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3750      	adds	r7, #80	; 0x50
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40007000 	.word	0x40007000

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_SPI1_Init+0x64>)
 8000cca:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <MX_SPI1_Init+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_SPI1_Init+0x64>)
 8000cd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_SPI1_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_SPI1_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_SPI1_Init+0x64>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_SPI1_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_SPI1_Init+0x64>)
 8000cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_SPI1_Init+0x64>)
 8000cf8:	2230      	movs	r2, #48	; 0x30
 8000cfa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <MX_SPI1_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_SPI1_Init+0x64>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <MX_SPI1_Init+0x64>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_SPI1_Init+0x64>)
 8000d10:	220a      	movs	r2, #10
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_SPI1_Init+0x64>)
 8000d16:	f001 f94f 	bl	8001fb8 <HAL_SPI_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d20:	f7ff ffca 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000534 	.word	0x20000534
 8000d2c:	40013000 	.word	0x40013000

08000d30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <HAL_SPI_MspInit+0xc0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d149      	bne.n	8000de6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <HAL_SPI_MspInit+0xc4>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a26      	ldr	r2, [pc, #152]	; (8000df4 <HAL_SPI_MspInit+0xc4>)
 8000d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <HAL_SPI_MspInit+0xc4>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_SPI_MspInit+0xc4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a1f      	ldr	r2, [pc, #124]	; (8000df4 <HAL_SPI_MspInit+0xc4>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_SPI_MspInit+0xc4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_SPI_MspInit+0xc4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a18      	ldr	r2, [pc, #96]	; (8000df4 <HAL_SPI_MspInit+0xc4>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <HAL_SPI_MspInit+0xc4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000da6:	2320      	movs	r3, #32
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db6:	2305      	movs	r3, #5
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <HAL_SPI_MspInit+0xc8>)
 8000dc2:	f000 facf 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dc6:	2330      	movs	r3, #48	; 0x30
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dd6:	2305      	movs	r3, #5
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	4806      	ldr	r0, [pc, #24]	; (8000dfc <HAL_SPI_MspInit+0xcc>)
 8000de2:	f000 fabf 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	; 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40013000 	.word	0x40013000
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	40020400 	.word	0x40020400

08000e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_MspInit+0x4c>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9c:	f000 f938 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed4:	f001 fd16 	bl	8002904 <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20020000 	.word	0x20020000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	200004a0 	.word	0x200004a0
 8000f0c:	200005e8 	.word	0x200005e8

08000f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_USART1_UART_Init+0x4c>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <MX_USART1_UART_Init+0x50>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <MX_USART1_UART_Init+0x4c>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_USART1_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_USART1_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_USART1_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_USART1_UART_Init+0x4c>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_USART1_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_USART1_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_USART1_UART_Init+0x4c>)
 8000f6c:	f001 fab4 	bl	80024d8 <HAL_UART_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f76:	f7ff fe9f 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000058c 	.word	0x2000058c
 8000f84:	40011000 	.word	0x40011000

08000f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a19      	ldr	r2, [pc, #100]	; (800100c <HAL_UART_MspInit+0x84>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d12c      	bne.n	8001004 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a17      	ldr	r2, [pc, #92]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fb4:	f043 0310 	orr.w	r3, r3, #16
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_UART_MspInit+0x88>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fe2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <HAL_UART_MspInit+0x8c>)
 8001000:	f000 f9b0 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40011000 	.word	0x40011000
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000

08001018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001050 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800101e:	490e      	ldr	r1, [pc, #56]	; (8001058 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001020:	4a0e      	ldr	r2, [pc, #56]	; (800105c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001034:	4c0b      	ldr	r4, [pc, #44]	; (8001064 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001042:	f7ff ff65 	bl	8000f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001046:	f001 fc63 	bl	8002910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104a:	f7ff fdb9 	bl	8000bc0 <main>
  bx  lr    
 800104e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001050:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800105c:	080039b0 	.word	0x080039b0
  ldr r2, =_sbss
 8001060:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001064:	200005e4 	.word	0x200005e4

08001068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC_IRQHandler>
	...

0800106c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <HAL_Init+0x40>)
 8001076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_Init+0x40>)
 8001082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001086:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <HAL_Init+0x40>)
 800108e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001092:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f931 	bl	80012fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109a:	2000      	movs	r0, #0
 800109c:	f000 f808 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a0:	f7ff feae 	bl	8000e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023c00 	.word	0x40023c00

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x54>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x58>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f93b 	bl	800134a <HAL_SYSTICK_Config>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e00e      	b.n	80010fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d80a      	bhi.n	80010fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ec:	f000 f911 	bl	8001312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <HAL_InitTick+0x5c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000008 	.word	0x20000008
 8001108:	20000010 	.word	0x20000010
 800110c:	2000000c 	.word	0x2000000c

08001110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x20>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x24>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <HAL_IncTick+0x24>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000010 	.word	0x20000010
 8001134:	200005d0 	.word	0x200005d0

08001138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_GetTick+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	200005d0 	.word	0x200005d0

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff ffee 	bl	8001138 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_Delay+0x44>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffde 	bl	8001138 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000010 	.word	0x20000010

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff47 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff5c 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff8e 	bl	8001250 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff5d 	bl	80011fc <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffb0 	bl	80012b8 <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	e16b      	b.n	8001658 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 815a 	bne.w	8001652 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d005      	beq.n	80013b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d130      	bne.n	8001418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 0201 	and.w	r2, r3, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b03      	cmp	r3, #3
 8001422:	d017      	beq.n	8001454 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d123      	bne.n	80014a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	08da      	lsrs	r2, r3, #3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	220f      	movs	r2, #15
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	08da      	lsrs	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3208      	adds	r2, #8
 80014a2:	69b9      	ldr	r1, [r7, #24]
 80014a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0203 	and.w	r2, r3, #3
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80b4 	beq.w	8001652 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b60      	ldr	r3, [pc, #384]	; (8001670 <HAL_GPIO_Init+0x30c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a5f      	ldr	r2, [pc, #380]	; (8001670 <HAL_GPIO_Init+0x30c>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b5d      	ldr	r3, [pc, #372]	; (8001670 <HAL_GPIO_Init+0x30c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001506:	4a5b      	ldr	r2, [pc, #364]	; (8001674 <HAL_GPIO_Init+0x310>)
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a52      	ldr	r2, [pc, #328]	; (8001678 <HAL_GPIO_Init+0x314>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d02b      	beq.n	800158a <HAL_GPIO_Init+0x226>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a51      	ldr	r2, [pc, #324]	; (800167c <HAL_GPIO_Init+0x318>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d025      	beq.n	8001586 <HAL_GPIO_Init+0x222>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a50      	ldr	r2, [pc, #320]	; (8001680 <HAL_GPIO_Init+0x31c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d01f      	beq.n	8001582 <HAL_GPIO_Init+0x21e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4f      	ldr	r2, [pc, #316]	; (8001684 <HAL_GPIO_Init+0x320>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d019      	beq.n	800157e <HAL_GPIO_Init+0x21a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4e      	ldr	r2, [pc, #312]	; (8001688 <HAL_GPIO_Init+0x324>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_GPIO_Init+0x216>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4d      	ldr	r2, [pc, #308]	; (800168c <HAL_GPIO_Init+0x328>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00d      	beq.n	8001576 <HAL_GPIO_Init+0x212>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4c      	ldr	r2, [pc, #304]	; (8001690 <HAL_GPIO_Init+0x32c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d007      	beq.n	8001572 <HAL_GPIO_Init+0x20e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4b      	ldr	r2, [pc, #300]	; (8001694 <HAL_GPIO_Init+0x330>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_GPIO_Init+0x20a>
 800156a:	2307      	movs	r3, #7
 800156c:	e00e      	b.n	800158c <HAL_GPIO_Init+0x228>
 800156e:	2308      	movs	r3, #8
 8001570:	e00c      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001572:	2306      	movs	r3, #6
 8001574:	e00a      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001576:	2305      	movs	r3, #5
 8001578:	e008      	b.n	800158c <HAL_GPIO_Init+0x228>
 800157a:	2304      	movs	r3, #4
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x228>
 800157e:	2303      	movs	r3, #3
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x228>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x228>
 800158a:	2300      	movs	r3, #0
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	f002 0203 	and.w	r2, r2, #3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800159c:	4935      	ldr	r1, [pc, #212]	; (8001674 <HAL_GPIO_Init+0x310>)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <HAL_GPIO_Init+0x334>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ce:	4a32      	ldr	r2, [pc, #200]	; (8001698 <HAL_GPIO_Init+0x334>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015d4:	4b30      	ldr	r3, [pc, #192]	; (8001698 <HAL_GPIO_Init+0x334>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015f8:	4a27      	ldr	r2, [pc, #156]	; (8001698 <HAL_GPIO_Init+0x334>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_GPIO_Init+0x334>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001622:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_GPIO_Init+0x334>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_GPIO_Init+0x334>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800164c:	4a12      	ldr	r2, [pc, #72]	; (8001698 <HAL_GPIO_Init+0x334>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3301      	adds	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b0f      	cmp	r3, #15
 800165c:	f67f ae90 	bls.w	8001380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40013800 	.word	0x40013800
 8001678:	40020000 	.word	0x40020000
 800167c:	40020400 	.word	0x40020400
 8001680:	40020800 	.word	0x40020800
 8001684:	40020c00 	.word	0x40020c00
 8001688:	40021000 	.word	0x40021000
 800168c:	40021400 	.word	0x40021400
 8001690:	40021800 	.word	0x40021800
 8001694:	40021c00 	.word	0x40021c00
 8001698:	40013c00 	.word	0x40013c00

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b8:	e003      	b.n	80016c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	619a      	str	r2, [r3, #24]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e264      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d075      	beq.n	80017da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ee:	4ba3      	ldr	r3, [pc, #652]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d00c      	beq.n	8001714 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fa:	4ba0      	ldr	r3, [pc, #640]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001702:	2b08      	cmp	r3, #8
 8001704:	d112      	bne.n	800172c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001706:	4b9d      	ldr	r3, [pc, #628]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001712:	d10b      	bne.n	800172c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	4b99      	ldr	r3, [pc, #612]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d05b      	beq.n	80017d8 <HAL_RCC_OscConfig+0x108>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d157      	bne.n	80017d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e23f      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001734:	d106      	bne.n	8001744 <HAL_RCC_OscConfig+0x74>
 8001736:	4b91      	ldr	r3, [pc, #580]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a90      	ldr	r2, [pc, #576]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800173c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e01d      	b.n	8001780 <HAL_RCC_OscConfig+0xb0>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x98>
 800174e:	4b8b      	ldr	r3, [pc, #556]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a8a      	ldr	r2, [pc, #552]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b88      	ldr	r3, [pc, #544]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a87      	ldr	r2, [pc, #540]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e00b      	b.n	8001780 <HAL_RCC_OscConfig+0xb0>
 8001768:	4b84      	ldr	r3, [pc, #528]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a83      	ldr	r2, [pc, #524]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800176e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b81      	ldr	r3, [pc, #516]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a80      	ldr	r2, [pc, #512]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800177a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d013      	beq.n	80017b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fcd6 	bl	8001138 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fcd2 	bl	8001138 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e204      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a2:	4b76      	ldr	r3, [pc, #472]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0xc0>
 80017ae:	e014      	b.n	80017da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fcc2 	bl	8001138 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b8:	f7ff fcbe 	bl	8001138 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	; 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e1f0      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ca:	4b6c      	ldr	r3, [pc, #432]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0xe8>
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d063      	beq.n	80018ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017e6:	4b65      	ldr	r3, [pc, #404]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00b      	beq.n	800180a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f2:	4b62      	ldr	r3, [pc, #392]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d11c      	bne.n	8001838 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017fe:	4b5f      	ldr	r3, [pc, #380]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d116      	bne.n	8001838 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180a:	4b5c      	ldr	r3, [pc, #368]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <HAL_RCC_OscConfig+0x152>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d001      	beq.n	8001822 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e1c4      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001822:	4b56      	ldr	r3, [pc, #344]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4952      	ldr	r1, [pc, #328]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001836:	e03a      	b.n	80018ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001840:	4b4f      	ldr	r3, [pc, #316]	; (8001980 <HAL_RCC_OscConfig+0x2b0>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff fc77 	bl	8001138 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800184e:	f7ff fc73 	bl	8001138 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e1a5      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001860:	4b46      	ldr	r3, [pc, #280]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b43      	ldr	r3, [pc, #268]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4940      	ldr	r1, [pc, #256]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800187c:	4313      	orrs	r3, r2
 800187e:	600b      	str	r3, [r1, #0]
 8001880:	e015      	b.n	80018ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001882:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <HAL_RCC_OscConfig+0x2b0>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff fc56 	bl	8001138 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001890:	f7ff fc52 	bl	8001138 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e184      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a2:	4b36      	ldr	r3, [pc, #216]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d030      	beq.n	800191c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d016      	beq.n	80018f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c2:	4b30      	ldr	r3, [pc, #192]	; (8001984 <HAL_RCC_OscConfig+0x2b4>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff fc36 	bl	8001138 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d0:	f7ff fc32 	bl	8001138 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e164      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x200>
 80018ee:	e015      	b.n	800191c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <HAL_RCC_OscConfig+0x2b4>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7ff fc1f 	bl	8001138 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fe:	f7ff fc1b 	bl	8001138 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e14d      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	4b1a      	ldr	r3, [pc, #104]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80a0 	beq.w	8001a6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10f      	bne.n	800195a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_RCC_OscConfig+0x2ac>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001956:	2301      	movs	r3, #1
 8001958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_RCC_OscConfig+0x2b8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d121      	bne.n	80019aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_RCC_OscConfig+0x2b8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_RCC_OscConfig+0x2b8>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001972:	f7ff fbe1 	bl	8001138 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	e011      	b.n	800199e <HAL_RCC_OscConfig+0x2ce>
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	42470000 	.word	0x42470000
 8001984:	42470e80 	.word	0x42470e80
 8001988:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198c:	f7ff fbd4 	bl	8001138 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e106      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199e:	4b85      	ldr	r3, [pc, #532]	; (8001bb4 <HAL_RCC_OscConfig+0x4e4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x2f0>
 80019b2:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b6:	4a80      	ldr	r2, [pc, #512]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6713      	str	r3, [r2, #112]	; 0x70
 80019be:	e01c      	b.n	80019fa <HAL_RCC_OscConfig+0x32a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d10c      	bne.n	80019e2 <HAL_RCC_OscConfig+0x312>
 80019c8:	4b7b      	ldr	r3, [pc, #492]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	4a7a      	ldr	r2, [pc, #488]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	6713      	str	r3, [r2, #112]	; 0x70
 80019d4:	4b78      	ldr	r3, [pc, #480]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d8:	4a77      	ldr	r2, [pc, #476]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6713      	str	r3, [r2, #112]	; 0x70
 80019e0:	e00b      	b.n	80019fa <HAL_RCC_OscConfig+0x32a>
 80019e2:	4b75      	ldr	r3, [pc, #468]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e6:	4a74      	ldr	r2, [pc, #464]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	6713      	str	r3, [r2, #112]	; 0x70
 80019ee:	4b72      	ldr	r3, [pc, #456]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	4a71      	ldr	r2, [pc, #452]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 80019f4:	f023 0304 	bic.w	r3, r3, #4
 80019f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d015      	beq.n	8001a2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff fb99 	bl	8001138 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a08:	e00a      	b.n	8001a20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f7ff fb95 	bl	8001138 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e0c5      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a20:	4b65      	ldr	r3, [pc, #404]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0ee      	beq.n	8001a0a <HAL_RCC_OscConfig+0x33a>
 8001a2c:	e014      	b.n	8001a58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fb83 	bl	8001138 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff fb7f 	bl	8001138 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0af      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4c:	4b5a      	ldr	r3, [pc, #360]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1ee      	bne.n	8001a36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d105      	bne.n	8001a6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5e:	4b56      	ldr	r3, [pc, #344]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a55      	ldr	r2, [pc, #340]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 809b 	beq.w	8001baa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a74:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d05c      	beq.n	8001b3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d141      	bne.n	8001b0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a88:	4b4c      	ldr	r3, [pc, #304]	; (8001bbc <HAL_RCC_OscConfig+0x4ec>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fb53 	bl	8001138 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff fb4f 	bl	8001138 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e081      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa8:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69da      	ldr	r2, [r3, #28]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	019b      	lsls	r3, r3, #6
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	085b      	lsrs	r3, r3, #1
 8001acc:	3b01      	subs	r3, #1
 8001ace:	041b      	lsls	r3, r3, #16
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	061b      	lsls	r3, r3, #24
 8001ad8:	4937      	ldr	r1, [pc, #220]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <HAL_RCC_OscConfig+0x4ec>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fb28 	bl	8001138 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aec:	f7ff fb24 	bl	8001138 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e056      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x41c>
 8001b0a:	e04e      	b.n	8001baa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <HAL_RCC_OscConfig+0x4ec>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7ff fb11 	bl	8001138 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1a:	f7ff fb0d 	bl	8001138 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e03f      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2c:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f0      	bne.n	8001b1a <HAL_RCC_OscConfig+0x44a>
 8001b38:	e037      	b.n	8001baa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e032      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <HAL_RCC_OscConfig+0x4e8>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d028      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d121      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d11a      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b76:	4013      	ands	r3, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d111      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	085b      	lsrs	r3, r3, #1
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	42470060 	.word	0x42470060

08001bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0cc      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d90c      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b8      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	494d      	ldr	r1, [pc, #308]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d044      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d119      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e07f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d003      	beq.n	8001c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e06f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e067      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9e:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f023 0203 	bic.w	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4934      	ldr	r1, [pc, #208]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff fa42 	bl	8001138 <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb8:	f7ff fa3e 	bl	8001138 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e04f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 020c 	and.w	r2, r3, #12
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1eb      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d20c      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e032      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4916      	ldr	r1, [pc, #88]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490e      	ldr	r1, [pc, #56]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d46:	f000 f821 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	490a      	ldr	r1, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	5ccb      	ldrb	r3, [r1, r3]
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1c8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f9a2 	bl	80010b0 <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	08003954 	.word	0x08003954
 8001d84:	20000008 	.word	0x20000008
 8001d88:	2000000c 	.word	0x2000000c

08001d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da4:	4b67      	ldr	r3, [pc, #412]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d00d      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x40>
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	f200 80bd 	bhi.w	8001f30 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dbe:	e0b7      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dc0:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dc2:	60bb      	str	r3, [r7, #8]
       break;
 8001dc4:	e0b7      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dc6:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001dc8:	60bb      	str	r3, [r7, #8]
      break;
 8001dca:	e0b4      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dcc:	4b5d      	ldr	r3, [pc, #372]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dd6:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d04d      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de2:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	099b      	lsrs	r3, r3, #6
 8001de8:	461a      	mov	r2, r3
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	ea02 0800 	and.w	r8, r2, r0
 8001dfa:	ea03 0901 	and.w	r9, r3, r1
 8001dfe:	4640      	mov	r0, r8
 8001e00:	4649      	mov	r1, r9
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	014b      	lsls	r3, r1, #5
 8001e0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e10:	0142      	lsls	r2, r0, #5
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	ebb0 0008 	subs.w	r0, r0, r8
 8001e1a:	eb61 0109 	sbc.w	r1, r1, r9
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	018b      	lsls	r3, r1, #6
 8001e28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e2c:	0182      	lsls	r2, r0, #6
 8001e2e:	1a12      	subs	r2, r2, r0
 8001e30:	eb63 0301 	sbc.w	r3, r3, r1
 8001e34:	f04f 0000 	mov.w	r0, #0
 8001e38:	f04f 0100 	mov.w	r1, #0
 8001e3c:	00d9      	lsls	r1, r3, #3
 8001e3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e42:	00d0      	lsls	r0, r2, #3
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	eb12 0208 	adds.w	r2, r2, r8
 8001e4c:	eb43 0309 	adc.w	r3, r3, r9
 8001e50:	f04f 0000 	mov.w	r0, #0
 8001e54:	f04f 0100 	mov.w	r1, #0
 8001e58:	0259      	lsls	r1, r3, #9
 8001e5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e5e:	0250      	lsls	r0, r2, #9
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	f7fe f9fe 	bl	8000270 <__aeabi_uldivmod>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	e04a      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	099b      	lsrs	r3, r3, #6
 8001e84:	461a      	mov	r2, r3
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e8e:	f04f 0100 	mov.w	r1, #0
 8001e92:	ea02 0400 	and.w	r4, r2, r0
 8001e96:	ea03 0501 	and.w	r5, r3, r1
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	014b      	lsls	r3, r1, #5
 8001ea8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001eac:	0142      	lsls	r2, r0, #5
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	1b00      	subs	r0, r0, r4
 8001eb4:	eb61 0105 	sbc.w	r1, r1, r5
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	018b      	lsls	r3, r1, #6
 8001ec2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ec6:	0182      	lsls	r2, r0, #6
 8001ec8:	1a12      	subs	r2, r2, r0
 8001eca:	eb63 0301 	sbc.w	r3, r3, r1
 8001ece:	f04f 0000 	mov.w	r0, #0
 8001ed2:	f04f 0100 	mov.w	r1, #0
 8001ed6:	00d9      	lsls	r1, r3, #3
 8001ed8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001edc:	00d0      	lsls	r0, r2, #3
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	1912      	adds	r2, r2, r4
 8001ee4:	eb45 0303 	adc.w	r3, r5, r3
 8001ee8:	f04f 0000 	mov.w	r0, #0
 8001eec:	f04f 0100 	mov.w	r1, #0
 8001ef0:	0299      	lsls	r1, r3, #10
 8001ef2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ef6:	0290      	lsls	r0, r2, #10
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	461a      	mov	r2, r3
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	f7fe f9b2 	bl	8000270 <__aeabi_uldivmod>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4613      	mov	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	0c1b      	lsrs	r3, r3, #16
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2c:	60bb      	str	r3, [r7, #8]
      break;
 8001f2e:	e002      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f32:	60bb      	str	r3, [r7, #8]
      break;
 8001f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f36:	68bb      	ldr	r3, [r7, #8]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	00f42400 	.word	0x00f42400
 8001f4c:	007a1200 	.word	0x007a1200

08001f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000008 	.word	0x20000008

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f6c:	f7ff fff0 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	0a9b      	lsrs	r3, r3, #10
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4903      	ldr	r1, [pc, #12]	; (8001f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	08003964 	.word	0x08003964

08001f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f94:	f7ff ffdc 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0b5b      	lsrs	r3, r3, #13
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4903      	ldr	r1, [pc, #12]	; (8001fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	08003964 	.word	0x08003964

08001fb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e07b      	b.n	80020c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d108      	bne.n	8001fe4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fda:	d009      	beq.n	8001ff0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
 8001fe2:	e005      	b.n	8001ff0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d106      	bne.n	8002010 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fe90 	bl	8000d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2202      	movs	r2, #2
 8002014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002026:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002074:	ea42 0103 	orr.w	r1, r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	0c1b      	lsrs	r3, r3, #16
 800208e:	f003 0104 	and.w	r1, r3, #4
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	f003 0210 	and.w	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	69da      	ldr	r2, [r3, #28]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b088      	sub	sp, #32
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	4613      	mov	r3, r2
 80020d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_SPI_Transmit+0x22>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e126      	b.n	800233a <HAL_SPI_Transmit+0x270>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020f4:	f7ff f820 	bl	8001138 <HAL_GetTick>
 80020f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d002      	beq.n	8002110 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800210a:	2302      	movs	r3, #2
 800210c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800210e:	e10b      	b.n	8002328 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <HAL_SPI_Transmit+0x52>
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d102      	bne.n	8002122 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002120:	e102      	b.n	8002328 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2203      	movs	r2, #3
 8002126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	88fa      	ldrh	r2, [r7, #6]
 800213a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	88fa      	ldrh	r2, [r7, #6]
 8002140:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002168:	d10f      	bne.n	800218a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002178:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002188:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002194:	2b40      	cmp	r3, #64	; 0x40
 8002196:	d007      	beq.n	80021a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021b0:	d14b      	bne.n	800224a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <HAL_SPI_Transmit+0xf6>
 80021ba:	8afb      	ldrh	r3, [r7, #22]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d13e      	bne.n	800223e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	881a      	ldrh	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	1c9a      	adds	r2, r3, #2
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021e4:	e02b      	b.n	800223e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d112      	bne.n	800221a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	881a      	ldrh	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	1c9a      	adds	r2, r3, #2
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	86da      	strh	r2, [r3, #54]	; 0x36
 8002218:	e011      	b.n	800223e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800221a:	f7fe ff8d 	bl	8001138 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d803      	bhi.n	8002232 <HAL_SPI_Transmit+0x168>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d102      	bne.n	8002238 <HAL_SPI_Transmit+0x16e>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d102      	bne.n	800223e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800223c:	e074      	b.n	8002328 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1ce      	bne.n	80021e6 <HAL_SPI_Transmit+0x11c>
 8002248:	e04c      	b.n	80022e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_SPI_Transmit+0x18e>
 8002252:	8afb      	ldrh	r3, [r7, #22]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d140      	bne.n	80022da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	330c      	adds	r3, #12
 8002262:	7812      	ldrb	r2, [r2, #0]
 8002264:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800227e:	e02c      	b.n	80022da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d113      	bne.n	80022b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	330c      	adds	r3, #12
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80022b4:	e011      	b.n	80022da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022b6:	f7fe ff3f 	bl	8001138 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d803      	bhi.n	80022ce <HAL_SPI_Transmit+0x204>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d102      	bne.n	80022d4 <HAL_SPI_Transmit+0x20a>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022d8:	e026      	b.n	8002328 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022de:	b29b      	uxth	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1cd      	bne.n	8002280 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	6839      	ldr	r1, [r7, #0]
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 f8b3 	bl	8002454 <SPI_EndRxTxTransaction>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2220      	movs	r2, #32
 80022f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10a      	bne.n	8002318 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	77fb      	strb	r3, [r7, #31]
 8002324:	e000      	b.n	8002328 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002326:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002338:	7ffb      	ldrb	r3, [r7, #31]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3720      	adds	r7, #32
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002354:	f7fe fef0 	bl	8001138 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	4413      	add	r3, r2
 8002362:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002364:	f7fe fee8 	bl	8001138 <HAL_GetTick>
 8002368:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800236a:	4b39      	ldr	r3, [pc, #228]	; (8002450 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	015b      	lsls	r3, r3, #5
 8002370:	0d1b      	lsrs	r3, r3, #20
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	fb02 f303 	mul.w	r3, r2, r3
 8002378:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800237a:	e054      	b.n	8002426 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002382:	d050      	beq.n	8002426 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002384:	f7fe fed8 	bl	8001138 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	429a      	cmp	r2, r3
 8002392:	d902      	bls.n	800239a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d13d      	bne.n	8002416 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023b2:	d111      	bne.n	80023d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023bc:	d004      	beq.n	80023c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c6:	d107      	bne.n	80023d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e0:	d10f      	bne.n	8002402 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002400:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e017      	b.n	8002446 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	3b01      	subs	r3, #1
 8002424:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4013      	ands	r3, r2
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	429a      	cmp	r2, r3
 8002434:	bf0c      	ite	eq
 8002436:	2301      	moveq	r3, #1
 8002438:	2300      	movne	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	429a      	cmp	r2, r3
 8002442:	d19b      	bne.n	800237c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000008 	.word	0x20000008

08002454 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <SPI_EndRxTxTransaction+0x7c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1b      	ldr	r2, [pc, #108]	; (80024d4 <SPI_EndRxTxTransaction+0x80>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0d5b      	lsrs	r3, r3, #21
 800246c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002470:	fb02 f303 	mul.w	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800247e:	d112      	bne.n	80024a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2200      	movs	r2, #0
 8002488:	2180      	movs	r1, #128	; 0x80
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7ff ff5a 	bl	8002344 <SPI_WaitFlagStateUntilTimeout>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d016      	beq.n	80024c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249a:	f043 0220 	orr.w	r2, r3, #32
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e00f      	b.n	80024c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024bc:	2b80      	cmp	r3, #128	; 0x80
 80024be:	d0f2      	beq.n	80024a6 <SPI_EndRxTxTransaction+0x52>
 80024c0:	e000      	b.n	80024c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80024c2:	bf00      	nop
  }

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000008 	.word	0x20000008
 80024d4:	165e9f81 	.word	0x165e9f81

080024d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e03f      	b.n	800256a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7fe fd42 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2224      	movs	r2, #36	; 0x24
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800251a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f829 	bl	8002574 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002530:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002540:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002550:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2220      	movs	r2, #32
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002578:	b09f      	sub	sp, #124	; 0x7c
 800257a:	af00      	add	r7, sp, #0
 800257c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800257e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258a:	68d9      	ldr	r1, [r3, #12]
 800258c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	ea40 0301 	orr.w	r3, r0, r1
 8002594:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	431a      	orrs	r2, r3
 80025a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80025ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025b8:	f021 010c 	bic.w	r1, r1, #12
 80025bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025c2:	430b      	orrs	r3, r1
 80025c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d2:	6999      	ldr	r1, [r3, #24]
 80025d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	ea40 0301 	orr.w	r3, r0, r1
 80025dc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4bc5      	ldr	r3, [pc, #788]	; (80028f8 <UART_SetConfig+0x384>)
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d004      	beq.n	80025f2 <UART_SetConfig+0x7e>
 80025e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4bc3      	ldr	r3, [pc, #780]	; (80028fc <UART_SetConfig+0x388>)
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d103      	bne.n	80025fa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025f2:	f7ff fccd 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 80025f6:	6778      	str	r0, [r7, #116]	; 0x74
 80025f8:	e002      	b.n	8002600 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025fa:	f7ff fcb5 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 80025fe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002608:	f040 80b6 	bne.w	8002778 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800260c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260e:	461c      	mov	r4, r3
 8002610:	f04f 0500 	mov.w	r5, #0
 8002614:	4622      	mov	r2, r4
 8002616:	462b      	mov	r3, r5
 8002618:	1891      	adds	r1, r2, r2
 800261a:	6439      	str	r1, [r7, #64]	; 0x40
 800261c:	415b      	adcs	r3, r3
 800261e:	647b      	str	r3, [r7, #68]	; 0x44
 8002620:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002624:	1912      	adds	r2, r2, r4
 8002626:	eb45 0303 	adc.w	r3, r5, r3
 800262a:	f04f 0000 	mov.w	r0, #0
 800262e:	f04f 0100 	mov.w	r1, #0
 8002632:	00d9      	lsls	r1, r3, #3
 8002634:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002638:	00d0      	lsls	r0, r2, #3
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	1911      	adds	r1, r2, r4
 8002640:	6639      	str	r1, [r7, #96]	; 0x60
 8002642:	416b      	adcs	r3, r5
 8002644:	667b      	str	r3, [r7, #100]	; 0x64
 8002646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	461a      	mov	r2, r3
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	1891      	adds	r1, r2, r2
 8002652:	63b9      	str	r1, [r7, #56]	; 0x38
 8002654:	415b      	adcs	r3, r3
 8002656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002658:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800265c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002660:	f7fd fe06 	bl	8000270 <__aeabi_uldivmod>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4ba5      	ldr	r3, [pc, #660]	; (8002900 <UART_SetConfig+0x38c>)
 800266a:	fba3 2302 	umull	r2, r3, r3, r2
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	011e      	lsls	r6, r3, #4
 8002672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002674:	461c      	mov	r4, r3
 8002676:	f04f 0500 	mov.w	r5, #0
 800267a:	4622      	mov	r2, r4
 800267c:	462b      	mov	r3, r5
 800267e:	1891      	adds	r1, r2, r2
 8002680:	6339      	str	r1, [r7, #48]	; 0x30
 8002682:	415b      	adcs	r3, r3
 8002684:	637b      	str	r3, [r7, #52]	; 0x34
 8002686:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800268a:	1912      	adds	r2, r2, r4
 800268c:	eb45 0303 	adc.w	r3, r5, r3
 8002690:	f04f 0000 	mov.w	r0, #0
 8002694:	f04f 0100 	mov.w	r1, #0
 8002698:	00d9      	lsls	r1, r3, #3
 800269a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800269e:	00d0      	lsls	r0, r2, #3
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	1911      	adds	r1, r2, r4
 80026a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80026a8:	416b      	adcs	r3, r5
 80026aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	461a      	mov	r2, r3
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	1891      	adds	r1, r2, r2
 80026b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80026ba:	415b      	adcs	r3, r3
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026c2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80026c6:	f7fd fdd3 	bl	8000270 <__aeabi_uldivmod>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4b8c      	ldr	r3, [pc, #560]	; (8002900 <UART_SetConfig+0x38c>)
 80026d0:	fba3 1302 	umull	r1, r3, r3, r2
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	2164      	movs	r1, #100	; 0x64
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	3332      	adds	r3, #50	; 0x32
 80026e2:	4a87      	ldr	r2, [pc, #540]	; (8002900 <UART_SetConfig+0x38c>)
 80026e4:	fba2 2303 	umull	r2, r3, r2, r3
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026f0:	441e      	add	r6, r3
 80026f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f4:	4618      	mov	r0, r3
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	1894      	adds	r4, r2, r2
 8002700:	623c      	str	r4, [r7, #32]
 8002702:	415b      	adcs	r3, r3
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
 8002706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800270a:	1812      	adds	r2, r2, r0
 800270c:	eb41 0303 	adc.w	r3, r1, r3
 8002710:	f04f 0400 	mov.w	r4, #0
 8002714:	f04f 0500 	mov.w	r5, #0
 8002718:	00dd      	lsls	r5, r3, #3
 800271a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800271e:	00d4      	lsls	r4, r2, #3
 8002720:	4622      	mov	r2, r4
 8002722:	462b      	mov	r3, r5
 8002724:	1814      	adds	r4, r2, r0
 8002726:	653c      	str	r4, [r7, #80]	; 0x50
 8002728:	414b      	adcs	r3, r1
 800272a:	657b      	str	r3, [r7, #84]	; 0x54
 800272c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	461a      	mov	r2, r3
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	1891      	adds	r1, r2, r2
 8002738:	61b9      	str	r1, [r7, #24]
 800273a:	415b      	adcs	r3, r3
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002742:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002746:	f7fd fd93 	bl	8000270 <__aeabi_uldivmod>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4b6c      	ldr	r3, [pc, #432]	; (8002900 <UART_SetConfig+0x38c>)
 8002750:	fba3 1302 	umull	r1, r3, r3, r2
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	2164      	movs	r1, #100	; 0x64
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	3332      	adds	r3, #50	; 0x32
 8002762:	4a67      	ldr	r2, [pc, #412]	; (8002900 <UART_SetConfig+0x38c>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	f003 0207 	and.w	r2, r3, #7
 800276e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4432      	add	r2, r6
 8002774:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002776:	e0b9      	b.n	80028ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800277a:	461c      	mov	r4, r3
 800277c:	f04f 0500 	mov.w	r5, #0
 8002780:	4622      	mov	r2, r4
 8002782:	462b      	mov	r3, r5
 8002784:	1891      	adds	r1, r2, r2
 8002786:	6139      	str	r1, [r7, #16]
 8002788:	415b      	adcs	r3, r3
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002790:	1912      	adds	r2, r2, r4
 8002792:	eb45 0303 	adc.w	r3, r5, r3
 8002796:	f04f 0000 	mov.w	r0, #0
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	00d9      	lsls	r1, r3, #3
 80027a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027a4:	00d0      	lsls	r0, r2, #3
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	eb12 0804 	adds.w	r8, r2, r4
 80027ae:	eb43 0905 	adc.w	r9, r3, r5
 80027b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f04f 0100 	mov.w	r1, #0
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	008b      	lsls	r3, r1, #2
 80027c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027ca:	0082      	lsls	r2, r0, #2
 80027cc:	4640      	mov	r0, r8
 80027ce:	4649      	mov	r1, r9
 80027d0:	f7fd fd4e 	bl	8000270 <__aeabi_uldivmod>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4b49      	ldr	r3, [pc, #292]	; (8002900 <UART_SetConfig+0x38c>)
 80027da:	fba3 2302 	umull	r2, r3, r3, r2
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	011e      	lsls	r6, r3, #4
 80027e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e4:	4618      	mov	r0, r3
 80027e6:	f04f 0100 	mov.w	r1, #0
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	1894      	adds	r4, r2, r2
 80027f0:	60bc      	str	r4, [r7, #8]
 80027f2:	415b      	adcs	r3, r3
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027fa:	1812      	adds	r2, r2, r0
 80027fc:	eb41 0303 	adc.w	r3, r1, r3
 8002800:	f04f 0400 	mov.w	r4, #0
 8002804:	f04f 0500 	mov.w	r5, #0
 8002808:	00dd      	lsls	r5, r3, #3
 800280a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800280e:	00d4      	lsls	r4, r2, #3
 8002810:	4622      	mov	r2, r4
 8002812:	462b      	mov	r3, r5
 8002814:	1814      	adds	r4, r2, r0
 8002816:	64bc      	str	r4, [r7, #72]	; 0x48
 8002818:	414b      	adcs	r3, r1
 800281a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800281c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4618      	mov	r0, r3
 8002822:	f04f 0100 	mov.w	r1, #0
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	008b      	lsls	r3, r1, #2
 8002830:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002834:	0082      	lsls	r2, r0, #2
 8002836:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800283a:	f7fd fd19 	bl	8000270 <__aeabi_uldivmod>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <UART_SetConfig+0x38c>)
 8002844:	fba3 1302 	umull	r1, r3, r3, r2
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	2164      	movs	r1, #100	; 0x64
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	3332      	adds	r3, #50	; 0x32
 8002856:	4a2a      	ldr	r2, [pc, #168]	; (8002900 <UART_SetConfig+0x38c>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002862:	441e      	add	r6, r3
 8002864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002866:	4618      	mov	r0, r3
 8002868:	f04f 0100 	mov.w	r1, #0
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	1894      	adds	r4, r2, r2
 8002872:	603c      	str	r4, [r7, #0]
 8002874:	415b      	adcs	r3, r3
 8002876:	607b      	str	r3, [r7, #4]
 8002878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800287c:	1812      	adds	r2, r2, r0
 800287e:	eb41 0303 	adc.w	r3, r1, r3
 8002882:	f04f 0400 	mov.w	r4, #0
 8002886:	f04f 0500 	mov.w	r5, #0
 800288a:	00dd      	lsls	r5, r3, #3
 800288c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002890:	00d4      	lsls	r4, r2, #3
 8002892:	4622      	mov	r2, r4
 8002894:	462b      	mov	r3, r5
 8002896:	eb12 0a00 	adds.w	sl, r2, r0
 800289a:	eb43 0b01 	adc.w	fp, r3, r1
 800289e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f04f 0100 	mov.w	r1, #0
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	f04f 0300 	mov.w	r3, #0
 80028b0:	008b      	lsls	r3, r1, #2
 80028b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028b6:	0082      	lsls	r2, r0, #2
 80028b8:	4650      	mov	r0, sl
 80028ba:	4659      	mov	r1, fp
 80028bc:	f7fd fcd8 	bl	8000270 <__aeabi_uldivmod>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <UART_SetConfig+0x38c>)
 80028c6:	fba3 1302 	umull	r1, r3, r3, r2
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2164      	movs	r1, #100	; 0x64
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	3332      	adds	r3, #50	; 0x32
 80028d8:	4a09      	ldr	r2, [pc, #36]	; (8002900 <UART_SetConfig+0x38c>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	f003 020f 	and.w	r2, r3, #15
 80028e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4432      	add	r2, r6
 80028ea:	609a      	str	r2, [r3, #8]
}
 80028ec:	bf00      	nop
 80028ee:	377c      	adds	r7, #124	; 0x7c
 80028f0:	46bd      	mov	sp, r7
 80028f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028f6:	bf00      	nop
 80028f8:	40011000 	.word	0x40011000
 80028fc:	40011400 	.word	0x40011400
 8002900:	51eb851f 	.word	0x51eb851f

08002904 <__errno>:
 8002904:	4b01      	ldr	r3, [pc, #4]	; (800290c <__errno+0x8>)
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000014 	.word	0x20000014

08002910 <__libc_init_array>:
 8002910:	b570      	push	{r4, r5, r6, lr}
 8002912:	4d0d      	ldr	r5, [pc, #52]	; (8002948 <__libc_init_array+0x38>)
 8002914:	4c0d      	ldr	r4, [pc, #52]	; (800294c <__libc_init_array+0x3c>)
 8002916:	1b64      	subs	r4, r4, r5
 8002918:	10a4      	asrs	r4, r4, #2
 800291a:	2600      	movs	r6, #0
 800291c:	42a6      	cmp	r6, r4
 800291e:	d109      	bne.n	8002934 <__libc_init_array+0x24>
 8002920:	4d0b      	ldr	r5, [pc, #44]	; (8002950 <__libc_init_array+0x40>)
 8002922:	4c0c      	ldr	r4, [pc, #48]	; (8002954 <__libc_init_array+0x44>)
 8002924:	f000 fc4e 	bl	80031c4 <_init>
 8002928:	1b64      	subs	r4, r4, r5
 800292a:	10a4      	asrs	r4, r4, #2
 800292c:	2600      	movs	r6, #0
 800292e:	42a6      	cmp	r6, r4
 8002930:	d105      	bne.n	800293e <__libc_init_array+0x2e>
 8002932:	bd70      	pop	{r4, r5, r6, pc}
 8002934:	f855 3b04 	ldr.w	r3, [r5], #4
 8002938:	4798      	blx	r3
 800293a:	3601      	adds	r6, #1
 800293c:	e7ee      	b.n	800291c <__libc_init_array+0xc>
 800293e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002942:	4798      	blx	r3
 8002944:	3601      	adds	r6, #1
 8002946:	e7f2      	b.n	800292e <__libc_init_array+0x1e>
 8002948:	080039a8 	.word	0x080039a8
 800294c:	080039a8 	.word	0x080039a8
 8002950:	080039a8 	.word	0x080039a8
 8002954:	080039ac 	.word	0x080039ac

08002958 <memcpy>:
 8002958:	440a      	add	r2, r1
 800295a:	4291      	cmp	r1, r2
 800295c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002960:	d100      	bne.n	8002964 <memcpy+0xc>
 8002962:	4770      	bx	lr
 8002964:	b510      	push	{r4, lr}
 8002966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800296a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800296e:	4291      	cmp	r1, r2
 8002970:	d1f9      	bne.n	8002966 <memcpy+0xe>
 8002972:	bd10      	pop	{r4, pc}

08002974 <memset>:
 8002974:	4402      	add	r2, r0
 8002976:	4603      	mov	r3, r0
 8002978:	4293      	cmp	r3, r2
 800297a:	d100      	bne.n	800297e <memset+0xa>
 800297c:	4770      	bx	lr
 800297e:	f803 1b01 	strb.w	r1, [r3], #1
 8002982:	e7f9      	b.n	8002978 <memset+0x4>

08002984 <siprintf>:
 8002984:	b40e      	push	{r1, r2, r3}
 8002986:	b500      	push	{lr}
 8002988:	b09c      	sub	sp, #112	; 0x70
 800298a:	ab1d      	add	r3, sp, #116	; 0x74
 800298c:	9002      	str	r0, [sp, #8]
 800298e:	9006      	str	r0, [sp, #24]
 8002990:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002994:	4809      	ldr	r0, [pc, #36]	; (80029bc <siprintf+0x38>)
 8002996:	9107      	str	r1, [sp, #28]
 8002998:	9104      	str	r1, [sp, #16]
 800299a:	4909      	ldr	r1, [pc, #36]	; (80029c0 <siprintf+0x3c>)
 800299c:	f853 2b04 	ldr.w	r2, [r3], #4
 80029a0:	9105      	str	r1, [sp, #20]
 80029a2:	6800      	ldr	r0, [r0, #0]
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	a902      	add	r1, sp, #8
 80029a8:	f000 f868 	bl	8002a7c <_svfiprintf_r>
 80029ac:	9b02      	ldr	r3, [sp, #8]
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	b01c      	add	sp, #112	; 0x70
 80029b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80029b8:	b003      	add	sp, #12
 80029ba:	4770      	bx	lr
 80029bc:	20000014 	.word	0x20000014
 80029c0:	ffff0208 	.word	0xffff0208

080029c4 <__ssputs_r>:
 80029c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029c8:	688e      	ldr	r6, [r1, #8]
 80029ca:	429e      	cmp	r6, r3
 80029cc:	4682      	mov	sl, r0
 80029ce:	460c      	mov	r4, r1
 80029d0:	4690      	mov	r8, r2
 80029d2:	461f      	mov	r7, r3
 80029d4:	d838      	bhi.n	8002a48 <__ssputs_r+0x84>
 80029d6:	898a      	ldrh	r2, [r1, #12]
 80029d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029dc:	d032      	beq.n	8002a44 <__ssputs_r+0x80>
 80029de:	6825      	ldr	r5, [r4, #0]
 80029e0:	6909      	ldr	r1, [r1, #16]
 80029e2:	eba5 0901 	sub.w	r9, r5, r1
 80029e6:	6965      	ldr	r5, [r4, #20]
 80029e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029f0:	3301      	adds	r3, #1
 80029f2:	444b      	add	r3, r9
 80029f4:	106d      	asrs	r5, r5, #1
 80029f6:	429d      	cmp	r5, r3
 80029f8:	bf38      	it	cc
 80029fa:	461d      	movcc	r5, r3
 80029fc:	0553      	lsls	r3, r2, #21
 80029fe:	d531      	bpl.n	8002a64 <__ssputs_r+0xa0>
 8002a00:	4629      	mov	r1, r5
 8002a02:	f000 fb39 	bl	8003078 <_malloc_r>
 8002a06:	4606      	mov	r6, r0
 8002a08:	b950      	cbnz	r0, 8002a20 <__ssputs_r+0x5c>
 8002a0a:	230c      	movs	r3, #12
 8002a0c:	f8ca 3000 	str.w	r3, [sl]
 8002a10:	89a3      	ldrh	r3, [r4, #12]
 8002a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a16:	81a3      	strh	r3, [r4, #12]
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a20:	6921      	ldr	r1, [r4, #16]
 8002a22:	464a      	mov	r2, r9
 8002a24:	f7ff ff98 	bl	8002958 <memcpy>
 8002a28:	89a3      	ldrh	r3, [r4, #12]
 8002a2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a32:	81a3      	strh	r3, [r4, #12]
 8002a34:	6126      	str	r6, [r4, #16]
 8002a36:	6165      	str	r5, [r4, #20]
 8002a38:	444e      	add	r6, r9
 8002a3a:	eba5 0509 	sub.w	r5, r5, r9
 8002a3e:	6026      	str	r6, [r4, #0]
 8002a40:	60a5      	str	r5, [r4, #8]
 8002a42:	463e      	mov	r6, r7
 8002a44:	42be      	cmp	r6, r7
 8002a46:	d900      	bls.n	8002a4a <__ssputs_r+0x86>
 8002a48:	463e      	mov	r6, r7
 8002a4a:	4632      	mov	r2, r6
 8002a4c:	6820      	ldr	r0, [r4, #0]
 8002a4e:	4641      	mov	r1, r8
 8002a50:	f000 faa8 	bl	8002fa4 <memmove>
 8002a54:	68a3      	ldr	r3, [r4, #8]
 8002a56:	6822      	ldr	r2, [r4, #0]
 8002a58:	1b9b      	subs	r3, r3, r6
 8002a5a:	4432      	add	r2, r6
 8002a5c:	60a3      	str	r3, [r4, #8]
 8002a5e:	6022      	str	r2, [r4, #0]
 8002a60:	2000      	movs	r0, #0
 8002a62:	e7db      	b.n	8002a1c <__ssputs_r+0x58>
 8002a64:	462a      	mov	r2, r5
 8002a66:	f000 fb61 	bl	800312c <_realloc_r>
 8002a6a:	4606      	mov	r6, r0
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	d1e1      	bne.n	8002a34 <__ssputs_r+0x70>
 8002a70:	6921      	ldr	r1, [r4, #16]
 8002a72:	4650      	mov	r0, sl
 8002a74:	f000 fab0 	bl	8002fd8 <_free_r>
 8002a78:	e7c7      	b.n	8002a0a <__ssputs_r+0x46>
	...

08002a7c <_svfiprintf_r>:
 8002a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a80:	4698      	mov	r8, r3
 8002a82:	898b      	ldrh	r3, [r1, #12]
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	b09d      	sub	sp, #116	; 0x74
 8002a88:	4607      	mov	r7, r0
 8002a8a:	460d      	mov	r5, r1
 8002a8c:	4614      	mov	r4, r2
 8002a8e:	d50e      	bpl.n	8002aae <_svfiprintf_r+0x32>
 8002a90:	690b      	ldr	r3, [r1, #16]
 8002a92:	b963      	cbnz	r3, 8002aae <_svfiprintf_r+0x32>
 8002a94:	2140      	movs	r1, #64	; 0x40
 8002a96:	f000 faef 	bl	8003078 <_malloc_r>
 8002a9a:	6028      	str	r0, [r5, #0]
 8002a9c:	6128      	str	r0, [r5, #16]
 8002a9e:	b920      	cbnz	r0, 8002aaa <_svfiprintf_r+0x2e>
 8002aa0:	230c      	movs	r3, #12
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa8:	e0d1      	b.n	8002c4e <_svfiprintf_r+0x1d2>
 8002aaa:	2340      	movs	r3, #64	; 0x40
 8002aac:	616b      	str	r3, [r5, #20]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ab8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002abc:	2330      	movs	r3, #48	; 0x30
 8002abe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002c68 <_svfiprintf_r+0x1ec>
 8002ac2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ac6:	f04f 0901 	mov.w	r9, #1
 8002aca:	4623      	mov	r3, r4
 8002acc:	469a      	mov	sl, r3
 8002ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ad2:	b10a      	cbz	r2, 8002ad8 <_svfiprintf_r+0x5c>
 8002ad4:	2a25      	cmp	r2, #37	; 0x25
 8002ad6:	d1f9      	bne.n	8002acc <_svfiprintf_r+0x50>
 8002ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8002adc:	d00b      	beq.n	8002af6 <_svfiprintf_r+0x7a>
 8002ade:	465b      	mov	r3, fp
 8002ae0:	4622      	mov	r2, r4
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	4638      	mov	r0, r7
 8002ae6:	f7ff ff6d 	bl	80029c4 <__ssputs_r>
 8002aea:	3001      	adds	r0, #1
 8002aec:	f000 80aa 	beq.w	8002c44 <_svfiprintf_r+0x1c8>
 8002af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002af2:	445a      	add	r2, fp
 8002af4:	9209      	str	r2, [sp, #36]	; 0x24
 8002af6:	f89a 3000 	ldrb.w	r3, [sl]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80a2 	beq.w	8002c44 <_svfiprintf_r+0x1c8>
 8002b00:	2300      	movs	r3, #0
 8002b02:	f04f 32ff 	mov.w	r2, #4294967295
 8002b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b0a:	f10a 0a01 	add.w	sl, sl, #1
 8002b0e:	9304      	str	r3, [sp, #16]
 8002b10:	9307      	str	r3, [sp, #28]
 8002b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b16:	931a      	str	r3, [sp, #104]	; 0x68
 8002b18:	4654      	mov	r4, sl
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b20:	4851      	ldr	r0, [pc, #324]	; (8002c68 <_svfiprintf_r+0x1ec>)
 8002b22:	f7fd fb55 	bl	80001d0 <memchr>
 8002b26:	9a04      	ldr	r2, [sp, #16]
 8002b28:	b9d8      	cbnz	r0, 8002b62 <_svfiprintf_r+0xe6>
 8002b2a:	06d0      	lsls	r0, r2, #27
 8002b2c:	bf44      	itt	mi
 8002b2e:	2320      	movmi	r3, #32
 8002b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b34:	0711      	lsls	r1, r2, #28
 8002b36:	bf44      	itt	mi
 8002b38:	232b      	movmi	r3, #43	; 0x2b
 8002b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8002b42:	2b2a      	cmp	r3, #42	; 0x2a
 8002b44:	d015      	beq.n	8002b72 <_svfiprintf_r+0xf6>
 8002b46:	9a07      	ldr	r2, [sp, #28]
 8002b48:	4654      	mov	r4, sl
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f04f 0c0a 	mov.w	ip, #10
 8002b50:	4621      	mov	r1, r4
 8002b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b56:	3b30      	subs	r3, #48	; 0x30
 8002b58:	2b09      	cmp	r3, #9
 8002b5a:	d94e      	bls.n	8002bfa <_svfiprintf_r+0x17e>
 8002b5c:	b1b0      	cbz	r0, 8002b8c <_svfiprintf_r+0x110>
 8002b5e:	9207      	str	r2, [sp, #28]
 8002b60:	e014      	b.n	8002b8c <_svfiprintf_r+0x110>
 8002b62:	eba0 0308 	sub.w	r3, r0, r8
 8002b66:	fa09 f303 	lsl.w	r3, r9, r3
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	9304      	str	r3, [sp, #16]
 8002b6e:	46a2      	mov	sl, r4
 8002b70:	e7d2      	b.n	8002b18 <_svfiprintf_r+0x9c>
 8002b72:	9b03      	ldr	r3, [sp, #12]
 8002b74:	1d19      	adds	r1, r3, #4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	9103      	str	r1, [sp, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bfbb      	ittet	lt
 8002b7e:	425b      	neglt	r3, r3
 8002b80:	f042 0202 	orrlt.w	r2, r2, #2
 8002b84:	9307      	strge	r3, [sp, #28]
 8002b86:	9307      	strlt	r3, [sp, #28]
 8002b88:	bfb8      	it	lt
 8002b8a:	9204      	strlt	r2, [sp, #16]
 8002b8c:	7823      	ldrb	r3, [r4, #0]
 8002b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8002b90:	d10c      	bne.n	8002bac <_svfiprintf_r+0x130>
 8002b92:	7863      	ldrb	r3, [r4, #1]
 8002b94:	2b2a      	cmp	r3, #42	; 0x2a
 8002b96:	d135      	bne.n	8002c04 <_svfiprintf_r+0x188>
 8002b98:	9b03      	ldr	r3, [sp, #12]
 8002b9a:	1d1a      	adds	r2, r3, #4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	9203      	str	r2, [sp, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bfb8      	it	lt
 8002ba4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ba8:	3402      	adds	r4, #2
 8002baa:	9305      	str	r3, [sp, #20]
 8002bac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002c78 <_svfiprintf_r+0x1fc>
 8002bb0:	7821      	ldrb	r1, [r4, #0]
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	4650      	mov	r0, sl
 8002bb6:	f7fd fb0b 	bl	80001d0 <memchr>
 8002bba:	b140      	cbz	r0, 8002bce <_svfiprintf_r+0x152>
 8002bbc:	2340      	movs	r3, #64	; 0x40
 8002bbe:	eba0 000a 	sub.w	r0, r0, sl
 8002bc2:	fa03 f000 	lsl.w	r0, r3, r0
 8002bc6:	9b04      	ldr	r3, [sp, #16]
 8002bc8:	4303      	orrs	r3, r0
 8002bca:	3401      	adds	r4, #1
 8002bcc:	9304      	str	r3, [sp, #16]
 8002bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bd2:	4826      	ldr	r0, [pc, #152]	; (8002c6c <_svfiprintf_r+0x1f0>)
 8002bd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bd8:	2206      	movs	r2, #6
 8002bda:	f7fd faf9 	bl	80001d0 <memchr>
 8002bde:	2800      	cmp	r0, #0
 8002be0:	d038      	beq.n	8002c54 <_svfiprintf_r+0x1d8>
 8002be2:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <_svfiprintf_r+0x1f4>)
 8002be4:	bb1b      	cbnz	r3, 8002c2e <_svfiprintf_r+0x1b2>
 8002be6:	9b03      	ldr	r3, [sp, #12]
 8002be8:	3307      	adds	r3, #7
 8002bea:	f023 0307 	bic.w	r3, r3, #7
 8002bee:	3308      	adds	r3, #8
 8002bf0:	9303      	str	r3, [sp, #12]
 8002bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bf4:	4433      	add	r3, r6
 8002bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8002bf8:	e767      	b.n	8002aca <_svfiprintf_r+0x4e>
 8002bfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bfe:	460c      	mov	r4, r1
 8002c00:	2001      	movs	r0, #1
 8002c02:	e7a5      	b.n	8002b50 <_svfiprintf_r+0xd4>
 8002c04:	2300      	movs	r3, #0
 8002c06:	3401      	adds	r4, #1
 8002c08:	9305      	str	r3, [sp, #20]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f04f 0c0a 	mov.w	ip, #10
 8002c10:	4620      	mov	r0, r4
 8002c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c16:	3a30      	subs	r2, #48	; 0x30
 8002c18:	2a09      	cmp	r2, #9
 8002c1a:	d903      	bls.n	8002c24 <_svfiprintf_r+0x1a8>
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0c5      	beq.n	8002bac <_svfiprintf_r+0x130>
 8002c20:	9105      	str	r1, [sp, #20]
 8002c22:	e7c3      	b.n	8002bac <_svfiprintf_r+0x130>
 8002c24:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c28:	4604      	mov	r4, r0
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e7f0      	b.n	8002c10 <_svfiprintf_r+0x194>
 8002c2e:	ab03      	add	r3, sp, #12
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	462a      	mov	r2, r5
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <_svfiprintf_r+0x1f8>)
 8002c36:	a904      	add	r1, sp, #16
 8002c38:	4638      	mov	r0, r7
 8002c3a:	f3af 8000 	nop.w
 8002c3e:	1c42      	adds	r2, r0, #1
 8002c40:	4606      	mov	r6, r0
 8002c42:	d1d6      	bne.n	8002bf2 <_svfiprintf_r+0x176>
 8002c44:	89ab      	ldrh	r3, [r5, #12]
 8002c46:	065b      	lsls	r3, r3, #25
 8002c48:	f53f af2c 	bmi.w	8002aa4 <_svfiprintf_r+0x28>
 8002c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c4e:	b01d      	add	sp, #116	; 0x74
 8002c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c54:	ab03      	add	r3, sp, #12
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	462a      	mov	r2, r5
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <_svfiprintf_r+0x1f8>)
 8002c5c:	a904      	add	r1, sp, #16
 8002c5e:	4638      	mov	r0, r7
 8002c60:	f000 f87a 	bl	8002d58 <_printf_i>
 8002c64:	e7eb      	b.n	8002c3e <_svfiprintf_r+0x1c2>
 8002c66:	bf00      	nop
 8002c68:	0800396c 	.word	0x0800396c
 8002c6c:	08003976 	.word	0x08003976
 8002c70:	00000000 	.word	0x00000000
 8002c74:	080029c5 	.word	0x080029c5
 8002c78:	08003972 	.word	0x08003972

08002c7c <_printf_common>:
 8002c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c80:	4616      	mov	r6, r2
 8002c82:	4699      	mov	r9, r3
 8002c84:	688a      	ldr	r2, [r1, #8]
 8002c86:	690b      	ldr	r3, [r1, #16]
 8002c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	bfb8      	it	lt
 8002c90:	4613      	movlt	r3, r2
 8002c92:	6033      	str	r3, [r6, #0]
 8002c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c98:	4607      	mov	r7, r0
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	b10a      	cbz	r2, 8002ca2 <_printf_common+0x26>
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	6033      	str	r3, [r6, #0]
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	0699      	lsls	r1, r3, #26
 8002ca6:	bf42      	ittt	mi
 8002ca8:	6833      	ldrmi	r3, [r6, #0]
 8002caa:	3302      	addmi	r3, #2
 8002cac:	6033      	strmi	r3, [r6, #0]
 8002cae:	6825      	ldr	r5, [r4, #0]
 8002cb0:	f015 0506 	ands.w	r5, r5, #6
 8002cb4:	d106      	bne.n	8002cc4 <_printf_common+0x48>
 8002cb6:	f104 0a19 	add.w	sl, r4, #25
 8002cba:	68e3      	ldr	r3, [r4, #12]
 8002cbc:	6832      	ldr	r2, [r6, #0]
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	42ab      	cmp	r3, r5
 8002cc2:	dc26      	bgt.n	8002d12 <_printf_common+0x96>
 8002cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002cc8:	1e13      	subs	r3, r2, #0
 8002cca:	6822      	ldr	r2, [r4, #0]
 8002ccc:	bf18      	it	ne
 8002cce:	2301      	movne	r3, #1
 8002cd0:	0692      	lsls	r2, r2, #26
 8002cd2:	d42b      	bmi.n	8002d2c <_printf_common+0xb0>
 8002cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cd8:	4649      	mov	r1, r9
 8002cda:	4638      	mov	r0, r7
 8002cdc:	47c0      	blx	r8
 8002cde:	3001      	adds	r0, #1
 8002ce0:	d01e      	beq.n	8002d20 <_printf_common+0xa4>
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	68e5      	ldr	r5, [r4, #12]
 8002ce6:	6832      	ldr	r2, [r6, #0]
 8002ce8:	f003 0306 	and.w	r3, r3, #6
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	bf08      	it	eq
 8002cf0:	1aad      	subeq	r5, r5, r2
 8002cf2:	68a3      	ldr	r3, [r4, #8]
 8002cf4:	6922      	ldr	r2, [r4, #16]
 8002cf6:	bf0c      	ite	eq
 8002cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cfc:	2500      	movne	r5, #0
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	bfc4      	itt	gt
 8002d02:	1a9b      	subgt	r3, r3, r2
 8002d04:	18ed      	addgt	r5, r5, r3
 8002d06:	2600      	movs	r6, #0
 8002d08:	341a      	adds	r4, #26
 8002d0a:	42b5      	cmp	r5, r6
 8002d0c:	d11a      	bne.n	8002d44 <_printf_common+0xc8>
 8002d0e:	2000      	movs	r0, #0
 8002d10:	e008      	b.n	8002d24 <_printf_common+0xa8>
 8002d12:	2301      	movs	r3, #1
 8002d14:	4652      	mov	r2, sl
 8002d16:	4649      	mov	r1, r9
 8002d18:	4638      	mov	r0, r7
 8002d1a:	47c0      	blx	r8
 8002d1c:	3001      	adds	r0, #1
 8002d1e:	d103      	bne.n	8002d28 <_printf_common+0xac>
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d28:	3501      	adds	r5, #1
 8002d2a:	e7c6      	b.n	8002cba <_printf_common+0x3e>
 8002d2c:	18e1      	adds	r1, r4, r3
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	2030      	movs	r0, #48	; 0x30
 8002d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d36:	4422      	add	r2, r4
 8002d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d40:	3302      	adds	r3, #2
 8002d42:	e7c7      	b.n	8002cd4 <_printf_common+0x58>
 8002d44:	2301      	movs	r3, #1
 8002d46:	4622      	mov	r2, r4
 8002d48:	4649      	mov	r1, r9
 8002d4a:	4638      	mov	r0, r7
 8002d4c:	47c0      	blx	r8
 8002d4e:	3001      	adds	r0, #1
 8002d50:	d0e6      	beq.n	8002d20 <_printf_common+0xa4>
 8002d52:	3601      	adds	r6, #1
 8002d54:	e7d9      	b.n	8002d0a <_printf_common+0x8e>
	...

08002d58 <_printf_i>:
 8002d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	4691      	mov	r9, r2
 8002d60:	7e27      	ldrb	r7, [r4, #24]
 8002d62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d64:	2f78      	cmp	r7, #120	; 0x78
 8002d66:	4680      	mov	r8, r0
 8002d68:	469a      	mov	sl, r3
 8002d6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d6e:	d807      	bhi.n	8002d80 <_printf_i+0x28>
 8002d70:	2f62      	cmp	r7, #98	; 0x62
 8002d72:	d80a      	bhi.n	8002d8a <_printf_i+0x32>
 8002d74:	2f00      	cmp	r7, #0
 8002d76:	f000 80d8 	beq.w	8002f2a <_printf_i+0x1d2>
 8002d7a:	2f58      	cmp	r7, #88	; 0x58
 8002d7c:	f000 80a3 	beq.w	8002ec6 <_printf_i+0x16e>
 8002d80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d88:	e03a      	b.n	8002e00 <_printf_i+0xa8>
 8002d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d8e:	2b15      	cmp	r3, #21
 8002d90:	d8f6      	bhi.n	8002d80 <_printf_i+0x28>
 8002d92:	a001      	add	r0, pc, #4	; (adr r0, 8002d98 <_printf_i+0x40>)
 8002d94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002d98:	08002df1 	.word	0x08002df1
 8002d9c:	08002e05 	.word	0x08002e05
 8002da0:	08002d81 	.word	0x08002d81
 8002da4:	08002d81 	.word	0x08002d81
 8002da8:	08002d81 	.word	0x08002d81
 8002dac:	08002d81 	.word	0x08002d81
 8002db0:	08002e05 	.word	0x08002e05
 8002db4:	08002d81 	.word	0x08002d81
 8002db8:	08002d81 	.word	0x08002d81
 8002dbc:	08002d81 	.word	0x08002d81
 8002dc0:	08002d81 	.word	0x08002d81
 8002dc4:	08002f11 	.word	0x08002f11
 8002dc8:	08002e35 	.word	0x08002e35
 8002dcc:	08002ef3 	.word	0x08002ef3
 8002dd0:	08002d81 	.word	0x08002d81
 8002dd4:	08002d81 	.word	0x08002d81
 8002dd8:	08002f33 	.word	0x08002f33
 8002ddc:	08002d81 	.word	0x08002d81
 8002de0:	08002e35 	.word	0x08002e35
 8002de4:	08002d81 	.word	0x08002d81
 8002de8:	08002d81 	.word	0x08002d81
 8002dec:	08002efb 	.word	0x08002efb
 8002df0:	680b      	ldr	r3, [r1, #0]
 8002df2:	1d1a      	adds	r2, r3, #4
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	600a      	str	r2, [r1, #0]
 8002df8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0a3      	b.n	8002f4c <_printf_i+0x1f4>
 8002e04:	6825      	ldr	r5, [r4, #0]
 8002e06:	6808      	ldr	r0, [r1, #0]
 8002e08:	062e      	lsls	r6, r5, #24
 8002e0a:	f100 0304 	add.w	r3, r0, #4
 8002e0e:	d50a      	bpl.n	8002e26 <_printf_i+0xce>
 8002e10:	6805      	ldr	r5, [r0, #0]
 8002e12:	600b      	str	r3, [r1, #0]
 8002e14:	2d00      	cmp	r5, #0
 8002e16:	da03      	bge.n	8002e20 <_printf_i+0xc8>
 8002e18:	232d      	movs	r3, #45	; 0x2d
 8002e1a:	426d      	negs	r5, r5
 8002e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e20:	485e      	ldr	r0, [pc, #376]	; (8002f9c <_printf_i+0x244>)
 8002e22:	230a      	movs	r3, #10
 8002e24:	e019      	b.n	8002e5a <_printf_i+0x102>
 8002e26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002e2a:	6805      	ldr	r5, [r0, #0]
 8002e2c:	600b      	str	r3, [r1, #0]
 8002e2e:	bf18      	it	ne
 8002e30:	b22d      	sxthne	r5, r5
 8002e32:	e7ef      	b.n	8002e14 <_printf_i+0xbc>
 8002e34:	680b      	ldr	r3, [r1, #0]
 8002e36:	6825      	ldr	r5, [r4, #0]
 8002e38:	1d18      	adds	r0, r3, #4
 8002e3a:	6008      	str	r0, [r1, #0]
 8002e3c:	0628      	lsls	r0, r5, #24
 8002e3e:	d501      	bpl.n	8002e44 <_printf_i+0xec>
 8002e40:	681d      	ldr	r5, [r3, #0]
 8002e42:	e002      	b.n	8002e4a <_printf_i+0xf2>
 8002e44:	0669      	lsls	r1, r5, #25
 8002e46:	d5fb      	bpl.n	8002e40 <_printf_i+0xe8>
 8002e48:	881d      	ldrh	r5, [r3, #0]
 8002e4a:	4854      	ldr	r0, [pc, #336]	; (8002f9c <_printf_i+0x244>)
 8002e4c:	2f6f      	cmp	r7, #111	; 0x6f
 8002e4e:	bf0c      	ite	eq
 8002e50:	2308      	moveq	r3, #8
 8002e52:	230a      	movne	r3, #10
 8002e54:	2100      	movs	r1, #0
 8002e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e5a:	6866      	ldr	r6, [r4, #4]
 8002e5c:	60a6      	str	r6, [r4, #8]
 8002e5e:	2e00      	cmp	r6, #0
 8002e60:	bfa2      	ittt	ge
 8002e62:	6821      	ldrge	r1, [r4, #0]
 8002e64:	f021 0104 	bicge.w	r1, r1, #4
 8002e68:	6021      	strge	r1, [r4, #0]
 8002e6a:	b90d      	cbnz	r5, 8002e70 <_printf_i+0x118>
 8002e6c:	2e00      	cmp	r6, #0
 8002e6e:	d04d      	beq.n	8002f0c <_printf_i+0x1b4>
 8002e70:	4616      	mov	r6, r2
 8002e72:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e76:	fb03 5711 	mls	r7, r3, r1, r5
 8002e7a:	5dc7      	ldrb	r7, [r0, r7]
 8002e7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e80:	462f      	mov	r7, r5
 8002e82:	42bb      	cmp	r3, r7
 8002e84:	460d      	mov	r5, r1
 8002e86:	d9f4      	bls.n	8002e72 <_printf_i+0x11a>
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d10b      	bne.n	8002ea4 <_printf_i+0x14c>
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	07df      	lsls	r7, r3, #31
 8002e90:	d508      	bpl.n	8002ea4 <_printf_i+0x14c>
 8002e92:	6923      	ldr	r3, [r4, #16]
 8002e94:	6861      	ldr	r1, [r4, #4]
 8002e96:	4299      	cmp	r1, r3
 8002e98:	bfde      	ittt	le
 8002e9a:	2330      	movle	r3, #48	; 0x30
 8002e9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ea0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ea4:	1b92      	subs	r2, r2, r6
 8002ea6:	6122      	str	r2, [r4, #16]
 8002ea8:	f8cd a000 	str.w	sl, [sp]
 8002eac:	464b      	mov	r3, r9
 8002eae:	aa03      	add	r2, sp, #12
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	4640      	mov	r0, r8
 8002eb4:	f7ff fee2 	bl	8002c7c <_printf_common>
 8002eb8:	3001      	adds	r0, #1
 8002eba:	d14c      	bne.n	8002f56 <_printf_i+0x1fe>
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	b004      	add	sp, #16
 8002ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ec6:	4835      	ldr	r0, [pc, #212]	; (8002f9c <_printf_i+0x244>)
 8002ec8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	680e      	ldr	r6, [r1, #0]
 8002ed0:	061f      	lsls	r7, r3, #24
 8002ed2:	f856 5b04 	ldr.w	r5, [r6], #4
 8002ed6:	600e      	str	r6, [r1, #0]
 8002ed8:	d514      	bpl.n	8002f04 <_printf_i+0x1ac>
 8002eda:	07d9      	lsls	r1, r3, #31
 8002edc:	bf44      	itt	mi
 8002ede:	f043 0320 	orrmi.w	r3, r3, #32
 8002ee2:	6023      	strmi	r3, [r4, #0]
 8002ee4:	b91d      	cbnz	r5, 8002eee <_printf_i+0x196>
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	f023 0320 	bic.w	r3, r3, #32
 8002eec:	6023      	str	r3, [r4, #0]
 8002eee:	2310      	movs	r3, #16
 8002ef0:	e7b0      	b.n	8002e54 <_printf_i+0xfc>
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	f043 0320 	orr.w	r3, r3, #32
 8002ef8:	6023      	str	r3, [r4, #0]
 8002efa:	2378      	movs	r3, #120	; 0x78
 8002efc:	4828      	ldr	r0, [pc, #160]	; (8002fa0 <_printf_i+0x248>)
 8002efe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f02:	e7e3      	b.n	8002ecc <_printf_i+0x174>
 8002f04:	065e      	lsls	r6, r3, #25
 8002f06:	bf48      	it	mi
 8002f08:	b2ad      	uxthmi	r5, r5
 8002f0a:	e7e6      	b.n	8002eda <_printf_i+0x182>
 8002f0c:	4616      	mov	r6, r2
 8002f0e:	e7bb      	b.n	8002e88 <_printf_i+0x130>
 8002f10:	680b      	ldr	r3, [r1, #0]
 8002f12:	6826      	ldr	r6, [r4, #0]
 8002f14:	6960      	ldr	r0, [r4, #20]
 8002f16:	1d1d      	adds	r5, r3, #4
 8002f18:	600d      	str	r5, [r1, #0]
 8002f1a:	0635      	lsls	r5, r6, #24
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	d501      	bpl.n	8002f24 <_printf_i+0x1cc>
 8002f20:	6018      	str	r0, [r3, #0]
 8002f22:	e002      	b.n	8002f2a <_printf_i+0x1d2>
 8002f24:	0671      	lsls	r1, r6, #25
 8002f26:	d5fb      	bpl.n	8002f20 <_printf_i+0x1c8>
 8002f28:	8018      	strh	r0, [r3, #0]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	6123      	str	r3, [r4, #16]
 8002f2e:	4616      	mov	r6, r2
 8002f30:	e7ba      	b.n	8002ea8 <_printf_i+0x150>
 8002f32:	680b      	ldr	r3, [r1, #0]
 8002f34:	1d1a      	adds	r2, r3, #4
 8002f36:	600a      	str	r2, [r1, #0]
 8002f38:	681e      	ldr	r6, [r3, #0]
 8002f3a:	6862      	ldr	r2, [r4, #4]
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4630      	mov	r0, r6
 8002f40:	f7fd f946 	bl	80001d0 <memchr>
 8002f44:	b108      	cbz	r0, 8002f4a <_printf_i+0x1f2>
 8002f46:	1b80      	subs	r0, r0, r6
 8002f48:	6060      	str	r0, [r4, #4]
 8002f4a:	6863      	ldr	r3, [r4, #4]
 8002f4c:	6123      	str	r3, [r4, #16]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f54:	e7a8      	b.n	8002ea8 <_printf_i+0x150>
 8002f56:	6923      	ldr	r3, [r4, #16]
 8002f58:	4632      	mov	r2, r6
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	4640      	mov	r0, r8
 8002f5e:	47d0      	blx	sl
 8002f60:	3001      	adds	r0, #1
 8002f62:	d0ab      	beq.n	8002ebc <_printf_i+0x164>
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	079b      	lsls	r3, r3, #30
 8002f68:	d413      	bmi.n	8002f92 <_printf_i+0x23a>
 8002f6a:	68e0      	ldr	r0, [r4, #12]
 8002f6c:	9b03      	ldr	r3, [sp, #12]
 8002f6e:	4298      	cmp	r0, r3
 8002f70:	bfb8      	it	lt
 8002f72:	4618      	movlt	r0, r3
 8002f74:	e7a4      	b.n	8002ec0 <_printf_i+0x168>
 8002f76:	2301      	movs	r3, #1
 8002f78:	4632      	mov	r2, r6
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	4640      	mov	r0, r8
 8002f7e:	47d0      	blx	sl
 8002f80:	3001      	adds	r0, #1
 8002f82:	d09b      	beq.n	8002ebc <_printf_i+0x164>
 8002f84:	3501      	adds	r5, #1
 8002f86:	68e3      	ldr	r3, [r4, #12]
 8002f88:	9903      	ldr	r1, [sp, #12]
 8002f8a:	1a5b      	subs	r3, r3, r1
 8002f8c:	42ab      	cmp	r3, r5
 8002f8e:	dcf2      	bgt.n	8002f76 <_printf_i+0x21e>
 8002f90:	e7eb      	b.n	8002f6a <_printf_i+0x212>
 8002f92:	2500      	movs	r5, #0
 8002f94:	f104 0619 	add.w	r6, r4, #25
 8002f98:	e7f5      	b.n	8002f86 <_printf_i+0x22e>
 8002f9a:	bf00      	nop
 8002f9c:	0800397d 	.word	0x0800397d
 8002fa0:	0800398e 	.word	0x0800398e

08002fa4 <memmove>:
 8002fa4:	4288      	cmp	r0, r1
 8002fa6:	b510      	push	{r4, lr}
 8002fa8:	eb01 0402 	add.w	r4, r1, r2
 8002fac:	d902      	bls.n	8002fb4 <memmove+0x10>
 8002fae:	4284      	cmp	r4, r0
 8002fb0:	4623      	mov	r3, r4
 8002fb2:	d807      	bhi.n	8002fc4 <memmove+0x20>
 8002fb4:	1e43      	subs	r3, r0, #1
 8002fb6:	42a1      	cmp	r1, r4
 8002fb8:	d008      	beq.n	8002fcc <memmove+0x28>
 8002fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fc2:	e7f8      	b.n	8002fb6 <memmove+0x12>
 8002fc4:	4402      	add	r2, r0
 8002fc6:	4601      	mov	r1, r0
 8002fc8:	428a      	cmp	r2, r1
 8002fca:	d100      	bne.n	8002fce <memmove+0x2a>
 8002fcc:	bd10      	pop	{r4, pc}
 8002fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fd6:	e7f7      	b.n	8002fc8 <memmove+0x24>

08002fd8 <_free_r>:
 8002fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fda:	2900      	cmp	r1, #0
 8002fdc:	d048      	beq.n	8003070 <_free_r+0x98>
 8002fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fe2:	9001      	str	r0, [sp, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f1a1 0404 	sub.w	r4, r1, #4
 8002fea:	bfb8      	it	lt
 8002fec:	18e4      	addlt	r4, r4, r3
 8002fee:	f000 f8d3 	bl	8003198 <__malloc_lock>
 8002ff2:	4a20      	ldr	r2, [pc, #128]	; (8003074 <_free_r+0x9c>)
 8002ff4:	9801      	ldr	r0, [sp, #4]
 8002ff6:	6813      	ldr	r3, [r2, #0]
 8002ff8:	4615      	mov	r5, r2
 8002ffa:	b933      	cbnz	r3, 800300a <_free_r+0x32>
 8002ffc:	6063      	str	r3, [r4, #4]
 8002ffe:	6014      	str	r4, [r2, #0]
 8003000:	b003      	add	sp, #12
 8003002:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003006:	f000 b8cd 	b.w	80031a4 <__malloc_unlock>
 800300a:	42a3      	cmp	r3, r4
 800300c:	d90b      	bls.n	8003026 <_free_r+0x4e>
 800300e:	6821      	ldr	r1, [r4, #0]
 8003010:	1862      	adds	r2, r4, r1
 8003012:	4293      	cmp	r3, r2
 8003014:	bf04      	itt	eq
 8003016:	681a      	ldreq	r2, [r3, #0]
 8003018:	685b      	ldreq	r3, [r3, #4]
 800301a:	6063      	str	r3, [r4, #4]
 800301c:	bf04      	itt	eq
 800301e:	1852      	addeq	r2, r2, r1
 8003020:	6022      	streq	r2, [r4, #0]
 8003022:	602c      	str	r4, [r5, #0]
 8003024:	e7ec      	b.n	8003000 <_free_r+0x28>
 8003026:	461a      	mov	r2, r3
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	b10b      	cbz	r3, 8003030 <_free_r+0x58>
 800302c:	42a3      	cmp	r3, r4
 800302e:	d9fa      	bls.n	8003026 <_free_r+0x4e>
 8003030:	6811      	ldr	r1, [r2, #0]
 8003032:	1855      	adds	r5, r2, r1
 8003034:	42a5      	cmp	r5, r4
 8003036:	d10b      	bne.n	8003050 <_free_r+0x78>
 8003038:	6824      	ldr	r4, [r4, #0]
 800303a:	4421      	add	r1, r4
 800303c:	1854      	adds	r4, r2, r1
 800303e:	42a3      	cmp	r3, r4
 8003040:	6011      	str	r1, [r2, #0]
 8003042:	d1dd      	bne.n	8003000 <_free_r+0x28>
 8003044:	681c      	ldr	r4, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	6053      	str	r3, [r2, #4]
 800304a:	4421      	add	r1, r4
 800304c:	6011      	str	r1, [r2, #0]
 800304e:	e7d7      	b.n	8003000 <_free_r+0x28>
 8003050:	d902      	bls.n	8003058 <_free_r+0x80>
 8003052:	230c      	movs	r3, #12
 8003054:	6003      	str	r3, [r0, #0]
 8003056:	e7d3      	b.n	8003000 <_free_r+0x28>
 8003058:	6825      	ldr	r5, [r4, #0]
 800305a:	1961      	adds	r1, r4, r5
 800305c:	428b      	cmp	r3, r1
 800305e:	bf04      	itt	eq
 8003060:	6819      	ldreq	r1, [r3, #0]
 8003062:	685b      	ldreq	r3, [r3, #4]
 8003064:	6063      	str	r3, [r4, #4]
 8003066:	bf04      	itt	eq
 8003068:	1949      	addeq	r1, r1, r5
 800306a:	6021      	streq	r1, [r4, #0]
 800306c:	6054      	str	r4, [r2, #4]
 800306e:	e7c7      	b.n	8003000 <_free_r+0x28>
 8003070:	b003      	add	sp, #12
 8003072:	bd30      	pop	{r4, r5, pc}
 8003074:	200004a4 	.word	0x200004a4

08003078 <_malloc_r>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	1ccd      	adds	r5, r1, #3
 800307c:	f025 0503 	bic.w	r5, r5, #3
 8003080:	3508      	adds	r5, #8
 8003082:	2d0c      	cmp	r5, #12
 8003084:	bf38      	it	cc
 8003086:	250c      	movcc	r5, #12
 8003088:	2d00      	cmp	r5, #0
 800308a:	4606      	mov	r6, r0
 800308c:	db01      	blt.n	8003092 <_malloc_r+0x1a>
 800308e:	42a9      	cmp	r1, r5
 8003090:	d903      	bls.n	800309a <_malloc_r+0x22>
 8003092:	230c      	movs	r3, #12
 8003094:	6033      	str	r3, [r6, #0]
 8003096:	2000      	movs	r0, #0
 8003098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800309a:	f000 f87d 	bl	8003198 <__malloc_lock>
 800309e:	4921      	ldr	r1, [pc, #132]	; (8003124 <_malloc_r+0xac>)
 80030a0:	680a      	ldr	r2, [r1, #0]
 80030a2:	4614      	mov	r4, r2
 80030a4:	b99c      	cbnz	r4, 80030ce <_malloc_r+0x56>
 80030a6:	4f20      	ldr	r7, [pc, #128]	; (8003128 <_malloc_r+0xb0>)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	b923      	cbnz	r3, 80030b6 <_malloc_r+0x3e>
 80030ac:	4621      	mov	r1, r4
 80030ae:	4630      	mov	r0, r6
 80030b0:	f000 f862 	bl	8003178 <_sbrk_r>
 80030b4:	6038      	str	r0, [r7, #0]
 80030b6:	4629      	mov	r1, r5
 80030b8:	4630      	mov	r0, r6
 80030ba:	f000 f85d 	bl	8003178 <_sbrk_r>
 80030be:	1c43      	adds	r3, r0, #1
 80030c0:	d123      	bne.n	800310a <_malloc_r+0x92>
 80030c2:	230c      	movs	r3, #12
 80030c4:	6033      	str	r3, [r6, #0]
 80030c6:	4630      	mov	r0, r6
 80030c8:	f000 f86c 	bl	80031a4 <__malloc_unlock>
 80030cc:	e7e3      	b.n	8003096 <_malloc_r+0x1e>
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	1b5b      	subs	r3, r3, r5
 80030d2:	d417      	bmi.n	8003104 <_malloc_r+0x8c>
 80030d4:	2b0b      	cmp	r3, #11
 80030d6:	d903      	bls.n	80030e0 <_malloc_r+0x68>
 80030d8:	6023      	str	r3, [r4, #0]
 80030da:	441c      	add	r4, r3
 80030dc:	6025      	str	r5, [r4, #0]
 80030de:	e004      	b.n	80030ea <_malloc_r+0x72>
 80030e0:	6863      	ldr	r3, [r4, #4]
 80030e2:	42a2      	cmp	r2, r4
 80030e4:	bf0c      	ite	eq
 80030e6:	600b      	streq	r3, [r1, #0]
 80030e8:	6053      	strne	r3, [r2, #4]
 80030ea:	4630      	mov	r0, r6
 80030ec:	f000 f85a 	bl	80031a4 <__malloc_unlock>
 80030f0:	f104 000b 	add.w	r0, r4, #11
 80030f4:	1d23      	adds	r3, r4, #4
 80030f6:	f020 0007 	bic.w	r0, r0, #7
 80030fa:	1ac2      	subs	r2, r0, r3
 80030fc:	d0cc      	beq.n	8003098 <_malloc_r+0x20>
 80030fe:	1a1b      	subs	r3, r3, r0
 8003100:	50a3      	str	r3, [r4, r2]
 8003102:	e7c9      	b.n	8003098 <_malloc_r+0x20>
 8003104:	4622      	mov	r2, r4
 8003106:	6864      	ldr	r4, [r4, #4]
 8003108:	e7cc      	b.n	80030a4 <_malloc_r+0x2c>
 800310a:	1cc4      	adds	r4, r0, #3
 800310c:	f024 0403 	bic.w	r4, r4, #3
 8003110:	42a0      	cmp	r0, r4
 8003112:	d0e3      	beq.n	80030dc <_malloc_r+0x64>
 8003114:	1a21      	subs	r1, r4, r0
 8003116:	4630      	mov	r0, r6
 8003118:	f000 f82e 	bl	8003178 <_sbrk_r>
 800311c:	3001      	adds	r0, #1
 800311e:	d1dd      	bne.n	80030dc <_malloc_r+0x64>
 8003120:	e7cf      	b.n	80030c2 <_malloc_r+0x4a>
 8003122:	bf00      	nop
 8003124:	200004a4 	.word	0x200004a4
 8003128:	200004a8 	.word	0x200004a8

0800312c <_realloc_r>:
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	4607      	mov	r7, r0
 8003130:	4614      	mov	r4, r2
 8003132:	460e      	mov	r6, r1
 8003134:	b921      	cbnz	r1, 8003140 <_realloc_r+0x14>
 8003136:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800313a:	4611      	mov	r1, r2
 800313c:	f7ff bf9c 	b.w	8003078 <_malloc_r>
 8003140:	b922      	cbnz	r2, 800314c <_realloc_r+0x20>
 8003142:	f7ff ff49 	bl	8002fd8 <_free_r>
 8003146:	4625      	mov	r5, r4
 8003148:	4628      	mov	r0, r5
 800314a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800314c:	f000 f830 	bl	80031b0 <_malloc_usable_size_r>
 8003150:	42a0      	cmp	r0, r4
 8003152:	d20f      	bcs.n	8003174 <_realloc_r+0x48>
 8003154:	4621      	mov	r1, r4
 8003156:	4638      	mov	r0, r7
 8003158:	f7ff ff8e 	bl	8003078 <_malloc_r>
 800315c:	4605      	mov	r5, r0
 800315e:	2800      	cmp	r0, #0
 8003160:	d0f2      	beq.n	8003148 <_realloc_r+0x1c>
 8003162:	4631      	mov	r1, r6
 8003164:	4622      	mov	r2, r4
 8003166:	f7ff fbf7 	bl	8002958 <memcpy>
 800316a:	4631      	mov	r1, r6
 800316c:	4638      	mov	r0, r7
 800316e:	f7ff ff33 	bl	8002fd8 <_free_r>
 8003172:	e7e9      	b.n	8003148 <_realloc_r+0x1c>
 8003174:	4635      	mov	r5, r6
 8003176:	e7e7      	b.n	8003148 <_realloc_r+0x1c>

08003178 <_sbrk_r>:
 8003178:	b538      	push	{r3, r4, r5, lr}
 800317a:	4d06      	ldr	r5, [pc, #24]	; (8003194 <_sbrk_r+0x1c>)
 800317c:	2300      	movs	r3, #0
 800317e:	4604      	mov	r4, r0
 8003180:	4608      	mov	r0, r1
 8003182:	602b      	str	r3, [r5, #0]
 8003184:	f7fd fe8e 	bl	8000ea4 <_sbrk>
 8003188:	1c43      	adds	r3, r0, #1
 800318a:	d102      	bne.n	8003192 <_sbrk_r+0x1a>
 800318c:	682b      	ldr	r3, [r5, #0]
 800318e:	b103      	cbz	r3, 8003192 <_sbrk_r+0x1a>
 8003190:	6023      	str	r3, [r4, #0]
 8003192:	bd38      	pop	{r3, r4, r5, pc}
 8003194:	200005d4 	.word	0x200005d4

08003198 <__malloc_lock>:
 8003198:	4801      	ldr	r0, [pc, #4]	; (80031a0 <__malloc_lock+0x8>)
 800319a:	f000 b811 	b.w	80031c0 <__retarget_lock_acquire_recursive>
 800319e:	bf00      	nop
 80031a0:	200005dc 	.word	0x200005dc

080031a4 <__malloc_unlock>:
 80031a4:	4801      	ldr	r0, [pc, #4]	; (80031ac <__malloc_unlock+0x8>)
 80031a6:	f000 b80c 	b.w	80031c2 <__retarget_lock_release_recursive>
 80031aa:	bf00      	nop
 80031ac:	200005dc 	.word	0x200005dc

080031b0 <_malloc_usable_size_r>:
 80031b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031b4:	1f18      	subs	r0, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	bfbc      	itt	lt
 80031ba:	580b      	ldrlt	r3, [r1, r0]
 80031bc:	18c0      	addlt	r0, r0, r3
 80031be:	4770      	bx	lr

080031c0 <__retarget_lock_acquire_recursive>:
 80031c0:	4770      	bx	lr

080031c2 <__retarget_lock_release_recursive>:
 80031c2:	4770      	bx	lr

080031c4 <_init>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	bf00      	nop
 80031c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ca:	bc08      	pop	{r3}
 80031cc:	469e      	mov	lr, r3
 80031ce:	4770      	bx	lr

080031d0 <_fini>:
 80031d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d2:	bf00      	nop
 80031d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031d6:	bc08      	pop	{r3}
 80031d8:	469e      	mov	lr, r3
 80031da:	4770      	bx	lr
