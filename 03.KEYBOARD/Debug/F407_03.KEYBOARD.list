
F407_03.KEYBOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b50  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08002cd8  08002cd8  00012cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fac  08002fac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fb4  08002fb4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fb4  08002fb4  00012fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fb8  08002fb8  00012fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  0800302c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  0800302c  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a87  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfc  00000000  00000000  00029b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0002b828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  0002bf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002183a  00000000  00000000  0002c620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008fea  00000000  00000000  0004de5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3dde  00000000  00000000  00056e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ac22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002208  00000000  00000000  0011ac78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002cc0 	.word	0x08002cc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08002cc0 	.word	0x08002cc0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <keyboard_scan>:
 *      Author: Francis
 */

#include "keyboard.h"

uint8_t keyboard_scan(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	uint8_t i, keynum = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71bb      	strb	r3, [r7, #6]
	if (Row1_INPUT_Read == GPIO_PIN_RESET) {			//当有按键按下
 80004ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ce:	48b8      	ldr	r0, [pc, #736]	; (80007b0 <keyboard_scan+0x2f0>)
 80004d0:	f001 f842 	bl	8001558 <HAL_GPIO_ReadPin>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d167      	bne.n	80005aa <keyboard_scan+0xea>
		HAL_Delay(20);
 80004da:	2014      	movs	r0, #20
 80004dc:	f000 fd96 	bl	800100c <HAL_Delay>
		if (Row1_INPUT_Read == GPIO_PIN_RESET) { //消抖
 80004e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e4:	48b2      	ldr	r0, [pc, #712]	; (80007b0 <keyboard_scan+0x2f0>)
 80004e6:	f001 f837 	bl	8001558 <HAL_GPIO_ReadPin>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	f040 81c7 	bne.w	8000880 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 80004f2:	2301      	movs	r3, #1
 80004f4:	71fb      	strb	r3, [r7, #7]
 80004f6:	e054      	b.n	80005a2 <keyboard_scan+0xe2>
				if (i == 1)
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d105      	bne.n	800050a <keyboard_scan+0x4a>
					Column1_OUT_High;		//逐个拉低每列的IO
 80004fe:	2201      	movs	r2, #1
 8000500:	2108      	movs	r1, #8
 8000502:	48ab      	ldr	r0, [pc, #684]	; (80007b0 <keyboard_scan+0x2f0>)
 8000504:	f001 f840 	bl	8001588 <HAL_GPIO_WritePin>
 8000508:	e01a      	b.n	8000540 <keyboard_scan+0x80>
				else if (i == 2)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	2b02      	cmp	r3, #2
 800050e:	d105      	bne.n	800051c <keyboard_scan+0x5c>
					Column2_OUT_High;
 8000510:	2201      	movs	r2, #1
 8000512:	2120      	movs	r1, #32
 8000514:	48a6      	ldr	r0, [pc, #664]	; (80007b0 <keyboard_scan+0x2f0>)
 8000516:	f001 f837 	bl	8001588 <HAL_GPIO_WritePin>
 800051a:	e011      	b.n	8000540 <keyboard_scan+0x80>
				else if (i == 3)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	2b03      	cmp	r3, #3
 8000520:	d105      	bne.n	800052e <keyboard_scan+0x6e>
					Column3_OUT_High;
 8000522:	2201      	movs	r2, #1
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	48a2      	ldr	r0, [pc, #648]	; (80007b0 <keyboard_scan+0x2f0>)
 8000528:	f001 f82e 	bl	8001588 <HAL_GPIO_WritePin>
 800052c:	e008      	b.n	8000540 <keyboard_scan+0x80>
				else if (i == 4)
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	2b04      	cmp	r3, #4
 8000532:	d105      	bne.n	8000540 <keyboard_scan+0x80>
					Column4_OUT_High;
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053a:	489d      	ldr	r0, [pc, #628]	; (80007b0 <keyboard_scan+0x2f0>)
 800053c:	f001 f824 	bl	8001588 <HAL_GPIO_WritePin>

				if (Row1_INPUT_Read == GPIO_PIN_SET) //如果检测到行IO电平跟着变化，则判断为该按键按下
 8000540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000544:	489a      	ldr	r0, [pc, #616]	; (80007b0 <keyboard_scan+0x2f0>)
 8000546:	f001 f807 	bl	8001558 <HAL_GPIO_ReadPin>
 800054a:	4603      	mov	r3, r0
 800054c:	2b01      	cmp	r3, #1
 800054e:	d101      	bne.n	8000554 <keyboard_scan+0x94>
					keynum = i;
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d105      	bne.n	8000566 <keyboard_scan+0xa6>
					Column1_OUT_Low;
 800055a:	2200      	movs	r2, #0
 800055c:	2108      	movs	r1, #8
 800055e:	4894      	ldr	r0, [pc, #592]	; (80007b0 <keyboard_scan+0x2f0>)
 8000560:	f001 f812 	bl	8001588 <HAL_GPIO_WritePin>
 8000564:	e01a      	b.n	800059c <keyboard_scan+0xdc>
				else if (i == 2)
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d105      	bne.n	8000578 <keyboard_scan+0xb8>
					Column2_OUT_Low;
 800056c:	2200      	movs	r2, #0
 800056e:	2120      	movs	r1, #32
 8000570:	488f      	ldr	r0, [pc, #572]	; (80007b0 <keyboard_scan+0x2f0>)
 8000572:	f001 f809 	bl	8001588 <HAL_GPIO_WritePin>
 8000576:	e011      	b.n	800059c <keyboard_scan+0xdc>
				else if (i == 3)
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	2b03      	cmp	r3, #3
 800057c:	d105      	bne.n	800058a <keyboard_scan+0xca>
					Column3_OUT_Low;	//每次列IO电平操作之后记得复原
 800057e:	2200      	movs	r2, #0
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	488b      	ldr	r0, [pc, #556]	; (80007b0 <keyboard_scan+0x2f0>)
 8000584:	f001 f800 	bl	8001588 <HAL_GPIO_WritePin>
 8000588:	e008      	b.n	800059c <keyboard_scan+0xdc>
				else if (i == 4)
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b04      	cmp	r3, #4
 800058e:	d105      	bne.n	800059c <keyboard_scan+0xdc>
					Column4_OUT_Low;
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000596:	4886      	ldr	r0, [pc, #536]	; (80007b0 <keyboard_scan+0x2f0>)
 8000598:	f000 fff6 	bl	8001588 <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	3301      	adds	r3, #1
 80005a0:	71fb      	strb	r3, [r7, #7]
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d9a7      	bls.n	80004f8 <keyboard_scan+0x38>
 80005a8:	e16a      	b.n	8000880 <keyboard_scan+0x3c0>
			}
		}
	} else if (Row2_INPUT_Read == GPIO_PIN_RESET) {
 80005aa:	2140      	movs	r1, #64	; 0x40
 80005ac:	4880      	ldr	r0, [pc, #512]	; (80007b0 <keyboard_scan+0x2f0>)
 80005ae:	f000 ffd3 	bl	8001558 <HAL_GPIO_ReadPin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d166      	bne.n	8000686 <keyboard_scan+0x1c6>
		HAL_Delay(20);
 80005b8:	2014      	movs	r0, #20
 80005ba:	f000 fd27 	bl	800100c <HAL_Delay>
		if (Row2_INPUT_Read == GPIO_PIN_RESET) { //消抖
 80005be:	2140      	movs	r1, #64	; 0x40
 80005c0:	487b      	ldr	r0, [pc, #492]	; (80007b0 <keyboard_scan+0x2f0>)
 80005c2:	f000 ffc9 	bl	8001558 <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	f040 8159 	bne.w	8000880 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 80005ce:	2301      	movs	r3, #1
 80005d0:	71fb      	strb	r3, [r7, #7]
 80005d2:	e054      	b.n	800067e <keyboard_scan+0x1be>
				if (i == 1)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d105      	bne.n	80005e6 <keyboard_scan+0x126>
					Column1_OUT_High;
 80005da:	2201      	movs	r2, #1
 80005dc:	2108      	movs	r1, #8
 80005de:	4874      	ldr	r0, [pc, #464]	; (80007b0 <keyboard_scan+0x2f0>)
 80005e0:	f000 ffd2 	bl	8001588 <HAL_GPIO_WritePin>
 80005e4:	e01a      	b.n	800061c <keyboard_scan+0x15c>
				else if (i == 2)
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d105      	bne.n	80005f8 <keyboard_scan+0x138>
					Column2_OUT_High;
 80005ec:	2201      	movs	r2, #1
 80005ee:	2120      	movs	r1, #32
 80005f0:	486f      	ldr	r0, [pc, #444]	; (80007b0 <keyboard_scan+0x2f0>)
 80005f2:	f000 ffc9 	bl	8001588 <HAL_GPIO_WritePin>
 80005f6:	e011      	b.n	800061c <keyboard_scan+0x15c>
				else if (i == 3)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b03      	cmp	r3, #3
 80005fc:	d105      	bne.n	800060a <keyboard_scan+0x14a>
					Column3_OUT_High;
 80005fe:	2201      	movs	r2, #1
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	486b      	ldr	r0, [pc, #428]	; (80007b0 <keyboard_scan+0x2f0>)
 8000604:	f000 ffc0 	bl	8001588 <HAL_GPIO_WritePin>
 8000608:	e008      	b.n	800061c <keyboard_scan+0x15c>
				else if (i == 4)
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b04      	cmp	r3, #4
 800060e:	d105      	bne.n	800061c <keyboard_scan+0x15c>
					Column4_OUT_High;
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000616:	4866      	ldr	r0, [pc, #408]	; (80007b0 <keyboard_scan+0x2f0>)
 8000618:	f000 ffb6 	bl	8001588 <HAL_GPIO_WritePin>

				if (Row2_INPUT_Read == GPIO_PIN_SET)
 800061c:	2140      	movs	r1, #64	; 0x40
 800061e:	4864      	ldr	r0, [pc, #400]	; (80007b0 <keyboard_scan+0x2f0>)
 8000620:	f000 ff9a 	bl	8001558 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b01      	cmp	r3, #1
 8000628:	d102      	bne.n	8000630 <keyboard_scan+0x170>
					keynum = i + 4;
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	3304      	adds	r3, #4
 800062e:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d105      	bne.n	8000642 <keyboard_scan+0x182>
					Column1_OUT_Low;
 8000636:	2200      	movs	r2, #0
 8000638:	2108      	movs	r1, #8
 800063a:	485d      	ldr	r0, [pc, #372]	; (80007b0 <keyboard_scan+0x2f0>)
 800063c:	f000 ffa4 	bl	8001588 <HAL_GPIO_WritePin>
 8000640:	e01a      	b.n	8000678 <keyboard_scan+0x1b8>
				else if (i == 2)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b02      	cmp	r3, #2
 8000646:	d105      	bne.n	8000654 <keyboard_scan+0x194>
					Column2_OUT_Low;
 8000648:	2200      	movs	r2, #0
 800064a:	2120      	movs	r1, #32
 800064c:	4858      	ldr	r0, [pc, #352]	; (80007b0 <keyboard_scan+0x2f0>)
 800064e:	f000 ff9b 	bl	8001588 <HAL_GPIO_WritePin>
 8000652:	e011      	b.n	8000678 <keyboard_scan+0x1b8>
				else if (i == 3)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2b03      	cmp	r3, #3
 8000658:	d105      	bne.n	8000666 <keyboard_scan+0x1a6>
					Column3_OUT_Low;
 800065a:	2200      	movs	r2, #0
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	4854      	ldr	r0, [pc, #336]	; (80007b0 <keyboard_scan+0x2f0>)
 8000660:	f000 ff92 	bl	8001588 <HAL_GPIO_WritePin>
 8000664:	e008      	b.n	8000678 <keyboard_scan+0x1b8>
				else if (i == 4)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b04      	cmp	r3, #4
 800066a:	d105      	bne.n	8000678 <keyboard_scan+0x1b8>
					Column4_OUT_Low;
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000672:	484f      	ldr	r0, [pc, #316]	; (80007b0 <keyboard_scan+0x2f0>)
 8000674:	f000 ff88 	bl	8001588 <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	3301      	adds	r3, #1
 800067c:	71fb      	strb	r3, [r7, #7]
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	2b04      	cmp	r3, #4
 8000682:	d9a7      	bls.n	80005d4 <keyboard_scan+0x114>
 8000684:	e0fc      	b.n	8000880 <keyboard_scan+0x3c0>

			}
		}
	} else if (Row3_INPUT_Read == GPIO_PIN_RESET) {
 8000686:	2110      	movs	r1, #16
 8000688:	4849      	ldr	r0, [pc, #292]	; (80007b0 <keyboard_scan+0x2f0>)
 800068a:	f000 ff65 	bl	8001558 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d166      	bne.n	8000762 <keyboard_scan+0x2a2>
		HAL_Delay(20);
 8000694:	2014      	movs	r0, #20
 8000696:	f000 fcb9 	bl	800100c <HAL_Delay>
		if (Row3_INPUT_Read == GPIO_PIN_RESET) { //消抖
 800069a:	2110      	movs	r1, #16
 800069c:	4844      	ldr	r0, [pc, #272]	; (80007b0 <keyboard_scan+0x2f0>)
 800069e:	f000 ff5b 	bl	8001558 <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f040 80eb 	bne.w	8000880 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 80006aa:	2301      	movs	r3, #1
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	e054      	b.n	800075a <keyboard_scan+0x29a>
				if (i == 1)
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d105      	bne.n	80006c2 <keyboard_scan+0x202>
					Column1_OUT_High;
 80006b6:	2201      	movs	r2, #1
 80006b8:	2108      	movs	r1, #8
 80006ba:	483d      	ldr	r0, [pc, #244]	; (80007b0 <keyboard_scan+0x2f0>)
 80006bc:	f000 ff64 	bl	8001588 <HAL_GPIO_WritePin>
 80006c0:	e01a      	b.n	80006f8 <keyboard_scan+0x238>
				else if (i == 2)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d105      	bne.n	80006d4 <keyboard_scan+0x214>
					Column2_OUT_High;
 80006c8:	2201      	movs	r2, #1
 80006ca:	2120      	movs	r1, #32
 80006cc:	4838      	ldr	r0, [pc, #224]	; (80007b0 <keyboard_scan+0x2f0>)
 80006ce:	f000 ff5b 	bl	8001588 <HAL_GPIO_WritePin>
 80006d2:	e011      	b.n	80006f8 <keyboard_scan+0x238>
				else if (i == 3)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d105      	bne.n	80006e6 <keyboard_scan+0x226>
					Column3_OUT_High;
 80006da:	2201      	movs	r2, #1
 80006dc:	2180      	movs	r1, #128	; 0x80
 80006de:	4834      	ldr	r0, [pc, #208]	; (80007b0 <keyboard_scan+0x2f0>)
 80006e0:	f000 ff52 	bl	8001588 <HAL_GPIO_WritePin>
 80006e4:	e008      	b.n	80006f8 <keyboard_scan+0x238>
				else if (i == 4)
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b04      	cmp	r3, #4
 80006ea:	d105      	bne.n	80006f8 <keyboard_scan+0x238>
					Column4_OUT_High;
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	482f      	ldr	r0, [pc, #188]	; (80007b0 <keyboard_scan+0x2f0>)
 80006f4:	f000 ff48 	bl	8001588 <HAL_GPIO_WritePin>

				if (Row3_INPUT_Read == GPIO_PIN_SET)
 80006f8:	2110      	movs	r1, #16
 80006fa:	482d      	ldr	r0, [pc, #180]	; (80007b0 <keyboard_scan+0x2f0>)
 80006fc:	f000 ff2c 	bl	8001558 <HAL_GPIO_ReadPin>
 8000700:	4603      	mov	r3, r0
 8000702:	2b01      	cmp	r3, #1
 8000704:	d102      	bne.n	800070c <keyboard_scan+0x24c>
					keynum = i + 8;
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	3308      	adds	r3, #8
 800070a:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d105      	bne.n	800071e <keyboard_scan+0x25e>
					Column1_OUT_Low;
 8000712:	2200      	movs	r2, #0
 8000714:	2108      	movs	r1, #8
 8000716:	4826      	ldr	r0, [pc, #152]	; (80007b0 <keyboard_scan+0x2f0>)
 8000718:	f000 ff36 	bl	8001588 <HAL_GPIO_WritePin>
 800071c:	e01a      	b.n	8000754 <keyboard_scan+0x294>
				else if (i == 2)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b02      	cmp	r3, #2
 8000722:	d105      	bne.n	8000730 <keyboard_scan+0x270>
					Column2_OUT_Low;
 8000724:	2200      	movs	r2, #0
 8000726:	2120      	movs	r1, #32
 8000728:	4821      	ldr	r0, [pc, #132]	; (80007b0 <keyboard_scan+0x2f0>)
 800072a:	f000 ff2d 	bl	8001588 <HAL_GPIO_WritePin>
 800072e:	e011      	b.n	8000754 <keyboard_scan+0x294>
				else if (i == 3)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2b03      	cmp	r3, #3
 8000734:	d105      	bne.n	8000742 <keyboard_scan+0x282>
					Column3_OUT_Low;
 8000736:	2200      	movs	r2, #0
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	481d      	ldr	r0, [pc, #116]	; (80007b0 <keyboard_scan+0x2f0>)
 800073c:	f000 ff24 	bl	8001588 <HAL_GPIO_WritePin>
 8000740:	e008      	b.n	8000754 <keyboard_scan+0x294>
				else if (i == 4)
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	2b04      	cmp	r3, #4
 8000746:	d105      	bne.n	8000754 <keyboard_scan+0x294>
					Column4_OUT_Low;
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074e:	4818      	ldr	r0, [pc, #96]	; (80007b0 <keyboard_scan+0x2f0>)
 8000750:	f000 ff1a 	bl	8001588 <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	3301      	adds	r3, #1
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2b04      	cmp	r3, #4
 800075e:	d9a7      	bls.n	80006b0 <keyboard_scan+0x1f0>
 8000760:	e08e      	b.n	8000880 <keyboard_scan+0x3c0>

			}
		}
	} else if (Row4_INPUT_Read == GPIO_PIN_RESET) {
 8000762:	2104      	movs	r1, #4
 8000764:	4812      	ldr	r0, [pc, #72]	; (80007b0 <keyboard_scan+0x2f0>)
 8000766:	f000 fef7 	bl	8001558 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d168      	bne.n	8000842 <keyboard_scan+0x382>
		HAL_Delay(20);
 8000770:	2014      	movs	r0, #20
 8000772:	f000 fc4b 	bl	800100c <HAL_Delay>
		if (Row4_INPUT_Read == GPIO_PIN_RESET) { //消抖
 8000776:	2104      	movs	r1, #4
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <keyboard_scan+0x2f0>)
 800077a:	f000 feed 	bl	8001558 <HAL_GPIO_ReadPin>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d17d      	bne.n	8000880 <keyboard_scan+0x3c0>
			for (i = 1; i <= 4; i++) {
 8000784:	2301      	movs	r3, #1
 8000786:	71fb      	strb	r3, [r7, #7]
 8000788:	e057      	b.n	800083a <keyboard_scan+0x37a>
				if (i == 1)
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d105      	bne.n	800079c <keyboard_scan+0x2dc>
					Column1_OUT_High;
 8000790:	2201      	movs	r2, #1
 8000792:	2108      	movs	r1, #8
 8000794:	4806      	ldr	r0, [pc, #24]	; (80007b0 <keyboard_scan+0x2f0>)
 8000796:	f000 fef7 	bl	8001588 <HAL_GPIO_WritePin>
 800079a:	e01d      	b.n	80007d8 <keyboard_scan+0x318>
				else if (i == 2)
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d108      	bne.n	80007b4 <keyboard_scan+0x2f4>
					Column2_OUT_High;
 80007a2:	2201      	movs	r2, #1
 80007a4:	2120      	movs	r1, #32
 80007a6:	4802      	ldr	r0, [pc, #8]	; (80007b0 <keyboard_scan+0x2f0>)
 80007a8:	f000 feee 	bl	8001588 <HAL_GPIO_WritePin>
 80007ac:	e014      	b.n	80007d8 <keyboard_scan+0x318>
 80007ae:	bf00      	nop
 80007b0:	40021800 	.word	0x40021800
				else if (i == 3)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	d105      	bne.n	80007c6 <keyboard_scan+0x306>
					Column3_OUT_High;
 80007ba:	2201      	movs	r2, #1
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	4833      	ldr	r0, [pc, #204]	; (800088c <keyboard_scan+0x3cc>)
 80007c0:	f000 fee2 	bl	8001588 <HAL_GPIO_WritePin>
 80007c4:	e008      	b.n	80007d8 <keyboard_scan+0x318>
				else if (i == 4)
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	d105      	bne.n	80007d8 <keyboard_scan+0x318>
					Column4_OUT_High;
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d2:	482e      	ldr	r0, [pc, #184]	; (800088c <keyboard_scan+0x3cc>)
 80007d4:	f000 fed8 	bl	8001588 <HAL_GPIO_WritePin>

				if (Row4_INPUT_Read == GPIO_PIN_SET)
 80007d8:	2104      	movs	r1, #4
 80007da:	482c      	ldr	r0, [pc, #176]	; (800088c <keyboard_scan+0x3cc>)
 80007dc:	f000 febc 	bl	8001558 <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d102      	bne.n	80007ec <keyboard_scan+0x32c>
					keynum = i + 12;
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	330c      	adds	r3, #12
 80007ea:	71bb      	strb	r3, [r7, #6]

				if (i == 1)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d105      	bne.n	80007fe <keyboard_scan+0x33e>
					Column1_OUT_Low;
 80007f2:	2200      	movs	r2, #0
 80007f4:	2108      	movs	r1, #8
 80007f6:	4825      	ldr	r0, [pc, #148]	; (800088c <keyboard_scan+0x3cc>)
 80007f8:	f000 fec6 	bl	8001588 <HAL_GPIO_WritePin>
 80007fc:	e01a      	b.n	8000834 <keyboard_scan+0x374>
				else if (i == 2)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d105      	bne.n	8000810 <keyboard_scan+0x350>
					Column2_OUT_Low;
 8000804:	2200      	movs	r2, #0
 8000806:	2120      	movs	r1, #32
 8000808:	4820      	ldr	r0, [pc, #128]	; (800088c <keyboard_scan+0x3cc>)
 800080a:	f000 febd 	bl	8001588 <HAL_GPIO_WritePin>
 800080e:	e011      	b.n	8000834 <keyboard_scan+0x374>
				else if (i == 3)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b03      	cmp	r3, #3
 8000814:	d105      	bne.n	8000822 <keyboard_scan+0x362>
					Column3_OUT_Low;
 8000816:	2200      	movs	r2, #0
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	481c      	ldr	r0, [pc, #112]	; (800088c <keyboard_scan+0x3cc>)
 800081c:	f000 feb4 	bl	8001588 <HAL_GPIO_WritePin>
 8000820:	e008      	b.n	8000834 <keyboard_scan+0x374>
				else if (i == 4)
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b04      	cmp	r3, #4
 8000826:	d105      	bne.n	8000834 <keyboard_scan+0x374>
					Column4_OUT_Low;
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082e:	4817      	ldr	r0, [pc, #92]	; (800088c <keyboard_scan+0x3cc>)
 8000830:	f000 feaa 	bl	8001588 <HAL_GPIO_WritePin>
			for (i = 1; i <= 4; i++) {
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	3301      	adds	r3, #1
 8000838:	71fb      	strb	r3, [r7, #7]
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b04      	cmp	r3, #4
 800083e:	d9a4      	bls.n	800078a <keyboard_scan+0x2ca>
 8000840:	e01e      	b.n	8000880 <keyboard_scan+0x3c0>

			}
		}
	} else if (Row1_INPUT_Read == GPIO_PIN_SET
 8000842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000846:	4811      	ldr	r0, [pc, #68]	; (800088c <keyboard_scan+0x3cc>)
 8000848:	f000 fe86 	bl	8001558 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b01      	cmp	r3, #1
 8000850:	d116      	bne.n	8000880 <keyboard_scan+0x3c0>
			&& Row2_INPUT_Read == GPIO_PIN_RESET
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <keyboard_scan+0x3cc>)
 8000856:	f000 fe7f 	bl	8001558 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d10f      	bne.n	8000880 <keyboard_scan+0x3c0>
			&& Row3_INPUT_Read == GPIO_PIN_RESET
 8000860:	2110      	movs	r1, #16
 8000862:	480a      	ldr	r0, [pc, #40]	; (800088c <keyboard_scan+0x3cc>)
 8000864:	f000 fe78 	bl	8001558 <HAL_GPIO_ReadPin>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d108      	bne.n	8000880 <keyboard_scan+0x3c0>
			&& Row4_INPUT_Read == GPIO_PIN_RESET) {
 800086e:	2104      	movs	r1, #4
 8000870:	4806      	ldr	r0, [pc, #24]	; (800088c <keyboard_scan+0x3cc>)
 8000872:	f000 fe71 	bl	8001558 <HAL_GPIO_ReadPin>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d101      	bne.n	8000880 <keyboard_scan+0x3c0>
		keynum = NOPRES;
 800087c:	2300      	movs	r3, #0
 800087e:	71bb      	strb	r3, [r7, #6]
	}
	return keynum;
 8000880:	79bb      	ldrb	r3, [r7, #6]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021800 	.word	0x40021800

08000890 <keyOperat>:

void keyOperat(void) {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	static uint8_t keynum = 0, lastnum = 0;
	keynum = keyboard_scan();
 8000894:	f7ff fe14 	bl	80004c0 <keyboard_scan>
 8000898:	4603      	mov	r3, r0
 800089a:	461a      	mov	r2, r3
 800089c:	4b3b      	ldr	r3, [pc, #236]	; (800098c <keyOperat+0xfc>)
 800089e:	701a      	strb	r2, [r3, #0]
	if (lastnum == keynum) {
 80008a0:	4b3b      	ldr	r3, [pc, #236]	; (8000990 <keyOperat+0x100>)
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	4b39      	ldr	r3, [pc, #228]	; (800098c <keyOperat+0xfc>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d06d      	beq.n	8000988 <keyOperat+0xf8>
		return;
	}
	switch (keynum) {
 80008ac:	4b37      	ldr	r3, [pc, #220]	; (800098c <keyOperat+0xfc>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	2b0f      	cmp	r3, #15
 80008b4:	d862      	bhi.n	800097c <keyOperat+0xec>
 80008b6:	a201      	add	r2, pc, #4	; (adr r2, 80008bc <keyOperat+0x2c>)
 80008b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008bc:	080008fd 	.word	0x080008fd
 80008c0:	08000905 	.word	0x08000905
 80008c4:	0800090d 	.word	0x0800090d
 80008c8:	0800094d 	.word	0x0800094d
 80008cc:	08000915 	.word	0x08000915
 80008d0:	0800091d 	.word	0x0800091d
 80008d4:	08000925 	.word	0x08000925
 80008d8:	08000955 	.word	0x08000955
 80008dc:	0800092d 	.word	0x0800092d
 80008e0:	08000935 	.word	0x08000935
 80008e4:	0800093d 	.word	0x0800093d
 80008e8:	0800095d 	.word	0x0800095d
 80008ec:	0800096d 	.word	0x0800096d
 80008f0:	08000945 	.word	0x08000945
 80008f4:	08000975 	.word	0x08000975
 80008f8:	08000965 	.word	0x08000965
	case ONE:
		printf("按键被按下。\r\n------------1\r\n");
 80008fc:	4825      	ldr	r0, [pc, #148]	; (8000994 <keyOperat+0x104>)
 80008fe:	f001 fd87 	bl	8002410 <puts>
		break;
 8000902:	e03c      	b.n	800097e <keyOperat+0xee>
	case TWO:
		printf("按键被按下。\r\n------------2\r\n");
 8000904:	4824      	ldr	r0, [pc, #144]	; (8000998 <keyOperat+0x108>)
 8000906:	f001 fd83 	bl	8002410 <puts>
		break;
 800090a:	e038      	b.n	800097e <keyOperat+0xee>
	case THREE:
		printf("按键被按下。\r\n------------3\r\n");
 800090c:	4823      	ldr	r0, [pc, #140]	; (800099c <keyOperat+0x10c>)
 800090e:	f001 fd7f 	bl	8002410 <puts>
		break;
 8000912:	e034      	b.n	800097e <keyOperat+0xee>
	case FOUR:
		printf("按键被按下。\r\n------------4\r\n");
 8000914:	4822      	ldr	r0, [pc, #136]	; (80009a0 <keyOperat+0x110>)
 8000916:	f001 fd7b 	bl	8002410 <puts>
		break;
 800091a:	e030      	b.n	800097e <keyOperat+0xee>
	case FIVE:
		printf("按键被按下。\r\n------------5\r\n");
 800091c:	4821      	ldr	r0, [pc, #132]	; (80009a4 <keyOperat+0x114>)
 800091e:	f001 fd77 	bl	8002410 <puts>
		break;
 8000922:	e02c      	b.n	800097e <keyOperat+0xee>
	case SIX:
		printf("按键被按下。\r\n------------6\r\n");
 8000924:	4820      	ldr	r0, [pc, #128]	; (80009a8 <keyOperat+0x118>)
 8000926:	f001 fd73 	bl	8002410 <puts>
		break;
 800092a:	e028      	b.n	800097e <keyOperat+0xee>
	case SEVEN:
		printf("按键被按下。\r\n------------7\r\n");
 800092c:	481f      	ldr	r0, [pc, #124]	; (80009ac <keyOperat+0x11c>)
 800092e:	f001 fd6f 	bl	8002410 <puts>
		break;
 8000932:	e024      	b.n	800097e <keyOperat+0xee>
	case EIGHT:
		printf("按键被按下。\r\n------------8\r\n");
 8000934:	481e      	ldr	r0, [pc, #120]	; (80009b0 <keyOperat+0x120>)
 8000936:	f001 fd6b 	bl	8002410 <puts>
		break;
 800093a:	e020      	b.n	800097e <keyOperat+0xee>
	case NINE:
		printf("按键被按下。\r\n------------9\r\n");
 800093c:	481d      	ldr	r0, [pc, #116]	; (80009b4 <keyOperat+0x124>)
 800093e:	f001 fd67 	bl	8002410 <puts>
		break;
 8000942:	e01c      	b.n	800097e <keyOperat+0xee>
	case ZERO:
		printf("按键被按下。\r\n------------0\r\n");
 8000944:	481c      	ldr	r0, [pc, #112]	; (80009b8 <keyOperat+0x128>)
 8000946:	f001 fd63 	bl	8002410 <puts>
		break;
 800094a:	e018      	b.n	800097e <keyOperat+0xee>
	case UP:
		printf("按键被按下。\r\n------------上\r\n");
 800094c:	481b      	ldr	r0, [pc, #108]	; (80009bc <keyOperat+0x12c>)
 800094e:	f001 fd5f 	bl	8002410 <puts>
		break;
 8000952:	e014      	b.n	800097e <keyOperat+0xee>
	case DOWN:
		printf("按键被按下。\r\n------------下\r\n");
 8000954:	481a      	ldr	r0, [pc, #104]	; (80009c0 <keyOperat+0x130>)
 8000956:	f001 fd5b 	bl	8002410 <puts>
		break;
 800095a:	e010      	b.n	800097e <keyOperat+0xee>
	case LEFT:
		printf("按键被按下。\r\n------------左\r\n");
 800095c:	4819      	ldr	r0, [pc, #100]	; (80009c4 <keyOperat+0x134>)
 800095e:	f001 fd57 	bl	8002410 <puts>
		break;
 8000962:	e00c      	b.n	800097e <keyOperat+0xee>
	case RIGHT:
		printf("按键被按下。\r\n------------右\r\n");
 8000964:	4818      	ldr	r0, [pc, #96]	; (80009c8 <keyOperat+0x138>)
 8000966:	f001 fd53 	bl	8002410 <puts>
		break;
 800096a:	e008      	b.n	800097e <keyOperat+0xee>
	case DETER:
		printf("按键被按下。\r\n------------确定\r\n");
 800096c:	4817      	ldr	r0, [pc, #92]	; (80009cc <keyOperat+0x13c>)
 800096e:	f001 fd4f 	bl	8002410 <puts>
		break;
 8000972:	e004      	b.n	800097e <keyOperat+0xee>
	case DELET:
		printf("按键被按下。\r\n------------删除\r\n");
 8000974:	4816      	ldr	r0, [pc, #88]	; (80009d0 <keyOperat+0x140>)
 8000976:	f001 fd4b 	bl	8002410 <puts>
		break;
 800097a:	e000      	b.n	800097e <keyOperat+0xee>

	default:
		break;
 800097c:	bf00      	nop
	}
	lastnum = keynum;
 800097e:	4b03      	ldr	r3, [pc, #12]	; (800098c <keyOperat+0xfc>)
 8000980:	781a      	ldrb	r2, [r3, #0]
 8000982:	4b03      	ldr	r3, [pc, #12]	; (8000990 <keyOperat+0x100>)
 8000984:	701a      	strb	r2, [r3, #0]
 8000986:	e000      	b.n	800098a <keyOperat+0xfa>
		return;
 8000988:	bf00      	nop
}
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2000008c 	.word	0x2000008c
 8000990:	2000008d 	.word	0x2000008d
 8000994:	08002cd8 	.word	0x08002cd8
 8000998:	08002cfc 	.word	0x08002cfc
 800099c:	08002d20 	.word	0x08002d20
 80009a0:	08002d44 	.word	0x08002d44
 80009a4:	08002d68 	.word	0x08002d68
 80009a8:	08002d8c 	.word	0x08002d8c
 80009ac:	08002db0 	.word	0x08002db0
 80009b0:	08002dd4 	.word	0x08002dd4
 80009b4:	08002df8 	.word	0x08002df8
 80009b8:	08002e1c 	.word	0x08002e1c
 80009bc:	08002e40 	.word	0x08002e40
 80009c0:	08002e68 	.word	0x08002e68
 80009c4:	08002e90 	.word	0x08002e90
 80009c8:	08002eb8 	.word	0x08002eb8
 80009cc:	08002ee0 	.word	0x08002ee0
 80009d0:	08002f08 	.word	0x08002f08

080009d4 <app_main_init>:
#include "gpio.h"

#include "keyboard.h"

//初始化函数
void app_main_init(void) {
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <app_main>:

//主程序函数
void app_main(void) {
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
	keyOperat();
 80009e6:	f7ff ff53 	bl	8000890 <keyOperat>
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 80009f8:	bf00      	nop
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <__io_putchar+0x2c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f9      	beq.n	80009fa <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <__io_putchar+0x2c>)
 8000a0c:	605a      	str	r2, [r3, #4]

	//  while ((USART2->SR & 0X40) == 0) {
	//  }; //循环发送,直到发送完毕
	//  USART2->DR = (uint8_t) ch;

	return ch;
 8000a0e:	687b      	ldr	r3, [r7, #4]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	40011000 	.word	0x40011000

08000a20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <MX_GPIO_Init+0xb8>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a26      	ldr	r2, [pc, #152]	; (8000ad8 <MX_GPIO_Init+0xb8>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <MX_GPIO_Init+0xb8>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <MX_GPIO_Init+0xb8>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ad8 <MX_GPIO_Init+0xb8>)
 8000a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <MX_GPIO_Init+0xb8>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_GPIO_Init+0xb8>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a18      	ldr	r2, [pc, #96]	; (8000ad8 <MX_GPIO_Init+0xb8>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_GPIO_Init+0xb8>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8000a90:	4812      	ldr	r0, [pc, #72]	; (8000adc <MX_GPIO_Init+0xbc>)
 8000a92:	f000 fd79 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Row4_Pin|Row3_Pin|Row2_Pin|Row1_Pin;
 8000a96:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8000a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480c      	ldr	r0, [pc, #48]	; (8000adc <MX_GPIO_Init+0xbc>)
 8000aac:	f000 fbb8 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Column1_Pin|Column2_Pin|Column3_Pin|Column4_Pin;
 8000ab0:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 8000ab4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aba:	2302      	movs	r3, #2
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_GPIO_Init+0xbc>)
 8000aca:	f000 fba9 	bl	8001220 <HAL_GPIO_Init>

}
 8000ace:	bf00      	nop
 8000ad0:	3720      	adds	r7, #32
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40021800 	.word	0x40021800

08000ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae4:	f000 fa20 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae8:	f000 f80a 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aec:	f7ff ff98 	bl	8000a20 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000af0:	f000 f97e 	bl	8000df0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	app_main_init();
 8000af4:	f7ff ff6e 	bl	80009d4 <app_main_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		app_main();
 8000af8:	f7ff ff73 	bl	80009e2 <app_main>
	while (1) {
 8000afc:	e7fc      	b.n	8000af8 <main+0x18>
	...

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b094      	sub	sp, #80	; 0x50
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0320 	add.w	r3, r7, #32
 8000b0a:	2230      	movs	r2, #48	; 0x30
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 fc08 	bl	8002324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <SystemClock_Config+0xcc>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <SystemClock_Config+0xcc>)
 8000b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b32:	6413      	str	r3, [r2, #64]	; 0x40
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <SystemClock_Config+0xcc>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <SystemClock_Config+0xd0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a21      	ldr	r2, [pc, #132]	; (8000bd0 <SystemClock_Config+0xd0>)
 8000b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <SystemClock_Config+0xd0>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b66:	2302      	movs	r3, #2
 8000b68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b74:	23a8      	movs	r3, #168	; 0xa8
 8000b76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b80:	f107 0320 	add.w	r3, r7, #32
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fd19 	bl	80015bc <HAL_RCC_OscConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b90:	f000 f820 	bl	8000bd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b94:	230f      	movs	r3, #15
 8000b96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ba0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ba4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000baa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	2105      	movs	r1, #5
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 ff7a 	bl	8001aac <HAL_RCC_ClockConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bbe:	f000 f809 	bl	8000bd4 <Error_Handler>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3750      	adds	r7, #80	; 0x50
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40007000 	.word	0x40007000

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <NMI_Handler+0x4>

08000c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler+0x4>

08000c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7c:	f000 f9a6 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e00a      	b.n	8000cac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c96:	f3af 8000 	nop.w
 8000c9a:	4601      	mov	r1, r0
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	b2ca      	uxtb	r2, r1
 8000ca4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf0      	blt.n	8000c96 <_read+0x12>
	}

return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	e009      	b.n	8000ce4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	60ba      	str	r2, [r7, #8]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fe89 	bl	80009f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbf1      	blt.n	8000cd0 <_write+0x12>
	}
	return len;
 8000cec:	687b      	ldr	r3, [r7, #4]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_close>:

int _close(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	return -1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_isatty>:

int _isatty(int file)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	return 1;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f001 fa9e 	bl	80022d0 <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20020000 	.word	0x20020000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	20000090 	.word	0x20000090
 8000dc8:	200000f8 	.word	0x200000f8

08000dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <MX_USART1_UART_Init+0x50>)
 8000df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e28:	f001 f83c 	bl	8001ea4 <HAL_UART_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e32:	f7ff fecf 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000009c 	.word	0x2000009c
 8000e40:	40011000 	.word	0x40011000

08000e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <HAL_UART_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12c      	bne.n	8000ec0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e70:	f043 0310 	orr.w	r3, r3, #16
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_UART_MspInit+0x8c>)
 8000ebc:	f000 f9b0 	bl	8001220 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40011000 	.word	0x40011000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eda:	490e      	ldr	r1, [pc, #56]	; (8000f14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ef0:	4c0b      	ldr	r4, [pc, #44]	; (8000f20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000efe:	f7ff ff65 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f02:	f001 f9eb 	bl	80022dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f06:	f7ff fdeb 	bl	8000ae0 <main>
  bx  lr    
 8000f0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f18:	08002fbc 	.word	0x08002fbc
  ldr r2, =_sbss
 8000f1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f20:	200000f4 	.word	0x200000f4

08000f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_Init+0x40>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_Init+0x40>)
 8000f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x40>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f931 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fe40 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f93b 	bl	8001206 <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 f911 	bl	80011ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000004 	.word	0x20000004

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	200000e0 	.word	0x200000e0

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200000e0 	.word	0x200000e0

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff ffee 	bl	8000ff4 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_Delay+0x44>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008

08001054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800107c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <__NVIC_GetPriorityGrouping+0x18>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0307 	and.w	r3, r3, #7
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001184:	d301      	bcc.n	800118a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e00f      	b.n	80011aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <SysTick_Config+0x40>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	210f      	movs	r1, #15
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f7ff ff8e 	bl	80010b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <SysTick_Config+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SysTick_Config+0x40>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff47 	bl	8001054 <__NVIC_SetPriorityGrouping>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e0:	f7ff ff5c 	bl	800109c <__NVIC_GetPriorityGrouping>
 80011e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff8e 	bl	800110c <NVIC_EncodePriority>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff5d 	bl	80010b8 <__NVIC_SetPriority>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ffb0 	bl	8001174 <SysTick_Config>
 8001214:	4603      	mov	r3, r0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	e16b      	b.n	8001514 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800123c:	2201      	movs	r2, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	429a      	cmp	r2, r3
 8001256:	f040 815a 	bne.w	800150e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	2b01      	cmp	r3, #1
 8001264:	d005      	beq.n	8001272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800126e:	2b02      	cmp	r3, #2
 8001270:	d130      	bne.n	80012d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2203      	movs	r2, #3
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	68da      	ldr	r2, [r3, #12]
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a8:	2201      	movs	r2, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	f003 0201 	and.w	r2, r3, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d017      	beq.n	8001310 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d123      	bne.n	8001364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	08da      	lsrs	r2, r3, #3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3208      	adds	r2, #8
 8001324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	220f      	movs	r2, #15
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	691a      	ldr	r2, [r3, #16]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	08da      	lsrs	r2, r3, #3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3208      	adds	r2, #8
 800135e:	69b9      	ldr	r1, [r7, #24]
 8001360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0203 	and.w	r2, r3, #3
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80b4 	beq.w	800150e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b60      	ldr	r3, [pc, #384]	; (800152c <HAL_GPIO_Init+0x30c>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	4a5f      	ldr	r2, [pc, #380]	; (800152c <HAL_GPIO_Init+0x30c>)
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b4:	6453      	str	r3, [r2, #68]	; 0x44
 80013b6:	4b5d      	ldr	r3, [pc, #372]	; (800152c <HAL_GPIO_Init+0x30c>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013c2:	4a5b      	ldr	r2, [pc, #364]	; (8001530 <HAL_GPIO_Init+0x310>)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	3302      	adds	r3, #2
 80013ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	220f      	movs	r2, #15
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a52      	ldr	r2, [pc, #328]	; (8001534 <HAL_GPIO_Init+0x314>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d02b      	beq.n	8001446 <HAL_GPIO_Init+0x226>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a51      	ldr	r2, [pc, #324]	; (8001538 <HAL_GPIO_Init+0x318>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d025      	beq.n	8001442 <HAL_GPIO_Init+0x222>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a50      	ldr	r2, [pc, #320]	; (800153c <HAL_GPIO_Init+0x31c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d01f      	beq.n	800143e <HAL_GPIO_Init+0x21e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4f      	ldr	r2, [pc, #316]	; (8001540 <HAL_GPIO_Init+0x320>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d019      	beq.n	800143a <HAL_GPIO_Init+0x21a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4e      	ldr	r2, [pc, #312]	; (8001544 <HAL_GPIO_Init+0x324>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d013      	beq.n	8001436 <HAL_GPIO_Init+0x216>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4d      	ldr	r2, [pc, #308]	; (8001548 <HAL_GPIO_Init+0x328>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00d      	beq.n	8001432 <HAL_GPIO_Init+0x212>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4c      	ldr	r2, [pc, #304]	; (800154c <HAL_GPIO_Init+0x32c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d007      	beq.n	800142e <HAL_GPIO_Init+0x20e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4b      	ldr	r2, [pc, #300]	; (8001550 <HAL_GPIO_Init+0x330>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d101      	bne.n	800142a <HAL_GPIO_Init+0x20a>
 8001426:	2307      	movs	r3, #7
 8001428:	e00e      	b.n	8001448 <HAL_GPIO_Init+0x228>
 800142a:	2308      	movs	r3, #8
 800142c:	e00c      	b.n	8001448 <HAL_GPIO_Init+0x228>
 800142e:	2306      	movs	r3, #6
 8001430:	e00a      	b.n	8001448 <HAL_GPIO_Init+0x228>
 8001432:	2305      	movs	r3, #5
 8001434:	e008      	b.n	8001448 <HAL_GPIO_Init+0x228>
 8001436:	2304      	movs	r3, #4
 8001438:	e006      	b.n	8001448 <HAL_GPIO_Init+0x228>
 800143a:	2303      	movs	r3, #3
 800143c:	e004      	b.n	8001448 <HAL_GPIO_Init+0x228>
 800143e:	2302      	movs	r3, #2
 8001440:	e002      	b.n	8001448 <HAL_GPIO_Init+0x228>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x228>
 8001446:	2300      	movs	r3, #0
 8001448:	69fa      	ldr	r2, [r7, #28]
 800144a:	f002 0203 	and.w	r2, r2, #3
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	4093      	lsls	r3, r2
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001458:	4935      	ldr	r1, [pc, #212]	; (8001530 <HAL_GPIO_Init+0x310>)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001466:	4b3b      	ldr	r3, [pc, #236]	; (8001554 <HAL_GPIO_Init+0x334>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800148a:	4a32      	ldr	r2, [pc, #200]	; (8001554 <HAL_GPIO_Init+0x334>)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001490:	4b30      	ldr	r3, [pc, #192]	; (8001554 <HAL_GPIO_Init+0x334>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014b4:	4a27      	ldr	r2, [pc, #156]	; (8001554 <HAL_GPIO_Init+0x334>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_GPIO_Init+0x334>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014de:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_GPIO_Init+0x334>)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_GPIO_Init+0x334>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001508:	4a12      	ldr	r2, [pc, #72]	; (8001554 <HAL_GPIO_Init+0x334>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3301      	adds	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	2b0f      	cmp	r3, #15
 8001518:	f67f ae90 	bls.w	800123c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40013800 	.word	0x40013800
 8001534:	40020000 	.word	0x40020000
 8001538:	40020400 	.word	0x40020400
 800153c:	40020800 	.word	0x40020800
 8001540:	40020c00 	.word	0x40020c00
 8001544:	40021000 	.word	0x40021000
 8001548:	40021400 	.word	0x40021400
 800154c:	40021800 	.word	0x40021800
 8001550:	40021c00 	.word	0x40021c00
 8001554:	40013c00 	.word	0x40013c00

08001558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	4013      	ands	r3, r2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d002      	beq.n	8001576 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	e001      	b.n	800157a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800157a:	7bfb      	ldrb	r3, [r7, #15]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a4:	e003      	b.n	80015ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	041a      	lsls	r2, r3, #16
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	619a      	str	r2, [r3, #24]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e264      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d075      	beq.n	80016c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015da:	4ba3      	ldr	r3, [pc, #652]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d00c      	beq.n	8001600 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e6:	4ba0      	ldr	r3, [pc, #640]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d112      	bne.n	8001618 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f2:	4b9d      	ldr	r3, [pc, #628]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015fe:	d10b      	bne.n	8001618 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	4b99      	ldr	r3, [pc, #612]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d05b      	beq.n	80016c4 <HAL_RCC_OscConfig+0x108>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d157      	bne.n	80016c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e23f      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001620:	d106      	bne.n	8001630 <HAL_RCC_OscConfig+0x74>
 8001622:	4b91      	ldr	r3, [pc, #580]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a90      	ldr	r2, [pc, #576]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e01d      	b.n	800166c <HAL_RCC_OscConfig+0xb0>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0x98>
 800163a:	4b8b      	ldr	r3, [pc, #556]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a8a      	ldr	r2, [pc, #552]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b88      	ldr	r3, [pc, #544]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a87      	ldr	r2, [pc, #540]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e00b      	b.n	800166c <HAL_RCC_OscConfig+0xb0>
 8001654:	4b84      	ldr	r3, [pc, #528]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a83      	ldr	r2, [pc, #524]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 800165a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b81      	ldr	r3, [pc, #516]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a80      	ldr	r2, [pc, #512]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 8001666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800166a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d013      	beq.n	800169c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fcbe 	bl	8000ff4 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff fcba 	bl	8000ff4 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e204      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b76      	ldr	r3, [pc, #472]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0xc0>
 800169a:	e014      	b.n	80016c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7ff fcaa 	bl	8000ff4 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a4:	f7ff fca6 	bl	8000ff4 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1f0      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b6:	4b6c      	ldr	r3, [pc, #432]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0xe8>
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d063      	beq.n	800179a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016d2:	4b65      	ldr	r3, [pc, #404]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016de:	4b62      	ldr	r3, [pc, #392]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d11c      	bne.n	8001724 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ea:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d116      	bne.n	8001724 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f6:	4b5c      	ldr	r3, [pc, #368]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_RCC_OscConfig+0x152>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d001      	beq.n	800170e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e1c4      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	4b56      	ldr	r3, [pc, #344]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4952      	ldr	r1, [pc, #328]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 800171e:	4313      	orrs	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001722:	e03a      	b.n	800179a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d020      	beq.n	800176e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800172c:	4b4f      	ldr	r3, [pc, #316]	; (800186c <HAL_RCC_OscConfig+0x2b0>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001732:	f7ff fc5f 	bl	8000ff4 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800173a:	f7ff fc5b 	bl	8000ff4 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e1a5      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174c:	4b46      	ldr	r3, [pc, #280]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001758:	4b43      	ldr	r3, [pc, #268]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4940      	ldr	r1, [pc, #256]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
 800176c:	e015      	b.n	800179a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176e:	4b3f      	ldr	r3, [pc, #252]	; (800186c <HAL_RCC_OscConfig+0x2b0>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff fc3e 	bl	8000ff4 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800177c:	f7ff fc3a 	bl	8000ff4 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e184      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178e:	4b36      	ldr	r3, [pc, #216]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d030      	beq.n	8001808 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d016      	beq.n	80017dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ae:	4b30      	ldr	r3, [pc, #192]	; (8001870 <HAL_RCC_OscConfig+0x2b4>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b4:	f7ff fc1e 	bl	8000ff4 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017bc:	f7ff fc1a 	bl	8000ff4 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e164      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x200>
 80017da:	e015      	b.n	8001808 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017dc:	4b24      	ldr	r3, [pc, #144]	; (8001870 <HAL_RCC_OscConfig+0x2b4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e2:	f7ff fc07 	bl	8000ff4 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ea:	f7ff fc03 	bl	8000ff4 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e14d      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 80017fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f0      	bne.n	80017ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80a0 	beq.w	8001956 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10f      	bne.n	8001846 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001842:	2301      	movs	r3, #1
 8001844:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_RCC_OscConfig+0x2b8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d121      	bne.n	8001896 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_RCC_OscConfig+0x2b8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_RCC_OscConfig+0x2b8>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185e:	f7ff fbc9 	bl	8000ff4 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	e011      	b.n	800188a <HAL_RCC_OscConfig+0x2ce>
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800
 800186c:	42470000 	.word	0x42470000
 8001870:	42470e80 	.word	0x42470e80
 8001874:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001878:	f7ff fbbc 	bl	8000ff4 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e106      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188a:	4b85      	ldr	r3, [pc, #532]	; (8001aa0 <HAL_RCC_OscConfig+0x4e4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d106      	bne.n	80018ac <HAL_RCC_OscConfig+0x2f0>
 800189e:	4b81      	ldr	r3, [pc, #516]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a2:	4a80      	ldr	r2, [pc, #512]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6713      	str	r3, [r2, #112]	; 0x70
 80018aa:	e01c      	b.n	80018e6 <HAL_RCC_OscConfig+0x32a>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b05      	cmp	r3, #5
 80018b2:	d10c      	bne.n	80018ce <HAL_RCC_OscConfig+0x312>
 80018b4:	4b7b      	ldr	r3, [pc, #492]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	4a7a      	ldr	r2, [pc, #488]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	6713      	str	r3, [r2, #112]	; 0x70
 80018c0:	4b78      	ldr	r3, [pc, #480]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c4:	4a77      	ldr	r2, [pc, #476]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6713      	str	r3, [r2, #112]	; 0x70
 80018cc:	e00b      	b.n	80018e6 <HAL_RCC_OscConfig+0x32a>
 80018ce:	4b75      	ldr	r3, [pc, #468]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	4a74      	ldr	r2, [pc, #464]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6713      	str	r3, [r2, #112]	; 0x70
 80018da:	4b72      	ldr	r3, [pc, #456]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018de:	4a71      	ldr	r2, [pc, #452]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 80018e0:	f023 0304 	bic.w	r3, r3, #4
 80018e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d015      	beq.n	800191a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ee:	f7ff fb81 	bl	8000ff4 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f4:	e00a      	b.n	800190c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f6:	f7ff fb7d 	bl	8000ff4 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	f241 3288 	movw	r2, #5000	; 0x1388
 8001904:	4293      	cmp	r3, r2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e0c5      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190c:	4b65      	ldr	r3, [pc, #404]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0ee      	beq.n	80018f6 <HAL_RCC_OscConfig+0x33a>
 8001918:	e014      	b.n	8001944 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191a:	f7ff fb6b 	bl	8000ff4 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7ff fb67 	bl	8000ff4 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e0af      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001938:	4b5a      	ldr	r3, [pc, #360]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1ee      	bne.n	8001922 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001944:	7dfb      	ldrb	r3, [r7, #23]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d105      	bne.n	8001956 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194a:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a55      	ldr	r2, [pc, #340]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 8001950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 809b 	beq.w	8001a96 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001960:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b08      	cmp	r3, #8
 800196a:	d05c      	beq.n	8001a26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d141      	bne.n	80019f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001974:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <HAL_RCC_OscConfig+0x4ec>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197a:	f7ff fb3b 	bl	8000ff4 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001982:	f7ff fb37 	bl	8000ff4 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e081      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001994:	4b43      	ldr	r3, [pc, #268]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f0      	bne.n	8001982 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69da      	ldr	r2, [r3, #28]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	019b      	lsls	r3, r3, #6
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b6:	085b      	lsrs	r3, r3, #1
 80019b8:	3b01      	subs	r3, #1
 80019ba:	041b      	lsls	r3, r3, #16
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	061b      	lsls	r3, r3, #24
 80019c4:	4937      	ldr	r1, [pc, #220]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ca:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <HAL_RCC_OscConfig+0x4ec>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fb10 	bl	8000ff4 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff fb0c 	bl	8000ff4 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e056      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ea:	4b2e      	ldr	r3, [pc, #184]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x41c>
 80019f6:	e04e      	b.n	8001a96 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_RCC_OscConfig+0x4ec>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff faf9 	bl	8000ff4 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a06:	f7ff faf5 	bl	8000ff4 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e03f      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f0      	bne.n	8001a06 <HAL_RCC_OscConfig+0x44a>
 8001a24:	e037      	b.n	8001a96 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e032      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <HAL_RCC_OscConfig+0x4e8>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d028      	beq.n	8001a92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d121      	bne.n	8001a92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d11a      	bne.n	8001a92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a62:	4013      	ands	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a68:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d111      	bne.n	8001a92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	085b      	lsrs	r3, r3, #1
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d001      	beq.n	8001a96 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	42470060 	.word	0x42470060

08001aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0cc      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b68      	ldr	r3, [pc, #416]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d90c      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b65      	ldr	r3, [pc, #404]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0b8      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d020      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b00:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a58      	ldr	r2, [pc, #352]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a52      	ldr	r2, [pc, #328]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b24:	4b50      	ldr	r3, [pc, #320]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	494d      	ldr	r1, [pc, #308]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d044      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d119      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e07f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e06f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e067      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8a:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f023 0203 	bic.w	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4934      	ldr	r1, [pc, #208]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b9c:	f7ff fa2a 	bl	8000ff4 <HAL_GetTick>
 8001ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba4:	f7ff fa26 	bl	8000ff4 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e04f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 020c 	and.w	r2, r3, #12
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1eb      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d20c      	bcs.n	8001bf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e032      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4916      	ldr	r1, [pc, #88]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	490e      	ldr	r1, [pc, #56]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c32:	f000 f821 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	490a      	ldr	r1, [pc, #40]	; (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	5ccb      	ldrb	r3, [r1, r3]
 8001c46:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4a:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f98a 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023c00 	.word	0x40023c00
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	08002f30 	.word	0x08002f30
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000004 	.word	0x20000004

08001c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c90:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x40>
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	f200 80bd 	bhi.w	8001e1c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x34>
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001caa:	e0b7      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cac:	4b61      	ldr	r3, [pc, #388]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cae:	60bb      	str	r3, [r7, #8]
       break;
 8001cb0:	e0b7      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cb2:	4b61      	ldr	r3, [pc, #388]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001cb4:	60bb      	str	r3, [r7, #8]
      break;
 8001cb6:	e0b4      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb8:	4b5d      	ldr	r3, [pc, #372]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cc0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cc2:	4b5b      	ldr	r3, [pc, #364]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d04d      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cce:	4b58      	ldr	r3, [pc, #352]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	099b      	lsrs	r3, r3, #6
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cde:	f04f 0100 	mov.w	r1, #0
 8001ce2:	ea02 0800 	and.w	r8, r2, r0
 8001ce6:	ea03 0901 	and.w	r9, r3, r1
 8001cea:	4640      	mov	r0, r8
 8001cec:	4649      	mov	r1, r9
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	014b      	lsls	r3, r1, #5
 8001cf8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cfc:	0142      	lsls	r2, r0, #5
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	ebb0 0008 	subs.w	r0, r0, r8
 8001d06:	eb61 0109 	sbc.w	r1, r1, r9
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	018b      	lsls	r3, r1, #6
 8001d14:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d18:	0182      	lsls	r2, r0, #6
 8001d1a:	1a12      	subs	r2, r2, r0
 8001d1c:	eb63 0301 	sbc.w	r3, r3, r1
 8001d20:	f04f 0000 	mov.w	r0, #0
 8001d24:	f04f 0100 	mov.w	r1, #0
 8001d28:	00d9      	lsls	r1, r3, #3
 8001d2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d2e:	00d0      	lsls	r0, r2, #3
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	eb12 0208 	adds.w	r2, r2, r8
 8001d38:	eb43 0309 	adc.w	r3, r3, r9
 8001d3c:	f04f 0000 	mov.w	r0, #0
 8001d40:	f04f 0100 	mov.w	r1, #0
 8001d44:	0259      	lsls	r1, r3, #9
 8001d46:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d4a:	0250      	lsls	r0, r2, #9
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	461a      	mov	r2, r3
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	f7fe fa34 	bl	80001c8 <__aeabi_uldivmod>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4613      	mov	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	e04a      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6a:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	099b      	lsrs	r3, r3, #6
 8001d70:	461a      	mov	r2, r3
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d7a:	f04f 0100 	mov.w	r1, #0
 8001d7e:	ea02 0400 	and.w	r4, r2, r0
 8001d82:	ea03 0501 	and.w	r5, r3, r1
 8001d86:	4620      	mov	r0, r4
 8001d88:	4629      	mov	r1, r5
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	014b      	lsls	r3, r1, #5
 8001d94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d98:	0142      	lsls	r2, r0, #5
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	1b00      	subs	r0, r0, r4
 8001da0:	eb61 0105 	sbc.w	r1, r1, r5
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	018b      	lsls	r3, r1, #6
 8001dae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001db2:	0182      	lsls	r2, r0, #6
 8001db4:	1a12      	subs	r2, r2, r0
 8001db6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dba:	f04f 0000 	mov.w	r0, #0
 8001dbe:	f04f 0100 	mov.w	r1, #0
 8001dc2:	00d9      	lsls	r1, r3, #3
 8001dc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dc8:	00d0      	lsls	r0, r2, #3
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	1912      	adds	r2, r2, r4
 8001dd0:	eb45 0303 	adc.w	r3, r5, r3
 8001dd4:	f04f 0000 	mov.w	r0, #0
 8001dd8:	f04f 0100 	mov.w	r1, #0
 8001ddc:	0299      	lsls	r1, r3, #10
 8001dde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001de2:	0290      	lsls	r0, r2, #10
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4610      	mov	r0, r2
 8001dea:	4619      	mov	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	461a      	mov	r2, r3
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	f7fe f9e8 	bl	80001c8 <__aeabi_uldivmod>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	0c1b      	lsrs	r3, r3, #16
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e18:	60bb      	str	r3, [r7, #8]
      break;
 8001e1a:	e002      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e1e:	60bb      	str	r3, [r7, #8]
      break;
 8001e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e22:	68bb      	ldr	r3, [r7, #8]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	00f42400 	.word	0x00f42400
 8001e38:	007a1200 	.word	0x007a1200

08001e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000000 	.word	0x20000000

08001e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e58:	f7ff fff0 	bl	8001e3c <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	0a9b      	lsrs	r3, r3, #10
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4903      	ldr	r1, [pc, #12]	; (8001e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40023800 	.word	0x40023800
 8001e78:	08002f40 	.word	0x08002f40

08001e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e80:	f7ff ffdc 	bl	8001e3c <HAL_RCC_GetHCLKFreq>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	0b5b      	lsrs	r3, r3, #13
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	4903      	ldr	r1, [pc, #12]	; (8001ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e92:	5ccb      	ldrb	r3, [r1, r3]
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	08002f40 	.word	0x08002f40

08001ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e03f      	b.n	8001f36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe ffba 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2224      	movs	r2, #36	; 0x24
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f829 	bl	8001f40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f44:	b09f      	sub	sp, #124	; 0x7c
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f56:	68d9      	ldr	r1, [r3, #12]
 8001f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	ea40 0301 	orr.w	r3, r0, r1
 8001f60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001f84:	f021 010c 	bic.w	r1, r1, #12
 8001f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f9e:	6999      	ldr	r1, [r3, #24]
 8001fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	ea40 0301 	orr.w	r3, r0, r1
 8001fa8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4bc5      	ldr	r3, [pc, #788]	; (80022c4 <UART_SetConfig+0x384>)
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d004      	beq.n	8001fbe <UART_SetConfig+0x7e>
 8001fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4bc3      	ldr	r3, [pc, #780]	; (80022c8 <UART_SetConfig+0x388>)
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d103      	bne.n	8001fc6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fbe:	f7ff ff5d 	bl	8001e7c <HAL_RCC_GetPCLK2Freq>
 8001fc2:	6778      	str	r0, [r7, #116]	; 0x74
 8001fc4:	e002      	b.n	8001fcc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fc6:	f7ff ff45 	bl	8001e54 <HAL_RCC_GetPCLK1Freq>
 8001fca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fd4:	f040 80b6 	bne.w	8002144 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fda:	461c      	mov	r4, r3
 8001fdc:	f04f 0500 	mov.w	r5, #0
 8001fe0:	4622      	mov	r2, r4
 8001fe2:	462b      	mov	r3, r5
 8001fe4:	1891      	adds	r1, r2, r2
 8001fe6:	6439      	str	r1, [r7, #64]	; 0x40
 8001fe8:	415b      	adcs	r3, r3
 8001fea:	647b      	str	r3, [r7, #68]	; 0x44
 8001fec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ff0:	1912      	adds	r2, r2, r4
 8001ff2:	eb45 0303 	adc.w	r3, r5, r3
 8001ff6:	f04f 0000 	mov.w	r0, #0
 8001ffa:	f04f 0100 	mov.w	r1, #0
 8001ffe:	00d9      	lsls	r1, r3, #3
 8002000:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002004:	00d0      	lsls	r0, r2, #3
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	1911      	adds	r1, r2, r4
 800200c:	6639      	str	r1, [r7, #96]	; 0x60
 800200e:	416b      	adcs	r3, r5
 8002010:	667b      	str	r3, [r7, #100]	; 0x64
 8002012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	461a      	mov	r2, r3
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	1891      	adds	r1, r2, r2
 800201e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002020:	415b      	adcs	r3, r3
 8002022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002024:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002028:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800202c:	f7fe f8cc 	bl	80001c8 <__aeabi_uldivmod>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4ba5      	ldr	r3, [pc, #660]	; (80022cc <UART_SetConfig+0x38c>)
 8002036:	fba3 2302 	umull	r2, r3, r3, r2
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	011e      	lsls	r6, r3, #4
 800203e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002040:	461c      	mov	r4, r3
 8002042:	f04f 0500 	mov.w	r5, #0
 8002046:	4622      	mov	r2, r4
 8002048:	462b      	mov	r3, r5
 800204a:	1891      	adds	r1, r2, r2
 800204c:	6339      	str	r1, [r7, #48]	; 0x30
 800204e:	415b      	adcs	r3, r3
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
 8002052:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002056:	1912      	adds	r2, r2, r4
 8002058:	eb45 0303 	adc.w	r3, r5, r3
 800205c:	f04f 0000 	mov.w	r0, #0
 8002060:	f04f 0100 	mov.w	r1, #0
 8002064:	00d9      	lsls	r1, r3, #3
 8002066:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800206a:	00d0      	lsls	r0, r2, #3
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	1911      	adds	r1, r2, r4
 8002072:	65b9      	str	r1, [r7, #88]	; 0x58
 8002074:	416b      	adcs	r3, r5
 8002076:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	461a      	mov	r2, r3
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	1891      	adds	r1, r2, r2
 8002084:	62b9      	str	r1, [r7, #40]	; 0x28
 8002086:	415b      	adcs	r3, r3
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800208a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800208e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002092:	f7fe f899 	bl	80001c8 <__aeabi_uldivmod>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4b8c      	ldr	r3, [pc, #560]	; (80022cc <UART_SetConfig+0x38c>)
 800209c:	fba3 1302 	umull	r1, r3, r3, r2
 80020a0:	095b      	lsrs	r3, r3, #5
 80020a2:	2164      	movs	r1, #100	; 0x64
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	3332      	adds	r3, #50	; 0x32
 80020ae:	4a87      	ldr	r2, [pc, #540]	; (80022cc <UART_SetConfig+0x38c>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	095b      	lsrs	r3, r3, #5
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020bc:	441e      	add	r6, r3
 80020be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020c0:	4618      	mov	r0, r3
 80020c2:	f04f 0100 	mov.w	r1, #0
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	1894      	adds	r4, r2, r2
 80020cc:	623c      	str	r4, [r7, #32]
 80020ce:	415b      	adcs	r3, r3
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
 80020d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020d6:	1812      	adds	r2, r2, r0
 80020d8:	eb41 0303 	adc.w	r3, r1, r3
 80020dc:	f04f 0400 	mov.w	r4, #0
 80020e0:	f04f 0500 	mov.w	r5, #0
 80020e4:	00dd      	lsls	r5, r3, #3
 80020e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80020ea:	00d4      	lsls	r4, r2, #3
 80020ec:	4622      	mov	r2, r4
 80020ee:	462b      	mov	r3, r5
 80020f0:	1814      	adds	r4, r2, r0
 80020f2:	653c      	str	r4, [r7, #80]	; 0x50
 80020f4:	414b      	adcs	r3, r1
 80020f6:	657b      	str	r3, [r7, #84]	; 0x54
 80020f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	461a      	mov	r2, r3
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	1891      	adds	r1, r2, r2
 8002104:	61b9      	str	r1, [r7, #24]
 8002106:	415b      	adcs	r3, r3
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800210e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002112:	f7fe f859 	bl	80001c8 <__aeabi_uldivmod>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4b6c      	ldr	r3, [pc, #432]	; (80022cc <UART_SetConfig+0x38c>)
 800211c:	fba3 1302 	umull	r1, r3, r3, r2
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	2164      	movs	r1, #100	; 0x64
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	3332      	adds	r3, #50	; 0x32
 800212e:	4a67      	ldr	r2, [pc, #412]	; (80022cc <UART_SetConfig+0x38c>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	f003 0207 	and.w	r2, r3, #7
 800213a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4432      	add	r2, r6
 8002140:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002142:	e0b9      	b.n	80022b8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002146:	461c      	mov	r4, r3
 8002148:	f04f 0500 	mov.w	r5, #0
 800214c:	4622      	mov	r2, r4
 800214e:	462b      	mov	r3, r5
 8002150:	1891      	adds	r1, r2, r2
 8002152:	6139      	str	r1, [r7, #16]
 8002154:	415b      	adcs	r3, r3
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800215c:	1912      	adds	r2, r2, r4
 800215e:	eb45 0303 	adc.w	r3, r5, r3
 8002162:	f04f 0000 	mov.w	r0, #0
 8002166:	f04f 0100 	mov.w	r1, #0
 800216a:	00d9      	lsls	r1, r3, #3
 800216c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002170:	00d0      	lsls	r0, r2, #3
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	eb12 0804 	adds.w	r8, r2, r4
 800217a:	eb43 0905 	adc.w	r9, r3, r5
 800217e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4618      	mov	r0, r3
 8002184:	f04f 0100 	mov.w	r1, #0
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	008b      	lsls	r3, r1, #2
 8002192:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002196:	0082      	lsls	r2, r0, #2
 8002198:	4640      	mov	r0, r8
 800219a:	4649      	mov	r1, r9
 800219c:	f7fe f814 	bl	80001c8 <__aeabi_uldivmod>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4b49      	ldr	r3, [pc, #292]	; (80022cc <UART_SetConfig+0x38c>)
 80021a6:	fba3 2302 	umull	r2, r3, r3, r2
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	011e      	lsls	r6, r3, #4
 80021ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021b0:	4618      	mov	r0, r3
 80021b2:	f04f 0100 	mov.w	r1, #0
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	1894      	adds	r4, r2, r2
 80021bc:	60bc      	str	r4, [r7, #8]
 80021be:	415b      	adcs	r3, r3
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021c6:	1812      	adds	r2, r2, r0
 80021c8:	eb41 0303 	adc.w	r3, r1, r3
 80021cc:	f04f 0400 	mov.w	r4, #0
 80021d0:	f04f 0500 	mov.w	r5, #0
 80021d4:	00dd      	lsls	r5, r3, #3
 80021d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80021da:	00d4      	lsls	r4, r2, #3
 80021dc:	4622      	mov	r2, r4
 80021de:	462b      	mov	r3, r5
 80021e0:	1814      	adds	r4, r2, r0
 80021e2:	64bc      	str	r4, [r7, #72]	; 0x48
 80021e4:	414b      	adcs	r3, r1
 80021e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f04f 0100 	mov.w	r1, #0
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	008b      	lsls	r3, r1, #2
 80021fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002200:	0082      	lsls	r2, r0, #2
 8002202:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002206:	f7fd ffdf 	bl	80001c8 <__aeabi_uldivmod>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <UART_SetConfig+0x38c>)
 8002210:	fba3 1302 	umull	r1, r3, r3, r2
 8002214:	095b      	lsrs	r3, r3, #5
 8002216:	2164      	movs	r1, #100	; 0x64
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	3332      	adds	r3, #50	; 0x32
 8002222:	4a2a      	ldr	r2, [pc, #168]	; (80022cc <UART_SetConfig+0x38c>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222e:	441e      	add	r6, r3
 8002230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002232:	4618      	mov	r0, r3
 8002234:	f04f 0100 	mov.w	r1, #0
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	1894      	adds	r4, r2, r2
 800223e:	603c      	str	r4, [r7, #0]
 8002240:	415b      	adcs	r3, r3
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002248:	1812      	adds	r2, r2, r0
 800224a:	eb41 0303 	adc.w	r3, r1, r3
 800224e:	f04f 0400 	mov.w	r4, #0
 8002252:	f04f 0500 	mov.w	r5, #0
 8002256:	00dd      	lsls	r5, r3, #3
 8002258:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800225c:	00d4      	lsls	r4, r2, #3
 800225e:	4622      	mov	r2, r4
 8002260:	462b      	mov	r3, r5
 8002262:	eb12 0a00 	adds.w	sl, r2, r0
 8002266:	eb43 0b01 	adc.w	fp, r3, r1
 800226a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4618      	mov	r0, r3
 8002270:	f04f 0100 	mov.w	r1, #0
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	008b      	lsls	r3, r1, #2
 800227e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002282:	0082      	lsls	r2, r0, #2
 8002284:	4650      	mov	r0, sl
 8002286:	4659      	mov	r1, fp
 8002288:	f7fd ff9e 	bl	80001c8 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <UART_SetConfig+0x38c>)
 8002292:	fba3 1302 	umull	r1, r3, r3, r2
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2164      	movs	r1, #100	; 0x64
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	3332      	adds	r3, #50	; 0x32
 80022a4:	4a09      	ldr	r2, [pc, #36]	; (80022cc <UART_SetConfig+0x38c>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	f003 020f 	and.w	r2, r3, #15
 80022b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4432      	add	r2, r6
 80022b6:	609a      	str	r2, [r3, #8]
}
 80022b8:	bf00      	nop
 80022ba:	377c      	adds	r7, #124	; 0x7c
 80022bc:	46bd      	mov	sp, r7
 80022be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022c2:	bf00      	nop
 80022c4:	40011000 	.word	0x40011000
 80022c8:	40011400 	.word	0x40011400
 80022cc:	51eb851f 	.word	0x51eb851f

080022d0 <__errno>:
 80022d0:	4b01      	ldr	r3, [pc, #4]	; (80022d8 <__errno+0x8>)
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	2000000c 	.word	0x2000000c

080022dc <__libc_init_array>:
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	4d0d      	ldr	r5, [pc, #52]	; (8002314 <__libc_init_array+0x38>)
 80022e0:	4c0d      	ldr	r4, [pc, #52]	; (8002318 <__libc_init_array+0x3c>)
 80022e2:	1b64      	subs	r4, r4, r5
 80022e4:	10a4      	asrs	r4, r4, #2
 80022e6:	2600      	movs	r6, #0
 80022e8:	42a6      	cmp	r6, r4
 80022ea:	d109      	bne.n	8002300 <__libc_init_array+0x24>
 80022ec:	4d0b      	ldr	r5, [pc, #44]	; (800231c <__libc_init_array+0x40>)
 80022ee:	4c0c      	ldr	r4, [pc, #48]	; (8002320 <__libc_init_array+0x44>)
 80022f0:	f000 fce6 	bl	8002cc0 <_init>
 80022f4:	1b64      	subs	r4, r4, r5
 80022f6:	10a4      	asrs	r4, r4, #2
 80022f8:	2600      	movs	r6, #0
 80022fa:	42a6      	cmp	r6, r4
 80022fc:	d105      	bne.n	800230a <__libc_init_array+0x2e>
 80022fe:	bd70      	pop	{r4, r5, r6, pc}
 8002300:	f855 3b04 	ldr.w	r3, [r5], #4
 8002304:	4798      	blx	r3
 8002306:	3601      	adds	r6, #1
 8002308:	e7ee      	b.n	80022e8 <__libc_init_array+0xc>
 800230a:	f855 3b04 	ldr.w	r3, [r5], #4
 800230e:	4798      	blx	r3
 8002310:	3601      	adds	r6, #1
 8002312:	e7f2      	b.n	80022fa <__libc_init_array+0x1e>
 8002314:	08002fb4 	.word	0x08002fb4
 8002318:	08002fb4 	.word	0x08002fb4
 800231c:	08002fb4 	.word	0x08002fb4
 8002320:	08002fb8 	.word	0x08002fb8

08002324 <memset>:
 8002324:	4402      	add	r2, r0
 8002326:	4603      	mov	r3, r0
 8002328:	4293      	cmp	r3, r2
 800232a:	d100      	bne.n	800232e <memset+0xa>
 800232c:	4770      	bx	lr
 800232e:	f803 1b01 	strb.w	r1, [r3], #1
 8002332:	e7f9      	b.n	8002328 <memset+0x4>

08002334 <_puts_r>:
 8002334:	b570      	push	{r4, r5, r6, lr}
 8002336:	460e      	mov	r6, r1
 8002338:	4605      	mov	r5, r0
 800233a:	b118      	cbz	r0, 8002344 <_puts_r+0x10>
 800233c:	6983      	ldr	r3, [r0, #24]
 800233e:	b90b      	cbnz	r3, 8002344 <_puts_r+0x10>
 8002340:	f000 fa48 	bl	80027d4 <__sinit>
 8002344:	69ab      	ldr	r3, [r5, #24]
 8002346:	68ac      	ldr	r4, [r5, #8]
 8002348:	b913      	cbnz	r3, 8002350 <_puts_r+0x1c>
 800234a:	4628      	mov	r0, r5
 800234c:	f000 fa42 	bl	80027d4 <__sinit>
 8002350:	4b2c      	ldr	r3, [pc, #176]	; (8002404 <_puts_r+0xd0>)
 8002352:	429c      	cmp	r4, r3
 8002354:	d120      	bne.n	8002398 <_puts_r+0x64>
 8002356:	686c      	ldr	r4, [r5, #4]
 8002358:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800235a:	07db      	lsls	r3, r3, #31
 800235c:	d405      	bmi.n	800236a <_puts_r+0x36>
 800235e:	89a3      	ldrh	r3, [r4, #12]
 8002360:	0598      	lsls	r0, r3, #22
 8002362:	d402      	bmi.n	800236a <_puts_r+0x36>
 8002364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002366:	f000 fad3 	bl	8002910 <__retarget_lock_acquire_recursive>
 800236a:	89a3      	ldrh	r3, [r4, #12]
 800236c:	0719      	lsls	r1, r3, #28
 800236e:	d51d      	bpl.n	80023ac <_puts_r+0x78>
 8002370:	6923      	ldr	r3, [r4, #16]
 8002372:	b1db      	cbz	r3, 80023ac <_puts_r+0x78>
 8002374:	3e01      	subs	r6, #1
 8002376:	68a3      	ldr	r3, [r4, #8]
 8002378:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800237c:	3b01      	subs	r3, #1
 800237e:	60a3      	str	r3, [r4, #8]
 8002380:	bb39      	cbnz	r1, 80023d2 <_puts_r+0x9e>
 8002382:	2b00      	cmp	r3, #0
 8002384:	da38      	bge.n	80023f8 <_puts_r+0xc4>
 8002386:	4622      	mov	r2, r4
 8002388:	210a      	movs	r1, #10
 800238a:	4628      	mov	r0, r5
 800238c:	f000 f848 	bl	8002420 <__swbuf_r>
 8002390:	3001      	adds	r0, #1
 8002392:	d011      	beq.n	80023b8 <_puts_r+0x84>
 8002394:	250a      	movs	r5, #10
 8002396:	e011      	b.n	80023bc <_puts_r+0x88>
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <_puts_r+0xd4>)
 800239a:	429c      	cmp	r4, r3
 800239c:	d101      	bne.n	80023a2 <_puts_r+0x6e>
 800239e:	68ac      	ldr	r4, [r5, #8]
 80023a0:	e7da      	b.n	8002358 <_puts_r+0x24>
 80023a2:	4b1a      	ldr	r3, [pc, #104]	; (800240c <_puts_r+0xd8>)
 80023a4:	429c      	cmp	r4, r3
 80023a6:	bf08      	it	eq
 80023a8:	68ec      	ldreq	r4, [r5, #12]
 80023aa:	e7d5      	b.n	8002358 <_puts_r+0x24>
 80023ac:	4621      	mov	r1, r4
 80023ae:	4628      	mov	r0, r5
 80023b0:	f000 f888 	bl	80024c4 <__swsetup_r>
 80023b4:	2800      	cmp	r0, #0
 80023b6:	d0dd      	beq.n	8002374 <_puts_r+0x40>
 80023b8:	f04f 35ff 	mov.w	r5, #4294967295
 80023bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023be:	07da      	lsls	r2, r3, #31
 80023c0:	d405      	bmi.n	80023ce <_puts_r+0x9a>
 80023c2:	89a3      	ldrh	r3, [r4, #12]
 80023c4:	059b      	lsls	r3, r3, #22
 80023c6:	d402      	bmi.n	80023ce <_puts_r+0x9a>
 80023c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023ca:	f000 faa2 	bl	8002912 <__retarget_lock_release_recursive>
 80023ce:	4628      	mov	r0, r5
 80023d0:	bd70      	pop	{r4, r5, r6, pc}
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da04      	bge.n	80023e0 <_puts_r+0xac>
 80023d6:	69a2      	ldr	r2, [r4, #24]
 80023d8:	429a      	cmp	r2, r3
 80023da:	dc06      	bgt.n	80023ea <_puts_r+0xb6>
 80023dc:	290a      	cmp	r1, #10
 80023de:	d004      	beq.n	80023ea <_puts_r+0xb6>
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	6022      	str	r2, [r4, #0]
 80023e6:	7019      	strb	r1, [r3, #0]
 80023e8:	e7c5      	b.n	8002376 <_puts_r+0x42>
 80023ea:	4622      	mov	r2, r4
 80023ec:	4628      	mov	r0, r5
 80023ee:	f000 f817 	bl	8002420 <__swbuf_r>
 80023f2:	3001      	adds	r0, #1
 80023f4:	d1bf      	bne.n	8002376 <_puts_r+0x42>
 80023f6:	e7df      	b.n	80023b8 <_puts_r+0x84>
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	250a      	movs	r5, #10
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	6022      	str	r2, [r4, #0]
 8002400:	701d      	strb	r5, [r3, #0]
 8002402:	e7db      	b.n	80023bc <_puts_r+0x88>
 8002404:	08002f6c 	.word	0x08002f6c
 8002408:	08002f8c 	.word	0x08002f8c
 800240c:	08002f4c 	.word	0x08002f4c

08002410 <puts>:
 8002410:	4b02      	ldr	r3, [pc, #8]	; (800241c <puts+0xc>)
 8002412:	4601      	mov	r1, r0
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	f7ff bf8d 	b.w	8002334 <_puts_r>
 800241a:	bf00      	nop
 800241c:	2000000c 	.word	0x2000000c

08002420 <__swbuf_r>:
 8002420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002422:	460e      	mov	r6, r1
 8002424:	4614      	mov	r4, r2
 8002426:	4605      	mov	r5, r0
 8002428:	b118      	cbz	r0, 8002432 <__swbuf_r+0x12>
 800242a:	6983      	ldr	r3, [r0, #24]
 800242c:	b90b      	cbnz	r3, 8002432 <__swbuf_r+0x12>
 800242e:	f000 f9d1 	bl	80027d4 <__sinit>
 8002432:	4b21      	ldr	r3, [pc, #132]	; (80024b8 <__swbuf_r+0x98>)
 8002434:	429c      	cmp	r4, r3
 8002436:	d12b      	bne.n	8002490 <__swbuf_r+0x70>
 8002438:	686c      	ldr	r4, [r5, #4]
 800243a:	69a3      	ldr	r3, [r4, #24]
 800243c:	60a3      	str	r3, [r4, #8]
 800243e:	89a3      	ldrh	r3, [r4, #12]
 8002440:	071a      	lsls	r2, r3, #28
 8002442:	d52f      	bpl.n	80024a4 <__swbuf_r+0x84>
 8002444:	6923      	ldr	r3, [r4, #16]
 8002446:	b36b      	cbz	r3, 80024a4 <__swbuf_r+0x84>
 8002448:	6923      	ldr	r3, [r4, #16]
 800244a:	6820      	ldr	r0, [r4, #0]
 800244c:	1ac0      	subs	r0, r0, r3
 800244e:	6963      	ldr	r3, [r4, #20]
 8002450:	b2f6      	uxtb	r6, r6
 8002452:	4283      	cmp	r3, r0
 8002454:	4637      	mov	r7, r6
 8002456:	dc04      	bgt.n	8002462 <__swbuf_r+0x42>
 8002458:	4621      	mov	r1, r4
 800245a:	4628      	mov	r0, r5
 800245c:	f000 f926 	bl	80026ac <_fflush_r>
 8002460:	bb30      	cbnz	r0, 80024b0 <__swbuf_r+0x90>
 8002462:	68a3      	ldr	r3, [r4, #8]
 8002464:	3b01      	subs	r3, #1
 8002466:	60a3      	str	r3, [r4, #8]
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	6022      	str	r2, [r4, #0]
 800246e:	701e      	strb	r6, [r3, #0]
 8002470:	6963      	ldr	r3, [r4, #20]
 8002472:	3001      	adds	r0, #1
 8002474:	4283      	cmp	r3, r0
 8002476:	d004      	beq.n	8002482 <__swbuf_r+0x62>
 8002478:	89a3      	ldrh	r3, [r4, #12]
 800247a:	07db      	lsls	r3, r3, #31
 800247c:	d506      	bpl.n	800248c <__swbuf_r+0x6c>
 800247e:	2e0a      	cmp	r6, #10
 8002480:	d104      	bne.n	800248c <__swbuf_r+0x6c>
 8002482:	4621      	mov	r1, r4
 8002484:	4628      	mov	r0, r5
 8002486:	f000 f911 	bl	80026ac <_fflush_r>
 800248a:	b988      	cbnz	r0, 80024b0 <__swbuf_r+0x90>
 800248c:	4638      	mov	r0, r7
 800248e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002490:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <__swbuf_r+0x9c>)
 8002492:	429c      	cmp	r4, r3
 8002494:	d101      	bne.n	800249a <__swbuf_r+0x7a>
 8002496:	68ac      	ldr	r4, [r5, #8]
 8002498:	e7cf      	b.n	800243a <__swbuf_r+0x1a>
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <__swbuf_r+0xa0>)
 800249c:	429c      	cmp	r4, r3
 800249e:	bf08      	it	eq
 80024a0:	68ec      	ldreq	r4, [r5, #12]
 80024a2:	e7ca      	b.n	800243a <__swbuf_r+0x1a>
 80024a4:	4621      	mov	r1, r4
 80024a6:	4628      	mov	r0, r5
 80024a8:	f000 f80c 	bl	80024c4 <__swsetup_r>
 80024ac:	2800      	cmp	r0, #0
 80024ae:	d0cb      	beq.n	8002448 <__swbuf_r+0x28>
 80024b0:	f04f 37ff 	mov.w	r7, #4294967295
 80024b4:	e7ea      	b.n	800248c <__swbuf_r+0x6c>
 80024b6:	bf00      	nop
 80024b8:	08002f6c 	.word	0x08002f6c
 80024bc:	08002f8c 	.word	0x08002f8c
 80024c0:	08002f4c 	.word	0x08002f4c

080024c4 <__swsetup_r>:
 80024c4:	4b32      	ldr	r3, [pc, #200]	; (8002590 <__swsetup_r+0xcc>)
 80024c6:	b570      	push	{r4, r5, r6, lr}
 80024c8:	681d      	ldr	r5, [r3, #0]
 80024ca:	4606      	mov	r6, r0
 80024cc:	460c      	mov	r4, r1
 80024ce:	b125      	cbz	r5, 80024da <__swsetup_r+0x16>
 80024d0:	69ab      	ldr	r3, [r5, #24]
 80024d2:	b913      	cbnz	r3, 80024da <__swsetup_r+0x16>
 80024d4:	4628      	mov	r0, r5
 80024d6:	f000 f97d 	bl	80027d4 <__sinit>
 80024da:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <__swsetup_r+0xd0>)
 80024dc:	429c      	cmp	r4, r3
 80024de:	d10f      	bne.n	8002500 <__swsetup_r+0x3c>
 80024e0:	686c      	ldr	r4, [r5, #4]
 80024e2:	89a3      	ldrh	r3, [r4, #12]
 80024e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80024e8:	0719      	lsls	r1, r3, #28
 80024ea:	d42c      	bmi.n	8002546 <__swsetup_r+0x82>
 80024ec:	06dd      	lsls	r5, r3, #27
 80024ee:	d411      	bmi.n	8002514 <__swsetup_r+0x50>
 80024f0:	2309      	movs	r3, #9
 80024f2:	6033      	str	r3, [r6, #0]
 80024f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80024f8:	81a3      	strh	r3, [r4, #12]
 80024fa:	f04f 30ff 	mov.w	r0, #4294967295
 80024fe:	e03e      	b.n	800257e <__swsetup_r+0xba>
 8002500:	4b25      	ldr	r3, [pc, #148]	; (8002598 <__swsetup_r+0xd4>)
 8002502:	429c      	cmp	r4, r3
 8002504:	d101      	bne.n	800250a <__swsetup_r+0x46>
 8002506:	68ac      	ldr	r4, [r5, #8]
 8002508:	e7eb      	b.n	80024e2 <__swsetup_r+0x1e>
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <__swsetup_r+0xd8>)
 800250c:	429c      	cmp	r4, r3
 800250e:	bf08      	it	eq
 8002510:	68ec      	ldreq	r4, [r5, #12]
 8002512:	e7e6      	b.n	80024e2 <__swsetup_r+0x1e>
 8002514:	0758      	lsls	r0, r3, #29
 8002516:	d512      	bpl.n	800253e <__swsetup_r+0x7a>
 8002518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800251a:	b141      	cbz	r1, 800252e <__swsetup_r+0x6a>
 800251c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002520:	4299      	cmp	r1, r3
 8002522:	d002      	beq.n	800252a <__swsetup_r+0x66>
 8002524:	4630      	mov	r0, r6
 8002526:	f000 fa59 	bl	80029dc <_free_r>
 800252a:	2300      	movs	r3, #0
 800252c:	6363      	str	r3, [r4, #52]	; 0x34
 800252e:	89a3      	ldrh	r3, [r4, #12]
 8002530:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002534:	81a3      	strh	r3, [r4, #12]
 8002536:	2300      	movs	r3, #0
 8002538:	6063      	str	r3, [r4, #4]
 800253a:	6923      	ldr	r3, [r4, #16]
 800253c:	6023      	str	r3, [r4, #0]
 800253e:	89a3      	ldrh	r3, [r4, #12]
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	81a3      	strh	r3, [r4, #12]
 8002546:	6923      	ldr	r3, [r4, #16]
 8002548:	b94b      	cbnz	r3, 800255e <__swsetup_r+0x9a>
 800254a:	89a3      	ldrh	r3, [r4, #12]
 800254c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002554:	d003      	beq.n	800255e <__swsetup_r+0x9a>
 8002556:	4621      	mov	r1, r4
 8002558:	4630      	mov	r0, r6
 800255a:	f000 f9ff 	bl	800295c <__smakebuf_r>
 800255e:	89a0      	ldrh	r0, [r4, #12]
 8002560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002564:	f010 0301 	ands.w	r3, r0, #1
 8002568:	d00a      	beq.n	8002580 <__swsetup_r+0xbc>
 800256a:	2300      	movs	r3, #0
 800256c:	60a3      	str	r3, [r4, #8]
 800256e:	6963      	ldr	r3, [r4, #20]
 8002570:	425b      	negs	r3, r3
 8002572:	61a3      	str	r3, [r4, #24]
 8002574:	6923      	ldr	r3, [r4, #16]
 8002576:	b943      	cbnz	r3, 800258a <__swsetup_r+0xc6>
 8002578:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800257c:	d1ba      	bne.n	80024f4 <__swsetup_r+0x30>
 800257e:	bd70      	pop	{r4, r5, r6, pc}
 8002580:	0781      	lsls	r1, r0, #30
 8002582:	bf58      	it	pl
 8002584:	6963      	ldrpl	r3, [r4, #20]
 8002586:	60a3      	str	r3, [r4, #8]
 8002588:	e7f4      	b.n	8002574 <__swsetup_r+0xb0>
 800258a:	2000      	movs	r0, #0
 800258c:	e7f7      	b.n	800257e <__swsetup_r+0xba>
 800258e:	bf00      	nop
 8002590:	2000000c 	.word	0x2000000c
 8002594:	08002f6c 	.word	0x08002f6c
 8002598:	08002f8c 	.word	0x08002f8c
 800259c:	08002f4c 	.word	0x08002f4c

080025a0 <__sflush_r>:
 80025a0:	898a      	ldrh	r2, [r1, #12]
 80025a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025a6:	4605      	mov	r5, r0
 80025a8:	0710      	lsls	r0, r2, #28
 80025aa:	460c      	mov	r4, r1
 80025ac:	d458      	bmi.n	8002660 <__sflush_r+0xc0>
 80025ae:	684b      	ldr	r3, [r1, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	dc05      	bgt.n	80025c0 <__sflush_r+0x20>
 80025b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	dc02      	bgt.n	80025c0 <__sflush_r+0x20>
 80025ba:	2000      	movs	r0, #0
 80025bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025c2:	2e00      	cmp	r6, #0
 80025c4:	d0f9      	beq.n	80025ba <__sflush_r+0x1a>
 80025c6:	2300      	movs	r3, #0
 80025c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80025cc:	682f      	ldr	r7, [r5, #0]
 80025ce:	602b      	str	r3, [r5, #0]
 80025d0:	d032      	beq.n	8002638 <__sflush_r+0x98>
 80025d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025d4:	89a3      	ldrh	r3, [r4, #12]
 80025d6:	075a      	lsls	r2, r3, #29
 80025d8:	d505      	bpl.n	80025e6 <__sflush_r+0x46>
 80025da:	6863      	ldr	r3, [r4, #4]
 80025dc:	1ac0      	subs	r0, r0, r3
 80025de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025e0:	b10b      	cbz	r3, 80025e6 <__sflush_r+0x46>
 80025e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025e4:	1ac0      	subs	r0, r0, r3
 80025e6:	2300      	movs	r3, #0
 80025e8:	4602      	mov	r2, r0
 80025ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025ec:	6a21      	ldr	r1, [r4, #32]
 80025ee:	4628      	mov	r0, r5
 80025f0:	47b0      	blx	r6
 80025f2:	1c43      	adds	r3, r0, #1
 80025f4:	89a3      	ldrh	r3, [r4, #12]
 80025f6:	d106      	bne.n	8002606 <__sflush_r+0x66>
 80025f8:	6829      	ldr	r1, [r5, #0]
 80025fa:	291d      	cmp	r1, #29
 80025fc:	d82c      	bhi.n	8002658 <__sflush_r+0xb8>
 80025fe:	4a2a      	ldr	r2, [pc, #168]	; (80026a8 <__sflush_r+0x108>)
 8002600:	40ca      	lsrs	r2, r1
 8002602:	07d6      	lsls	r6, r2, #31
 8002604:	d528      	bpl.n	8002658 <__sflush_r+0xb8>
 8002606:	2200      	movs	r2, #0
 8002608:	6062      	str	r2, [r4, #4]
 800260a:	04d9      	lsls	r1, r3, #19
 800260c:	6922      	ldr	r2, [r4, #16]
 800260e:	6022      	str	r2, [r4, #0]
 8002610:	d504      	bpl.n	800261c <__sflush_r+0x7c>
 8002612:	1c42      	adds	r2, r0, #1
 8002614:	d101      	bne.n	800261a <__sflush_r+0x7a>
 8002616:	682b      	ldr	r3, [r5, #0]
 8002618:	b903      	cbnz	r3, 800261c <__sflush_r+0x7c>
 800261a:	6560      	str	r0, [r4, #84]	; 0x54
 800261c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800261e:	602f      	str	r7, [r5, #0]
 8002620:	2900      	cmp	r1, #0
 8002622:	d0ca      	beq.n	80025ba <__sflush_r+0x1a>
 8002624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002628:	4299      	cmp	r1, r3
 800262a:	d002      	beq.n	8002632 <__sflush_r+0x92>
 800262c:	4628      	mov	r0, r5
 800262e:	f000 f9d5 	bl	80029dc <_free_r>
 8002632:	2000      	movs	r0, #0
 8002634:	6360      	str	r0, [r4, #52]	; 0x34
 8002636:	e7c1      	b.n	80025bc <__sflush_r+0x1c>
 8002638:	6a21      	ldr	r1, [r4, #32]
 800263a:	2301      	movs	r3, #1
 800263c:	4628      	mov	r0, r5
 800263e:	47b0      	blx	r6
 8002640:	1c41      	adds	r1, r0, #1
 8002642:	d1c7      	bne.n	80025d4 <__sflush_r+0x34>
 8002644:	682b      	ldr	r3, [r5, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0c4      	beq.n	80025d4 <__sflush_r+0x34>
 800264a:	2b1d      	cmp	r3, #29
 800264c:	d001      	beq.n	8002652 <__sflush_r+0xb2>
 800264e:	2b16      	cmp	r3, #22
 8002650:	d101      	bne.n	8002656 <__sflush_r+0xb6>
 8002652:	602f      	str	r7, [r5, #0]
 8002654:	e7b1      	b.n	80025ba <__sflush_r+0x1a>
 8002656:	89a3      	ldrh	r3, [r4, #12]
 8002658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800265c:	81a3      	strh	r3, [r4, #12]
 800265e:	e7ad      	b.n	80025bc <__sflush_r+0x1c>
 8002660:	690f      	ldr	r7, [r1, #16]
 8002662:	2f00      	cmp	r7, #0
 8002664:	d0a9      	beq.n	80025ba <__sflush_r+0x1a>
 8002666:	0793      	lsls	r3, r2, #30
 8002668:	680e      	ldr	r6, [r1, #0]
 800266a:	bf08      	it	eq
 800266c:	694b      	ldreq	r3, [r1, #20]
 800266e:	600f      	str	r7, [r1, #0]
 8002670:	bf18      	it	ne
 8002672:	2300      	movne	r3, #0
 8002674:	eba6 0807 	sub.w	r8, r6, r7
 8002678:	608b      	str	r3, [r1, #8]
 800267a:	f1b8 0f00 	cmp.w	r8, #0
 800267e:	dd9c      	ble.n	80025ba <__sflush_r+0x1a>
 8002680:	6a21      	ldr	r1, [r4, #32]
 8002682:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002684:	4643      	mov	r3, r8
 8002686:	463a      	mov	r2, r7
 8002688:	4628      	mov	r0, r5
 800268a:	47b0      	blx	r6
 800268c:	2800      	cmp	r0, #0
 800268e:	dc06      	bgt.n	800269e <__sflush_r+0xfe>
 8002690:	89a3      	ldrh	r3, [r4, #12]
 8002692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002696:	81a3      	strh	r3, [r4, #12]
 8002698:	f04f 30ff 	mov.w	r0, #4294967295
 800269c:	e78e      	b.n	80025bc <__sflush_r+0x1c>
 800269e:	4407      	add	r7, r0
 80026a0:	eba8 0800 	sub.w	r8, r8, r0
 80026a4:	e7e9      	b.n	800267a <__sflush_r+0xda>
 80026a6:	bf00      	nop
 80026a8:	20400001 	.word	0x20400001

080026ac <_fflush_r>:
 80026ac:	b538      	push	{r3, r4, r5, lr}
 80026ae:	690b      	ldr	r3, [r1, #16]
 80026b0:	4605      	mov	r5, r0
 80026b2:	460c      	mov	r4, r1
 80026b4:	b913      	cbnz	r3, 80026bc <_fflush_r+0x10>
 80026b6:	2500      	movs	r5, #0
 80026b8:	4628      	mov	r0, r5
 80026ba:	bd38      	pop	{r3, r4, r5, pc}
 80026bc:	b118      	cbz	r0, 80026c6 <_fflush_r+0x1a>
 80026be:	6983      	ldr	r3, [r0, #24]
 80026c0:	b90b      	cbnz	r3, 80026c6 <_fflush_r+0x1a>
 80026c2:	f000 f887 	bl	80027d4 <__sinit>
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <_fflush_r+0x6c>)
 80026c8:	429c      	cmp	r4, r3
 80026ca:	d11b      	bne.n	8002704 <_fflush_r+0x58>
 80026cc:	686c      	ldr	r4, [r5, #4]
 80026ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0ef      	beq.n	80026b6 <_fflush_r+0xa>
 80026d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80026d8:	07d0      	lsls	r0, r2, #31
 80026da:	d404      	bmi.n	80026e6 <_fflush_r+0x3a>
 80026dc:	0599      	lsls	r1, r3, #22
 80026de:	d402      	bmi.n	80026e6 <_fflush_r+0x3a>
 80026e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026e2:	f000 f915 	bl	8002910 <__retarget_lock_acquire_recursive>
 80026e6:	4628      	mov	r0, r5
 80026e8:	4621      	mov	r1, r4
 80026ea:	f7ff ff59 	bl	80025a0 <__sflush_r>
 80026ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026f0:	07da      	lsls	r2, r3, #31
 80026f2:	4605      	mov	r5, r0
 80026f4:	d4e0      	bmi.n	80026b8 <_fflush_r+0xc>
 80026f6:	89a3      	ldrh	r3, [r4, #12]
 80026f8:	059b      	lsls	r3, r3, #22
 80026fa:	d4dd      	bmi.n	80026b8 <_fflush_r+0xc>
 80026fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026fe:	f000 f908 	bl	8002912 <__retarget_lock_release_recursive>
 8002702:	e7d9      	b.n	80026b8 <_fflush_r+0xc>
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <_fflush_r+0x70>)
 8002706:	429c      	cmp	r4, r3
 8002708:	d101      	bne.n	800270e <_fflush_r+0x62>
 800270a:	68ac      	ldr	r4, [r5, #8]
 800270c:	e7df      	b.n	80026ce <_fflush_r+0x22>
 800270e:	4b04      	ldr	r3, [pc, #16]	; (8002720 <_fflush_r+0x74>)
 8002710:	429c      	cmp	r4, r3
 8002712:	bf08      	it	eq
 8002714:	68ec      	ldreq	r4, [r5, #12]
 8002716:	e7da      	b.n	80026ce <_fflush_r+0x22>
 8002718:	08002f6c 	.word	0x08002f6c
 800271c:	08002f8c 	.word	0x08002f8c
 8002720:	08002f4c 	.word	0x08002f4c

08002724 <std>:
 8002724:	2300      	movs	r3, #0
 8002726:	b510      	push	{r4, lr}
 8002728:	4604      	mov	r4, r0
 800272a:	e9c0 3300 	strd	r3, r3, [r0]
 800272e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002732:	6083      	str	r3, [r0, #8]
 8002734:	8181      	strh	r1, [r0, #12]
 8002736:	6643      	str	r3, [r0, #100]	; 0x64
 8002738:	81c2      	strh	r2, [r0, #14]
 800273a:	6183      	str	r3, [r0, #24]
 800273c:	4619      	mov	r1, r3
 800273e:	2208      	movs	r2, #8
 8002740:	305c      	adds	r0, #92	; 0x5c
 8002742:	f7ff fdef 	bl	8002324 <memset>
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <std+0x38>)
 8002748:	6263      	str	r3, [r4, #36]	; 0x24
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <std+0x3c>)
 800274c:	62a3      	str	r3, [r4, #40]	; 0x28
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <std+0x40>)
 8002750:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <std+0x44>)
 8002754:	6224      	str	r4, [r4, #32]
 8002756:	6323      	str	r3, [r4, #48]	; 0x30
 8002758:	bd10      	pop	{r4, pc}
 800275a:	bf00      	nop
 800275c:	08002b51 	.word	0x08002b51
 8002760:	08002b73 	.word	0x08002b73
 8002764:	08002bab 	.word	0x08002bab
 8002768:	08002bcf 	.word	0x08002bcf

0800276c <_cleanup_r>:
 800276c:	4901      	ldr	r1, [pc, #4]	; (8002774 <_cleanup_r+0x8>)
 800276e:	f000 b8af 	b.w	80028d0 <_fwalk_reent>
 8002772:	bf00      	nop
 8002774:	080026ad 	.word	0x080026ad

08002778 <__sfmoreglue>:
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	1e4a      	subs	r2, r1, #1
 800277c:	2568      	movs	r5, #104	; 0x68
 800277e:	4355      	muls	r5, r2
 8002780:	460e      	mov	r6, r1
 8002782:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002786:	f000 f979 	bl	8002a7c <_malloc_r>
 800278a:	4604      	mov	r4, r0
 800278c:	b140      	cbz	r0, 80027a0 <__sfmoreglue+0x28>
 800278e:	2100      	movs	r1, #0
 8002790:	e9c0 1600 	strd	r1, r6, [r0]
 8002794:	300c      	adds	r0, #12
 8002796:	60a0      	str	r0, [r4, #8]
 8002798:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800279c:	f7ff fdc2 	bl	8002324 <memset>
 80027a0:	4620      	mov	r0, r4
 80027a2:	bd70      	pop	{r4, r5, r6, pc}

080027a4 <__sfp_lock_acquire>:
 80027a4:	4801      	ldr	r0, [pc, #4]	; (80027ac <__sfp_lock_acquire+0x8>)
 80027a6:	f000 b8b3 	b.w	8002910 <__retarget_lock_acquire_recursive>
 80027aa:	bf00      	nop
 80027ac:	200000ec 	.word	0x200000ec

080027b0 <__sfp_lock_release>:
 80027b0:	4801      	ldr	r0, [pc, #4]	; (80027b8 <__sfp_lock_release+0x8>)
 80027b2:	f000 b8ae 	b.w	8002912 <__retarget_lock_release_recursive>
 80027b6:	bf00      	nop
 80027b8:	200000ec 	.word	0x200000ec

080027bc <__sinit_lock_acquire>:
 80027bc:	4801      	ldr	r0, [pc, #4]	; (80027c4 <__sinit_lock_acquire+0x8>)
 80027be:	f000 b8a7 	b.w	8002910 <__retarget_lock_acquire_recursive>
 80027c2:	bf00      	nop
 80027c4:	200000e7 	.word	0x200000e7

080027c8 <__sinit_lock_release>:
 80027c8:	4801      	ldr	r0, [pc, #4]	; (80027d0 <__sinit_lock_release+0x8>)
 80027ca:	f000 b8a2 	b.w	8002912 <__retarget_lock_release_recursive>
 80027ce:	bf00      	nop
 80027d0:	200000e7 	.word	0x200000e7

080027d4 <__sinit>:
 80027d4:	b510      	push	{r4, lr}
 80027d6:	4604      	mov	r4, r0
 80027d8:	f7ff fff0 	bl	80027bc <__sinit_lock_acquire>
 80027dc:	69a3      	ldr	r3, [r4, #24]
 80027de:	b11b      	cbz	r3, 80027e8 <__sinit+0x14>
 80027e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027e4:	f7ff bff0 	b.w	80027c8 <__sinit_lock_release>
 80027e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80027ec:	6523      	str	r3, [r4, #80]	; 0x50
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <__sinit+0x68>)
 80027f0:	4a13      	ldr	r2, [pc, #76]	; (8002840 <__sinit+0x6c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80027f6:	42a3      	cmp	r3, r4
 80027f8:	bf04      	itt	eq
 80027fa:	2301      	moveq	r3, #1
 80027fc:	61a3      	streq	r3, [r4, #24]
 80027fe:	4620      	mov	r0, r4
 8002800:	f000 f820 	bl	8002844 <__sfp>
 8002804:	6060      	str	r0, [r4, #4]
 8002806:	4620      	mov	r0, r4
 8002808:	f000 f81c 	bl	8002844 <__sfp>
 800280c:	60a0      	str	r0, [r4, #8]
 800280e:	4620      	mov	r0, r4
 8002810:	f000 f818 	bl	8002844 <__sfp>
 8002814:	2200      	movs	r2, #0
 8002816:	60e0      	str	r0, [r4, #12]
 8002818:	2104      	movs	r1, #4
 800281a:	6860      	ldr	r0, [r4, #4]
 800281c:	f7ff ff82 	bl	8002724 <std>
 8002820:	68a0      	ldr	r0, [r4, #8]
 8002822:	2201      	movs	r2, #1
 8002824:	2109      	movs	r1, #9
 8002826:	f7ff ff7d 	bl	8002724 <std>
 800282a:	68e0      	ldr	r0, [r4, #12]
 800282c:	2202      	movs	r2, #2
 800282e:	2112      	movs	r1, #18
 8002830:	f7ff ff78 	bl	8002724 <std>
 8002834:	2301      	movs	r3, #1
 8002836:	61a3      	str	r3, [r4, #24]
 8002838:	e7d2      	b.n	80027e0 <__sinit+0xc>
 800283a:	bf00      	nop
 800283c:	08002f48 	.word	0x08002f48
 8002840:	0800276d 	.word	0x0800276d

08002844 <__sfp>:
 8002844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002846:	4607      	mov	r7, r0
 8002848:	f7ff ffac 	bl	80027a4 <__sfp_lock_acquire>
 800284c:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <__sfp+0x84>)
 800284e:	681e      	ldr	r6, [r3, #0]
 8002850:	69b3      	ldr	r3, [r6, #24]
 8002852:	b913      	cbnz	r3, 800285a <__sfp+0x16>
 8002854:	4630      	mov	r0, r6
 8002856:	f7ff ffbd 	bl	80027d4 <__sinit>
 800285a:	3648      	adds	r6, #72	; 0x48
 800285c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002860:	3b01      	subs	r3, #1
 8002862:	d503      	bpl.n	800286c <__sfp+0x28>
 8002864:	6833      	ldr	r3, [r6, #0]
 8002866:	b30b      	cbz	r3, 80028ac <__sfp+0x68>
 8002868:	6836      	ldr	r6, [r6, #0]
 800286a:	e7f7      	b.n	800285c <__sfp+0x18>
 800286c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002870:	b9d5      	cbnz	r5, 80028a8 <__sfp+0x64>
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <__sfp+0x88>)
 8002874:	60e3      	str	r3, [r4, #12]
 8002876:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800287a:	6665      	str	r5, [r4, #100]	; 0x64
 800287c:	f000 f847 	bl	800290e <__retarget_lock_init_recursive>
 8002880:	f7ff ff96 	bl	80027b0 <__sfp_lock_release>
 8002884:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002888:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800288c:	6025      	str	r5, [r4, #0]
 800288e:	61a5      	str	r5, [r4, #24]
 8002890:	2208      	movs	r2, #8
 8002892:	4629      	mov	r1, r5
 8002894:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002898:	f7ff fd44 	bl	8002324 <memset>
 800289c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80028a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80028a4:	4620      	mov	r0, r4
 80028a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028a8:	3468      	adds	r4, #104	; 0x68
 80028aa:	e7d9      	b.n	8002860 <__sfp+0x1c>
 80028ac:	2104      	movs	r1, #4
 80028ae:	4638      	mov	r0, r7
 80028b0:	f7ff ff62 	bl	8002778 <__sfmoreglue>
 80028b4:	4604      	mov	r4, r0
 80028b6:	6030      	str	r0, [r6, #0]
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d1d5      	bne.n	8002868 <__sfp+0x24>
 80028bc:	f7ff ff78 	bl	80027b0 <__sfp_lock_release>
 80028c0:	230c      	movs	r3, #12
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	e7ee      	b.n	80028a4 <__sfp+0x60>
 80028c6:	bf00      	nop
 80028c8:	08002f48 	.word	0x08002f48
 80028cc:	ffff0001 	.word	0xffff0001

080028d0 <_fwalk_reent>:
 80028d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028d4:	4606      	mov	r6, r0
 80028d6:	4688      	mov	r8, r1
 80028d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80028dc:	2700      	movs	r7, #0
 80028de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80028e2:	f1b9 0901 	subs.w	r9, r9, #1
 80028e6:	d505      	bpl.n	80028f4 <_fwalk_reent+0x24>
 80028e8:	6824      	ldr	r4, [r4, #0]
 80028ea:	2c00      	cmp	r4, #0
 80028ec:	d1f7      	bne.n	80028de <_fwalk_reent+0xe>
 80028ee:	4638      	mov	r0, r7
 80028f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028f4:	89ab      	ldrh	r3, [r5, #12]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d907      	bls.n	800290a <_fwalk_reent+0x3a>
 80028fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028fe:	3301      	adds	r3, #1
 8002900:	d003      	beq.n	800290a <_fwalk_reent+0x3a>
 8002902:	4629      	mov	r1, r5
 8002904:	4630      	mov	r0, r6
 8002906:	47c0      	blx	r8
 8002908:	4307      	orrs	r7, r0
 800290a:	3568      	adds	r5, #104	; 0x68
 800290c:	e7e9      	b.n	80028e2 <_fwalk_reent+0x12>

0800290e <__retarget_lock_init_recursive>:
 800290e:	4770      	bx	lr

08002910 <__retarget_lock_acquire_recursive>:
 8002910:	4770      	bx	lr

08002912 <__retarget_lock_release_recursive>:
 8002912:	4770      	bx	lr

08002914 <__swhatbuf_r>:
 8002914:	b570      	push	{r4, r5, r6, lr}
 8002916:	460e      	mov	r6, r1
 8002918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800291c:	2900      	cmp	r1, #0
 800291e:	b096      	sub	sp, #88	; 0x58
 8002920:	4614      	mov	r4, r2
 8002922:	461d      	mov	r5, r3
 8002924:	da07      	bge.n	8002936 <__swhatbuf_r+0x22>
 8002926:	2300      	movs	r3, #0
 8002928:	602b      	str	r3, [r5, #0]
 800292a:	89b3      	ldrh	r3, [r6, #12]
 800292c:	061a      	lsls	r2, r3, #24
 800292e:	d410      	bmi.n	8002952 <__swhatbuf_r+0x3e>
 8002930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002934:	e00e      	b.n	8002954 <__swhatbuf_r+0x40>
 8002936:	466a      	mov	r2, sp
 8002938:	f000 f970 	bl	8002c1c <_fstat_r>
 800293c:	2800      	cmp	r0, #0
 800293e:	dbf2      	blt.n	8002926 <__swhatbuf_r+0x12>
 8002940:	9a01      	ldr	r2, [sp, #4]
 8002942:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002946:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800294a:	425a      	negs	r2, r3
 800294c:	415a      	adcs	r2, r3
 800294e:	602a      	str	r2, [r5, #0]
 8002950:	e7ee      	b.n	8002930 <__swhatbuf_r+0x1c>
 8002952:	2340      	movs	r3, #64	; 0x40
 8002954:	2000      	movs	r0, #0
 8002956:	6023      	str	r3, [r4, #0]
 8002958:	b016      	add	sp, #88	; 0x58
 800295a:	bd70      	pop	{r4, r5, r6, pc}

0800295c <__smakebuf_r>:
 800295c:	898b      	ldrh	r3, [r1, #12]
 800295e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002960:	079d      	lsls	r5, r3, #30
 8002962:	4606      	mov	r6, r0
 8002964:	460c      	mov	r4, r1
 8002966:	d507      	bpl.n	8002978 <__smakebuf_r+0x1c>
 8002968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800296c:	6023      	str	r3, [r4, #0]
 800296e:	6123      	str	r3, [r4, #16]
 8002970:	2301      	movs	r3, #1
 8002972:	6163      	str	r3, [r4, #20]
 8002974:	b002      	add	sp, #8
 8002976:	bd70      	pop	{r4, r5, r6, pc}
 8002978:	ab01      	add	r3, sp, #4
 800297a:	466a      	mov	r2, sp
 800297c:	f7ff ffca 	bl	8002914 <__swhatbuf_r>
 8002980:	9900      	ldr	r1, [sp, #0]
 8002982:	4605      	mov	r5, r0
 8002984:	4630      	mov	r0, r6
 8002986:	f000 f879 	bl	8002a7c <_malloc_r>
 800298a:	b948      	cbnz	r0, 80029a0 <__smakebuf_r+0x44>
 800298c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002990:	059a      	lsls	r2, r3, #22
 8002992:	d4ef      	bmi.n	8002974 <__smakebuf_r+0x18>
 8002994:	f023 0303 	bic.w	r3, r3, #3
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	81a3      	strh	r3, [r4, #12]
 800299e:	e7e3      	b.n	8002968 <__smakebuf_r+0xc>
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <__smakebuf_r+0x7c>)
 80029a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80029a4:	89a3      	ldrh	r3, [r4, #12]
 80029a6:	6020      	str	r0, [r4, #0]
 80029a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ac:	81a3      	strh	r3, [r4, #12]
 80029ae:	9b00      	ldr	r3, [sp, #0]
 80029b0:	6163      	str	r3, [r4, #20]
 80029b2:	9b01      	ldr	r3, [sp, #4]
 80029b4:	6120      	str	r0, [r4, #16]
 80029b6:	b15b      	cbz	r3, 80029d0 <__smakebuf_r+0x74>
 80029b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029bc:	4630      	mov	r0, r6
 80029be:	f000 f93f 	bl	8002c40 <_isatty_r>
 80029c2:	b128      	cbz	r0, 80029d0 <__smakebuf_r+0x74>
 80029c4:	89a3      	ldrh	r3, [r4, #12]
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	81a3      	strh	r3, [r4, #12]
 80029d0:	89a0      	ldrh	r0, [r4, #12]
 80029d2:	4305      	orrs	r5, r0
 80029d4:	81a5      	strh	r5, [r4, #12]
 80029d6:	e7cd      	b.n	8002974 <__smakebuf_r+0x18>
 80029d8:	0800276d 	.word	0x0800276d

080029dc <_free_r>:
 80029dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029de:	2900      	cmp	r1, #0
 80029e0:	d048      	beq.n	8002a74 <_free_r+0x98>
 80029e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029e6:	9001      	str	r0, [sp, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f1a1 0404 	sub.w	r4, r1, #4
 80029ee:	bfb8      	it	lt
 80029f0:	18e4      	addlt	r4, r4, r3
 80029f2:	f000 f947 	bl	8002c84 <__malloc_lock>
 80029f6:	4a20      	ldr	r2, [pc, #128]	; (8002a78 <_free_r+0x9c>)
 80029f8:	9801      	ldr	r0, [sp, #4]
 80029fa:	6813      	ldr	r3, [r2, #0]
 80029fc:	4615      	mov	r5, r2
 80029fe:	b933      	cbnz	r3, 8002a0e <_free_r+0x32>
 8002a00:	6063      	str	r3, [r4, #4]
 8002a02:	6014      	str	r4, [r2, #0]
 8002a04:	b003      	add	sp, #12
 8002a06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a0a:	f000 b941 	b.w	8002c90 <__malloc_unlock>
 8002a0e:	42a3      	cmp	r3, r4
 8002a10:	d90b      	bls.n	8002a2a <_free_r+0x4e>
 8002a12:	6821      	ldr	r1, [r4, #0]
 8002a14:	1862      	adds	r2, r4, r1
 8002a16:	4293      	cmp	r3, r2
 8002a18:	bf04      	itt	eq
 8002a1a:	681a      	ldreq	r2, [r3, #0]
 8002a1c:	685b      	ldreq	r3, [r3, #4]
 8002a1e:	6063      	str	r3, [r4, #4]
 8002a20:	bf04      	itt	eq
 8002a22:	1852      	addeq	r2, r2, r1
 8002a24:	6022      	streq	r2, [r4, #0]
 8002a26:	602c      	str	r4, [r5, #0]
 8002a28:	e7ec      	b.n	8002a04 <_free_r+0x28>
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	b10b      	cbz	r3, 8002a34 <_free_r+0x58>
 8002a30:	42a3      	cmp	r3, r4
 8002a32:	d9fa      	bls.n	8002a2a <_free_r+0x4e>
 8002a34:	6811      	ldr	r1, [r2, #0]
 8002a36:	1855      	adds	r5, r2, r1
 8002a38:	42a5      	cmp	r5, r4
 8002a3a:	d10b      	bne.n	8002a54 <_free_r+0x78>
 8002a3c:	6824      	ldr	r4, [r4, #0]
 8002a3e:	4421      	add	r1, r4
 8002a40:	1854      	adds	r4, r2, r1
 8002a42:	42a3      	cmp	r3, r4
 8002a44:	6011      	str	r1, [r2, #0]
 8002a46:	d1dd      	bne.n	8002a04 <_free_r+0x28>
 8002a48:	681c      	ldr	r4, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	6053      	str	r3, [r2, #4]
 8002a4e:	4421      	add	r1, r4
 8002a50:	6011      	str	r1, [r2, #0]
 8002a52:	e7d7      	b.n	8002a04 <_free_r+0x28>
 8002a54:	d902      	bls.n	8002a5c <_free_r+0x80>
 8002a56:	230c      	movs	r3, #12
 8002a58:	6003      	str	r3, [r0, #0]
 8002a5a:	e7d3      	b.n	8002a04 <_free_r+0x28>
 8002a5c:	6825      	ldr	r5, [r4, #0]
 8002a5e:	1961      	adds	r1, r4, r5
 8002a60:	428b      	cmp	r3, r1
 8002a62:	bf04      	itt	eq
 8002a64:	6819      	ldreq	r1, [r3, #0]
 8002a66:	685b      	ldreq	r3, [r3, #4]
 8002a68:	6063      	str	r3, [r4, #4]
 8002a6a:	bf04      	itt	eq
 8002a6c:	1949      	addeq	r1, r1, r5
 8002a6e:	6021      	streq	r1, [r4, #0]
 8002a70:	6054      	str	r4, [r2, #4]
 8002a72:	e7c7      	b.n	8002a04 <_free_r+0x28>
 8002a74:	b003      	add	sp, #12
 8002a76:	bd30      	pop	{r4, r5, pc}
 8002a78:	20000094 	.word	0x20000094

08002a7c <_malloc_r>:
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7e:	1ccd      	adds	r5, r1, #3
 8002a80:	f025 0503 	bic.w	r5, r5, #3
 8002a84:	3508      	adds	r5, #8
 8002a86:	2d0c      	cmp	r5, #12
 8002a88:	bf38      	it	cc
 8002a8a:	250c      	movcc	r5, #12
 8002a8c:	2d00      	cmp	r5, #0
 8002a8e:	4606      	mov	r6, r0
 8002a90:	db01      	blt.n	8002a96 <_malloc_r+0x1a>
 8002a92:	42a9      	cmp	r1, r5
 8002a94:	d903      	bls.n	8002a9e <_malloc_r+0x22>
 8002a96:	230c      	movs	r3, #12
 8002a98:	6033      	str	r3, [r6, #0]
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a9e:	f000 f8f1 	bl	8002c84 <__malloc_lock>
 8002aa2:	4921      	ldr	r1, [pc, #132]	; (8002b28 <_malloc_r+0xac>)
 8002aa4:	680a      	ldr	r2, [r1, #0]
 8002aa6:	4614      	mov	r4, r2
 8002aa8:	b99c      	cbnz	r4, 8002ad2 <_malloc_r+0x56>
 8002aaa:	4f20      	ldr	r7, [pc, #128]	; (8002b2c <_malloc_r+0xb0>)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b923      	cbnz	r3, 8002aba <_malloc_r+0x3e>
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	4630      	mov	r0, r6
 8002ab4:	f000 f83c 	bl	8002b30 <_sbrk_r>
 8002ab8:	6038      	str	r0, [r7, #0]
 8002aba:	4629      	mov	r1, r5
 8002abc:	4630      	mov	r0, r6
 8002abe:	f000 f837 	bl	8002b30 <_sbrk_r>
 8002ac2:	1c43      	adds	r3, r0, #1
 8002ac4:	d123      	bne.n	8002b0e <_malloc_r+0x92>
 8002ac6:	230c      	movs	r3, #12
 8002ac8:	6033      	str	r3, [r6, #0]
 8002aca:	4630      	mov	r0, r6
 8002acc:	f000 f8e0 	bl	8002c90 <__malloc_unlock>
 8002ad0:	e7e3      	b.n	8002a9a <_malloc_r+0x1e>
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	1b5b      	subs	r3, r3, r5
 8002ad6:	d417      	bmi.n	8002b08 <_malloc_r+0x8c>
 8002ad8:	2b0b      	cmp	r3, #11
 8002ada:	d903      	bls.n	8002ae4 <_malloc_r+0x68>
 8002adc:	6023      	str	r3, [r4, #0]
 8002ade:	441c      	add	r4, r3
 8002ae0:	6025      	str	r5, [r4, #0]
 8002ae2:	e004      	b.n	8002aee <_malloc_r+0x72>
 8002ae4:	6863      	ldr	r3, [r4, #4]
 8002ae6:	42a2      	cmp	r2, r4
 8002ae8:	bf0c      	ite	eq
 8002aea:	600b      	streq	r3, [r1, #0]
 8002aec:	6053      	strne	r3, [r2, #4]
 8002aee:	4630      	mov	r0, r6
 8002af0:	f000 f8ce 	bl	8002c90 <__malloc_unlock>
 8002af4:	f104 000b 	add.w	r0, r4, #11
 8002af8:	1d23      	adds	r3, r4, #4
 8002afa:	f020 0007 	bic.w	r0, r0, #7
 8002afe:	1ac2      	subs	r2, r0, r3
 8002b00:	d0cc      	beq.n	8002a9c <_malloc_r+0x20>
 8002b02:	1a1b      	subs	r3, r3, r0
 8002b04:	50a3      	str	r3, [r4, r2]
 8002b06:	e7c9      	b.n	8002a9c <_malloc_r+0x20>
 8002b08:	4622      	mov	r2, r4
 8002b0a:	6864      	ldr	r4, [r4, #4]
 8002b0c:	e7cc      	b.n	8002aa8 <_malloc_r+0x2c>
 8002b0e:	1cc4      	adds	r4, r0, #3
 8002b10:	f024 0403 	bic.w	r4, r4, #3
 8002b14:	42a0      	cmp	r0, r4
 8002b16:	d0e3      	beq.n	8002ae0 <_malloc_r+0x64>
 8002b18:	1a21      	subs	r1, r4, r0
 8002b1a:	4630      	mov	r0, r6
 8002b1c:	f000 f808 	bl	8002b30 <_sbrk_r>
 8002b20:	3001      	adds	r0, #1
 8002b22:	d1dd      	bne.n	8002ae0 <_malloc_r+0x64>
 8002b24:	e7cf      	b.n	8002ac6 <_malloc_r+0x4a>
 8002b26:	bf00      	nop
 8002b28:	20000094 	.word	0x20000094
 8002b2c:	20000098 	.word	0x20000098

08002b30 <_sbrk_r>:
 8002b30:	b538      	push	{r3, r4, r5, lr}
 8002b32:	4d06      	ldr	r5, [pc, #24]	; (8002b4c <_sbrk_r+0x1c>)
 8002b34:	2300      	movs	r3, #0
 8002b36:	4604      	mov	r4, r0
 8002b38:	4608      	mov	r0, r1
 8002b3a:	602b      	str	r3, [r5, #0]
 8002b3c:	f7fe f910 	bl	8000d60 <_sbrk>
 8002b40:	1c43      	adds	r3, r0, #1
 8002b42:	d102      	bne.n	8002b4a <_sbrk_r+0x1a>
 8002b44:	682b      	ldr	r3, [r5, #0]
 8002b46:	b103      	cbz	r3, 8002b4a <_sbrk_r+0x1a>
 8002b48:	6023      	str	r3, [r4, #0]
 8002b4a:	bd38      	pop	{r3, r4, r5, pc}
 8002b4c:	200000f0 	.word	0x200000f0

08002b50 <__sread>:
 8002b50:	b510      	push	{r4, lr}
 8002b52:	460c      	mov	r4, r1
 8002b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b58:	f000 f8a0 	bl	8002c9c <_read_r>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	bfab      	itete	ge
 8002b60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b62:	89a3      	ldrhlt	r3, [r4, #12]
 8002b64:	181b      	addge	r3, r3, r0
 8002b66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b6a:	bfac      	ite	ge
 8002b6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b6e:	81a3      	strhlt	r3, [r4, #12]
 8002b70:	bd10      	pop	{r4, pc}

08002b72 <__swrite>:
 8002b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b76:	461f      	mov	r7, r3
 8002b78:	898b      	ldrh	r3, [r1, #12]
 8002b7a:	05db      	lsls	r3, r3, #23
 8002b7c:	4605      	mov	r5, r0
 8002b7e:	460c      	mov	r4, r1
 8002b80:	4616      	mov	r6, r2
 8002b82:	d505      	bpl.n	8002b90 <__swrite+0x1e>
 8002b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b88:	2302      	movs	r3, #2
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f000 f868 	bl	8002c60 <_lseek_r>
 8002b90:	89a3      	ldrh	r3, [r4, #12]
 8002b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b9a:	81a3      	strh	r3, [r4, #12]
 8002b9c:	4632      	mov	r2, r6
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	4628      	mov	r0, r5
 8002ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ba6:	f000 b817 	b.w	8002bd8 <_write_r>

08002baa <__sseek>:
 8002baa:	b510      	push	{r4, lr}
 8002bac:	460c      	mov	r4, r1
 8002bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bb2:	f000 f855 	bl	8002c60 <_lseek_r>
 8002bb6:	1c43      	adds	r3, r0, #1
 8002bb8:	89a3      	ldrh	r3, [r4, #12]
 8002bba:	bf15      	itete	ne
 8002bbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8002bbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002bc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002bc6:	81a3      	strheq	r3, [r4, #12]
 8002bc8:	bf18      	it	ne
 8002bca:	81a3      	strhne	r3, [r4, #12]
 8002bcc:	bd10      	pop	{r4, pc}

08002bce <__sclose>:
 8002bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bd2:	f000 b813 	b.w	8002bfc <_close_r>
	...

08002bd8 <_write_r>:
 8002bd8:	b538      	push	{r3, r4, r5, lr}
 8002bda:	4d07      	ldr	r5, [pc, #28]	; (8002bf8 <_write_r+0x20>)
 8002bdc:	4604      	mov	r4, r0
 8002bde:	4608      	mov	r0, r1
 8002be0:	4611      	mov	r1, r2
 8002be2:	2200      	movs	r2, #0
 8002be4:	602a      	str	r2, [r5, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	f7fe f869 	bl	8000cbe <_write>
 8002bec:	1c43      	adds	r3, r0, #1
 8002bee:	d102      	bne.n	8002bf6 <_write_r+0x1e>
 8002bf0:	682b      	ldr	r3, [r5, #0]
 8002bf2:	b103      	cbz	r3, 8002bf6 <_write_r+0x1e>
 8002bf4:	6023      	str	r3, [r4, #0]
 8002bf6:	bd38      	pop	{r3, r4, r5, pc}
 8002bf8:	200000f0 	.word	0x200000f0

08002bfc <_close_r>:
 8002bfc:	b538      	push	{r3, r4, r5, lr}
 8002bfe:	4d06      	ldr	r5, [pc, #24]	; (8002c18 <_close_r+0x1c>)
 8002c00:	2300      	movs	r3, #0
 8002c02:	4604      	mov	r4, r0
 8002c04:	4608      	mov	r0, r1
 8002c06:	602b      	str	r3, [r5, #0]
 8002c08:	f7fe f875 	bl	8000cf6 <_close>
 8002c0c:	1c43      	adds	r3, r0, #1
 8002c0e:	d102      	bne.n	8002c16 <_close_r+0x1a>
 8002c10:	682b      	ldr	r3, [r5, #0]
 8002c12:	b103      	cbz	r3, 8002c16 <_close_r+0x1a>
 8002c14:	6023      	str	r3, [r4, #0]
 8002c16:	bd38      	pop	{r3, r4, r5, pc}
 8002c18:	200000f0 	.word	0x200000f0

08002c1c <_fstat_r>:
 8002c1c:	b538      	push	{r3, r4, r5, lr}
 8002c1e:	4d07      	ldr	r5, [pc, #28]	; (8002c3c <_fstat_r+0x20>)
 8002c20:	2300      	movs	r3, #0
 8002c22:	4604      	mov	r4, r0
 8002c24:	4608      	mov	r0, r1
 8002c26:	4611      	mov	r1, r2
 8002c28:	602b      	str	r3, [r5, #0]
 8002c2a:	f7fe f870 	bl	8000d0e <_fstat>
 8002c2e:	1c43      	adds	r3, r0, #1
 8002c30:	d102      	bne.n	8002c38 <_fstat_r+0x1c>
 8002c32:	682b      	ldr	r3, [r5, #0]
 8002c34:	b103      	cbz	r3, 8002c38 <_fstat_r+0x1c>
 8002c36:	6023      	str	r3, [r4, #0]
 8002c38:	bd38      	pop	{r3, r4, r5, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200000f0 	.word	0x200000f0

08002c40 <_isatty_r>:
 8002c40:	b538      	push	{r3, r4, r5, lr}
 8002c42:	4d06      	ldr	r5, [pc, #24]	; (8002c5c <_isatty_r+0x1c>)
 8002c44:	2300      	movs	r3, #0
 8002c46:	4604      	mov	r4, r0
 8002c48:	4608      	mov	r0, r1
 8002c4a:	602b      	str	r3, [r5, #0]
 8002c4c:	f7fe f86f 	bl	8000d2e <_isatty>
 8002c50:	1c43      	adds	r3, r0, #1
 8002c52:	d102      	bne.n	8002c5a <_isatty_r+0x1a>
 8002c54:	682b      	ldr	r3, [r5, #0]
 8002c56:	b103      	cbz	r3, 8002c5a <_isatty_r+0x1a>
 8002c58:	6023      	str	r3, [r4, #0]
 8002c5a:	bd38      	pop	{r3, r4, r5, pc}
 8002c5c:	200000f0 	.word	0x200000f0

08002c60 <_lseek_r>:
 8002c60:	b538      	push	{r3, r4, r5, lr}
 8002c62:	4d07      	ldr	r5, [pc, #28]	; (8002c80 <_lseek_r+0x20>)
 8002c64:	4604      	mov	r4, r0
 8002c66:	4608      	mov	r0, r1
 8002c68:	4611      	mov	r1, r2
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	602a      	str	r2, [r5, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f7fe f868 	bl	8000d44 <_lseek>
 8002c74:	1c43      	adds	r3, r0, #1
 8002c76:	d102      	bne.n	8002c7e <_lseek_r+0x1e>
 8002c78:	682b      	ldr	r3, [r5, #0]
 8002c7a:	b103      	cbz	r3, 8002c7e <_lseek_r+0x1e>
 8002c7c:	6023      	str	r3, [r4, #0]
 8002c7e:	bd38      	pop	{r3, r4, r5, pc}
 8002c80:	200000f0 	.word	0x200000f0

08002c84 <__malloc_lock>:
 8002c84:	4801      	ldr	r0, [pc, #4]	; (8002c8c <__malloc_lock+0x8>)
 8002c86:	f7ff be43 	b.w	8002910 <__retarget_lock_acquire_recursive>
 8002c8a:	bf00      	nop
 8002c8c:	200000e8 	.word	0x200000e8

08002c90 <__malloc_unlock>:
 8002c90:	4801      	ldr	r0, [pc, #4]	; (8002c98 <__malloc_unlock+0x8>)
 8002c92:	f7ff be3e 	b.w	8002912 <__retarget_lock_release_recursive>
 8002c96:	bf00      	nop
 8002c98:	200000e8 	.word	0x200000e8

08002c9c <_read_r>:
 8002c9c:	b538      	push	{r3, r4, r5, lr}
 8002c9e:	4d07      	ldr	r5, [pc, #28]	; (8002cbc <_read_r+0x20>)
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	4608      	mov	r0, r1
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	602a      	str	r2, [r5, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	f7fd ffea 	bl	8000c84 <_read>
 8002cb0:	1c43      	adds	r3, r0, #1
 8002cb2:	d102      	bne.n	8002cba <_read_r+0x1e>
 8002cb4:	682b      	ldr	r3, [r5, #0]
 8002cb6:	b103      	cbz	r3, 8002cba <_read_r+0x1e>
 8002cb8:	6023      	str	r3, [r4, #0]
 8002cba:	bd38      	pop	{r3, r4, r5, pc}
 8002cbc:	200000f0 	.word	0x200000f0

08002cc0 <_init>:
 8002cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc2:	bf00      	nop
 8002cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc6:	bc08      	pop	{r3}
 8002cc8:	469e      	mov	lr, r3
 8002cca:	4770      	bx	lr

08002ccc <_fini>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	bf00      	nop
 8002cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd2:	bc08      	pop	{r3}
 8002cd4:	469e      	mov	lr, r3
 8002cd6:	4770      	bx	lr
