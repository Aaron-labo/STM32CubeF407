
F407_11.ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000742c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  080075c0  080075c0  000175c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079cc  080079cc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079d4  080079d4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079d4  080079d4  000179d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079d8  080079d8  000179d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080079dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001dc  08007bb8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08007bb8  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012da8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c74  00000000  00000000  00032fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00035c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00036b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024294  00000000  00000000  00037920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122f7  00000000  00000000  0005bbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8c9f  00000000  00000000  0006deab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00146b4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e34  00000000  00000000  00146ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075a4 	.word	0x080075a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080075a4 	.word	0x080075a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <HAL_ADC_ConvCpltCallback>:
#include "gpio.h"

uint16_t adc_buffer[10] = { 0 }; //ADC采集数据缓冲区

//每当数据缓冲区被填满，即采集20个数据后，自动调用一次该回调函数
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	uint32_t sumVoltage = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
	float voltage = 0;
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
	if(hadc->Instance == ADC1){
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a24      	ldr	r2, [pc, #144]	; (8000fe8 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d13a      	bne.n	8000fd2 <HAL_ADC_ConvCpltCallback+0x92>
		for(uint8_t i = 0; i < 10; i++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	74fb      	strb	r3, [r7, #19]
 8000f60:	e00a      	b.n	8000f78 <HAL_ADC_ConvCpltCallback+0x38>
		{
			sumVoltage += adc_buffer[i];
 8000f62:	7cfb      	ldrb	r3, [r7, #19]
 8000f64:	4a21      	ldr	r2, [pc, #132]	; (8000fec <HAL_ADC_ConvCpltCallback+0xac>)
 8000f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	4413      	add	r3, r2
 8000f70:	617b      	str	r3, [r7, #20]
		for(uint8_t i = 0; i < 10; i++)
 8000f72:	7cfb      	ldrb	r3, [r7, #19]
 8000f74:	3301      	adds	r3, #1
 8000f76:	74fb      	strb	r3, [r7, #19]
 8000f78:	7cfb      	ldrb	r3, [r7, #19]
 8000f7a:	2b09      	cmp	r3, #9
 8000f7c:	d9f1      	bls.n	8000f62 <HAL_ADC_ConvCpltCallback+0x22>
		}
		voltage = (sumVoltage * 1.0 / 10) * 3.3 / 4096;
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff fac0 	bl	8000504 <__aeabi_ui2d>
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f8a:	f7ff fc5f 	bl	800084c <__aeabi_ddiv>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	a312      	add	r3, pc, #72	; (adr r3, 8000fe0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f7ff fb2c 	bl	80005f8 <__aeabi_dmul>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000fae:	f7ff fc4d 	bl	800084c <__aeabi_ddiv>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f7ff fdf5 	bl	8000ba8 <__aeabi_d2f>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	60fb      	str	r3, [r7, #12]
		printf("%.2f\r\n", voltage);
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f7ff fac0 	bl	8000548 <__aeabi_f2d>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000fce:	f004 fa6b 	bl	80054a8 <iprintf>
	}
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	66666666 	.word	0x66666666
 8000fe4:	400a6666 	.word	0x400a6666
 8000fe8:	40012000 	.word	0x40012000
 8000fec:	200001f8 	.word	0x200001f8
 8000ff0:	40240000 	.word	0x40240000
 8000ff4:	40b00000 	.word	0x40b00000
 8000ff8:	080075c0 	.word	0x080075c0

08000ffc <app_main_init>:

void app_main_init() {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3); // 开启计时器
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <app_main_init+0x18>)
 8001002:	f002 fd05 	bl	8003a10 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_buffer, 10); //DMA方式开启ADC
 8001006:	220a      	movs	r2, #10
 8001008:	4903      	ldr	r1, [pc, #12]	; (8001018 <app_main_init+0x1c>)
 800100a:	4804      	ldr	r0, [pc, #16]	; (800101c <app_main_init+0x20>)
 800100c:	f000 fe46 	bl	8001c9c <HAL_ADC_Start_DMA>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200002c0 	.word	0x200002c0
 8001018:	200001f8 	.word	0x200001f8
 800101c:	20000218 	.word	0x20000218

08001020 <app_main>:

void app_main() {
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 8001038:	bf00      	nop
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <__io_putchar+0x2c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f9      	beq.n	800103a <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <__io_putchar+0x2c>)
 800104c:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

	return ch;
 800104e:	687b      	ldr	r3, [r7, #4]
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40011000 	.word	0x40011000

08001060 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001072:	4b22      	ldr	r3, [pc, #136]	; (80010fc <MX_ADC1_Init+0x9c>)
 8001074:	4a22      	ldr	r2, [pc, #136]	; (8001100 <MX_ADC1_Init+0xa0>)
 8001076:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001078:	4b20      	ldr	r3, [pc, #128]	; (80010fc <MX_ADC1_Init+0x9c>)
 800107a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800107e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <MX_ADC1_Init+0x9c>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_ADC1_Init+0x9c>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_ADC1_Init+0x9c>)
 800108e:	2200      	movs	r2, #0
 8001090:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <MX_ADC1_Init+0x9c>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <MX_ADC1_Init+0x9c>)
 800109c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <MX_ADC1_Init+0x9c>)
 80010a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_ADC1_Init+0x9c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_ADC1_Init+0x9c>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_ADC1_Init+0x9c>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_ADC1_Init+0x9c>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <MX_ADC1_Init+0x9c>)
 80010c6:	f000 fc65 	bl	8001994 <HAL_ADC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80010d0:	f000 f960 	bl	8001394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010d8:	2301      	movs	r3, #1
 80010da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80010dc:	2306      	movs	r3, #6
 80010de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_ADC1_Init+0x9c>)
 80010e6:	f000 ff07 	bl	8001ef8 <HAL_ADC_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80010f0:	f000 f950 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000218 	.word	0x20000218
 8001100:	40012000 	.word	0x40012000

08001104 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a33      	ldr	r2, [pc, #204]	; (80011f0 <HAL_ADC_MspInit+0xec>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d160      	bne.n	80011e8 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <HAL_ADC_MspInit+0xf0>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a31      	ldr	r2, [pc, #196]	; (80011f4 <HAL_ADC_MspInit+0xf0>)
 8001130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <HAL_ADC_MspInit+0xf0>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <HAL_ADC_MspInit+0xf0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a2a      	ldr	r2, [pc, #168]	; (80011f4 <HAL_ADC_MspInit+0xf0>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <HAL_ADC_MspInit+0xf0>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800115e:	2302      	movs	r3, #2
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001162:	2303      	movs	r3, #3
 8001164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4821      	ldr	r0, [pc, #132]	; (80011f8 <HAL_ADC_MspInit+0xf4>)
 8001172:	f001 fded 	bl	8002d50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <HAL_ADC_MspInit+0xf8>)
 8001178:	4a21      	ldr	r2, [pc, #132]	; (8001200 <HAL_ADC_MspInit+0xfc>)
 800117a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <HAL_ADC_MspInit+0xf8>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <HAL_ADC_MspInit+0xf8>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <HAL_ADC_MspInit+0xf8>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_ADC_MspInit+0xf8>)
 8001190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001194:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_ADC_MspInit+0xf8>)
 8001198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800119c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800119e:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_ADC_MspInit+0xf8>)
 80011a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <HAL_ADC_MspInit+0xf8>)
 80011a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_ADC_MspInit+0xf8>)
 80011b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011b4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <HAL_ADC_MspInit+0xf8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011bc:	480f      	ldr	r0, [pc, #60]	; (80011fc <HAL_ADC_MspInit+0xf8>)
 80011be:	f001 fa57 	bl	8002670 <HAL_DMA_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80011c8:	f000 f8e4 	bl	8001394 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <HAL_ADC_MspInit+0xf8>)
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <HAL_ADC_MspInit+0xf8>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	2012      	movs	r0, #18
 80011de:	f001 fa10 	bl	8002602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011e2:	2012      	movs	r0, #18
 80011e4:	f001 fa29 	bl	800263a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	; 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40012000 	.word	0x40012000
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	20000260 	.word	0x20000260
 8001200:	40026410 	.word	0x40026410

08001204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_DMA_Init+0x3c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <MX_DMA_Init+0x3c>)
 8001214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_DMA_Init+0x3c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2038      	movs	r0, #56	; 0x38
 800122c:	f001 f9e9 	bl	8002602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001230:	2038      	movs	r0, #56	; 0x38
 8001232:	f001 fa02 	bl	800263a <HAL_NVIC_EnableIRQ>

}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_GPIO_Init+0x4c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <MX_GPIO_Init+0x4c>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <MX_GPIO_Init+0x4c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_GPIO_Init+0x4c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <MX_GPIO_Init+0x4c>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_GPIO_Init+0x4c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]

}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800

08001294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001298:	f000 fb0a 	bl	80018b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129c:	f000 f810 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a0:	f7ff ffd0 	bl	8001244 <MX_GPIO_Init>
  MX_DMA_Init();
 80012a4:	f7ff ffae 	bl	8001204 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80012a8:	f000 fa66 	bl	8001778 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80012ac:	f7ff fed8 	bl	8001060 <MX_ADC1_Init>
  MX_TIM3_Init();
 80012b0:	f000 f9be 	bl	8001630 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 80012b4:	f7ff fea2 	bl	8000ffc <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  app_main();
 80012b8:	f7ff feb2 	bl	8001020 <app_main>
 80012bc:	e7fc      	b.n	80012b8 <main+0x24>
	...

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b094      	sub	sp, #80	; 0x50
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	2230      	movs	r2, #48	; 0x30
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 fc78 	bl	8004bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	4b28      	ldr	r3, [pc, #160]	; (800138c <SystemClock_Config+0xcc>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	4a27      	ldr	r2, [pc, #156]	; (800138c <SystemClock_Config+0xcc>)
 80012ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f2:	6413      	str	r3, [r2, #64]	; 0x40
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <SystemClock_Config+0xcc>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <SystemClock_Config+0xd0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a21      	ldr	r2, [pc, #132]	; (8001390 <SystemClock_Config+0xd0>)
 800130a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <SystemClock_Config+0xd0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800131c:	2301      	movs	r3, #1
 800131e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001326:	2302      	movs	r3, #2
 8001328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800132e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001330:	2304      	movs	r3, #4
 8001332:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001334:	23a8      	movs	r3, #168	; 0xa8
 8001336:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001338:	2302      	movs	r3, #2
 800133a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800133c:	2304      	movs	r3, #4
 800133e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001340:	f107 0320 	add.w	r3, r7, #32
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fe9f 	bl	8003088 <HAL_RCC_OscConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001350:	f000 f820 	bl	8001394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001354:	230f      	movs	r3, #15
 8001356:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001358:	2302      	movs	r3, #2
 800135a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001360:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001364:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2105      	movs	r1, #5
 8001372:	4618      	mov	r0, r3
 8001374:	f002 f900 	bl	8003578 <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800137e:	f000 f809 	bl	8001394 <Error_Handler>
  }
}
 8001382:	bf00      	nop
 8001384:	3750      	adds	r7, #80	; 0x50
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40007000 	.word	0x40007000

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	e7fe      	b.n	800139c <Error_Handler+0x8>
	...

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_MspInit+0x4c>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_MspInit+0x4c>)
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b4:	6453      	str	r3, [r2, #68]	; 0x44
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_MspInit+0x4c>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_MspInit+0x4c>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <HAL_MspInit+0x4c>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_MspInit+0x4c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143c:	f000 fa8a 	bl	8001954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <ADC_IRQHandler+0x10>)
 800144a:	f000 fae6 	bl	8001a1a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000218 	.word	0x20000218

08001458 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <TIM3_IRQHandler+0x10>)
 800145e:	f002 fba0 	bl	8003ba2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200002c0 	.word	0x200002c0

0800146c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <DMA2_Stream0_IRQHandler+0x10>)
 8001472:	f001 fa03 	bl	800287c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000260 	.word	0x20000260

08001480 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
	return 1;
 8001484:	2301      	movs	r3, #1
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <_kill>:

int _kill(int pid, int sig)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800149a:	f003 fb69 	bl	8004b70 <__errno>
 800149e:	4603      	mov	r3, r0
 80014a0:	2216      	movs	r2, #22
 80014a2:	601a      	str	r2, [r3, #0]
	return -1;
 80014a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_exit>:

void _exit (int status)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ffe7 	bl	8001490 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014c2:	e7fe      	b.n	80014c2 <_exit+0x12>

080014c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	e00a      	b.n	80014ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014d6:	f3af 8000 	nop.w
 80014da:	4601      	mov	r1, r0
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	b2ca      	uxtb	r2, r1
 80014e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbf0      	blt.n	80014d6 <_read+0x12>
	}

return len;
 80014f4:	687b      	ldr	r3, [r7, #4]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	e009      	b.n	8001524 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	60ba      	str	r2, [r7, #8]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fd89 	bl	8001030 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	429a      	cmp	r2, r3
 800152a:	dbf1      	blt.n	8001510 <_write+0x12>
	}
	return len;
 800152c:	687b      	ldr	r3, [r7, #4]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <_close>:

int _close(int file)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	return -1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800155e:	605a      	str	r2, [r3, #4]
	return 0;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <_isatty>:

int _isatty(int file)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
	return 1;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
	return 0;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a8:	4a14      	ldr	r2, [pc, #80]	; (80015fc <_sbrk+0x5c>)
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <_sbrk+0x60>)
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <_sbrk+0x64>)
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <_sbrk+0x68>)
 80015c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d207      	bcs.n	80015e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d0:	f003 face 	bl	8004b70 <__errno>
 80015d4:	4603      	mov	r3, r0
 80015d6:	220c      	movs	r2, #12
 80015d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	e009      	b.n	80015f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <_sbrk+0x64>)
 80015f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f2:	68fb      	ldr	r3, [r7, #12]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20020000 	.word	0x20020000
 8001600:	00000400 	.word	0x00000400
 8001604:	2000020c 	.word	0x2000020c
 8001608:	20000360 	.word	0x20000360

0800160c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <SystemInit+0x20>)
 8001612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <SystemInit+0x20>)
 8001618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800161c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08e      	sub	sp, #56	; 0x38
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	f107 0320 	add.w	r3, r7, #32
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	615a      	str	r2, [r3, #20]
 800165e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001660:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <MX_TIM3_Init+0xf0>)
 8001662:	4a30      	ldr	r2, [pc, #192]	; (8001724 <MX_TIM3_Init+0xf4>)
 8001664:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16800-1;
 8001666:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <MX_TIM3_Init+0xf0>)
 8001668:	f244 129f 	movw	r2, #16799	; 0x419f
 800166c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166e:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <MX_TIM3_Init+0xf0>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8001674:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <MX_TIM3_Init+0xf0>)
 8001676:	f240 12f3 	movw	r2, #499	; 0x1f3
 800167a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <MX_TIM3_Init+0xf0>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001682:	4b27      	ldr	r3, [pc, #156]	; (8001720 <MX_TIM3_Init+0xf0>)
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001688:	4825      	ldr	r0, [pc, #148]	; (8001720 <MX_TIM3_Init+0xf0>)
 800168a:	f002 f971 	bl	8003970 <HAL_TIM_Base_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001694:	f7ff fe7e 	bl	8001394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800169e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a2:	4619      	mov	r1, r3
 80016a4:	481e      	ldr	r0, [pc, #120]	; (8001720 <MX_TIM3_Init+0xf0>)
 80016a6:	f002 fbdd 	bl	8003e64 <HAL_TIM_ConfigClockSource>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80016b0:	f7ff fe70 	bl	8001394 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80016b4:	481a      	ldr	r0, [pc, #104]	; (8001720 <MX_TIM3_Init+0xf0>)
 80016b6:	f002 fa1b 	bl	8003af0 <HAL_TIM_OC_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016c0:	f7ff fe68 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016c4:	2320      	movs	r3, #32
 80016c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016cc:	f107 0320 	add.w	r3, r7, #32
 80016d0:	4619      	mov	r1, r3
 80016d2:	4813      	ldr	r0, [pc, #76]	; (8001720 <MX_TIM3_Init+0xf0>)
 80016d4:	f002 ffa6 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016de:	f7ff fe59 	bl	8001394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	220c      	movs	r2, #12
 80016f6:	4619      	mov	r1, r3
 80016f8:	4809      	ldr	r0, [pc, #36]	; (8001720 <MX_TIM3_Init+0xf0>)
 80016fa:	f002 fb5b 	bl	8003db4 <HAL_TIM_OC_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001704:	f7ff fe46 	bl	8001394 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_4);
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <MX_TIM3_Init+0xf0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	69da      	ldr	r2, [r3, #28]
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <MX_TIM3_Init+0xf0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	3738      	adds	r7, #56	; 0x38
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200002c0 	.word	0x200002c0
 8001724:	40000400 	.word	0x40000400

08001728 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_TIM_Base_MspInit+0x48>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d115      	bne.n	8001766 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <HAL_TIM_Base_MspInit+0x4c>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a0c      	ldr	r2, [pc, #48]	; (8001774 <HAL_TIM_Base_MspInit+0x4c>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6413      	str	r3, [r2, #64]	; 0x40
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <HAL_TIM_Base_MspInit+0x4c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	201d      	movs	r0, #29
 800175c:	f000 ff51 	bl	8002602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001760:	201d      	movs	r0, #29
 8001762:	f000 ff6a 	bl	800263a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40000400 	.word	0x40000400
 8001774:	40023800 	.word	0x40023800

08001778 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <MX_USART1_UART_Init+0x50>)
 8001780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 8001784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 80017b0:	f002 ffc8 	bl	8004744 <HAL_UART_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ba:	f7ff fdeb 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000308 	.word	0x20000308
 80017c8:	40011000 	.word	0x40011000

080017cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a19      	ldr	r2, [pc, #100]	; (8001850 <HAL_UART_MspInit+0x84>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d12c      	bne.n	8001848 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <HAL_UART_MspInit+0x88>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a17      	ldr	r2, [pc, #92]	; (8001854 <HAL_UART_MspInit+0x88>)
 80017f8:	f043 0310 	orr.w	r3, r3, #16
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_UART_MspInit+0x88>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_UART_MspInit+0x88>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a10      	ldr	r2, [pc, #64]	; (8001854 <HAL_UART_MspInit+0x88>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_UART_MspInit+0x88>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001826:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	2303      	movs	r3, #3
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001838:	2307      	movs	r3, #7
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <HAL_UART_MspInit+0x8c>)
 8001844:	f001 fa84 	bl	8002d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	; 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40011000 	.word	0x40011000
 8001854:	40023800 	.word	0x40023800
 8001858:	40020000 	.word	0x40020000

0800185c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800185c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001894 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001862:	490e      	ldr	r1, [pc, #56]	; (800189c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001864:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001878:	4c0b      	ldr	r4, [pc, #44]	; (80018a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001886:	f7ff fec1 	bl	800160c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188a:	f003 f977 	bl	8004b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188e:	f7ff fd01 	bl	8001294 <main>
  bx  lr    
 8001892:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800189c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80018a0:	080079dc 	.word	0x080079dc
  ldr r2, =_sbss
 80018a4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80018a8:	20000360 	.word	0x20000360

080018ac <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <CAN1_RX0_IRQHandler>
	...

080018b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <HAL_Init+0x40>)
 80018ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <HAL_Init+0x40>)
 80018c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <HAL_Init+0x40>)
 80018d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d8:	2003      	movs	r0, #3
 80018da:	f000 fe87 	bl	80025ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018de:	2000      	movs	r0, #0
 80018e0:	f000 f808 	bl	80018f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e4:	f7ff fd5c 	bl	80013a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023c00 	.word	0x40023c00

080018f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_InitTick+0x54>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0x58>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190a:	fbb3 f3f1 	udiv	r3, r3, r1
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fe9f 	bl	8002656 <HAL_SYSTICK_Config>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e00e      	b.n	8001940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b0f      	cmp	r3, #15
 8001926:	d80a      	bhi.n	800193e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001928:	2200      	movs	r2, #0
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f000 fe67 	bl	8002602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001934:	4a06      	ldr	r2, [pc, #24]	; (8001950 <HAL_InitTick+0x5c>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	e000      	b.n	8001940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000000 	.word	0x20000000
 800194c:	20000008 	.word	0x20000008
 8001950:	20000004 	.word	0x20000004

08001954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_IncTick+0x20>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x24>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <HAL_IncTick+0x24>)
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000008 	.word	0x20000008
 8001978:	2000034c 	.word	0x2000034c

0800197c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTick;
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <HAL_GetTick+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2000034c 	.word	0x2000034c

08001994 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e033      	b.n	8001a12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fba6 	bl	8001104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d118      	bne.n	8001a04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019da:	f023 0302 	bic.w	r3, r3, #2
 80019de:	f043 0202 	orr.w	r2, r3, #2
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fba8 	bl	800213c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f023 0303 	bic.w	r3, r3, #3
 80019fa:	f043 0201 	orr.w	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40
 8001a02:	e001      	b.n	8001a08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	bf0c      	ite	eq
 8001a38:	2301      	moveq	r3, #1
 8001a3a:	2300      	movne	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0320 	and.w	r3, r3, #32
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d049      	beq.n	8001af0 <HAL_ADC_IRQHandler+0xd6>
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d046      	beq.n	8001af0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d105      	bne.n	8001a7a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d12b      	bne.n	8001ae0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d127      	bne.n	8001ae0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d119      	bne.n	8001ae0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0220 	bic.w	r2, r2, #32
 8001aba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fa2d 	bl	8000f40 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f06f 0212 	mvn.w	r2, #18
 8001aee:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	bf0c      	ite	eq
 8001afe:	2301      	moveq	r3, #1
 8001b00:	2300      	movne	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b10:	2b80      	cmp	r3, #128	; 0x80
 8001b12:	bf0c      	ite	eq
 8001b14:	2301      	moveq	r3, #1
 8001b16:	2300      	movne	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d057      	beq.n	8001bd2 <HAL_ADC_IRQHandler+0x1b8>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d054      	beq.n	8001bd2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d139      	bne.n	8001bc2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b54:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d006      	beq.n	8001b6a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d12b      	bne.n	8001bc2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d124      	bne.n	8001bc2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d11d      	bne.n	8001bc2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d119      	bne.n	8001bc2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b9c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d105      	bne.n	8001bc2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 fc38 	bl	8002438 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f06f 020c 	mvn.w	r2, #12
 8001bd0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	bf0c      	ite	eq
 8001be0:	2301      	moveq	r3, #1
 8001be2:	2300      	movne	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf2:	2b40      	cmp	r3, #64	; 0x40
 8001bf4:	bf0c      	ite	eq
 8001bf6:	2301      	moveq	r3, #1
 8001bf8:	2300      	movne	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d017      	beq.n	8001c34 <HAL_ADC_IRQHandler+0x21a>
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d014      	beq.n	8001c34 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d10d      	bne.n	8001c34 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f953 	bl	8001ed0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f06f 0201 	mvn.w	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b20      	cmp	r3, #32
 8001c40:	bf0c      	ite	eq
 8001c42:	2301      	moveq	r3, #1
 8001c44:	2300      	movne	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c58:	bf0c      	ite	eq
 8001c5a:	2301      	moveq	r3, #1
 8001c5c:	2300      	movne	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d015      	beq.n	8001c94 <HAL_ADC_IRQHandler+0x27a>
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d012      	beq.n	8001c94 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f043 0202 	orr.w	r2, r3, #2
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f06f 0220 	mvn.w	r2, #32
 8001c82:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f92d 	bl	8001ee4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f06f 0220 	mvn.w	r2, #32
 8001c92:	601a      	str	r2, [r3, #0]
  }
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_Start_DMA+0x1e>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e0e9      	b.n	8001e8e <HAL_ADC_Start_DMA+0x1f2>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d018      	beq.n	8001d02 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce0:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <HAL_ADC_Start_DMA+0x1fc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a6d      	ldr	r2, [pc, #436]	; (8001e9c <HAL_ADC_Start_DMA+0x200>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	0c9a      	lsrs	r2, r3, #18
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001cf4:	e002      	b.n	8001cfc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f9      	bne.n	8001cf6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d10:	d107      	bne.n	8001d22 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d20:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	f040 80a1 	bne.w	8001e74 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d3a:	f023 0301 	bic.w	r3, r3, #1
 8001d3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d70:	d106      	bne.n	8001d80 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f023 0206 	bic.w	r2, r3, #6
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44
 8001d7e:	e002      	b.n	8001d86 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d8e:	4b44      	ldr	r3, [pc, #272]	; (8001ea0 <HAL_ADC_Start_DMA+0x204>)
 8001d90:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d96:	4a43      	ldr	r2, [pc, #268]	; (8001ea4 <HAL_ADC_Start_DMA+0x208>)
 8001d98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	4a42      	ldr	r2, [pc, #264]	; (8001ea8 <HAL_ADC_Start_DMA+0x20c>)
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da6:	4a41      	ldr	r2, [pc, #260]	; (8001eac <HAL_ADC_Start_DMA+0x210>)
 8001da8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001db2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001dc2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dd2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	334c      	adds	r3, #76	; 0x4c
 8001dde:	4619      	mov	r1, r3
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f000 fcf2 	bl	80027cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d12a      	bne.n	8001e4a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a2d      	ldr	r2, [pc, #180]	; (8001eb0 <HAL_ADC_Start_DMA+0x214>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d015      	beq.n	8001e2a <HAL_ADC_Start_DMA+0x18e>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a2c      	ldr	r2, [pc, #176]	; (8001eb4 <HAL_ADC_Start_DMA+0x218>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d105      	bne.n	8001e14 <HAL_ADC_Start_DMA+0x178>
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <HAL_ADC_Start_DMA+0x204>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00a      	beq.n	8001e2a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a27      	ldr	r2, [pc, #156]	; (8001eb8 <HAL_ADC_Start_DMA+0x21c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d136      	bne.n	8001e8c <HAL_ADC_Start_DMA+0x1f0>
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_ADC_Start_DMA+0x204>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d130      	bne.n	8001e8c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d129      	bne.n	8001e8c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	e020      	b.n	8001e8c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_ADC_Start_DMA+0x214>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d11b      	bne.n	8001e8c <HAL_ADC_Start_DMA+0x1f0>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d114      	bne.n	8001e8c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	e00b      	b.n	8001e8c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f043 0210 	orr.w	r2, r3, #16
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	431bde83 	.word	0x431bde83
 8001ea0:	40012300 	.word	0x40012300
 8001ea4:	08002335 	.word	0x08002335
 8001ea8:	080023ef 	.word	0x080023ef
 8001eac:	0800240b 	.word	0x0800240b
 8001eb0:	40012000 	.word	0x40012000
 8001eb4:	40012100 	.word	0x40012100
 8001eb8:	40012200 	.word	0x40012200

08001ebc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1c>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e105      	b.n	8002120 <HAL_ADC_ConfigChannel+0x228>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b09      	cmp	r3, #9
 8001f22:	d925      	bls.n	8001f70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68d9      	ldr	r1, [r3, #12]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	3b1e      	subs	r3, #30
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43da      	mvns	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	400a      	ands	r2, r1
 8001f48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68d9      	ldr	r1, [r3, #12]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4403      	add	r3, r0
 8001f62:	3b1e      	subs	r3, #30
 8001f64:	409a      	lsls	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	e022      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6919      	ldr	r1, [r3, #16]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	2207      	movs	r2, #7
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	400a      	ands	r2, r1
 8001f92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6919      	ldr	r1, [r3, #16]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4403      	add	r3, r0
 8001fac:	409a      	lsls	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d824      	bhi.n	8002008 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	3b05      	subs	r3, #5
 8001fd0:	221f      	movs	r2, #31
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	400a      	ands	r2, r1
 8001fde:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	4618      	mov	r0, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	3b05      	subs	r3, #5
 8001ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	635a      	str	r2, [r3, #52]	; 0x34
 8002006:	e04c      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b0c      	cmp	r3, #12
 800200e:	d824      	bhi.n	800205a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	3b23      	subs	r3, #35	; 0x23
 8002022:	221f      	movs	r2, #31
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43da      	mvns	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	400a      	ands	r2, r1
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	b29b      	uxth	r3, r3
 800203e:	4618      	mov	r0, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	3b23      	subs	r3, #35	; 0x23
 800204c:	fa00 f203 	lsl.w	r2, r0, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
 8002058:	e023      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	3b41      	subs	r3, #65	; 0x41
 800206c:	221f      	movs	r2, #31
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	400a      	ands	r2, r1
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	4618      	mov	r0, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	3b41      	subs	r3, #65	; 0x41
 8002096:	fa00 f203 	lsl.w	r2, r0, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020a2:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_ADC_ConfigChannel+0x234>)
 80020a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a21      	ldr	r2, [pc, #132]	; (8002130 <HAL_ADC_ConfigChannel+0x238>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d109      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1cc>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b12      	cmp	r3, #18
 80020b6:	d105      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_ADC_ConfigChannel+0x238>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d123      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x21e>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d003      	beq.n	80020de <HAL_ADC_ConfigChannel+0x1e6>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b11      	cmp	r3, #17
 80020dc:	d11b      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d111      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <HAL_ADC_ConfigChannel+0x23c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a10      	ldr	r2, [pc, #64]	; (8002138 <HAL_ADC_ConfigChannel+0x240>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	0c9a      	lsrs	r2, r3, #18
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002108:	e002      	b.n	8002110 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	3b01      	subs	r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f9      	bne.n	800210a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	40012300 	.word	0x40012300
 8002130:	40012000 	.word	0x40012000
 8002134:	20000000 	.word	0x20000000
 8002138:	431bde83 	.word	0x431bde83

0800213c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002144:	4b79      	ldr	r3, [pc, #484]	; (800232c <ADC_Init+0x1f0>)
 8002146:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	431a      	orrs	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002170:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	021a      	lsls	r2, r3, #8
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002194:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6859      	ldr	r1, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6899      	ldr	r1, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	4a58      	ldr	r2, [pc, #352]	; (8002330 <ADC_Init+0x1f4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d022      	beq.n	800221a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6899      	ldr	r1, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002204:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6899      	ldr	r1, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	e00f      	b.n	800223a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002228:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002238:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0202 	bic.w	r2, r2, #2
 8002248:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6899      	ldr	r1, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7e1b      	ldrb	r3, [r3, #24]
 8002254:	005a      	lsls	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01b      	beq.n	80022a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002276:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002286:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6859      	ldr	r1, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	3b01      	subs	r3, #1
 8002294:	035a      	lsls	r2, r3, #13
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	e007      	b.n	80022b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	051a      	lsls	r2, r3, #20
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6899      	ldr	r1, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022f2:	025a      	lsls	r2, r3, #9
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800230a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6899      	ldr	r1, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	029a      	lsls	r2, r3, #10
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	609a      	str	r2, [r3, #8]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	40012300 	.word	0x40012300
 8002330:	0f000001 	.word	0x0f000001

08002334 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800234a:	2b00      	cmp	r3, #0
 800234c:	d13c      	bne.n	80023c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d12b      	bne.n	80023c0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800236c:	2b00      	cmp	r3, #0
 800236e:	d127      	bne.n	80023c0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800237a:	2b00      	cmp	r3, #0
 800237c:	d006      	beq.n	800238c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002388:	2b00      	cmp	r3, #0
 800238a:	d119      	bne.n	80023c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0220 	bic.w	r2, r2, #32
 800239a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d105      	bne.n	80023c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f043 0201 	orr.w	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7fe fdbd 	bl	8000f40 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023c6:	e00e      	b.n	80023e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f7ff fd85 	bl	8001ee4 <HAL_ADC_ErrorCallback>
}
 80023da:	e004      	b.n	80023e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4798      	blx	r3
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f7ff fd5d 	bl	8001ebc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2240      	movs	r2, #64	; 0x40
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f043 0204 	orr.w	r2, r3, #4
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7ff fd5a 	bl	8001ee4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002468:	4013      	ands	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800247e:	4a04      	ldr	r2, [pc, #16]	; (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	60d3      	str	r3, [r2, #12]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <__NVIC_GetPriorityGrouping+0x18>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	f003 0307 	and.w	r3, r3, #7
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	db0b      	blt.n	80024da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	f003 021f 	and.w	r2, r3, #31
 80024c8:	4907      	ldr	r1, [pc, #28]	; (80024e8 <__NVIC_EnableIRQ+0x38>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	2001      	movs	r0, #1
 80024d2:	fa00 f202 	lsl.w	r2, r0, r2
 80024d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000e100 	.word	0xe000e100

080024ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	db0a      	blt.n	8002516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	490c      	ldr	r1, [pc, #48]	; (8002538 <__NVIC_SetPriority+0x4c>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	0112      	lsls	r2, r2, #4
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	440b      	add	r3, r1
 8002510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002514:	e00a      	b.n	800252c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4908      	ldr	r1, [pc, #32]	; (800253c <__NVIC_SetPriority+0x50>)
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	3b04      	subs	r3, #4
 8002524:	0112      	lsls	r2, r2, #4
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	440b      	add	r3, r1
 800252a:	761a      	strb	r2, [r3, #24]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000e100 	.word	0xe000e100
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f1c3 0307 	rsb	r3, r3, #7
 800255a:	2b04      	cmp	r3, #4
 800255c:	bf28      	it	cs
 800255e:	2304      	movcs	r3, #4
 8002560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3304      	adds	r3, #4
 8002566:	2b06      	cmp	r3, #6
 8002568:	d902      	bls.n	8002570 <NVIC_EncodePriority+0x30>
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3b03      	subs	r3, #3
 800256e:	e000      	b.n	8002572 <NVIC_EncodePriority+0x32>
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	f04f 32ff 	mov.w	r2, #4294967295
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	401a      	ands	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	43d9      	mvns	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002598:	4313      	orrs	r3, r2
         );
}
 800259a:	4618      	mov	r0, r3
 800259c:	3724      	adds	r7, #36	; 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b8:	d301      	bcc.n	80025be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00f      	b.n	80025de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025be:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <SysTick_Config+0x40>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c6:	210f      	movs	r1, #15
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f7ff ff8e 	bl	80024ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <SysTick_Config+0x40>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d6:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <SysTick_Config+0x40>)
 80025d8:	2207      	movs	r2, #7
 80025da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff29 	bl	800244c <__NVIC_SetPriorityGrouping>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002614:	f7ff ff3e 	bl	8002494 <__NVIC_GetPriorityGrouping>
 8002618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f7ff ff8e 	bl	8002540 <NVIC_EncodePriority>
 8002624:	4602      	mov	r2, r0
 8002626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff5d 	bl	80024ec <__NVIC_SetPriority>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff31 	bl	80024b0 <__NVIC_EnableIRQ>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ffa2 	bl	80025a8 <SysTick_Config>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800267c:	f7ff f97e 	bl	800197c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e099      	b.n	80027c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0201 	bic.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ac:	e00f      	b.n	80026ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ae:	f7ff f965 	bl	800197c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b05      	cmp	r3, #5
 80026ba:	d908      	bls.n	80026ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2203      	movs	r2, #3
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e078      	b.n	80027c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1e8      	bne.n	80026ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <HAL_DMA_Init+0x158>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002706:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002712:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	2b04      	cmp	r3, #4
 8002726:	d107      	bne.n	8002738 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	4313      	orrs	r3, r2
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f023 0307 	bic.w	r3, r3, #7
 800274e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	2b04      	cmp	r3, #4
 8002760:	d117      	bne.n	8002792 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00e      	beq.n	8002792 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 fa6f 	bl	8002c58 <DMA_CheckFifoParam>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2240      	movs	r2, #64	; 0x40
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800278e:	2301      	movs	r3, #1
 8002790:	e016      	b.n	80027c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fa26 	bl	8002bec <DMA_CalcBaseAndBitshift>
 80027a0:	4603      	mov	r3, r0
 80027a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	223f      	movs	r2, #63	; 0x3f
 80027aa:	409a      	lsls	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	f010803f 	.word	0xf010803f

080027cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_DMA_Start_IT+0x26>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e040      	b.n	8002874 <HAL_DMA_Start_IT+0xa8>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d12f      	bne.n	8002866 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2202      	movs	r2, #2
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f9b8 	bl	8002b90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	223f      	movs	r2, #63	; 0x3f
 8002826:	409a      	lsls	r2, r3
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0216 	orr.w	r2, r2, #22
 800283a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0208 	orr.w	r2, r2, #8
 8002852:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e005      	b.n	8002872 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800286e:	2302      	movs	r3, #2
 8002870:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002872:	7dfb      	ldrb	r3, [r7, #23]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002888:	4b92      	ldr	r3, [pc, #584]	; (8002ad4 <HAL_DMA_IRQHandler+0x258>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a92      	ldr	r2, [pc, #584]	; (8002ad8 <HAL_DMA_IRQHandler+0x25c>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0a9b      	lsrs	r3, r3, #10
 8002894:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	2208      	movs	r2, #8
 80028a8:	409a      	lsls	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01a      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0204 	bic.w	r2, r2, #4
 80028ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	2208      	movs	r2, #8
 80028d6:	409a      	lsls	r2, r3
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	2201      	movs	r2, #1
 80028ee:	409a      	lsls	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d012      	beq.n	800291e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	2201      	movs	r2, #1
 800290c:	409a      	lsls	r2, r3
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002916:	f043 0202 	orr.w	r2, r3, #2
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002922:	2204      	movs	r2, #4
 8002924:	409a      	lsls	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d012      	beq.n	8002954 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00b      	beq.n	8002954 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	2204      	movs	r2, #4
 8002942:	409a      	lsls	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	f043 0204 	orr.w	r2, r3, #4
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	2210      	movs	r2, #16
 800295a:	409a      	lsls	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d043      	beq.n	80029ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d03c      	beq.n	80029ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002976:	2210      	movs	r2, #16
 8002978:	409a      	lsls	r2, r3
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d018      	beq.n	80029be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d108      	bne.n	80029ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d024      	beq.n	80029ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
 80029aa:	e01f      	b.n	80029ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01b      	beq.n	80029ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
 80029bc:	e016      	b.n	80029ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d107      	bne.n	80029dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0208 	bic.w	r2, r2, #8
 80029da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f0:	2220      	movs	r2, #32
 80029f2:	409a      	lsls	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 808e 	beq.w	8002b1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8086 	beq.w	8002b1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	2220      	movs	r2, #32
 8002a14:	409a      	lsls	r2, r3
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	d136      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0216 	bic.w	r2, r2, #22
 8002a34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695a      	ldr	r2, [r3, #20]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d103      	bne.n	8002a56 <HAL_DMA_IRQHandler+0x1da>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0208 	bic.w	r2, r2, #8
 8002a64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	223f      	movs	r2, #63	; 0x3f
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d07d      	beq.n	8002b86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
        }
        return;
 8002a92:	e078      	b.n	8002b86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d01c      	beq.n	8002adc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d108      	bne.n	8002ac2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d030      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	4798      	blx	r3
 8002ac0:	e02b      	b.n	8002b1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d027      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
 8002ad2:	e022      	b.n	8002b1a <HAL_DMA_IRQHandler+0x29e>
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10f      	bne.n	8002b0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0210 	bic.w	r2, r2, #16
 8002af8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d032      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d022      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2205      	movs	r2, #5
 8002b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d307      	bcc.n	8002b62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f2      	bne.n	8002b46 <HAL_DMA_IRQHandler+0x2ca>
 8002b60:	e000      	b.n	8002b64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b62:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4798      	blx	r3
 8002b84:	e000      	b.n	8002b88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b86:	bf00      	nop
    }
  }
}
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop

08002b90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b40      	cmp	r3, #64	; 0x40
 8002bbc:	d108      	bne.n	8002bd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bce:	e007      	b.n	8002be0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	60da      	str	r2, [r3, #12]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	3b10      	subs	r3, #16
 8002bfc:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <DMA_CalcBaseAndBitshift+0x64>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c06:	4a13      	ldr	r2, [pc, #76]	; (8002c54 <DMA_CalcBaseAndBitshift+0x68>)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d909      	bls.n	8002c2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c22:	f023 0303 	bic.w	r3, r3, #3
 8002c26:	1d1a      	adds	r2, r3, #4
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c2c:	e007      	b.n	8002c3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c36:	f023 0303 	bic.w	r3, r3, #3
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	aaaaaaab 	.word	0xaaaaaaab
 8002c54:	080075e0 	.word	0x080075e0

08002c58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d11f      	bne.n	8002cb2 <DMA_CheckFifoParam+0x5a>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d856      	bhi.n	8002d26 <DMA_CheckFifoParam+0xce>
 8002c78:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <DMA_CheckFifoParam+0x28>)
 8002c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7e:	bf00      	nop
 8002c80:	08002c91 	.word	0x08002c91
 8002c84:	08002ca3 	.word	0x08002ca3
 8002c88:	08002c91 	.word	0x08002c91
 8002c8c:	08002d27 	.word	0x08002d27
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d046      	beq.n	8002d2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca0:	e043      	b.n	8002d2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002caa:	d140      	bne.n	8002d2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb0:	e03d      	b.n	8002d2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cba:	d121      	bne.n	8002d00 <DMA_CheckFifoParam+0xa8>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d837      	bhi.n	8002d32 <DMA_CheckFifoParam+0xda>
 8002cc2:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <DMA_CheckFifoParam+0x70>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002cd9 	.word	0x08002cd9
 8002ccc:	08002cdf 	.word	0x08002cdf
 8002cd0:	08002cd9 	.word	0x08002cd9
 8002cd4:	08002cf1 	.word	0x08002cf1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      break;
 8002cdc:	e030      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d025      	beq.n	8002d36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cee:	e022      	b.n	8002d36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cf8:	d11f      	bne.n	8002d3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cfe:	e01c      	b.n	8002d3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d903      	bls.n	8002d0e <DMA_CheckFifoParam+0xb6>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d003      	beq.n	8002d14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d0c:	e018      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
      break;
 8002d12:	e015      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00e      	beq.n	8002d3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      break;
 8002d24:	e00b      	b.n	8002d3e <DMA_CheckFifoParam+0xe6>
      break;
 8002d26:	bf00      	nop
 8002d28:	e00a      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e008      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      break;
 8002d2e:	bf00      	nop
 8002d30:	e006      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      break;
 8002d32:	bf00      	nop
 8002d34:	e004      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      break;
 8002d36:	bf00      	nop
 8002d38:	e002      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d3a:	bf00      	nop
 8002d3c:	e000      	b.n	8002d40 <DMA_CheckFifoParam+0xe8>
      break;
 8002d3e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop

08002d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	e16b      	b.n	8003044 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	f040 815a 	bne.w	800303e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d005      	beq.n	8002da2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d130      	bne.n	8002e04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	2203      	movs	r2, #3
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd8:	2201      	movs	r2, #1
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 0201 	and.w	r2, r3, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d017      	beq.n	8002e40 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	2203      	movs	r2, #3
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d123      	bne.n	8002e94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	08da      	lsrs	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3208      	adds	r2, #8
 8002e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	220f      	movs	r2, #15
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	08da      	lsrs	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3208      	adds	r2, #8
 8002e8e:	69b9      	ldr	r1, [r7, #24]
 8002e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 0203 	and.w	r2, r3, #3
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80b4 	beq.w	800303e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	4b60      	ldr	r3, [pc, #384]	; (800305c <HAL_GPIO_Init+0x30c>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	4a5f      	ldr	r2, [pc, #380]	; (800305c <HAL_GPIO_Init+0x30c>)
 8002ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee6:	4b5d      	ldr	r3, [pc, #372]	; (800305c <HAL_GPIO_Init+0x30c>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ef2:	4a5b      	ldr	r2, [pc, #364]	; (8003060 <HAL_GPIO_Init+0x310>)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	3302      	adds	r3, #2
 8002efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	220f      	movs	r2, #15
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a52      	ldr	r2, [pc, #328]	; (8003064 <HAL_GPIO_Init+0x314>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d02b      	beq.n	8002f76 <HAL_GPIO_Init+0x226>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a51      	ldr	r2, [pc, #324]	; (8003068 <HAL_GPIO_Init+0x318>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d025      	beq.n	8002f72 <HAL_GPIO_Init+0x222>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a50      	ldr	r2, [pc, #320]	; (800306c <HAL_GPIO_Init+0x31c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d01f      	beq.n	8002f6e <HAL_GPIO_Init+0x21e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4f      	ldr	r2, [pc, #316]	; (8003070 <HAL_GPIO_Init+0x320>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d019      	beq.n	8002f6a <HAL_GPIO_Init+0x21a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4e      	ldr	r2, [pc, #312]	; (8003074 <HAL_GPIO_Init+0x324>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <HAL_GPIO_Init+0x216>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4d      	ldr	r2, [pc, #308]	; (8003078 <HAL_GPIO_Init+0x328>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00d      	beq.n	8002f62 <HAL_GPIO_Init+0x212>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4c      	ldr	r2, [pc, #304]	; (800307c <HAL_GPIO_Init+0x32c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <HAL_GPIO_Init+0x20e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4b      	ldr	r2, [pc, #300]	; (8003080 <HAL_GPIO_Init+0x330>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d101      	bne.n	8002f5a <HAL_GPIO_Init+0x20a>
 8002f56:	2307      	movs	r3, #7
 8002f58:	e00e      	b.n	8002f78 <HAL_GPIO_Init+0x228>
 8002f5a:	2308      	movs	r3, #8
 8002f5c:	e00c      	b.n	8002f78 <HAL_GPIO_Init+0x228>
 8002f5e:	2306      	movs	r3, #6
 8002f60:	e00a      	b.n	8002f78 <HAL_GPIO_Init+0x228>
 8002f62:	2305      	movs	r3, #5
 8002f64:	e008      	b.n	8002f78 <HAL_GPIO_Init+0x228>
 8002f66:	2304      	movs	r3, #4
 8002f68:	e006      	b.n	8002f78 <HAL_GPIO_Init+0x228>
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e004      	b.n	8002f78 <HAL_GPIO_Init+0x228>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e002      	b.n	8002f78 <HAL_GPIO_Init+0x228>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_GPIO_Init+0x228>
 8002f76:	2300      	movs	r3, #0
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	f002 0203 	and.w	r2, r2, #3
 8002f7e:	0092      	lsls	r2, r2, #2
 8002f80:	4093      	lsls	r3, r2
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f88:	4935      	ldr	r1, [pc, #212]	; (8003060 <HAL_GPIO_Init+0x310>)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	089b      	lsrs	r3, r3, #2
 8002f8e:	3302      	adds	r3, #2
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f96:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <HAL_GPIO_Init+0x334>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fba:	4a32      	ldr	r2, [pc, #200]	; (8003084 <HAL_GPIO_Init+0x334>)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fc0:	4b30      	ldr	r3, [pc, #192]	; (8003084 <HAL_GPIO_Init+0x334>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fe4:	4a27      	ldr	r2, [pc, #156]	; (8003084 <HAL_GPIO_Init+0x334>)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fea:	4b26      	ldr	r3, [pc, #152]	; (8003084 <HAL_GPIO_Init+0x334>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800300e:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <HAL_GPIO_Init+0x334>)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <HAL_GPIO_Init+0x334>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003038:	4a12      	ldr	r2, [pc, #72]	; (8003084 <HAL_GPIO_Init+0x334>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3301      	adds	r3, #1
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	2b0f      	cmp	r3, #15
 8003048:	f67f ae90 	bls.w	8002d6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	3724      	adds	r7, #36	; 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	40013800 	.word	0x40013800
 8003064:	40020000 	.word	0x40020000
 8003068:	40020400 	.word	0x40020400
 800306c:	40020800 	.word	0x40020800
 8003070:	40020c00 	.word	0x40020c00
 8003074:	40021000 	.word	0x40021000
 8003078:	40021400 	.word	0x40021400
 800307c:	40021800 	.word	0x40021800
 8003080:	40021c00 	.word	0x40021c00
 8003084:	40013c00 	.word	0x40013c00

08003088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e264      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d075      	beq.n	8003192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030a6:	4ba3      	ldr	r3, [pc, #652]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d00c      	beq.n	80030cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b2:	4ba0      	ldr	r3, [pc, #640]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d112      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030be:	4b9d      	ldr	r3, [pc, #628]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ca:	d10b      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	4b99      	ldr	r3, [pc, #612]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d05b      	beq.n	8003190 <HAL_RCC_OscConfig+0x108>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d157      	bne.n	8003190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e23f      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ec:	d106      	bne.n	80030fc <HAL_RCC_OscConfig+0x74>
 80030ee:	4b91      	ldr	r3, [pc, #580]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a90      	ldr	r2, [pc, #576]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e01d      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x98>
 8003106:	4b8b      	ldr	r3, [pc, #556]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a8a      	ldr	r2, [pc, #552]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b88      	ldr	r3, [pc, #544]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a87      	ldr	r2, [pc, #540]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 8003120:	4b84      	ldr	r3, [pc, #528]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a83      	ldr	r2, [pc, #524]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 8003126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	4b81      	ldr	r3, [pc, #516]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a80      	ldr	r2, [pc, #512]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 8003132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d013      	beq.n	8003168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fc1c 	bl	800197c <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003148:	f7fe fc18 	bl	800197c <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e204      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	4b76      	ldr	r3, [pc, #472]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0xc0>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe fc08 	bl	800197c <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003170:	f7fe fc04 	bl	800197c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e1f0      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	4b6c      	ldr	r3, [pc, #432]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0xe8>
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d063      	beq.n	8003266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800319e:	4b65      	ldr	r3, [pc, #404]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031aa:	4b62      	ldr	r3, [pc, #392]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d11c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b6:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d116      	bne.n	80031f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	4b5c      	ldr	r3, [pc, #368]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_RCC_OscConfig+0x152>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d001      	beq.n	80031da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e1c4      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031da:	4b56      	ldr	r3, [pc, #344]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4952      	ldr	r1, [pc, #328]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	e03a      	b.n	8003266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f8:	4b4f      	ldr	r3, [pc, #316]	; (8003338 <HAL_RCC_OscConfig+0x2b0>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7fe fbbd 	bl	800197c <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003206:	f7fe fbb9 	bl	800197c <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e1a5      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	4b46      	ldr	r3, [pc, #280]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b43      	ldr	r3, [pc, #268]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4940      	ldr	r1, [pc, #256]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
 8003238:	e015      	b.n	8003266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323a:	4b3f      	ldr	r3, [pc, #252]	; (8003338 <HAL_RCC_OscConfig+0x2b0>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe fb9c 	bl	800197c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003248:	f7fe fb98 	bl	800197c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e184      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	4b36      	ldr	r3, [pc, #216]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d030      	beq.n	80032d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327a:	4b30      	ldr	r3, [pc, #192]	; (800333c <HAL_RCC_OscConfig+0x2b4>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fe fb7c 	bl	800197c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003288:	f7fe fb78 	bl	800197c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e164      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 800329c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x200>
 80032a6:	e015      	b.n	80032d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a8:	4b24      	ldr	r3, [pc, #144]	; (800333c <HAL_RCC_OscConfig+0x2b4>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ae:	f7fe fb65 	bl	800197c <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b6:	f7fe fb61 	bl	800197c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e14d      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c8:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80032ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f0      	bne.n	80032b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80a0 	beq.w	8003422 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e2:	2300      	movs	r3, #0
 80032e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032e6:	4b13      	ldr	r3, [pc, #76]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10f      	bne.n	8003312 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	4a0e      	ldr	r2, [pc, #56]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003300:	6413      	str	r3, [r2, #64]	; 0x40
 8003302:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800330e:	2301      	movs	r3, #1
 8003310:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <HAL_RCC_OscConfig+0x2b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d121      	bne.n	8003362 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800331e:	4b08      	ldr	r3, [pc, #32]	; (8003340 <HAL_RCC_OscConfig+0x2b8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a07      	ldr	r2, [pc, #28]	; (8003340 <HAL_RCC_OscConfig+0x2b8>)
 8003324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332a:	f7fe fb27 	bl	800197c <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	e011      	b.n	8003356 <HAL_RCC_OscConfig+0x2ce>
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	42470000 	.word	0x42470000
 800333c:	42470e80 	.word	0x42470e80
 8003340:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003344:	f7fe fb1a 	bl	800197c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e106      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003356:	4b85      	ldr	r3, [pc, #532]	; (800356c <HAL_RCC_OscConfig+0x4e4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d106      	bne.n	8003378 <HAL_RCC_OscConfig+0x2f0>
 800336a:	4b81      	ldr	r3, [pc, #516]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	4a80      	ldr	r2, [pc, #512]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	6713      	str	r3, [r2, #112]	; 0x70
 8003376:	e01c      	b.n	80033b2 <HAL_RCC_OscConfig+0x32a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b05      	cmp	r3, #5
 800337e:	d10c      	bne.n	800339a <HAL_RCC_OscConfig+0x312>
 8003380:	4b7b      	ldr	r3, [pc, #492]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a7a      	ldr	r2, [pc, #488]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 8003386:	f043 0304 	orr.w	r3, r3, #4
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
 800338c:	4b78      	ldr	r3, [pc, #480]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	4a77      	ldr	r2, [pc, #476]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6713      	str	r3, [r2, #112]	; 0x70
 8003398:	e00b      	b.n	80033b2 <HAL_RCC_OscConfig+0x32a>
 800339a:	4b75      	ldr	r3, [pc, #468]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a74      	ldr	r2, [pc, #464]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
 80033a6:	4b72      	ldr	r3, [pc, #456]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a71      	ldr	r2, [pc, #452]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 80033ac:	f023 0304 	bic.w	r3, r3, #4
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d015      	beq.n	80033e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe fadf 	bl	800197c <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fe fadb 	bl	800197c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e0c5      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d8:	4b65      	ldr	r3, [pc, #404]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ee      	beq.n	80033c2 <HAL_RCC_OscConfig+0x33a>
 80033e4:	e014      	b.n	8003410 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e6:	f7fe fac9 	bl	800197c <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ec:	e00a      	b.n	8003404 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ee:	f7fe fac5 	bl	800197c <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e0af      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003404:	4b5a      	ldr	r3, [pc, #360]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1ee      	bne.n	80033ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003410:	7dfb      	ldrb	r3, [r7, #23]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d105      	bne.n	8003422 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003416:	4b56      	ldr	r3, [pc, #344]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	4a55      	ldr	r2, [pc, #340]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 800341c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003420:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 809b 	beq.w	8003562 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800342c:	4b50      	ldr	r3, [pc, #320]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b08      	cmp	r3, #8
 8003436:	d05c      	beq.n	80034f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d141      	bne.n	80034c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003440:	4b4c      	ldr	r3, [pc, #304]	; (8003574 <HAL_RCC_OscConfig+0x4ec>)
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003446:	f7fe fa99 	bl	800197c <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344e:	f7fe fa95 	bl	800197c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e081      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003460:	4b43      	ldr	r3, [pc, #268]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f0      	bne.n	800344e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	019b      	lsls	r3, r3, #6
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	085b      	lsrs	r3, r3, #1
 8003484:	3b01      	subs	r3, #1
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	061b      	lsls	r3, r3, #24
 8003490:	4937      	ldr	r1, [pc, #220]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003496:	4b37      	ldr	r3, [pc, #220]	; (8003574 <HAL_RCC_OscConfig+0x4ec>)
 8003498:	2201      	movs	r2, #1
 800349a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fe fa6e 	bl	800197c <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fe fa6a 	bl	800197c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e056      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b6:	4b2e      	ldr	r3, [pc, #184]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0x41c>
 80034c2:	e04e      	b.n	8003562 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c4:	4b2b      	ldr	r3, [pc, #172]	; (8003574 <HAL_RCC_OscConfig+0x4ec>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7fe fa57 	bl	800197c <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d2:	f7fe fa53 	bl	800197c <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e03f      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e4:	4b22      	ldr	r3, [pc, #136]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f0      	bne.n	80034d2 <HAL_RCC_OscConfig+0x44a>
 80034f0:	e037      	b.n	8003562 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e032      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034fe:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <HAL_RCC_OscConfig+0x4e8>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d028      	beq.n	800355e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d121      	bne.n	800355e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d11a      	bne.n	800355e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800352e:	4013      	ands	r3, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003534:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003536:	4293      	cmp	r3, r2
 8003538:	d111      	bne.n	800355e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	085b      	lsrs	r3, r3, #1
 8003546:	3b01      	subs	r3, #1
 8003548:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800354a:	429a      	cmp	r2, r3
 800354c:	d107      	bne.n	800355e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d001      	beq.n	8003562 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40007000 	.word	0x40007000
 8003570:	40023800 	.word	0x40023800
 8003574:	42470060 	.word	0x42470060

08003578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0cc      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800358c:	4b68      	ldr	r3, [pc, #416]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d90c      	bls.n	80035b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b65      	ldr	r3, [pc, #404]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a2:	4b63      	ldr	r3, [pc, #396]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0b8      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d020      	beq.n	8003602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035cc:	4b59      	ldr	r3, [pc, #356]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	4a58      	ldr	r2, [pc, #352]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035e4:	4b53      	ldr	r3, [pc, #332]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a52      	ldr	r2, [pc, #328]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f0:	4b50      	ldr	r3, [pc, #320]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	494d      	ldr	r1, [pc, #308]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d044      	beq.n	8003698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d119      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e07f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d003      	beq.n	8003636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003632:	2b03      	cmp	r3, #3
 8003634:	d107      	bne.n	8003646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003636:	4b3f      	ldr	r3, [pc, #252]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e06f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003646:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e067      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003656:	4b37      	ldr	r3, [pc, #220]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f023 0203 	bic.w	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4934      	ldr	r1, [pc, #208]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	4313      	orrs	r3, r2
 8003666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003668:	f7fe f988 	bl	800197c <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366e:	e00a      	b.n	8003686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003670:	f7fe f984 	bl	800197c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e04f      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003686:	4b2b      	ldr	r3, [pc, #172]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 020c 	and.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	429a      	cmp	r2, r3
 8003696:	d1eb      	bne.n	8003670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003698:	4b25      	ldr	r3, [pc, #148]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d20c      	bcs.n	80036c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b22      	ldr	r3, [pc, #136]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b20      	ldr	r3, [pc, #128]	; (8003730 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e032      	b.n	8003726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d008      	beq.n	80036de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036cc:	4b19      	ldr	r3, [pc, #100]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4916      	ldr	r1, [pc, #88]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ea:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	490e      	ldr	r1, [pc, #56]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036fe:	f000 f821 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8003702:	4602      	mov	r2, r0
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	490a      	ldr	r1, [pc, #40]	; (8003738 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	5ccb      	ldrb	r3, [r1, r3]
 8003712:	fa22 f303 	lsr.w	r3, r2, r3
 8003716:	4a09      	ldr	r2, [pc, #36]	; (800373c <HAL_RCC_ClockConfig+0x1c4>)
 8003718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800371a:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCC_ClockConfig+0x1c8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe f8e8 	bl	80018f4 <HAL_InitTick>

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40023c00 	.word	0x40023c00
 8003734:	40023800 	.word	0x40023800
 8003738:	080075c8 	.word	0x080075c8
 800373c:	20000000 	.word	0x20000000
 8003740:	20000004 	.word	0x20000004

08003744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003748:	b084      	sub	sp, #16
 800374a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	2300      	movs	r3, #0
 8003756:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800375c:	4b67      	ldr	r3, [pc, #412]	; (80038fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b08      	cmp	r3, #8
 8003766:	d00d      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x40>
 8003768:	2b08      	cmp	r3, #8
 800376a:	f200 80bd 	bhi.w	80038e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x34>
 8003772:	2b04      	cmp	r3, #4
 8003774:	d003      	beq.n	800377e <HAL_RCC_GetSysClockFreq+0x3a>
 8003776:	e0b7      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4b61      	ldr	r3, [pc, #388]	; (8003900 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800377a:	60bb      	str	r3, [r7, #8]
       break;
 800377c:	e0b7      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800377e:	4b61      	ldr	r3, [pc, #388]	; (8003904 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003780:	60bb      	str	r3, [r7, #8]
      break;
 8003782:	e0b4      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003784:	4b5d      	ldr	r3, [pc, #372]	; (80038fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800378c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800378e:	4b5b      	ldr	r3, [pc, #364]	; (80038fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d04d      	beq.n	8003836 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379a:	4b58      	ldr	r3, [pc, #352]	; (80038fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	099b      	lsrs	r3, r3, #6
 80037a0:	461a      	mov	r2, r3
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037aa:	f04f 0100 	mov.w	r1, #0
 80037ae:	ea02 0800 	and.w	r8, r2, r0
 80037b2:	ea03 0901 	and.w	r9, r3, r1
 80037b6:	4640      	mov	r0, r8
 80037b8:	4649      	mov	r1, r9
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	014b      	lsls	r3, r1, #5
 80037c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037c8:	0142      	lsls	r2, r0, #5
 80037ca:	4610      	mov	r0, r2
 80037cc:	4619      	mov	r1, r3
 80037ce:	ebb0 0008 	subs.w	r0, r0, r8
 80037d2:	eb61 0109 	sbc.w	r1, r1, r9
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	018b      	lsls	r3, r1, #6
 80037e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037e4:	0182      	lsls	r2, r0, #6
 80037e6:	1a12      	subs	r2, r2, r0
 80037e8:	eb63 0301 	sbc.w	r3, r3, r1
 80037ec:	f04f 0000 	mov.w	r0, #0
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	00d9      	lsls	r1, r3, #3
 80037f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037fa:	00d0      	lsls	r0, r2, #3
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	eb12 0208 	adds.w	r2, r2, r8
 8003804:	eb43 0309 	adc.w	r3, r3, r9
 8003808:	f04f 0000 	mov.w	r0, #0
 800380c:	f04f 0100 	mov.w	r1, #0
 8003810:	0259      	lsls	r1, r3, #9
 8003812:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003816:	0250      	lsls	r0, r2, #9
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	461a      	mov	r2, r3
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	f7fd fa0e 	bl	8000c48 <__aeabi_uldivmod>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4613      	mov	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e04a      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003836:	4b31      	ldr	r3, [pc, #196]	; (80038fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	099b      	lsrs	r3, r3, #6
 800383c:	461a      	mov	r2, r3
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	ea02 0400 	and.w	r4, r2, r0
 800384e:	ea03 0501 	and.w	r5, r3, r1
 8003852:	4620      	mov	r0, r4
 8003854:	4629      	mov	r1, r5
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	014b      	lsls	r3, r1, #5
 8003860:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003864:	0142      	lsls	r2, r0, #5
 8003866:	4610      	mov	r0, r2
 8003868:	4619      	mov	r1, r3
 800386a:	1b00      	subs	r0, r0, r4
 800386c:	eb61 0105 	sbc.w	r1, r1, r5
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	018b      	lsls	r3, r1, #6
 800387a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800387e:	0182      	lsls	r2, r0, #6
 8003880:	1a12      	subs	r2, r2, r0
 8003882:	eb63 0301 	sbc.w	r3, r3, r1
 8003886:	f04f 0000 	mov.w	r0, #0
 800388a:	f04f 0100 	mov.w	r1, #0
 800388e:	00d9      	lsls	r1, r3, #3
 8003890:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003894:	00d0      	lsls	r0, r2, #3
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	1912      	adds	r2, r2, r4
 800389c:	eb45 0303 	adc.w	r3, r5, r3
 80038a0:	f04f 0000 	mov.w	r0, #0
 80038a4:	f04f 0100 	mov.w	r1, #0
 80038a8:	0299      	lsls	r1, r3, #10
 80038aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038ae:	0290      	lsls	r0, r2, #10
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4610      	mov	r0, r2
 80038b6:	4619      	mov	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f04f 0300 	mov.w	r3, #0
 80038c0:	f7fd f9c2 	bl	8000c48 <__aeabi_uldivmod>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4613      	mov	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	3301      	adds	r3, #1
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	60bb      	str	r3, [r7, #8]
      break;
 80038e6:	e002      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038ea:	60bb      	str	r3, [r7, #8]
      break;
 80038ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ee:	68bb      	ldr	r3, [r7, #8]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800
 8003900:	00f42400 	.word	0x00f42400
 8003904:	007a1200 	.word	0x007a1200

08003908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800390c:	4b03      	ldr	r3, [pc, #12]	; (800391c <HAL_RCC_GetHCLKFreq+0x14>)
 800390e:	681b      	ldr	r3, [r3, #0]
}
 8003910:	4618      	mov	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000000 	.word	0x20000000

08003920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003924:	f7ff fff0 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 8003928:	4602      	mov	r2, r0
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	0a9b      	lsrs	r3, r3, #10
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	4903      	ldr	r1, [pc, #12]	; (8003944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003936:	5ccb      	ldrb	r3, [r1, r3]
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40023800 	.word	0x40023800
 8003944:	080075d8 	.word	0x080075d8

08003948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800394c:	f7ff ffdc 	bl	8003908 <HAL_RCC_GetHCLKFreq>
 8003950:	4602      	mov	r2, r0
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	0b5b      	lsrs	r3, r3, #13
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4903      	ldr	r1, [pc, #12]	; (800396c <HAL_RCC_GetPCLK2Freq+0x24>)
 800395e:	5ccb      	ldrb	r3, [r1, r3]
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40023800 	.word	0x40023800
 800396c:	080075d8 	.word	0x080075d8

08003970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e041      	b.n	8003a06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fd fec6 	bl	8001728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f000 fb4e 	bl	8004050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d001      	beq.n	8003a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e04e      	b.n	8003ac6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a23      	ldr	r2, [pc, #140]	; (8003ad4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d022      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x80>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a52:	d01d      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x80>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1f      	ldr	r2, [pc, #124]	; (8003ad8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d018      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x80>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1e      	ldr	r2, [pc, #120]	; (8003adc <HAL_TIM_Base_Start_IT+0xcc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d013      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x80>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1c      	ldr	r2, [pc, #112]	; (8003ae0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00e      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x80>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1b      	ldr	r2, [pc, #108]	; (8003ae4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d009      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x80>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a19      	ldr	r2, [pc, #100]	; (8003ae8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d004      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x80>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a18      	ldr	r2, [pc, #96]	; (8003aec <HAL_TIM_Base_Start_IT+0xdc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d111      	bne.n	8003ab4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b06      	cmp	r3, #6
 8003aa0:	d010      	beq.n	8003ac4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab2:	e007      	b.n	8003ac4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40010000 	.word	0x40010000
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40000800 	.word	0x40000800
 8003ae0:	40000c00 	.word	0x40000c00
 8003ae4:	40010400 	.word	0x40010400
 8003ae8:	40014000 	.word	0x40014000
 8003aec:	40001800 	.word	0x40001800

08003af0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e041      	b.n	8003b86 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f839 	bl	8003b8e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f000 fa8e 	bl	8004050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d122      	bne.n	8003bfe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d11b      	bne.n	8003bfe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f06f 0202 	mvn.w	r2, #2
 8003bce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 fa15 	bl	8004014 <HAL_TIM_IC_CaptureCallback>
 8003bea:	e005      	b.n	8003bf8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fa07 	bl	8004000 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fa18 	bl	8004028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d122      	bne.n	8003c52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d11b      	bne.n	8003c52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f06f 0204 	mvn.w	r2, #4
 8003c22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f9eb 	bl	8004014 <HAL_TIM_IC_CaptureCallback>
 8003c3e:	e005      	b.n	8003c4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f9dd 	bl	8004000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f9ee 	bl	8004028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d122      	bne.n	8003ca6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d11b      	bne.n	8003ca6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f06f 0208 	mvn.w	r2, #8
 8003c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f9c1 	bl	8004014 <HAL_TIM_IC_CaptureCallback>
 8003c92:	e005      	b.n	8003ca0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f9b3 	bl	8004000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f9c4 	bl	8004028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d122      	bne.n	8003cfa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d11b      	bne.n	8003cfa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f06f 0210 	mvn.w	r2, #16
 8003cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2208      	movs	r2, #8
 8003cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f997 	bl	8004014 <HAL_TIM_IC_CaptureCallback>
 8003ce6:	e005      	b.n	8003cf4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f989 	bl	8004000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f99a 	bl	8004028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d10e      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d107      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f06f 0201 	mvn.w	r2, #1
 8003d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f963 	bl	8003fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d30:	2b80      	cmp	r3, #128	; 0x80
 8003d32:	d10e      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b80      	cmp	r3, #128	; 0x80
 8003d40:	d107      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fcef 	bl	8004730 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5c:	2b40      	cmp	r3, #64	; 0x40
 8003d5e:	d10e      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	d107      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f95f 	bl	800403c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d10e      	bne.n	8003daa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d107      	bne.n	8003daa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f06f 0220 	mvn.w	r2, #32
 8003da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fcb9 	bl	800471c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_TIM_OC_ConfigChannel+0x1a>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e046      	b.n	8003e5c <HAL_TIM_OC_ConfigChannel+0xa8>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b0c      	cmp	r3, #12
 8003dda:	d839      	bhi.n	8003e50 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003e19 	.word	0x08003e19
 8003de8:	08003e51 	.word	0x08003e51
 8003dec:	08003e51 	.word	0x08003e51
 8003df0:	08003e51 	.word	0x08003e51
 8003df4:	08003e27 	.word	0x08003e27
 8003df8:	08003e51 	.word	0x08003e51
 8003dfc:	08003e51 	.word	0x08003e51
 8003e00:	08003e51 	.word	0x08003e51
 8003e04:	08003e35 	.word	0x08003e35
 8003e08:	08003e51 	.word	0x08003e51
 8003e0c:	08003e51 	.word	0x08003e51
 8003e10:	08003e51 	.word	0x08003e51
 8003e14:	08003e43 	.word	0x08003e43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f9b6 	bl	8004190 <TIM_OC1_SetConfig>
      break;
 8003e24:	e015      	b.n	8003e52 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fa1f 	bl	8004270 <TIM_OC2_SetConfig>
      break;
 8003e32:	e00e      	b.n	8003e52 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fa8e 	bl	800435c <TIM_OC3_SetConfig>
      break;
 8003e40:	e007      	b.n	8003e52 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fafb 	bl	8004444 <TIM_OC4_SetConfig>
      break;
 8003e4e:	e000      	b.n	8003e52 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003e50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_TIM_ConfigClockSource+0x18>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e0b3      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x180>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ea2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb4:	d03e      	beq.n	8003f34 <HAL_TIM_ConfigClockSource+0xd0>
 8003eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eba:	f200 8087 	bhi.w	8003fcc <HAL_TIM_ConfigClockSource+0x168>
 8003ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec2:	f000 8085 	beq.w	8003fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eca:	d87f      	bhi.n	8003fcc <HAL_TIM_ConfigClockSource+0x168>
 8003ecc:	2b70      	cmp	r3, #112	; 0x70
 8003ece:	d01a      	beq.n	8003f06 <HAL_TIM_ConfigClockSource+0xa2>
 8003ed0:	2b70      	cmp	r3, #112	; 0x70
 8003ed2:	d87b      	bhi.n	8003fcc <HAL_TIM_ConfigClockSource+0x168>
 8003ed4:	2b60      	cmp	r3, #96	; 0x60
 8003ed6:	d050      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x116>
 8003ed8:	2b60      	cmp	r3, #96	; 0x60
 8003eda:	d877      	bhi.n	8003fcc <HAL_TIM_ConfigClockSource+0x168>
 8003edc:	2b50      	cmp	r3, #80	; 0x50
 8003ede:	d03c      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0xf6>
 8003ee0:	2b50      	cmp	r3, #80	; 0x50
 8003ee2:	d873      	bhi.n	8003fcc <HAL_TIM_ConfigClockSource+0x168>
 8003ee4:	2b40      	cmp	r3, #64	; 0x40
 8003ee6:	d058      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x136>
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	d86f      	bhi.n	8003fcc <HAL_TIM_ConfigClockSource+0x168>
 8003eec:	2b30      	cmp	r3, #48	; 0x30
 8003eee:	d064      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0x156>
 8003ef0:	2b30      	cmp	r3, #48	; 0x30
 8003ef2:	d86b      	bhi.n	8003fcc <HAL_TIM_ConfigClockSource+0x168>
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	d060      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0x156>
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d867      	bhi.n	8003fcc <HAL_TIM_ConfigClockSource+0x168>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d05c      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0x156>
 8003f00:	2b10      	cmp	r3, #16
 8003f02:	d05a      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003f04:	e062      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6899      	ldr	r1, [r3, #8]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f000 fb65 	bl	80045e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f28:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	609a      	str	r2, [r3, #8]
      break;
 8003f32:	e04e      	b.n	8003fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	6899      	ldr	r1, [r3, #8]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f000 fb4e 	bl	80045e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f56:	609a      	str	r2, [r3, #8]
      break;
 8003f58:	e03b      	b.n	8003fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6859      	ldr	r1, [r3, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f000 fac2 	bl	80044f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2150      	movs	r1, #80	; 0x50
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fb1b 	bl	80045ae <TIM_ITRx_SetConfig>
      break;
 8003f78:	e02b      	b.n	8003fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6859      	ldr	r1, [r3, #4]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	461a      	mov	r2, r3
 8003f88:	f000 fae1 	bl	800454e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2160      	movs	r1, #96	; 0x60
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fb0b 	bl	80045ae <TIM_ITRx_SetConfig>
      break;
 8003f98:	e01b      	b.n	8003fd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6859      	ldr	r1, [r3, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f000 faa2 	bl	80044f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2140      	movs	r1, #64	; 0x40
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fafb 	bl	80045ae <TIM_ITRx_SetConfig>
      break;
 8003fb8:	e00b      	b.n	8003fd2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	f000 faf2 	bl	80045ae <TIM_ITRx_SetConfig>
        break;
 8003fca:	e002      	b.n	8003fd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fcc:	bf00      	nop
 8003fce:	e000      	b.n	8003fd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003fd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a40      	ldr	r2, [pc, #256]	; (8004164 <TIM_Base_SetConfig+0x114>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d013      	beq.n	8004090 <TIM_Base_SetConfig+0x40>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406e:	d00f      	beq.n	8004090 <TIM_Base_SetConfig+0x40>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a3d      	ldr	r2, [pc, #244]	; (8004168 <TIM_Base_SetConfig+0x118>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00b      	beq.n	8004090 <TIM_Base_SetConfig+0x40>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a3c      	ldr	r2, [pc, #240]	; (800416c <TIM_Base_SetConfig+0x11c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d007      	beq.n	8004090 <TIM_Base_SetConfig+0x40>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a3b      	ldr	r2, [pc, #236]	; (8004170 <TIM_Base_SetConfig+0x120>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d003      	beq.n	8004090 <TIM_Base_SetConfig+0x40>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a3a      	ldr	r2, [pc, #232]	; (8004174 <TIM_Base_SetConfig+0x124>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d108      	bne.n	80040a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a2f      	ldr	r2, [pc, #188]	; (8004164 <TIM_Base_SetConfig+0x114>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d02b      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b0:	d027      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a2c      	ldr	r2, [pc, #176]	; (8004168 <TIM_Base_SetConfig+0x118>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d023      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a2b      	ldr	r2, [pc, #172]	; (800416c <TIM_Base_SetConfig+0x11c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01f      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <TIM_Base_SetConfig+0x120>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01b      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a29      	ldr	r2, [pc, #164]	; (8004174 <TIM_Base_SetConfig+0x124>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d017      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a28      	ldr	r2, [pc, #160]	; (8004178 <TIM_Base_SetConfig+0x128>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d013      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a27      	ldr	r2, [pc, #156]	; (800417c <TIM_Base_SetConfig+0x12c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00f      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a26      	ldr	r2, [pc, #152]	; (8004180 <TIM_Base_SetConfig+0x130>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00b      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a25      	ldr	r2, [pc, #148]	; (8004184 <TIM_Base_SetConfig+0x134>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d007      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a24      	ldr	r2, [pc, #144]	; (8004188 <TIM_Base_SetConfig+0x138>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <TIM_Base_SetConfig+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a23      	ldr	r2, [pc, #140]	; (800418c <TIM_Base_SetConfig+0x13c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d108      	bne.n	8004114 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <TIM_Base_SetConfig+0x114>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_Base_SetConfig+0xf8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a0c      	ldr	r2, [pc, #48]	; (8004174 <TIM_Base_SetConfig+0x124>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d103      	bne.n	8004150 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	615a      	str	r2, [r3, #20]
}
 8004156:	bf00      	nop
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800
 8004170:	40000c00 	.word	0x40000c00
 8004174:	40010400 	.word	0x40010400
 8004178:	40014000 	.word	0x40014000
 800417c:	40014400 	.word	0x40014400
 8004180:	40014800 	.word	0x40014800
 8004184:	40001800 	.word	0x40001800
 8004188:	40001c00 	.word	0x40001c00
 800418c:	40002000 	.word	0x40002000

08004190 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f023 0201 	bic.w	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 0303 	bic.w	r3, r3, #3
 80041c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f023 0302 	bic.w	r3, r3, #2
 80041d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a20      	ldr	r2, [pc, #128]	; (8004268 <TIM_OC1_SetConfig+0xd8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_OC1_SetConfig+0x64>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a1f      	ldr	r2, [pc, #124]	; (800426c <TIM_OC1_SetConfig+0xdc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d10c      	bne.n	800420e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f023 0308 	bic.w	r3, r3, #8
 80041fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f023 0304 	bic.w	r3, r3, #4
 800420c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a15      	ldr	r2, [pc, #84]	; (8004268 <TIM_OC1_SetConfig+0xd8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_OC1_SetConfig+0x8e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a14      	ldr	r2, [pc, #80]	; (800426c <TIM_OC1_SetConfig+0xdc>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d111      	bne.n	8004242 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800422c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	621a      	str	r2, [r3, #32]
}
 800425c:	bf00      	nop
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	40010000 	.word	0x40010000
 800426c:	40010400 	.word	0x40010400

08004270 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f023 0210 	bic.w	r2, r3, #16
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0320 	bic.w	r3, r3, #32
 80042ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a22      	ldr	r2, [pc, #136]	; (8004354 <TIM_OC2_SetConfig+0xe4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <TIM_OC2_SetConfig+0x68>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a21      	ldr	r2, [pc, #132]	; (8004358 <TIM_OC2_SetConfig+0xe8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d10d      	bne.n	80042f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a17      	ldr	r2, [pc, #92]	; (8004354 <TIM_OC2_SetConfig+0xe4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_OC2_SetConfig+0x94>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a16      	ldr	r2, [pc, #88]	; (8004358 <TIM_OC2_SetConfig+0xe8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d113      	bne.n	800432c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800430a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	621a      	str	r2, [r3, #32]
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40010000 	.word	0x40010000
 8004358:	40010400 	.word	0x40010400

0800435c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a21      	ldr	r2, [pc, #132]	; (800443c <TIM_OC3_SetConfig+0xe0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d003      	beq.n	80043c2 <TIM_OC3_SetConfig+0x66>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a20      	ldr	r2, [pc, #128]	; (8004440 <TIM_OC3_SetConfig+0xe4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d10d      	bne.n	80043de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a16      	ldr	r2, [pc, #88]	; (800443c <TIM_OC3_SetConfig+0xe0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d003      	beq.n	80043ee <TIM_OC3_SetConfig+0x92>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a15      	ldr	r2, [pc, #84]	; (8004440 <TIM_OC3_SetConfig+0xe4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d113      	bne.n	8004416 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	621a      	str	r2, [r3, #32]
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40010000 	.word	0x40010000
 8004440:	40010400 	.word	0x40010400

08004444 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800448e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	031b      	lsls	r3, r3, #12
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <TIM_OC4_SetConfig+0xa4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <TIM_OC4_SetConfig+0x68>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a11      	ldr	r2, [pc, #68]	; (80044ec <TIM_OC4_SetConfig+0xa8>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d109      	bne.n	80044c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	019b      	lsls	r3, r3, #6
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	621a      	str	r2, [r3, #32]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40010000 	.word	0x40010000
 80044ec:	40010400 	.word	0x40010400

080044f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	f023 0201 	bic.w	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800451a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f023 030a 	bic.w	r3, r3, #10
 800452c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800454e:	b480      	push	{r7}
 8004550:	b087      	sub	sp, #28
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	f023 0210 	bic.w	r2, r3, #16
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	031b      	lsls	r3, r3, #12
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800458a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b085      	sub	sp, #20
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f043 0307 	orr.w	r3, r3, #7
 80045d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	609a      	str	r2, [r3, #8]
}
 80045d8:	bf00      	nop
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	021a      	lsls	r2, r3, #8
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	431a      	orrs	r2, r3
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4313      	orrs	r3, r2
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	bf00      	nop
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004638:	2302      	movs	r3, #2
 800463a:	e05a      	b.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a21      	ldr	r2, [pc, #132]	; (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d022      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004688:	d01d      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a1d      	ldr	r2, [pc, #116]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d018      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1b      	ldr	r2, [pc, #108]	; (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1a      	ldr	r2, [pc, #104]	; (800470c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00e      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a18      	ldr	r2, [pc, #96]	; (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a17      	ldr	r2, [pc, #92]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a15      	ldr	r2, [pc, #84]	; (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d10c      	bne.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40010000 	.word	0x40010000
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800
 800470c:	40000c00 	.word	0x40000c00
 8004710:	40010400 	.word	0x40010400
 8004714:	40014000 	.word	0x40014000
 8004718:	40001800 	.word	0x40001800

0800471c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e03f      	b.n	80047d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fd f82e 	bl	80017cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2224      	movs	r2, #36	; 0x24
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f829 	bl	80047e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800479c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e4:	b09f      	sub	sp, #124	; 0x7c
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f6:	68d9      	ldr	r1, [r3, #12]
 80047f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	ea40 0301 	orr.w	r3, r0, r1
 8004800:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	431a      	orrs	r2, r3
 800480c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	431a      	orrs	r2, r3
 8004812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	4313      	orrs	r3, r2
 8004818:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800481a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004824:	f021 010c 	bic.w	r1, r1, #12
 8004828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800482e:	430b      	orrs	r3, r1
 8004830:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800483c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800483e:	6999      	ldr	r1, [r3, #24]
 8004840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	ea40 0301 	orr.w	r3, r0, r1
 8004848:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800484a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4bc5      	ldr	r3, [pc, #788]	; (8004b64 <UART_SetConfig+0x384>)
 8004850:	429a      	cmp	r2, r3
 8004852:	d004      	beq.n	800485e <UART_SetConfig+0x7e>
 8004854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4bc3      	ldr	r3, [pc, #780]	; (8004b68 <UART_SetConfig+0x388>)
 800485a:	429a      	cmp	r2, r3
 800485c:	d103      	bne.n	8004866 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800485e:	f7ff f873 	bl	8003948 <HAL_RCC_GetPCLK2Freq>
 8004862:	6778      	str	r0, [r7, #116]	; 0x74
 8004864:	e002      	b.n	800486c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004866:	f7ff f85b 	bl	8003920 <HAL_RCC_GetPCLK1Freq>
 800486a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800486c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004874:	f040 80b6 	bne.w	80049e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800487a:	461c      	mov	r4, r3
 800487c:	f04f 0500 	mov.w	r5, #0
 8004880:	4622      	mov	r2, r4
 8004882:	462b      	mov	r3, r5
 8004884:	1891      	adds	r1, r2, r2
 8004886:	6439      	str	r1, [r7, #64]	; 0x40
 8004888:	415b      	adcs	r3, r3
 800488a:	647b      	str	r3, [r7, #68]	; 0x44
 800488c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004890:	1912      	adds	r2, r2, r4
 8004892:	eb45 0303 	adc.w	r3, r5, r3
 8004896:	f04f 0000 	mov.w	r0, #0
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	00d9      	lsls	r1, r3, #3
 80048a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048a4:	00d0      	lsls	r0, r2, #3
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	1911      	adds	r1, r2, r4
 80048ac:	6639      	str	r1, [r7, #96]	; 0x60
 80048ae:	416b      	adcs	r3, r5
 80048b0:	667b      	str	r3, [r7, #100]	; 0x64
 80048b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	461a      	mov	r2, r3
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	1891      	adds	r1, r2, r2
 80048be:	63b9      	str	r1, [r7, #56]	; 0x38
 80048c0:	415b      	adcs	r3, r3
 80048c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80048cc:	f7fc f9bc 	bl	8000c48 <__aeabi_uldivmod>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4ba5      	ldr	r3, [pc, #660]	; (8004b6c <UART_SetConfig+0x38c>)
 80048d6:	fba3 2302 	umull	r2, r3, r3, r2
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	011e      	lsls	r6, r3, #4
 80048de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048e0:	461c      	mov	r4, r3
 80048e2:	f04f 0500 	mov.w	r5, #0
 80048e6:	4622      	mov	r2, r4
 80048e8:	462b      	mov	r3, r5
 80048ea:	1891      	adds	r1, r2, r2
 80048ec:	6339      	str	r1, [r7, #48]	; 0x30
 80048ee:	415b      	adcs	r3, r3
 80048f0:	637b      	str	r3, [r7, #52]	; 0x34
 80048f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80048f6:	1912      	adds	r2, r2, r4
 80048f8:	eb45 0303 	adc.w	r3, r5, r3
 80048fc:	f04f 0000 	mov.w	r0, #0
 8004900:	f04f 0100 	mov.w	r1, #0
 8004904:	00d9      	lsls	r1, r3, #3
 8004906:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800490a:	00d0      	lsls	r0, r2, #3
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	1911      	adds	r1, r2, r4
 8004912:	65b9      	str	r1, [r7, #88]	; 0x58
 8004914:	416b      	adcs	r3, r5
 8004916:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	461a      	mov	r2, r3
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	1891      	adds	r1, r2, r2
 8004924:	62b9      	str	r1, [r7, #40]	; 0x28
 8004926:	415b      	adcs	r3, r3
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800492a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800492e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004932:	f7fc f989 	bl	8000c48 <__aeabi_uldivmod>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4b8c      	ldr	r3, [pc, #560]	; (8004b6c <UART_SetConfig+0x38c>)
 800493c:	fba3 1302 	umull	r1, r3, r3, r2
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	2164      	movs	r1, #100	; 0x64
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	3332      	adds	r3, #50	; 0x32
 800494e:	4a87      	ldr	r2, [pc, #540]	; (8004b6c <UART_SetConfig+0x38c>)
 8004950:	fba2 2303 	umull	r2, r3, r2, r3
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800495c:	441e      	add	r6, r3
 800495e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004960:	4618      	mov	r0, r3
 8004962:	f04f 0100 	mov.w	r1, #0
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	1894      	adds	r4, r2, r2
 800496c:	623c      	str	r4, [r7, #32]
 800496e:	415b      	adcs	r3, r3
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
 8004972:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004976:	1812      	adds	r2, r2, r0
 8004978:	eb41 0303 	adc.w	r3, r1, r3
 800497c:	f04f 0400 	mov.w	r4, #0
 8004980:	f04f 0500 	mov.w	r5, #0
 8004984:	00dd      	lsls	r5, r3, #3
 8004986:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800498a:	00d4      	lsls	r4, r2, #3
 800498c:	4622      	mov	r2, r4
 800498e:	462b      	mov	r3, r5
 8004990:	1814      	adds	r4, r2, r0
 8004992:	653c      	str	r4, [r7, #80]	; 0x50
 8004994:	414b      	adcs	r3, r1
 8004996:	657b      	str	r3, [r7, #84]	; 0x54
 8004998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	461a      	mov	r2, r3
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	1891      	adds	r1, r2, r2
 80049a4:	61b9      	str	r1, [r7, #24]
 80049a6:	415b      	adcs	r3, r3
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80049b2:	f7fc f949 	bl	8000c48 <__aeabi_uldivmod>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4b6c      	ldr	r3, [pc, #432]	; (8004b6c <UART_SetConfig+0x38c>)
 80049bc:	fba3 1302 	umull	r1, r3, r3, r2
 80049c0:	095b      	lsrs	r3, r3, #5
 80049c2:	2164      	movs	r1, #100	; 0x64
 80049c4:	fb01 f303 	mul.w	r3, r1, r3
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	3332      	adds	r3, #50	; 0x32
 80049ce:	4a67      	ldr	r2, [pc, #412]	; (8004b6c <UART_SetConfig+0x38c>)
 80049d0:	fba2 2303 	umull	r2, r3, r2, r3
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	f003 0207 	and.w	r2, r3, #7
 80049da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4432      	add	r2, r6
 80049e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049e2:	e0b9      	b.n	8004b58 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e6:	461c      	mov	r4, r3
 80049e8:	f04f 0500 	mov.w	r5, #0
 80049ec:	4622      	mov	r2, r4
 80049ee:	462b      	mov	r3, r5
 80049f0:	1891      	adds	r1, r2, r2
 80049f2:	6139      	str	r1, [r7, #16]
 80049f4:	415b      	adcs	r3, r3
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049fc:	1912      	adds	r2, r2, r4
 80049fe:	eb45 0303 	adc.w	r3, r5, r3
 8004a02:	f04f 0000 	mov.w	r0, #0
 8004a06:	f04f 0100 	mov.w	r1, #0
 8004a0a:	00d9      	lsls	r1, r3, #3
 8004a0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a10:	00d0      	lsls	r0, r2, #3
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	eb12 0804 	adds.w	r8, r2, r4
 8004a1a:	eb43 0905 	adc.w	r9, r3, r5
 8004a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f04f 0100 	mov.w	r1, #0
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	008b      	lsls	r3, r1, #2
 8004a32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a36:	0082      	lsls	r2, r0, #2
 8004a38:	4640      	mov	r0, r8
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	f7fc f904 	bl	8000c48 <__aeabi_uldivmod>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4b49      	ldr	r3, [pc, #292]	; (8004b6c <UART_SetConfig+0x38c>)
 8004a46:	fba3 2302 	umull	r2, r3, r3, r2
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	011e      	lsls	r6, r3, #4
 8004a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a50:	4618      	mov	r0, r3
 8004a52:	f04f 0100 	mov.w	r1, #0
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	1894      	adds	r4, r2, r2
 8004a5c:	60bc      	str	r4, [r7, #8]
 8004a5e:	415b      	adcs	r3, r3
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a66:	1812      	adds	r2, r2, r0
 8004a68:	eb41 0303 	adc.w	r3, r1, r3
 8004a6c:	f04f 0400 	mov.w	r4, #0
 8004a70:	f04f 0500 	mov.w	r5, #0
 8004a74:	00dd      	lsls	r5, r3, #3
 8004a76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a7a:	00d4      	lsls	r4, r2, #3
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	462b      	mov	r3, r5
 8004a80:	1814      	adds	r4, r2, r0
 8004a82:	64bc      	str	r4, [r7, #72]	; 0x48
 8004a84:	414b      	adcs	r3, r1
 8004a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	008b      	lsls	r3, r1, #2
 8004a9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004aa0:	0082      	lsls	r2, r0, #2
 8004aa2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004aa6:	f7fc f8cf 	bl	8000c48 <__aeabi_uldivmod>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4b2f      	ldr	r3, [pc, #188]	; (8004b6c <UART_SetConfig+0x38c>)
 8004ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	2164      	movs	r1, #100	; 0x64
 8004ab8:	fb01 f303 	mul.w	r3, r1, r3
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	3332      	adds	r3, #50	; 0x32
 8004ac2:	4a2a      	ldr	r2, [pc, #168]	; (8004b6c <UART_SetConfig+0x38c>)
 8004ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac8:	095b      	lsrs	r3, r3, #5
 8004aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ace:	441e      	add	r6, r3
 8004ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f04f 0100 	mov.w	r1, #0
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	1894      	adds	r4, r2, r2
 8004ade:	603c      	str	r4, [r7, #0]
 8004ae0:	415b      	adcs	r3, r3
 8004ae2:	607b      	str	r3, [r7, #4]
 8004ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ae8:	1812      	adds	r2, r2, r0
 8004aea:	eb41 0303 	adc.w	r3, r1, r3
 8004aee:	f04f 0400 	mov.w	r4, #0
 8004af2:	f04f 0500 	mov.w	r5, #0
 8004af6:	00dd      	lsls	r5, r3, #3
 8004af8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004afc:	00d4      	lsls	r4, r2, #3
 8004afe:	4622      	mov	r2, r4
 8004b00:	462b      	mov	r3, r5
 8004b02:	eb12 0a00 	adds.w	sl, r2, r0
 8004b06:	eb43 0b01 	adc.w	fp, r3, r1
 8004b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f04f 0100 	mov.w	r1, #0
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	008b      	lsls	r3, r1, #2
 8004b1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b22:	0082      	lsls	r2, r0, #2
 8004b24:	4650      	mov	r0, sl
 8004b26:	4659      	mov	r1, fp
 8004b28:	f7fc f88e 	bl	8000c48 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4b0e      	ldr	r3, [pc, #56]	; (8004b6c <UART_SetConfig+0x38c>)
 8004b32:	fba3 1302 	umull	r1, r3, r3, r2
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	2164      	movs	r1, #100	; 0x64
 8004b3a:	fb01 f303 	mul.w	r3, r1, r3
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	3332      	adds	r3, #50	; 0x32
 8004b44:	4a09      	ldr	r2, [pc, #36]	; (8004b6c <UART_SetConfig+0x38c>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	f003 020f 	and.w	r2, r3, #15
 8004b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4432      	add	r2, r6
 8004b56:	609a      	str	r2, [r3, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	377c      	adds	r7, #124	; 0x7c
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b62:	bf00      	nop
 8004b64:	40011000 	.word	0x40011000
 8004b68:	40011400 	.word	0x40011400
 8004b6c:	51eb851f 	.word	0x51eb851f

08004b70 <__errno>:
 8004b70:	4b01      	ldr	r3, [pc, #4]	; (8004b78 <__errno+0x8>)
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	2000000c 	.word	0x2000000c

08004b7c <__libc_init_array>:
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	4d0d      	ldr	r5, [pc, #52]	; (8004bb4 <__libc_init_array+0x38>)
 8004b80:	4c0d      	ldr	r4, [pc, #52]	; (8004bb8 <__libc_init_array+0x3c>)
 8004b82:	1b64      	subs	r4, r4, r5
 8004b84:	10a4      	asrs	r4, r4, #2
 8004b86:	2600      	movs	r6, #0
 8004b88:	42a6      	cmp	r6, r4
 8004b8a:	d109      	bne.n	8004ba0 <__libc_init_array+0x24>
 8004b8c:	4d0b      	ldr	r5, [pc, #44]	; (8004bbc <__libc_init_array+0x40>)
 8004b8e:	4c0c      	ldr	r4, [pc, #48]	; (8004bc0 <__libc_init_array+0x44>)
 8004b90:	f002 fd08 	bl	80075a4 <_init>
 8004b94:	1b64      	subs	r4, r4, r5
 8004b96:	10a4      	asrs	r4, r4, #2
 8004b98:	2600      	movs	r6, #0
 8004b9a:	42a6      	cmp	r6, r4
 8004b9c:	d105      	bne.n	8004baa <__libc_init_array+0x2e>
 8004b9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba4:	4798      	blx	r3
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	e7ee      	b.n	8004b88 <__libc_init_array+0xc>
 8004baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bae:	4798      	blx	r3
 8004bb0:	3601      	adds	r6, #1
 8004bb2:	e7f2      	b.n	8004b9a <__libc_init_array+0x1e>
 8004bb4:	080079d4 	.word	0x080079d4
 8004bb8:	080079d4 	.word	0x080079d4
 8004bbc:	080079d4 	.word	0x080079d4
 8004bc0:	080079d8 	.word	0x080079d8

08004bc4 <memset>:
 8004bc4:	4402      	add	r2, r0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d100      	bne.n	8004bce <memset+0xa>
 8004bcc:	4770      	bx	lr
 8004bce:	f803 1b01 	strb.w	r1, [r3], #1
 8004bd2:	e7f9      	b.n	8004bc8 <memset+0x4>

08004bd4 <__cvt>:
 8004bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd8:	ec55 4b10 	vmov	r4, r5, d0
 8004bdc:	2d00      	cmp	r5, #0
 8004bde:	460e      	mov	r6, r1
 8004be0:	4619      	mov	r1, r3
 8004be2:	462b      	mov	r3, r5
 8004be4:	bfbb      	ittet	lt
 8004be6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004bea:	461d      	movlt	r5, r3
 8004bec:	2300      	movge	r3, #0
 8004bee:	232d      	movlt	r3, #45	; 0x2d
 8004bf0:	700b      	strb	r3, [r1, #0]
 8004bf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bf4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004bf8:	4691      	mov	r9, r2
 8004bfa:	f023 0820 	bic.w	r8, r3, #32
 8004bfe:	bfbc      	itt	lt
 8004c00:	4622      	movlt	r2, r4
 8004c02:	4614      	movlt	r4, r2
 8004c04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c08:	d005      	beq.n	8004c16 <__cvt+0x42>
 8004c0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c0e:	d100      	bne.n	8004c12 <__cvt+0x3e>
 8004c10:	3601      	adds	r6, #1
 8004c12:	2102      	movs	r1, #2
 8004c14:	e000      	b.n	8004c18 <__cvt+0x44>
 8004c16:	2103      	movs	r1, #3
 8004c18:	ab03      	add	r3, sp, #12
 8004c1a:	9301      	str	r3, [sp, #4]
 8004c1c:	ab02      	add	r3, sp, #8
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	ec45 4b10 	vmov	d0, r4, r5
 8004c24:	4653      	mov	r3, sl
 8004c26:	4632      	mov	r2, r6
 8004c28:	f000 fce2 	bl	80055f0 <_dtoa_r>
 8004c2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c30:	4607      	mov	r7, r0
 8004c32:	d102      	bne.n	8004c3a <__cvt+0x66>
 8004c34:	f019 0f01 	tst.w	r9, #1
 8004c38:	d022      	beq.n	8004c80 <__cvt+0xac>
 8004c3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c3e:	eb07 0906 	add.w	r9, r7, r6
 8004c42:	d110      	bne.n	8004c66 <__cvt+0x92>
 8004c44:	783b      	ldrb	r3, [r7, #0]
 8004c46:	2b30      	cmp	r3, #48	; 0x30
 8004c48:	d10a      	bne.n	8004c60 <__cvt+0x8c>
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4620      	mov	r0, r4
 8004c50:	4629      	mov	r1, r5
 8004c52:	f7fb ff39 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c56:	b918      	cbnz	r0, 8004c60 <__cvt+0x8c>
 8004c58:	f1c6 0601 	rsb	r6, r6, #1
 8004c5c:	f8ca 6000 	str.w	r6, [sl]
 8004c60:	f8da 3000 	ldr.w	r3, [sl]
 8004c64:	4499      	add	r9, r3
 8004c66:	2200      	movs	r2, #0
 8004c68:	2300      	movs	r3, #0
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	f7fb ff2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c72:	b108      	cbz	r0, 8004c78 <__cvt+0xa4>
 8004c74:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c78:	2230      	movs	r2, #48	; 0x30
 8004c7a:	9b03      	ldr	r3, [sp, #12]
 8004c7c:	454b      	cmp	r3, r9
 8004c7e:	d307      	bcc.n	8004c90 <__cvt+0xbc>
 8004c80:	9b03      	ldr	r3, [sp, #12]
 8004c82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c84:	1bdb      	subs	r3, r3, r7
 8004c86:	4638      	mov	r0, r7
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	b004      	add	sp, #16
 8004c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c90:	1c59      	adds	r1, r3, #1
 8004c92:	9103      	str	r1, [sp, #12]
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	e7f0      	b.n	8004c7a <__cvt+0xa6>

08004c98 <__exponent>:
 8004c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2900      	cmp	r1, #0
 8004c9e:	bfb8      	it	lt
 8004ca0:	4249      	neglt	r1, r1
 8004ca2:	f803 2b02 	strb.w	r2, [r3], #2
 8004ca6:	bfb4      	ite	lt
 8004ca8:	222d      	movlt	r2, #45	; 0x2d
 8004caa:	222b      	movge	r2, #43	; 0x2b
 8004cac:	2909      	cmp	r1, #9
 8004cae:	7042      	strb	r2, [r0, #1]
 8004cb0:	dd2a      	ble.n	8004d08 <__exponent+0x70>
 8004cb2:	f10d 0407 	add.w	r4, sp, #7
 8004cb6:	46a4      	mov	ip, r4
 8004cb8:	270a      	movs	r7, #10
 8004cba:	46a6      	mov	lr, r4
 8004cbc:	460a      	mov	r2, r1
 8004cbe:	fb91 f6f7 	sdiv	r6, r1, r7
 8004cc2:	fb07 1516 	mls	r5, r7, r6, r1
 8004cc6:	3530      	adds	r5, #48	; 0x30
 8004cc8:	2a63      	cmp	r2, #99	; 0x63
 8004cca:	f104 34ff 	add.w	r4, r4, #4294967295
 8004cce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	dcf1      	bgt.n	8004cba <__exponent+0x22>
 8004cd6:	3130      	adds	r1, #48	; 0x30
 8004cd8:	f1ae 0502 	sub.w	r5, lr, #2
 8004cdc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004ce0:	1c44      	adds	r4, r0, #1
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	4561      	cmp	r1, ip
 8004ce6:	d30a      	bcc.n	8004cfe <__exponent+0x66>
 8004ce8:	f10d 0209 	add.w	r2, sp, #9
 8004cec:	eba2 020e 	sub.w	r2, r2, lr
 8004cf0:	4565      	cmp	r5, ip
 8004cf2:	bf88      	it	hi
 8004cf4:	2200      	movhi	r2, #0
 8004cf6:	4413      	add	r3, r2
 8004cf8:	1a18      	subs	r0, r3, r0
 8004cfa:	b003      	add	sp, #12
 8004cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d02:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d06:	e7ed      	b.n	8004ce4 <__exponent+0x4c>
 8004d08:	2330      	movs	r3, #48	; 0x30
 8004d0a:	3130      	adds	r1, #48	; 0x30
 8004d0c:	7083      	strb	r3, [r0, #2]
 8004d0e:	70c1      	strb	r1, [r0, #3]
 8004d10:	1d03      	adds	r3, r0, #4
 8004d12:	e7f1      	b.n	8004cf8 <__exponent+0x60>

08004d14 <_printf_float>:
 8004d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d18:	ed2d 8b02 	vpush	{d8}
 8004d1c:	b08d      	sub	sp, #52	; 0x34
 8004d1e:	460c      	mov	r4, r1
 8004d20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d24:	4616      	mov	r6, r2
 8004d26:	461f      	mov	r7, r3
 8004d28:	4605      	mov	r5, r0
 8004d2a:	f001 fb43 	bl	80063b4 <_localeconv_r>
 8004d2e:	f8d0 a000 	ldr.w	sl, [r0]
 8004d32:	4650      	mov	r0, sl
 8004d34:	f7fb fa4c 	bl	80001d0 <strlen>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	9305      	str	r3, [sp, #20]
 8004d40:	f8d8 3000 	ldr.w	r3, [r8]
 8004d44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d48:	3307      	adds	r3, #7
 8004d4a:	f023 0307 	bic.w	r3, r3, #7
 8004d4e:	f103 0208 	add.w	r2, r3, #8
 8004d52:	f8c8 2000 	str.w	r2, [r8]
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d66:	9307      	str	r3, [sp, #28]
 8004d68:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d6c:	ee08 0a10 	vmov	s16, r0
 8004d70:	4b9f      	ldr	r3, [pc, #636]	; (8004ff0 <_printf_float+0x2dc>)
 8004d72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d76:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7a:	f7fb fed7 	bl	8000b2c <__aeabi_dcmpun>
 8004d7e:	bb88      	cbnz	r0, 8004de4 <_printf_float+0xd0>
 8004d80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d84:	4b9a      	ldr	r3, [pc, #616]	; (8004ff0 <_printf_float+0x2dc>)
 8004d86:	f04f 32ff 	mov.w	r2, #4294967295
 8004d8a:	f7fb feb1 	bl	8000af0 <__aeabi_dcmple>
 8004d8e:	bb48      	cbnz	r0, 8004de4 <_printf_float+0xd0>
 8004d90:	2200      	movs	r2, #0
 8004d92:	2300      	movs	r3, #0
 8004d94:	4640      	mov	r0, r8
 8004d96:	4649      	mov	r1, r9
 8004d98:	f7fb fea0 	bl	8000adc <__aeabi_dcmplt>
 8004d9c:	b110      	cbz	r0, 8004da4 <_printf_float+0x90>
 8004d9e:	232d      	movs	r3, #45	; 0x2d
 8004da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004da4:	4b93      	ldr	r3, [pc, #588]	; (8004ff4 <_printf_float+0x2e0>)
 8004da6:	4894      	ldr	r0, [pc, #592]	; (8004ff8 <_printf_float+0x2e4>)
 8004da8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004dac:	bf94      	ite	ls
 8004dae:	4698      	movls	r8, r3
 8004db0:	4680      	movhi	r8, r0
 8004db2:	2303      	movs	r3, #3
 8004db4:	6123      	str	r3, [r4, #16]
 8004db6:	9b05      	ldr	r3, [sp, #20]
 8004db8:	f023 0204 	bic.w	r2, r3, #4
 8004dbc:	6022      	str	r2, [r4, #0]
 8004dbe:	f04f 0900 	mov.w	r9, #0
 8004dc2:	9700      	str	r7, [sp, #0]
 8004dc4:	4633      	mov	r3, r6
 8004dc6:	aa0b      	add	r2, sp, #44	; 0x2c
 8004dc8:	4621      	mov	r1, r4
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f000 f9d8 	bl	8005180 <_printf_common>
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f040 8090 	bne.w	8004ef6 <_printf_float+0x1e2>
 8004dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dda:	b00d      	add	sp, #52	; 0x34
 8004ddc:	ecbd 8b02 	vpop	{d8}
 8004de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de4:	4642      	mov	r2, r8
 8004de6:	464b      	mov	r3, r9
 8004de8:	4640      	mov	r0, r8
 8004dea:	4649      	mov	r1, r9
 8004dec:	f7fb fe9e 	bl	8000b2c <__aeabi_dcmpun>
 8004df0:	b140      	cbz	r0, 8004e04 <_printf_float+0xf0>
 8004df2:	464b      	mov	r3, r9
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bfbc      	itt	lt
 8004df8:	232d      	movlt	r3, #45	; 0x2d
 8004dfa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004dfe:	487f      	ldr	r0, [pc, #508]	; (8004ffc <_printf_float+0x2e8>)
 8004e00:	4b7f      	ldr	r3, [pc, #508]	; (8005000 <_printf_float+0x2ec>)
 8004e02:	e7d1      	b.n	8004da8 <_printf_float+0x94>
 8004e04:	6863      	ldr	r3, [r4, #4]
 8004e06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e0a:	9206      	str	r2, [sp, #24]
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	d13f      	bne.n	8004e90 <_printf_float+0x17c>
 8004e10:	2306      	movs	r3, #6
 8004e12:	6063      	str	r3, [r4, #4]
 8004e14:	9b05      	ldr	r3, [sp, #20]
 8004e16:	6861      	ldr	r1, [r4, #4]
 8004e18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	9303      	str	r3, [sp, #12]
 8004e20:	ab0a      	add	r3, sp, #40	; 0x28
 8004e22:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e26:	ab09      	add	r3, sp, #36	; 0x24
 8004e28:	ec49 8b10 	vmov	d0, r8, r9
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	6022      	str	r2, [r4, #0]
 8004e30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e34:	4628      	mov	r0, r5
 8004e36:	f7ff fecd 	bl	8004bd4 <__cvt>
 8004e3a:	9b06      	ldr	r3, [sp, #24]
 8004e3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e3e:	2b47      	cmp	r3, #71	; 0x47
 8004e40:	4680      	mov	r8, r0
 8004e42:	d108      	bne.n	8004e56 <_printf_float+0x142>
 8004e44:	1cc8      	adds	r0, r1, #3
 8004e46:	db02      	blt.n	8004e4e <_printf_float+0x13a>
 8004e48:	6863      	ldr	r3, [r4, #4]
 8004e4a:	4299      	cmp	r1, r3
 8004e4c:	dd41      	ble.n	8004ed2 <_printf_float+0x1be>
 8004e4e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004e52:	fa5f fb8b 	uxtb.w	fp, fp
 8004e56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e5a:	d820      	bhi.n	8004e9e <_printf_float+0x18a>
 8004e5c:	3901      	subs	r1, #1
 8004e5e:	465a      	mov	r2, fp
 8004e60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e64:	9109      	str	r1, [sp, #36]	; 0x24
 8004e66:	f7ff ff17 	bl	8004c98 <__exponent>
 8004e6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e6c:	1813      	adds	r3, r2, r0
 8004e6e:	2a01      	cmp	r2, #1
 8004e70:	4681      	mov	r9, r0
 8004e72:	6123      	str	r3, [r4, #16]
 8004e74:	dc02      	bgt.n	8004e7c <_printf_float+0x168>
 8004e76:	6822      	ldr	r2, [r4, #0]
 8004e78:	07d2      	lsls	r2, r2, #31
 8004e7a:	d501      	bpl.n	8004e80 <_printf_float+0x16c>
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	6123      	str	r3, [r4, #16]
 8004e80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d09c      	beq.n	8004dc2 <_printf_float+0xae>
 8004e88:	232d      	movs	r3, #45	; 0x2d
 8004e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e8e:	e798      	b.n	8004dc2 <_printf_float+0xae>
 8004e90:	9a06      	ldr	r2, [sp, #24]
 8004e92:	2a47      	cmp	r2, #71	; 0x47
 8004e94:	d1be      	bne.n	8004e14 <_printf_float+0x100>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1bc      	bne.n	8004e14 <_printf_float+0x100>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e7b9      	b.n	8004e12 <_printf_float+0xfe>
 8004e9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004ea2:	d118      	bne.n	8004ed6 <_printf_float+0x1c2>
 8004ea4:	2900      	cmp	r1, #0
 8004ea6:	6863      	ldr	r3, [r4, #4]
 8004ea8:	dd0b      	ble.n	8004ec2 <_printf_float+0x1ae>
 8004eaa:	6121      	str	r1, [r4, #16]
 8004eac:	b913      	cbnz	r3, 8004eb4 <_printf_float+0x1a0>
 8004eae:	6822      	ldr	r2, [r4, #0]
 8004eb0:	07d0      	lsls	r0, r2, #31
 8004eb2:	d502      	bpl.n	8004eba <_printf_float+0x1a6>
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	440b      	add	r3, r1
 8004eb8:	6123      	str	r3, [r4, #16]
 8004eba:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ebc:	f04f 0900 	mov.w	r9, #0
 8004ec0:	e7de      	b.n	8004e80 <_printf_float+0x16c>
 8004ec2:	b913      	cbnz	r3, 8004eca <_printf_float+0x1b6>
 8004ec4:	6822      	ldr	r2, [r4, #0]
 8004ec6:	07d2      	lsls	r2, r2, #31
 8004ec8:	d501      	bpl.n	8004ece <_printf_float+0x1ba>
 8004eca:	3302      	adds	r3, #2
 8004ecc:	e7f4      	b.n	8004eb8 <_printf_float+0x1a4>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e7f2      	b.n	8004eb8 <_printf_float+0x1a4>
 8004ed2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ed8:	4299      	cmp	r1, r3
 8004eda:	db05      	blt.n	8004ee8 <_printf_float+0x1d4>
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	6121      	str	r1, [r4, #16]
 8004ee0:	07d8      	lsls	r0, r3, #31
 8004ee2:	d5ea      	bpl.n	8004eba <_printf_float+0x1a6>
 8004ee4:	1c4b      	adds	r3, r1, #1
 8004ee6:	e7e7      	b.n	8004eb8 <_printf_float+0x1a4>
 8004ee8:	2900      	cmp	r1, #0
 8004eea:	bfd4      	ite	le
 8004eec:	f1c1 0202 	rsble	r2, r1, #2
 8004ef0:	2201      	movgt	r2, #1
 8004ef2:	4413      	add	r3, r2
 8004ef4:	e7e0      	b.n	8004eb8 <_printf_float+0x1a4>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	055a      	lsls	r2, r3, #21
 8004efa:	d407      	bmi.n	8004f0c <_printf_float+0x1f8>
 8004efc:	6923      	ldr	r3, [r4, #16]
 8004efe:	4642      	mov	r2, r8
 8004f00:	4631      	mov	r1, r6
 8004f02:	4628      	mov	r0, r5
 8004f04:	47b8      	blx	r7
 8004f06:	3001      	adds	r0, #1
 8004f08:	d12c      	bne.n	8004f64 <_printf_float+0x250>
 8004f0a:	e764      	b.n	8004dd6 <_printf_float+0xc2>
 8004f0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f10:	f240 80e0 	bls.w	80050d4 <_printf_float+0x3c0>
 8004f14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f7fb fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	d034      	beq.n	8004f8e <_printf_float+0x27a>
 8004f24:	4a37      	ldr	r2, [pc, #220]	; (8005004 <_printf_float+0x2f0>)
 8004f26:	2301      	movs	r3, #1
 8004f28:	4631      	mov	r1, r6
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	47b8      	blx	r7
 8004f2e:	3001      	adds	r0, #1
 8004f30:	f43f af51 	beq.w	8004dd6 <_printf_float+0xc2>
 8004f34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	db02      	blt.n	8004f42 <_printf_float+0x22e>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	07d8      	lsls	r0, r3, #31
 8004f40:	d510      	bpl.n	8004f64 <_printf_float+0x250>
 8004f42:	ee18 3a10 	vmov	r3, s16
 8004f46:	4652      	mov	r2, sl
 8004f48:	4631      	mov	r1, r6
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	47b8      	blx	r7
 8004f4e:	3001      	adds	r0, #1
 8004f50:	f43f af41 	beq.w	8004dd6 <_printf_float+0xc2>
 8004f54:	f04f 0800 	mov.w	r8, #0
 8004f58:	f104 091a 	add.w	r9, r4, #26
 8004f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	4543      	cmp	r3, r8
 8004f62:	dc09      	bgt.n	8004f78 <_printf_float+0x264>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	079b      	lsls	r3, r3, #30
 8004f68:	f100 8105 	bmi.w	8005176 <_printf_float+0x462>
 8004f6c:	68e0      	ldr	r0, [r4, #12]
 8004f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f70:	4298      	cmp	r0, r3
 8004f72:	bfb8      	it	lt
 8004f74:	4618      	movlt	r0, r3
 8004f76:	e730      	b.n	8004dda <_printf_float+0xc6>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	464a      	mov	r2, r9
 8004f7c:	4631      	mov	r1, r6
 8004f7e:	4628      	mov	r0, r5
 8004f80:	47b8      	blx	r7
 8004f82:	3001      	adds	r0, #1
 8004f84:	f43f af27 	beq.w	8004dd6 <_printf_float+0xc2>
 8004f88:	f108 0801 	add.w	r8, r8, #1
 8004f8c:	e7e6      	b.n	8004f5c <_printf_float+0x248>
 8004f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	dc39      	bgt.n	8005008 <_printf_float+0x2f4>
 8004f94:	4a1b      	ldr	r2, [pc, #108]	; (8005004 <_printf_float+0x2f0>)
 8004f96:	2301      	movs	r3, #1
 8004f98:	4631      	mov	r1, r6
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	47b8      	blx	r7
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	f43f af19 	beq.w	8004dd6 <_printf_float+0xc2>
 8004fa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	d102      	bne.n	8004fb2 <_printf_float+0x29e>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	07d9      	lsls	r1, r3, #31
 8004fb0:	d5d8      	bpl.n	8004f64 <_printf_float+0x250>
 8004fb2:	ee18 3a10 	vmov	r3, s16
 8004fb6:	4652      	mov	r2, sl
 8004fb8:	4631      	mov	r1, r6
 8004fba:	4628      	mov	r0, r5
 8004fbc:	47b8      	blx	r7
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	f43f af09 	beq.w	8004dd6 <_printf_float+0xc2>
 8004fc4:	f04f 0900 	mov.w	r9, #0
 8004fc8:	f104 0a1a 	add.w	sl, r4, #26
 8004fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fce:	425b      	negs	r3, r3
 8004fd0:	454b      	cmp	r3, r9
 8004fd2:	dc01      	bgt.n	8004fd8 <_printf_float+0x2c4>
 8004fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fd6:	e792      	b.n	8004efe <_printf_float+0x1ea>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	4652      	mov	r2, sl
 8004fdc:	4631      	mov	r1, r6
 8004fde:	4628      	mov	r0, r5
 8004fe0:	47b8      	blx	r7
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	f43f aef7 	beq.w	8004dd6 <_printf_float+0xc2>
 8004fe8:	f109 0901 	add.w	r9, r9, #1
 8004fec:	e7ee      	b.n	8004fcc <_printf_float+0x2b8>
 8004fee:	bf00      	nop
 8004ff0:	7fefffff 	.word	0x7fefffff
 8004ff4:	080075ec 	.word	0x080075ec
 8004ff8:	080075f0 	.word	0x080075f0
 8004ffc:	080075f8 	.word	0x080075f8
 8005000:	080075f4 	.word	0x080075f4
 8005004:	080075fc 	.word	0x080075fc
 8005008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800500a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800500c:	429a      	cmp	r2, r3
 800500e:	bfa8      	it	ge
 8005010:	461a      	movge	r2, r3
 8005012:	2a00      	cmp	r2, #0
 8005014:	4691      	mov	r9, r2
 8005016:	dc37      	bgt.n	8005088 <_printf_float+0x374>
 8005018:	f04f 0b00 	mov.w	fp, #0
 800501c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005020:	f104 021a 	add.w	r2, r4, #26
 8005024:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005026:	9305      	str	r3, [sp, #20]
 8005028:	eba3 0309 	sub.w	r3, r3, r9
 800502c:	455b      	cmp	r3, fp
 800502e:	dc33      	bgt.n	8005098 <_printf_float+0x384>
 8005030:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005034:	429a      	cmp	r2, r3
 8005036:	db3b      	blt.n	80050b0 <_printf_float+0x39c>
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	07da      	lsls	r2, r3, #31
 800503c:	d438      	bmi.n	80050b0 <_printf_float+0x39c>
 800503e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005040:	9b05      	ldr	r3, [sp, #20]
 8005042:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	eba2 0901 	sub.w	r9, r2, r1
 800504a:	4599      	cmp	r9, r3
 800504c:	bfa8      	it	ge
 800504e:	4699      	movge	r9, r3
 8005050:	f1b9 0f00 	cmp.w	r9, #0
 8005054:	dc35      	bgt.n	80050c2 <_printf_float+0x3ae>
 8005056:	f04f 0800 	mov.w	r8, #0
 800505a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800505e:	f104 0a1a 	add.w	sl, r4, #26
 8005062:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	eba3 0309 	sub.w	r3, r3, r9
 800506c:	4543      	cmp	r3, r8
 800506e:	f77f af79 	ble.w	8004f64 <_printf_float+0x250>
 8005072:	2301      	movs	r3, #1
 8005074:	4652      	mov	r2, sl
 8005076:	4631      	mov	r1, r6
 8005078:	4628      	mov	r0, r5
 800507a:	47b8      	blx	r7
 800507c:	3001      	adds	r0, #1
 800507e:	f43f aeaa 	beq.w	8004dd6 <_printf_float+0xc2>
 8005082:	f108 0801 	add.w	r8, r8, #1
 8005086:	e7ec      	b.n	8005062 <_printf_float+0x34e>
 8005088:	4613      	mov	r3, r2
 800508a:	4631      	mov	r1, r6
 800508c:	4642      	mov	r2, r8
 800508e:	4628      	mov	r0, r5
 8005090:	47b8      	blx	r7
 8005092:	3001      	adds	r0, #1
 8005094:	d1c0      	bne.n	8005018 <_printf_float+0x304>
 8005096:	e69e      	b.n	8004dd6 <_printf_float+0xc2>
 8005098:	2301      	movs	r3, #1
 800509a:	4631      	mov	r1, r6
 800509c:	4628      	mov	r0, r5
 800509e:	9205      	str	r2, [sp, #20]
 80050a0:	47b8      	blx	r7
 80050a2:	3001      	adds	r0, #1
 80050a4:	f43f ae97 	beq.w	8004dd6 <_printf_float+0xc2>
 80050a8:	9a05      	ldr	r2, [sp, #20]
 80050aa:	f10b 0b01 	add.w	fp, fp, #1
 80050ae:	e7b9      	b.n	8005024 <_printf_float+0x310>
 80050b0:	ee18 3a10 	vmov	r3, s16
 80050b4:	4652      	mov	r2, sl
 80050b6:	4631      	mov	r1, r6
 80050b8:	4628      	mov	r0, r5
 80050ba:	47b8      	blx	r7
 80050bc:	3001      	adds	r0, #1
 80050be:	d1be      	bne.n	800503e <_printf_float+0x32a>
 80050c0:	e689      	b.n	8004dd6 <_printf_float+0xc2>
 80050c2:	9a05      	ldr	r2, [sp, #20]
 80050c4:	464b      	mov	r3, r9
 80050c6:	4442      	add	r2, r8
 80050c8:	4631      	mov	r1, r6
 80050ca:	4628      	mov	r0, r5
 80050cc:	47b8      	blx	r7
 80050ce:	3001      	adds	r0, #1
 80050d0:	d1c1      	bne.n	8005056 <_printf_float+0x342>
 80050d2:	e680      	b.n	8004dd6 <_printf_float+0xc2>
 80050d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050d6:	2a01      	cmp	r2, #1
 80050d8:	dc01      	bgt.n	80050de <_printf_float+0x3ca>
 80050da:	07db      	lsls	r3, r3, #31
 80050dc:	d538      	bpl.n	8005150 <_printf_float+0x43c>
 80050de:	2301      	movs	r3, #1
 80050e0:	4642      	mov	r2, r8
 80050e2:	4631      	mov	r1, r6
 80050e4:	4628      	mov	r0, r5
 80050e6:	47b8      	blx	r7
 80050e8:	3001      	adds	r0, #1
 80050ea:	f43f ae74 	beq.w	8004dd6 <_printf_float+0xc2>
 80050ee:	ee18 3a10 	vmov	r3, s16
 80050f2:	4652      	mov	r2, sl
 80050f4:	4631      	mov	r1, r6
 80050f6:	4628      	mov	r0, r5
 80050f8:	47b8      	blx	r7
 80050fa:	3001      	adds	r0, #1
 80050fc:	f43f ae6b 	beq.w	8004dd6 <_printf_float+0xc2>
 8005100:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005104:	2200      	movs	r2, #0
 8005106:	2300      	movs	r3, #0
 8005108:	f7fb fcde 	bl	8000ac8 <__aeabi_dcmpeq>
 800510c:	b9d8      	cbnz	r0, 8005146 <_printf_float+0x432>
 800510e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005110:	f108 0201 	add.w	r2, r8, #1
 8005114:	3b01      	subs	r3, #1
 8005116:	4631      	mov	r1, r6
 8005118:	4628      	mov	r0, r5
 800511a:	47b8      	blx	r7
 800511c:	3001      	adds	r0, #1
 800511e:	d10e      	bne.n	800513e <_printf_float+0x42a>
 8005120:	e659      	b.n	8004dd6 <_printf_float+0xc2>
 8005122:	2301      	movs	r3, #1
 8005124:	4652      	mov	r2, sl
 8005126:	4631      	mov	r1, r6
 8005128:	4628      	mov	r0, r5
 800512a:	47b8      	blx	r7
 800512c:	3001      	adds	r0, #1
 800512e:	f43f ae52 	beq.w	8004dd6 <_printf_float+0xc2>
 8005132:	f108 0801 	add.w	r8, r8, #1
 8005136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005138:	3b01      	subs	r3, #1
 800513a:	4543      	cmp	r3, r8
 800513c:	dcf1      	bgt.n	8005122 <_printf_float+0x40e>
 800513e:	464b      	mov	r3, r9
 8005140:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005144:	e6dc      	b.n	8004f00 <_printf_float+0x1ec>
 8005146:	f04f 0800 	mov.w	r8, #0
 800514a:	f104 0a1a 	add.w	sl, r4, #26
 800514e:	e7f2      	b.n	8005136 <_printf_float+0x422>
 8005150:	2301      	movs	r3, #1
 8005152:	4642      	mov	r2, r8
 8005154:	e7df      	b.n	8005116 <_printf_float+0x402>
 8005156:	2301      	movs	r3, #1
 8005158:	464a      	mov	r2, r9
 800515a:	4631      	mov	r1, r6
 800515c:	4628      	mov	r0, r5
 800515e:	47b8      	blx	r7
 8005160:	3001      	adds	r0, #1
 8005162:	f43f ae38 	beq.w	8004dd6 <_printf_float+0xc2>
 8005166:	f108 0801 	add.w	r8, r8, #1
 800516a:	68e3      	ldr	r3, [r4, #12]
 800516c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800516e:	1a5b      	subs	r3, r3, r1
 8005170:	4543      	cmp	r3, r8
 8005172:	dcf0      	bgt.n	8005156 <_printf_float+0x442>
 8005174:	e6fa      	b.n	8004f6c <_printf_float+0x258>
 8005176:	f04f 0800 	mov.w	r8, #0
 800517a:	f104 0919 	add.w	r9, r4, #25
 800517e:	e7f4      	b.n	800516a <_printf_float+0x456>

08005180 <_printf_common>:
 8005180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005184:	4616      	mov	r6, r2
 8005186:	4699      	mov	r9, r3
 8005188:	688a      	ldr	r2, [r1, #8]
 800518a:	690b      	ldr	r3, [r1, #16]
 800518c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005190:	4293      	cmp	r3, r2
 8005192:	bfb8      	it	lt
 8005194:	4613      	movlt	r3, r2
 8005196:	6033      	str	r3, [r6, #0]
 8005198:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800519c:	4607      	mov	r7, r0
 800519e:	460c      	mov	r4, r1
 80051a0:	b10a      	cbz	r2, 80051a6 <_printf_common+0x26>
 80051a2:	3301      	adds	r3, #1
 80051a4:	6033      	str	r3, [r6, #0]
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	0699      	lsls	r1, r3, #26
 80051aa:	bf42      	ittt	mi
 80051ac:	6833      	ldrmi	r3, [r6, #0]
 80051ae:	3302      	addmi	r3, #2
 80051b0:	6033      	strmi	r3, [r6, #0]
 80051b2:	6825      	ldr	r5, [r4, #0]
 80051b4:	f015 0506 	ands.w	r5, r5, #6
 80051b8:	d106      	bne.n	80051c8 <_printf_common+0x48>
 80051ba:	f104 0a19 	add.w	sl, r4, #25
 80051be:	68e3      	ldr	r3, [r4, #12]
 80051c0:	6832      	ldr	r2, [r6, #0]
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	42ab      	cmp	r3, r5
 80051c6:	dc26      	bgt.n	8005216 <_printf_common+0x96>
 80051c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051cc:	1e13      	subs	r3, r2, #0
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	bf18      	it	ne
 80051d2:	2301      	movne	r3, #1
 80051d4:	0692      	lsls	r2, r2, #26
 80051d6:	d42b      	bmi.n	8005230 <_printf_common+0xb0>
 80051d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051dc:	4649      	mov	r1, r9
 80051de:	4638      	mov	r0, r7
 80051e0:	47c0      	blx	r8
 80051e2:	3001      	adds	r0, #1
 80051e4:	d01e      	beq.n	8005224 <_printf_common+0xa4>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	68e5      	ldr	r5, [r4, #12]
 80051ea:	6832      	ldr	r2, [r6, #0]
 80051ec:	f003 0306 	and.w	r3, r3, #6
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	bf08      	it	eq
 80051f4:	1aad      	subeq	r5, r5, r2
 80051f6:	68a3      	ldr	r3, [r4, #8]
 80051f8:	6922      	ldr	r2, [r4, #16]
 80051fa:	bf0c      	ite	eq
 80051fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005200:	2500      	movne	r5, #0
 8005202:	4293      	cmp	r3, r2
 8005204:	bfc4      	itt	gt
 8005206:	1a9b      	subgt	r3, r3, r2
 8005208:	18ed      	addgt	r5, r5, r3
 800520a:	2600      	movs	r6, #0
 800520c:	341a      	adds	r4, #26
 800520e:	42b5      	cmp	r5, r6
 8005210:	d11a      	bne.n	8005248 <_printf_common+0xc8>
 8005212:	2000      	movs	r0, #0
 8005214:	e008      	b.n	8005228 <_printf_common+0xa8>
 8005216:	2301      	movs	r3, #1
 8005218:	4652      	mov	r2, sl
 800521a:	4649      	mov	r1, r9
 800521c:	4638      	mov	r0, r7
 800521e:	47c0      	blx	r8
 8005220:	3001      	adds	r0, #1
 8005222:	d103      	bne.n	800522c <_printf_common+0xac>
 8005224:	f04f 30ff 	mov.w	r0, #4294967295
 8005228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522c:	3501      	adds	r5, #1
 800522e:	e7c6      	b.n	80051be <_printf_common+0x3e>
 8005230:	18e1      	adds	r1, r4, r3
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	2030      	movs	r0, #48	; 0x30
 8005236:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800523a:	4422      	add	r2, r4
 800523c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005240:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005244:	3302      	adds	r3, #2
 8005246:	e7c7      	b.n	80051d8 <_printf_common+0x58>
 8005248:	2301      	movs	r3, #1
 800524a:	4622      	mov	r2, r4
 800524c:	4649      	mov	r1, r9
 800524e:	4638      	mov	r0, r7
 8005250:	47c0      	blx	r8
 8005252:	3001      	adds	r0, #1
 8005254:	d0e6      	beq.n	8005224 <_printf_common+0xa4>
 8005256:	3601      	adds	r6, #1
 8005258:	e7d9      	b.n	800520e <_printf_common+0x8e>
	...

0800525c <_printf_i>:
 800525c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005260:	460c      	mov	r4, r1
 8005262:	4691      	mov	r9, r2
 8005264:	7e27      	ldrb	r7, [r4, #24]
 8005266:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005268:	2f78      	cmp	r7, #120	; 0x78
 800526a:	4680      	mov	r8, r0
 800526c:	469a      	mov	sl, r3
 800526e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005272:	d807      	bhi.n	8005284 <_printf_i+0x28>
 8005274:	2f62      	cmp	r7, #98	; 0x62
 8005276:	d80a      	bhi.n	800528e <_printf_i+0x32>
 8005278:	2f00      	cmp	r7, #0
 800527a:	f000 80d8 	beq.w	800542e <_printf_i+0x1d2>
 800527e:	2f58      	cmp	r7, #88	; 0x58
 8005280:	f000 80a3 	beq.w	80053ca <_printf_i+0x16e>
 8005284:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800528c:	e03a      	b.n	8005304 <_printf_i+0xa8>
 800528e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005292:	2b15      	cmp	r3, #21
 8005294:	d8f6      	bhi.n	8005284 <_printf_i+0x28>
 8005296:	a001      	add	r0, pc, #4	; (adr r0, 800529c <_printf_i+0x40>)
 8005298:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800529c:	080052f5 	.word	0x080052f5
 80052a0:	08005309 	.word	0x08005309
 80052a4:	08005285 	.word	0x08005285
 80052a8:	08005285 	.word	0x08005285
 80052ac:	08005285 	.word	0x08005285
 80052b0:	08005285 	.word	0x08005285
 80052b4:	08005309 	.word	0x08005309
 80052b8:	08005285 	.word	0x08005285
 80052bc:	08005285 	.word	0x08005285
 80052c0:	08005285 	.word	0x08005285
 80052c4:	08005285 	.word	0x08005285
 80052c8:	08005415 	.word	0x08005415
 80052cc:	08005339 	.word	0x08005339
 80052d0:	080053f7 	.word	0x080053f7
 80052d4:	08005285 	.word	0x08005285
 80052d8:	08005285 	.word	0x08005285
 80052dc:	08005437 	.word	0x08005437
 80052e0:	08005285 	.word	0x08005285
 80052e4:	08005339 	.word	0x08005339
 80052e8:	08005285 	.word	0x08005285
 80052ec:	08005285 	.word	0x08005285
 80052f0:	080053ff 	.word	0x080053ff
 80052f4:	680b      	ldr	r3, [r1, #0]
 80052f6:	1d1a      	adds	r2, r3, #4
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	600a      	str	r2, [r1, #0]
 80052fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005304:	2301      	movs	r3, #1
 8005306:	e0a3      	b.n	8005450 <_printf_i+0x1f4>
 8005308:	6825      	ldr	r5, [r4, #0]
 800530a:	6808      	ldr	r0, [r1, #0]
 800530c:	062e      	lsls	r6, r5, #24
 800530e:	f100 0304 	add.w	r3, r0, #4
 8005312:	d50a      	bpl.n	800532a <_printf_i+0xce>
 8005314:	6805      	ldr	r5, [r0, #0]
 8005316:	600b      	str	r3, [r1, #0]
 8005318:	2d00      	cmp	r5, #0
 800531a:	da03      	bge.n	8005324 <_printf_i+0xc8>
 800531c:	232d      	movs	r3, #45	; 0x2d
 800531e:	426d      	negs	r5, r5
 8005320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005324:	485e      	ldr	r0, [pc, #376]	; (80054a0 <_printf_i+0x244>)
 8005326:	230a      	movs	r3, #10
 8005328:	e019      	b.n	800535e <_printf_i+0x102>
 800532a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800532e:	6805      	ldr	r5, [r0, #0]
 8005330:	600b      	str	r3, [r1, #0]
 8005332:	bf18      	it	ne
 8005334:	b22d      	sxthne	r5, r5
 8005336:	e7ef      	b.n	8005318 <_printf_i+0xbc>
 8005338:	680b      	ldr	r3, [r1, #0]
 800533a:	6825      	ldr	r5, [r4, #0]
 800533c:	1d18      	adds	r0, r3, #4
 800533e:	6008      	str	r0, [r1, #0]
 8005340:	0628      	lsls	r0, r5, #24
 8005342:	d501      	bpl.n	8005348 <_printf_i+0xec>
 8005344:	681d      	ldr	r5, [r3, #0]
 8005346:	e002      	b.n	800534e <_printf_i+0xf2>
 8005348:	0669      	lsls	r1, r5, #25
 800534a:	d5fb      	bpl.n	8005344 <_printf_i+0xe8>
 800534c:	881d      	ldrh	r5, [r3, #0]
 800534e:	4854      	ldr	r0, [pc, #336]	; (80054a0 <_printf_i+0x244>)
 8005350:	2f6f      	cmp	r7, #111	; 0x6f
 8005352:	bf0c      	ite	eq
 8005354:	2308      	moveq	r3, #8
 8005356:	230a      	movne	r3, #10
 8005358:	2100      	movs	r1, #0
 800535a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800535e:	6866      	ldr	r6, [r4, #4]
 8005360:	60a6      	str	r6, [r4, #8]
 8005362:	2e00      	cmp	r6, #0
 8005364:	bfa2      	ittt	ge
 8005366:	6821      	ldrge	r1, [r4, #0]
 8005368:	f021 0104 	bicge.w	r1, r1, #4
 800536c:	6021      	strge	r1, [r4, #0]
 800536e:	b90d      	cbnz	r5, 8005374 <_printf_i+0x118>
 8005370:	2e00      	cmp	r6, #0
 8005372:	d04d      	beq.n	8005410 <_printf_i+0x1b4>
 8005374:	4616      	mov	r6, r2
 8005376:	fbb5 f1f3 	udiv	r1, r5, r3
 800537a:	fb03 5711 	mls	r7, r3, r1, r5
 800537e:	5dc7      	ldrb	r7, [r0, r7]
 8005380:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005384:	462f      	mov	r7, r5
 8005386:	42bb      	cmp	r3, r7
 8005388:	460d      	mov	r5, r1
 800538a:	d9f4      	bls.n	8005376 <_printf_i+0x11a>
 800538c:	2b08      	cmp	r3, #8
 800538e:	d10b      	bne.n	80053a8 <_printf_i+0x14c>
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	07df      	lsls	r7, r3, #31
 8005394:	d508      	bpl.n	80053a8 <_printf_i+0x14c>
 8005396:	6923      	ldr	r3, [r4, #16]
 8005398:	6861      	ldr	r1, [r4, #4]
 800539a:	4299      	cmp	r1, r3
 800539c:	bfde      	ittt	le
 800539e:	2330      	movle	r3, #48	; 0x30
 80053a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053a8:	1b92      	subs	r2, r2, r6
 80053aa:	6122      	str	r2, [r4, #16]
 80053ac:	f8cd a000 	str.w	sl, [sp]
 80053b0:	464b      	mov	r3, r9
 80053b2:	aa03      	add	r2, sp, #12
 80053b4:	4621      	mov	r1, r4
 80053b6:	4640      	mov	r0, r8
 80053b8:	f7ff fee2 	bl	8005180 <_printf_common>
 80053bc:	3001      	adds	r0, #1
 80053be:	d14c      	bne.n	800545a <_printf_i+0x1fe>
 80053c0:	f04f 30ff 	mov.w	r0, #4294967295
 80053c4:	b004      	add	sp, #16
 80053c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ca:	4835      	ldr	r0, [pc, #212]	; (80054a0 <_printf_i+0x244>)
 80053cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	680e      	ldr	r6, [r1, #0]
 80053d4:	061f      	lsls	r7, r3, #24
 80053d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80053da:	600e      	str	r6, [r1, #0]
 80053dc:	d514      	bpl.n	8005408 <_printf_i+0x1ac>
 80053de:	07d9      	lsls	r1, r3, #31
 80053e0:	bf44      	itt	mi
 80053e2:	f043 0320 	orrmi.w	r3, r3, #32
 80053e6:	6023      	strmi	r3, [r4, #0]
 80053e8:	b91d      	cbnz	r5, 80053f2 <_printf_i+0x196>
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	f023 0320 	bic.w	r3, r3, #32
 80053f0:	6023      	str	r3, [r4, #0]
 80053f2:	2310      	movs	r3, #16
 80053f4:	e7b0      	b.n	8005358 <_printf_i+0xfc>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	f043 0320 	orr.w	r3, r3, #32
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	2378      	movs	r3, #120	; 0x78
 8005400:	4828      	ldr	r0, [pc, #160]	; (80054a4 <_printf_i+0x248>)
 8005402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005406:	e7e3      	b.n	80053d0 <_printf_i+0x174>
 8005408:	065e      	lsls	r6, r3, #25
 800540a:	bf48      	it	mi
 800540c:	b2ad      	uxthmi	r5, r5
 800540e:	e7e6      	b.n	80053de <_printf_i+0x182>
 8005410:	4616      	mov	r6, r2
 8005412:	e7bb      	b.n	800538c <_printf_i+0x130>
 8005414:	680b      	ldr	r3, [r1, #0]
 8005416:	6826      	ldr	r6, [r4, #0]
 8005418:	6960      	ldr	r0, [r4, #20]
 800541a:	1d1d      	adds	r5, r3, #4
 800541c:	600d      	str	r5, [r1, #0]
 800541e:	0635      	lsls	r5, r6, #24
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	d501      	bpl.n	8005428 <_printf_i+0x1cc>
 8005424:	6018      	str	r0, [r3, #0]
 8005426:	e002      	b.n	800542e <_printf_i+0x1d2>
 8005428:	0671      	lsls	r1, r6, #25
 800542a:	d5fb      	bpl.n	8005424 <_printf_i+0x1c8>
 800542c:	8018      	strh	r0, [r3, #0]
 800542e:	2300      	movs	r3, #0
 8005430:	6123      	str	r3, [r4, #16]
 8005432:	4616      	mov	r6, r2
 8005434:	e7ba      	b.n	80053ac <_printf_i+0x150>
 8005436:	680b      	ldr	r3, [r1, #0]
 8005438:	1d1a      	adds	r2, r3, #4
 800543a:	600a      	str	r2, [r1, #0]
 800543c:	681e      	ldr	r6, [r3, #0]
 800543e:	6862      	ldr	r2, [r4, #4]
 8005440:	2100      	movs	r1, #0
 8005442:	4630      	mov	r0, r6
 8005444:	f7fa fecc 	bl	80001e0 <memchr>
 8005448:	b108      	cbz	r0, 800544e <_printf_i+0x1f2>
 800544a:	1b80      	subs	r0, r0, r6
 800544c:	6060      	str	r0, [r4, #4]
 800544e:	6863      	ldr	r3, [r4, #4]
 8005450:	6123      	str	r3, [r4, #16]
 8005452:	2300      	movs	r3, #0
 8005454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005458:	e7a8      	b.n	80053ac <_printf_i+0x150>
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	4632      	mov	r2, r6
 800545e:	4649      	mov	r1, r9
 8005460:	4640      	mov	r0, r8
 8005462:	47d0      	blx	sl
 8005464:	3001      	adds	r0, #1
 8005466:	d0ab      	beq.n	80053c0 <_printf_i+0x164>
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	079b      	lsls	r3, r3, #30
 800546c:	d413      	bmi.n	8005496 <_printf_i+0x23a>
 800546e:	68e0      	ldr	r0, [r4, #12]
 8005470:	9b03      	ldr	r3, [sp, #12]
 8005472:	4298      	cmp	r0, r3
 8005474:	bfb8      	it	lt
 8005476:	4618      	movlt	r0, r3
 8005478:	e7a4      	b.n	80053c4 <_printf_i+0x168>
 800547a:	2301      	movs	r3, #1
 800547c:	4632      	mov	r2, r6
 800547e:	4649      	mov	r1, r9
 8005480:	4640      	mov	r0, r8
 8005482:	47d0      	blx	sl
 8005484:	3001      	adds	r0, #1
 8005486:	d09b      	beq.n	80053c0 <_printf_i+0x164>
 8005488:	3501      	adds	r5, #1
 800548a:	68e3      	ldr	r3, [r4, #12]
 800548c:	9903      	ldr	r1, [sp, #12]
 800548e:	1a5b      	subs	r3, r3, r1
 8005490:	42ab      	cmp	r3, r5
 8005492:	dcf2      	bgt.n	800547a <_printf_i+0x21e>
 8005494:	e7eb      	b.n	800546e <_printf_i+0x212>
 8005496:	2500      	movs	r5, #0
 8005498:	f104 0619 	add.w	r6, r4, #25
 800549c:	e7f5      	b.n	800548a <_printf_i+0x22e>
 800549e:	bf00      	nop
 80054a0:	080075fe 	.word	0x080075fe
 80054a4:	0800760f 	.word	0x0800760f

080054a8 <iprintf>:
 80054a8:	b40f      	push	{r0, r1, r2, r3}
 80054aa:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <iprintf+0x2c>)
 80054ac:	b513      	push	{r0, r1, r4, lr}
 80054ae:	681c      	ldr	r4, [r3, #0]
 80054b0:	b124      	cbz	r4, 80054bc <iprintf+0x14>
 80054b2:	69a3      	ldr	r3, [r4, #24]
 80054b4:	b913      	cbnz	r3, 80054bc <iprintf+0x14>
 80054b6:	4620      	mov	r0, r4
 80054b8:	f000 fede 	bl	8006278 <__sinit>
 80054bc:	ab05      	add	r3, sp, #20
 80054be:	9a04      	ldr	r2, [sp, #16]
 80054c0:	68a1      	ldr	r1, [r4, #8]
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	4620      	mov	r0, r4
 80054c6:	f001 fbf5 	bl	8006cb4 <_vfiprintf_r>
 80054ca:	b002      	add	sp, #8
 80054cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d0:	b004      	add	sp, #16
 80054d2:	4770      	bx	lr
 80054d4:	2000000c 	.word	0x2000000c

080054d8 <quorem>:
 80054d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	6903      	ldr	r3, [r0, #16]
 80054de:	690c      	ldr	r4, [r1, #16]
 80054e0:	42a3      	cmp	r3, r4
 80054e2:	4607      	mov	r7, r0
 80054e4:	f2c0 8081 	blt.w	80055ea <quorem+0x112>
 80054e8:	3c01      	subs	r4, #1
 80054ea:	f101 0814 	add.w	r8, r1, #20
 80054ee:	f100 0514 	add.w	r5, r0, #20
 80054f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054f6:	9301      	str	r3, [sp, #4]
 80054f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005500:	3301      	adds	r3, #1
 8005502:	429a      	cmp	r2, r3
 8005504:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005508:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800550c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005510:	d331      	bcc.n	8005576 <quorem+0x9e>
 8005512:	f04f 0e00 	mov.w	lr, #0
 8005516:	4640      	mov	r0, r8
 8005518:	46ac      	mov	ip, r5
 800551a:	46f2      	mov	sl, lr
 800551c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005520:	b293      	uxth	r3, r2
 8005522:	fb06 e303 	mla	r3, r6, r3, lr
 8005526:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800552a:	b29b      	uxth	r3, r3
 800552c:	ebaa 0303 	sub.w	r3, sl, r3
 8005530:	0c12      	lsrs	r2, r2, #16
 8005532:	f8dc a000 	ldr.w	sl, [ip]
 8005536:	fb06 e202 	mla	r2, r6, r2, lr
 800553a:	fa13 f38a 	uxtah	r3, r3, sl
 800553e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005542:	fa1f fa82 	uxth.w	sl, r2
 8005546:	f8dc 2000 	ldr.w	r2, [ip]
 800554a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800554e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005552:	b29b      	uxth	r3, r3
 8005554:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005558:	4581      	cmp	r9, r0
 800555a:	f84c 3b04 	str.w	r3, [ip], #4
 800555e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005562:	d2db      	bcs.n	800551c <quorem+0x44>
 8005564:	f855 300b 	ldr.w	r3, [r5, fp]
 8005568:	b92b      	cbnz	r3, 8005576 <quorem+0x9e>
 800556a:	9b01      	ldr	r3, [sp, #4]
 800556c:	3b04      	subs	r3, #4
 800556e:	429d      	cmp	r5, r3
 8005570:	461a      	mov	r2, r3
 8005572:	d32e      	bcc.n	80055d2 <quorem+0xfa>
 8005574:	613c      	str	r4, [r7, #16]
 8005576:	4638      	mov	r0, r7
 8005578:	f001 f9b8 	bl	80068ec <__mcmp>
 800557c:	2800      	cmp	r0, #0
 800557e:	db24      	blt.n	80055ca <quorem+0xf2>
 8005580:	3601      	adds	r6, #1
 8005582:	4628      	mov	r0, r5
 8005584:	f04f 0c00 	mov.w	ip, #0
 8005588:	f858 2b04 	ldr.w	r2, [r8], #4
 800558c:	f8d0 e000 	ldr.w	lr, [r0]
 8005590:	b293      	uxth	r3, r2
 8005592:	ebac 0303 	sub.w	r3, ip, r3
 8005596:	0c12      	lsrs	r2, r2, #16
 8005598:	fa13 f38e 	uxtah	r3, r3, lr
 800559c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055aa:	45c1      	cmp	r9, r8
 80055ac:	f840 3b04 	str.w	r3, [r0], #4
 80055b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055b4:	d2e8      	bcs.n	8005588 <quorem+0xb0>
 80055b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055be:	b922      	cbnz	r2, 80055ca <quorem+0xf2>
 80055c0:	3b04      	subs	r3, #4
 80055c2:	429d      	cmp	r5, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	d30a      	bcc.n	80055de <quorem+0x106>
 80055c8:	613c      	str	r4, [r7, #16]
 80055ca:	4630      	mov	r0, r6
 80055cc:	b003      	add	sp, #12
 80055ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	3b04      	subs	r3, #4
 80055d6:	2a00      	cmp	r2, #0
 80055d8:	d1cc      	bne.n	8005574 <quorem+0x9c>
 80055da:	3c01      	subs	r4, #1
 80055dc:	e7c7      	b.n	800556e <quorem+0x96>
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	3b04      	subs	r3, #4
 80055e2:	2a00      	cmp	r2, #0
 80055e4:	d1f0      	bne.n	80055c8 <quorem+0xf0>
 80055e6:	3c01      	subs	r4, #1
 80055e8:	e7eb      	b.n	80055c2 <quorem+0xea>
 80055ea:	2000      	movs	r0, #0
 80055ec:	e7ee      	b.n	80055cc <quorem+0xf4>
	...

080055f0 <_dtoa_r>:
 80055f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f4:	ed2d 8b02 	vpush	{d8}
 80055f8:	ec57 6b10 	vmov	r6, r7, d0
 80055fc:	b095      	sub	sp, #84	; 0x54
 80055fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005600:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005604:	9105      	str	r1, [sp, #20]
 8005606:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800560a:	4604      	mov	r4, r0
 800560c:	9209      	str	r2, [sp, #36]	; 0x24
 800560e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005610:	b975      	cbnz	r5, 8005630 <_dtoa_r+0x40>
 8005612:	2010      	movs	r0, #16
 8005614:	f000 fed6 	bl	80063c4 <malloc>
 8005618:	4602      	mov	r2, r0
 800561a:	6260      	str	r0, [r4, #36]	; 0x24
 800561c:	b920      	cbnz	r0, 8005628 <_dtoa_r+0x38>
 800561e:	4bb2      	ldr	r3, [pc, #712]	; (80058e8 <_dtoa_r+0x2f8>)
 8005620:	21ea      	movs	r1, #234	; 0xea
 8005622:	48b2      	ldr	r0, [pc, #712]	; (80058ec <_dtoa_r+0x2fc>)
 8005624:	f001 fd9c 	bl	8007160 <__assert_func>
 8005628:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800562c:	6005      	str	r5, [r0, #0]
 800562e:	60c5      	str	r5, [r0, #12]
 8005630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005632:	6819      	ldr	r1, [r3, #0]
 8005634:	b151      	cbz	r1, 800564c <_dtoa_r+0x5c>
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	604a      	str	r2, [r1, #4]
 800563a:	2301      	movs	r3, #1
 800563c:	4093      	lsls	r3, r2
 800563e:	608b      	str	r3, [r1, #8]
 8005640:	4620      	mov	r0, r4
 8005642:	f000 ff15 	bl	8006470 <_Bfree>
 8005646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	1e3b      	subs	r3, r7, #0
 800564e:	bfb9      	ittee	lt
 8005650:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005654:	9303      	strlt	r3, [sp, #12]
 8005656:	2300      	movge	r3, #0
 8005658:	f8c8 3000 	strge.w	r3, [r8]
 800565c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005660:	4ba3      	ldr	r3, [pc, #652]	; (80058f0 <_dtoa_r+0x300>)
 8005662:	bfbc      	itt	lt
 8005664:	2201      	movlt	r2, #1
 8005666:	f8c8 2000 	strlt.w	r2, [r8]
 800566a:	ea33 0309 	bics.w	r3, r3, r9
 800566e:	d11b      	bne.n	80056a8 <_dtoa_r+0xb8>
 8005670:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005672:	f242 730f 	movw	r3, #9999	; 0x270f
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800567c:	4333      	orrs	r3, r6
 800567e:	f000 857a 	beq.w	8006176 <_dtoa_r+0xb86>
 8005682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005684:	b963      	cbnz	r3, 80056a0 <_dtoa_r+0xb0>
 8005686:	4b9b      	ldr	r3, [pc, #620]	; (80058f4 <_dtoa_r+0x304>)
 8005688:	e024      	b.n	80056d4 <_dtoa_r+0xe4>
 800568a:	4b9b      	ldr	r3, [pc, #620]	; (80058f8 <_dtoa_r+0x308>)
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	3308      	adds	r3, #8
 8005690:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	9800      	ldr	r0, [sp, #0]
 8005696:	b015      	add	sp, #84	; 0x54
 8005698:	ecbd 8b02 	vpop	{d8}
 800569c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a0:	4b94      	ldr	r3, [pc, #592]	; (80058f4 <_dtoa_r+0x304>)
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	3303      	adds	r3, #3
 80056a6:	e7f3      	b.n	8005690 <_dtoa_r+0xa0>
 80056a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056ac:	2200      	movs	r2, #0
 80056ae:	ec51 0b17 	vmov	r0, r1, d7
 80056b2:	2300      	movs	r3, #0
 80056b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80056b8:	f7fb fa06 	bl	8000ac8 <__aeabi_dcmpeq>
 80056bc:	4680      	mov	r8, r0
 80056be:	b158      	cbz	r0, 80056d8 <_dtoa_r+0xe8>
 80056c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056c2:	2301      	movs	r3, #1
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 8551 	beq.w	8006170 <_dtoa_r+0xb80>
 80056ce:	488b      	ldr	r0, [pc, #556]	; (80058fc <_dtoa_r+0x30c>)
 80056d0:	6018      	str	r0, [r3, #0]
 80056d2:	1e43      	subs	r3, r0, #1
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	e7dd      	b.n	8005694 <_dtoa_r+0xa4>
 80056d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80056dc:	aa12      	add	r2, sp, #72	; 0x48
 80056de:	a913      	add	r1, sp, #76	; 0x4c
 80056e0:	4620      	mov	r0, r4
 80056e2:	f001 f9a7 	bl	8006a34 <__d2b>
 80056e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80056ea:	4683      	mov	fp, r0
 80056ec:	2d00      	cmp	r5, #0
 80056ee:	d07c      	beq.n	80057ea <_dtoa_r+0x1fa>
 80056f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80056f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80056fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005702:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005706:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800570a:	4b7d      	ldr	r3, [pc, #500]	; (8005900 <_dtoa_r+0x310>)
 800570c:	2200      	movs	r2, #0
 800570e:	4630      	mov	r0, r6
 8005710:	4639      	mov	r1, r7
 8005712:	f7fa fdb9 	bl	8000288 <__aeabi_dsub>
 8005716:	a36e      	add	r3, pc, #440	; (adr r3, 80058d0 <_dtoa_r+0x2e0>)
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f7fa ff6c 	bl	80005f8 <__aeabi_dmul>
 8005720:	a36d      	add	r3, pc, #436	; (adr r3, 80058d8 <_dtoa_r+0x2e8>)
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f7fa fdb1 	bl	800028c <__adddf3>
 800572a:	4606      	mov	r6, r0
 800572c:	4628      	mov	r0, r5
 800572e:	460f      	mov	r7, r1
 8005730:	f7fa fef8 	bl	8000524 <__aeabi_i2d>
 8005734:	a36a      	add	r3, pc, #424	; (adr r3, 80058e0 <_dtoa_r+0x2f0>)
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	f7fa ff5d 	bl	80005f8 <__aeabi_dmul>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4630      	mov	r0, r6
 8005744:	4639      	mov	r1, r7
 8005746:	f7fa fda1 	bl	800028c <__adddf3>
 800574a:	4606      	mov	r6, r0
 800574c:	460f      	mov	r7, r1
 800574e:	f7fb fa03 	bl	8000b58 <__aeabi_d2iz>
 8005752:	2200      	movs	r2, #0
 8005754:	4682      	mov	sl, r0
 8005756:	2300      	movs	r3, #0
 8005758:	4630      	mov	r0, r6
 800575a:	4639      	mov	r1, r7
 800575c:	f7fb f9be 	bl	8000adc <__aeabi_dcmplt>
 8005760:	b148      	cbz	r0, 8005776 <_dtoa_r+0x186>
 8005762:	4650      	mov	r0, sl
 8005764:	f7fa fede 	bl	8000524 <__aeabi_i2d>
 8005768:	4632      	mov	r2, r6
 800576a:	463b      	mov	r3, r7
 800576c:	f7fb f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8005770:	b908      	cbnz	r0, 8005776 <_dtoa_r+0x186>
 8005772:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005776:	f1ba 0f16 	cmp.w	sl, #22
 800577a:	d854      	bhi.n	8005826 <_dtoa_r+0x236>
 800577c:	4b61      	ldr	r3, [pc, #388]	; (8005904 <_dtoa_r+0x314>)
 800577e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800578a:	f7fb f9a7 	bl	8000adc <__aeabi_dcmplt>
 800578e:	2800      	cmp	r0, #0
 8005790:	d04b      	beq.n	800582a <_dtoa_r+0x23a>
 8005792:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005796:	2300      	movs	r3, #0
 8005798:	930e      	str	r3, [sp, #56]	; 0x38
 800579a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800579c:	1b5d      	subs	r5, r3, r5
 800579e:	1e6b      	subs	r3, r5, #1
 80057a0:	9304      	str	r3, [sp, #16]
 80057a2:	bf43      	ittte	mi
 80057a4:	2300      	movmi	r3, #0
 80057a6:	f1c5 0801 	rsbmi	r8, r5, #1
 80057aa:	9304      	strmi	r3, [sp, #16]
 80057ac:	f04f 0800 	movpl.w	r8, #0
 80057b0:	f1ba 0f00 	cmp.w	sl, #0
 80057b4:	db3b      	blt.n	800582e <_dtoa_r+0x23e>
 80057b6:	9b04      	ldr	r3, [sp, #16]
 80057b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80057bc:	4453      	add	r3, sl
 80057be:	9304      	str	r3, [sp, #16]
 80057c0:	2300      	movs	r3, #0
 80057c2:	9306      	str	r3, [sp, #24]
 80057c4:	9b05      	ldr	r3, [sp, #20]
 80057c6:	2b09      	cmp	r3, #9
 80057c8:	d869      	bhi.n	800589e <_dtoa_r+0x2ae>
 80057ca:	2b05      	cmp	r3, #5
 80057cc:	bfc4      	itt	gt
 80057ce:	3b04      	subgt	r3, #4
 80057d0:	9305      	strgt	r3, [sp, #20]
 80057d2:	9b05      	ldr	r3, [sp, #20]
 80057d4:	f1a3 0302 	sub.w	r3, r3, #2
 80057d8:	bfcc      	ite	gt
 80057da:	2500      	movgt	r5, #0
 80057dc:	2501      	movle	r5, #1
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d869      	bhi.n	80058b6 <_dtoa_r+0x2c6>
 80057e2:	e8df f003 	tbb	[pc, r3]
 80057e6:	4e2c      	.short	0x4e2c
 80057e8:	5a4c      	.short	0x5a4c
 80057ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80057ee:	441d      	add	r5, r3
 80057f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	bfc1      	itttt	gt
 80057f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80057fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005800:	fa09 f303 	lslgt.w	r3, r9, r3
 8005804:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005808:	bfda      	itte	le
 800580a:	f1c3 0320 	rsble	r3, r3, #32
 800580e:	fa06 f003 	lslle.w	r0, r6, r3
 8005812:	4318      	orrgt	r0, r3
 8005814:	f7fa fe76 	bl	8000504 <__aeabi_ui2d>
 8005818:	2301      	movs	r3, #1
 800581a:	4606      	mov	r6, r0
 800581c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005820:	3d01      	subs	r5, #1
 8005822:	9310      	str	r3, [sp, #64]	; 0x40
 8005824:	e771      	b.n	800570a <_dtoa_r+0x11a>
 8005826:	2301      	movs	r3, #1
 8005828:	e7b6      	b.n	8005798 <_dtoa_r+0x1a8>
 800582a:	900e      	str	r0, [sp, #56]	; 0x38
 800582c:	e7b5      	b.n	800579a <_dtoa_r+0x1aa>
 800582e:	f1ca 0300 	rsb	r3, sl, #0
 8005832:	9306      	str	r3, [sp, #24]
 8005834:	2300      	movs	r3, #0
 8005836:	eba8 080a 	sub.w	r8, r8, sl
 800583a:	930d      	str	r3, [sp, #52]	; 0x34
 800583c:	e7c2      	b.n	80057c4 <_dtoa_r+0x1d4>
 800583e:	2300      	movs	r3, #0
 8005840:	9308      	str	r3, [sp, #32]
 8005842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005844:	2b00      	cmp	r3, #0
 8005846:	dc39      	bgt.n	80058bc <_dtoa_r+0x2cc>
 8005848:	f04f 0901 	mov.w	r9, #1
 800584c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005850:	464b      	mov	r3, r9
 8005852:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005856:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005858:	2200      	movs	r2, #0
 800585a:	6042      	str	r2, [r0, #4]
 800585c:	2204      	movs	r2, #4
 800585e:	f102 0614 	add.w	r6, r2, #20
 8005862:	429e      	cmp	r6, r3
 8005864:	6841      	ldr	r1, [r0, #4]
 8005866:	d92f      	bls.n	80058c8 <_dtoa_r+0x2d8>
 8005868:	4620      	mov	r0, r4
 800586a:	f000 fdc1 	bl	80063f0 <_Balloc>
 800586e:	9000      	str	r0, [sp, #0]
 8005870:	2800      	cmp	r0, #0
 8005872:	d14b      	bne.n	800590c <_dtoa_r+0x31c>
 8005874:	4b24      	ldr	r3, [pc, #144]	; (8005908 <_dtoa_r+0x318>)
 8005876:	4602      	mov	r2, r0
 8005878:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800587c:	e6d1      	b.n	8005622 <_dtoa_r+0x32>
 800587e:	2301      	movs	r3, #1
 8005880:	e7de      	b.n	8005840 <_dtoa_r+0x250>
 8005882:	2300      	movs	r3, #0
 8005884:	9308      	str	r3, [sp, #32]
 8005886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005888:	eb0a 0903 	add.w	r9, sl, r3
 800588c:	f109 0301 	add.w	r3, r9, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	9301      	str	r3, [sp, #4]
 8005894:	bfb8      	it	lt
 8005896:	2301      	movlt	r3, #1
 8005898:	e7dd      	b.n	8005856 <_dtoa_r+0x266>
 800589a:	2301      	movs	r3, #1
 800589c:	e7f2      	b.n	8005884 <_dtoa_r+0x294>
 800589e:	2501      	movs	r5, #1
 80058a0:	2300      	movs	r3, #0
 80058a2:	9305      	str	r3, [sp, #20]
 80058a4:	9508      	str	r5, [sp, #32]
 80058a6:	f04f 39ff 	mov.w	r9, #4294967295
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80058b0:	2312      	movs	r3, #18
 80058b2:	9209      	str	r2, [sp, #36]	; 0x24
 80058b4:	e7cf      	b.n	8005856 <_dtoa_r+0x266>
 80058b6:	2301      	movs	r3, #1
 80058b8:	9308      	str	r3, [sp, #32]
 80058ba:	e7f4      	b.n	80058a6 <_dtoa_r+0x2b6>
 80058bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80058c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80058c4:	464b      	mov	r3, r9
 80058c6:	e7c6      	b.n	8005856 <_dtoa_r+0x266>
 80058c8:	3101      	adds	r1, #1
 80058ca:	6041      	str	r1, [r0, #4]
 80058cc:	0052      	lsls	r2, r2, #1
 80058ce:	e7c6      	b.n	800585e <_dtoa_r+0x26e>
 80058d0:	636f4361 	.word	0x636f4361
 80058d4:	3fd287a7 	.word	0x3fd287a7
 80058d8:	8b60c8b3 	.word	0x8b60c8b3
 80058dc:	3fc68a28 	.word	0x3fc68a28
 80058e0:	509f79fb 	.word	0x509f79fb
 80058e4:	3fd34413 	.word	0x3fd34413
 80058e8:	0800762d 	.word	0x0800762d
 80058ec:	08007644 	.word	0x08007644
 80058f0:	7ff00000 	.word	0x7ff00000
 80058f4:	08007629 	.word	0x08007629
 80058f8:	08007620 	.word	0x08007620
 80058fc:	080075fd 	.word	0x080075fd
 8005900:	3ff80000 	.word	0x3ff80000
 8005904:	080077a0 	.word	0x080077a0
 8005908:	080076a3 	.word	0x080076a3
 800590c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800590e:	9a00      	ldr	r2, [sp, #0]
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	9b01      	ldr	r3, [sp, #4]
 8005914:	2b0e      	cmp	r3, #14
 8005916:	f200 80ad 	bhi.w	8005a74 <_dtoa_r+0x484>
 800591a:	2d00      	cmp	r5, #0
 800591c:	f000 80aa 	beq.w	8005a74 <_dtoa_r+0x484>
 8005920:	f1ba 0f00 	cmp.w	sl, #0
 8005924:	dd36      	ble.n	8005994 <_dtoa_r+0x3a4>
 8005926:	4ac3      	ldr	r2, [pc, #780]	; (8005c34 <_dtoa_r+0x644>)
 8005928:	f00a 030f 	and.w	r3, sl, #15
 800592c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005930:	ed93 7b00 	vldr	d7, [r3]
 8005934:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005938:	ea4f 172a 	mov.w	r7, sl, asr #4
 800593c:	eeb0 8a47 	vmov.f32	s16, s14
 8005940:	eef0 8a67 	vmov.f32	s17, s15
 8005944:	d016      	beq.n	8005974 <_dtoa_r+0x384>
 8005946:	4bbc      	ldr	r3, [pc, #752]	; (8005c38 <_dtoa_r+0x648>)
 8005948:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800594c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005950:	f7fa ff7c 	bl	800084c <__aeabi_ddiv>
 8005954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005958:	f007 070f 	and.w	r7, r7, #15
 800595c:	2503      	movs	r5, #3
 800595e:	4eb6      	ldr	r6, [pc, #728]	; (8005c38 <_dtoa_r+0x648>)
 8005960:	b957      	cbnz	r7, 8005978 <_dtoa_r+0x388>
 8005962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005966:	ec53 2b18 	vmov	r2, r3, d8
 800596a:	f7fa ff6f 	bl	800084c <__aeabi_ddiv>
 800596e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005972:	e029      	b.n	80059c8 <_dtoa_r+0x3d8>
 8005974:	2502      	movs	r5, #2
 8005976:	e7f2      	b.n	800595e <_dtoa_r+0x36e>
 8005978:	07f9      	lsls	r1, r7, #31
 800597a:	d508      	bpl.n	800598e <_dtoa_r+0x39e>
 800597c:	ec51 0b18 	vmov	r0, r1, d8
 8005980:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005984:	f7fa fe38 	bl	80005f8 <__aeabi_dmul>
 8005988:	ec41 0b18 	vmov	d8, r0, r1
 800598c:	3501      	adds	r5, #1
 800598e:	107f      	asrs	r7, r7, #1
 8005990:	3608      	adds	r6, #8
 8005992:	e7e5      	b.n	8005960 <_dtoa_r+0x370>
 8005994:	f000 80a6 	beq.w	8005ae4 <_dtoa_r+0x4f4>
 8005998:	f1ca 0600 	rsb	r6, sl, #0
 800599c:	4ba5      	ldr	r3, [pc, #660]	; (8005c34 <_dtoa_r+0x644>)
 800599e:	4fa6      	ldr	r7, [pc, #664]	; (8005c38 <_dtoa_r+0x648>)
 80059a0:	f006 020f 	and.w	r2, r6, #15
 80059a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059b0:	f7fa fe22 	bl	80005f8 <__aeabi_dmul>
 80059b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059b8:	1136      	asrs	r6, r6, #4
 80059ba:	2300      	movs	r3, #0
 80059bc:	2502      	movs	r5, #2
 80059be:	2e00      	cmp	r6, #0
 80059c0:	f040 8085 	bne.w	8005ace <_dtoa_r+0x4de>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1d2      	bne.n	800596e <_dtoa_r+0x37e>
 80059c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 808c 	beq.w	8005ae8 <_dtoa_r+0x4f8>
 80059d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80059d4:	4b99      	ldr	r3, [pc, #612]	; (8005c3c <_dtoa_r+0x64c>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	4630      	mov	r0, r6
 80059da:	4639      	mov	r1, r7
 80059dc:	f7fb f87e 	bl	8000adc <__aeabi_dcmplt>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	f000 8081 	beq.w	8005ae8 <_dtoa_r+0x4f8>
 80059e6:	9b01      	ldr	r3, [sp, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d07d      	beq.n	8005ae8 <_dtoa_r+0x4f8>
 80059ec:	f1b9 0f00 	cmp.w	r9, #0
 80059f0:	dd3c      	ble.n	8005a6c <_dtoa_r+0x47c>
 80059f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80059f6:	9307      	str	r3, [sp, #28]
 80059f8:	2200      	movs	r2, #0
 80059fa:	4b91      	ldr	r3, [pc, #580]	; (8005c40 <_dtoa_r+0x650>)
 80059fc:	4630      	mov	r0, r6
 80059fe:	4639      	mov	r1, r7
 8005a00:	f7fa fdfa 	bl	80005f8 <__aeabi_dmul>
 8005a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a08:	3501      	adds	r5, #1
 8005a0a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005a0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a12:	4628      	mov	r0, r5
 8005a14:	f7fa fd86 	bl	8000524 <__aeabi_i2d>
 8005a18:	4632      	mov	r2, r6
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	f7fa fdec 	bl	80005f8 <__aeabi_dmul>
 8005a20:	4b88      	ldr	r3, [pc, #544]	; (8005c44 <_dtoa_r+0x654>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	f7fa fc32 	bl	800028c <__adddf3>
 8005a28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a30:	9303      	str	r3, [sp, #12]
 8005a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d15c      	bne.n	8005af2 <_dtoa_r+0x502>
 8005a38:	4b83      	ldr	r3, [pc, #524]	; (8005c48 <_dtoa_r+0x658>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	4639      	mov	r1, r7
 8005a40:	f7fa fc22 	bl	8000288 <__aeabi_dsub>
 8005a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a48:	4606      	mov	r6, r0
 8005a4a:	460f      	mov	r7, r1
 8005a4c:	f7fb f864 	bl	8000b18 <__aeabi_dcmpgt>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	f040 8296 	bne.w	8005f82 <_dtoa_r+0x992>
 8005a56:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a60:	4639      	mov	r1, r7
 8005a62:	f7fb f83b 	bl	8000adc <__aeabi_dcmplt>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	f040 8288 	bne.w	8005f7c <_dtoa_r+0x98c>
 8005a6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005a70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f2c0 8158 	blt.w	8005d2c <_dtoa_r+0x73c>
 8005a7c:	f1ba 0f0e 	cmp.w	sl, #14
 8005a80:	f300 8154 	bgt.w	8005d2c <_dtoa_r+0x73c>
 8005a84:	4b6b      	ldr	r3, [pc, #428]	; (8005c34 <_dtoa_r+0x644>)
 8005a86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f280 80e3 	bge.w	8005c5c <_dtoa_r+0x66c>
 8005a96:	9b01      	ldr	r3, [sp, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f300 80df 	bgt.w	8005c5c <_dtoa_r+0x66c>
 8005a9e:	f040 826d 	bne.w	8005f7c <_dtoa_r+0x98c>
 8005aa2:	4b69      	ldr	r3, [pc, #420]	; (8005c48 <_dtoa_r+0x658>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	4649      	mov	r1, r9
 8005aaa:	f7fa fda5 	bl	80005f8 <__aeabi_dmul>
 8005aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ab2:	f7fb f827 	bl	8000b04 <__aeabi_dcmpge>
 8005ab6:	9e01      	ldr	r6, [sp, #4]
 8005ab8:	4637      	mov	r7, r6
 8005aba:	2800      	cmp	r0, #0
 8005abc:	f040 8243 	bne.w	8005f46 <_dtoa_r+0x956>
 8005ac0:	9d00      	ldr	r5, [sp, #0]
 8005ac2:	2331      	movs	r3, #49	; 0x31
 8005ac4:	f805 3b01 	strb.w	r3, [r5], #1
 8005ac8:	f10a 0a01 	add.w	sl, sl, #1
 8005acc:	e23f      	b.n	8005f4e <_dtoa_r+0x95e>
 8005ace:	07f2      	lsls	r2, r6, #31
 8005ad0:	d505      	bpl.n	8005ade <_dtoa_r+0x4ee>
 8005ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad6:	f7fa fd8f 	bl	80005f8 <__aeabi_dmul>
 8005ada:	3501      	adds	r5, #1
 8005adc:	2301      	movs	r3, #1
 8005ade:	1076      	asrs	r6, r6, #1
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	e76c      	b.n	80059be <_dtoa_r+0x3ce>
 8005ae4:	2502      	movs	r5, #2
 8005ae6:	e76f      	b.n	80059c8 <_dtoa_r+0x3d8>
 8005ae8:	9b01      	ldr	r3, [sp, #4]
 8005aea:	f8cd a01c 	str.w	sl, [sp, #28]
 8005aee:	930c      	str	r3, [sp, #48]	; 0x30
 8005af0:	e78d      	b.n	8005a0e <_dtoa_r+0x41e>
 8005af2:	9900      	ldr	r1, [sp, #0]
 8005af4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005af6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005af8:	4b4e      	ldr	r3, [pc, #312]	; (8005c34 <_dtoa_r+0x644>)
 8005afa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005afe:	4401      	add	r1, r0
 8005b00:	9102      	str	r1, [sp, #8]
 8005b02:	9908      	ldr	r1, [sp, #32]
 8005b04:	eeb0 8a47 	vmov.f32	s16, s14
 8005b08:	eef0 8a67 	vmov.f32	s17, s15
 8005b0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b14:	2900      	cmp	r1, #0
 8005b16:	d045      	beq.n	8005ba4 <_dtoa_r+0x5b4>
 8005b18:	494c      	ldr	r1, [pc, #304]	; (8005c4c <_dtoa_r+0x65c>)
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	f7fa fe96 	bl	800084c <__aeabi_ddiv>
 8005b20:	ec53 2b18 	vmov	r2, r3, d8
 8005b24:	f7fa fbb0 	bl	8000288 <__aeabi_dsub>
 8005b28:	9d00      	ldr	r5, [sp, #0]
 8005b2a:	ec41 0b18 	vmov	d8, r0, r1
 8005b2e:	4639      	mov	r1, r7
 8005b30:	4630      	mov	r0, r6
 8005b32:	f7fb f811 	bl	8000b58 <__aeabi_d2iz>
 8005b36:	900c      	str	r0, [sp, #48]	; 0x30
 8005b38:	f7fa fcf4 	bl	8000524 <__aeabi_i2d>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4630      	mov	r0, r6
 8005b42:	4639      	mov	r1, r7
 8005b44:	f7fa fba0 	bl	8000288 <__aeabi_dsub>
 8005b48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b4a:	3330      	adds	r3, #48	; 0x30
 8005b4c:	f805 3b01 	strb.w	r3, [r5], #1
 8005b50:	ec53 2b18 	vmov	r2, r3, d8
 8005b54:	4606      	mov	r6, r0
 8005b56:	460f      	mov	r7, r1
 8005b58:	f7fa ffc0 	bl	8000adc <__aeabi_dcmplt>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d165      	bne.n	8005c2c <_dtoa_r+0x63c>
 8005b60:	4632      	mov	r2, r6
 8005b62:	463b      	mov	r3, r7
 8005b64:	4935      	ldr	r1, [pc, #212]	; (8005c3c <_dtoa_r+0x64c>)
 8005b66:	2000      	movs	r0, #0
 8005b68:	f7fa fb8e 	bl	8000288 <__aeabi_dsub>
 8005b6c:	ec53 2b18 	vmov	r2, r3, d8
 8005b70:	f7fa ffb4 	bl	8000adc <__aeabi_dcmplt>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	f040 80b9 	bne.w	8005cec <_dtoa_r+0x6fc>
 8005b7a:	9b02      	ldr	r3, [sp, #8]
 8005b7c:	429d      	cmp	r5, r3
 8005b7e:	f43f af75 	beq.w	8005a6c <_dtoa_r+0x47c>
 8005b82:	4b2f      	ldr	r3, [pc, #188]	; (8005c40 <_dtoa_r+0x650>)
 8005b84:	ec51 0b18 	vmov	r0, r1, d8
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f7fa fd35 	bl	80005f8 <__aeabi_dmul>
 8005b8e:	4b2c      	ldr	r3, [pc, #176]	; (8005c40 <_dtoa_r+0x650>)
 8005b90:	ec41 0b18 	vmov	d8, r0, r1
 8005b94:	2200      	movs	r2, #0
 8005b96:	4630      	mov	r0, r6
 8005b98:	4639      	mov	r1, r7
 8005b9a:	f7fa fd2d 	bl	80005f8 <__aeabi_dmul>
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	460f      	mov	r7, r1
 8005ba2:	e7c4      	b.n	8005b2e <_dtoa_r+0x53e>
 8005ba4:	ec51 0b17 	vmov	r0, r1, d7
 8005ba8:	f7fa fd26 	bl	80005f8 <__aeabi_dmul>
 8005bac:	9b02      	ldr	r3, [sp, #8]
 8005bae:	9d00      	ldr	r5, [sp, #0]
 8005bb0:	930c      	str	r3, [sp, #48]	; 0x30
 8005bb2:	ec41 0b18 	vmov	d8, r0, r1
 8005bb6:	4639      	mov	r1, r7
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f7fa ffcd 	bl	8000b58 <__aeabi_d2iz>
 8005bbe:	9011      	str	r0, [sp, #68]	; 0x44
 8005bc0:	f7fa fcb0 	bl	8000524 <__aeabi_i2d>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4630      	mov	r0, r6
 8005bca:	4639      	mov	r1, r7
 8005bcc:	f7fa fb5c 	bl	8000288 <__aeabi_dsub>
 8005bd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005bd2:	3330      	adds	r3, #48	; 0x30
 8005bd4:	f805 3b01 	strb.w	r3, [r5], #1
 8005bd8:	9b02      	ldr	r3, [sp, #8]
 8005bda:	429d      	cmp	r5, r3
 8005bdc:	4606      	mov	r6, r0
 8005bde:	460f      	mov	r7, r1
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	d134      	bne.n	8005c50 <_dtoa_r+0x660>
 8005be6:	4b19      	ldr	r3, [pc, #100]	; (8005c4c <_dtoa_r+0x65c>)
 8005be8:	ec51 0b18 	vmov	r0, r1, d8
 8005bec:	f7fa fb4e 	bl	800028c <__adddf3>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	4639      	mov	r1, r7
 8005bf8:	f7fa ff8e 	bl	8000b18 <__aeabi_dcmpgt>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d175      	bne.n	8005cec <_dtoa_r+0x6fc>
 8005c00:	ec53 2b18 	vmov	r2, r3, d8
 8005c04:	4911      	ldr	r1, [pc, #68]	; (8005c4c <_dtoa_r+0x65c>)
 8005c06:	2000      	movs	r0, #0
 8005c08:	f7fa fb3e 	bl	8000288 <__aeabi_dsub>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4630      	mov	r0, r6
 8005c12:	4639      	mov	r1, r7
 8005c14:	f7fa ff62 	bl	8000adc <__aeabi_dcmplt>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	f43f af27 	beq.w	8005a6c <_dtoa_r+0x47c>
 8005c1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c20:	1e6b      	subs	r3, r5, #1
 8005c22:	930c      	str	r3, [sp, #48]	; 0x30
 8005c24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c28:	2b30      	cmp	r3, #48	; 0x30
 8005c2a:	d0f8      	beq.n	8005c1e <_dtoa_r+0x62e>
 8005c2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005c30:	e04a      	b.n	8005cc8 <_dtoa_r+0x6d8>
 8005c32:	bf00      	nop
 8005c34:	080077a0 	.word	0x080077a0
 8005c38:	08007778 	.word	0x08007778
 8005c3c:	3ff00000 	.word	0x3ff00000
 8005c40:	40240000 	.word	0x40240000
 8005c44:	401c0000 	.word	0x401c0000
 8005c48:	40140000 	.word	0x40140000
 8005c4c:	3fe00000 	.word	0x3fe00000
 8005c50:	4baf      	ldr	r3, [pc, #700]	; (8005f10 <_dtoa_r+0x920>)
 8005c52:	f7fa fcd1 	bl	80005f8 <__aeabi_dmul>
 8005c56:	4606      	mov	r6, r0
 8005c58:	460f      	mov	r7, r1
 8005c5a:	e7ac      	b.n	8005bb6 <_dtoa_r+0x5c6>
 8005c5c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c60:	9d00      	ldr	r5, [sp, #0]
 8005c62:	4642      	mov	r2, r8
 8005c64:	464b      	mov	r3, r9
 8005c66:	4630      	mov	r0, r6
 8005c68:	4639      	mov	r1, r7
 8005c6a:	f7fa fdef 	bl	800084c <__aeabi_ddiv>
 8005c6e:	f7fa ff73 	bl	8000b58 <__aeabi_d2iz>
 8005c72:	9002      	str	r0, [sp, #8]
 8005c74:	f7fa fc56 	bl	8000524 <__aeabi_i2d>
 8005c78:	4642      	mov	r2, r8
 8005c7a:	464b      	mov	r3, r9
 8005c7c:	f7fa fcbc 	bl	80005f8 <__aeabi_dmul>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4630      	mov	r0, r6
 8005c86:	4639      	mov	r1, r7
 8005c88:	f7fa fafe 	bl	8000288 <__aeabi_dsub>
 8005c8c:	9e02      	ldr	r6, [sp, #8]
 8005c8e:	9f01      	ldr	r7, [sp, #4]
 8005c90:	3630      	adds	r6, #48	; 0x30
 8005c92:	f805 6b01 	strb.w	r6, [r5], #1
 8005c96:	9e00      	ldr	r6, [sp, #0]
 8005c98:	1bae      	subs	r6, r5, r6
 8005c9a:	42b7      	cmp	r7, r6
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	d137      	bne.n	8005d12 <_dtoa_r+0x722>
 8005ca2:	f7fa faf3 	bl	800028c <__adddf3>
 8005ca6:	4642      	mov	r2, r8
 8005ca8:	464b      	mov	r3, r9
 8005caa:	4606      	mov	r6, r0
 8005cac:	460f      	mov	r7, r1
 8005cae:	f7fa ff33 	bl	8000b18 <__aeabi_dcmpgt>
 8005cb2:	b9c8      	cbnz	r0, 8005ce8 <_dtoa_r+0x6f8>
 8005cb4:	4642      	mov	r2, r8
 8005cb6:	464b      	mov	r3, r9
 8005cb8:	4630      	mov	r0, r6
 8005cba:	4639      	mov	r1, r7
 8005cbc:	f7fa ff04 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cc0:	b110      	cbz	r0, 8005cc8 <_dtoa_r+0x6d8>
 8005cc2:	9b02      	ldr	r3, [sp, #8]
 8005cc4:	07d9      	lsls	r1, r3, #31
 8005cc6:	d40f      	bmi.n	8005ce8 <_dtoa_r+0x6f8>
 8005cc8:	4620      	mov	r0, r4
 8005cca:	4659      	mov	r1, fp
 8005ccc:	f000 fbd0 	bl	8006470 <_Bfree>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	702b      	strb	r3, [r5, #0]
 8005cd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cd6:	f10a 0001 	add.w	r0, sl, #1
 8005cda:	6018      	str	r0, [r3, #0]
 8005cdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f43f acd8 	beq.w	8005694 <_dtoa_r+0xa4>
 8005ce4:	601d      	str	r5, [r3, #0]
 8005ce6:	e4d5      	b.n	8005694 <_dtoa_r+0xa4>
 8005ce8:	f8cd a01c 	str.w	sl, [sp, #28]
 8005cec:	462b      	mov	r3, r5
 8005cee:	461d      	mov	r5, r3
 8005cf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cf4:	2a39      	cmp	r2, #57	; 0x39
 8005cf6:	d108      	bne.n	8005d0a <_dtoa_r+0x71a>
 8005cf8:	9a00      	ldr	r2, [sp, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d1f7      	bne.n	8005cee <_dtoa_r+0x6fe>
 8005cfe:	9a07      	ldr	r2, [sp, #28]
 8005d00:	9900      	ldr	r1, [sp, #0]
 8005d02:	3201      	adds	r2, #1
 8005d04:	9207      	str	r2, [sp, #28]
 8005d06:	2230      	movs	r2, #48	; 0x30
 8005d08:	700a      	strb	r2, [r1, #0]
 8005d0a:	781a      	ldrb	r2, [r3, #0]
 8005d0c:	3201      	adds	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	e78c      	b.n	8005c2c <_dtoa_r+0x63c>
 8005d12:	4b7f      	ldr	r3, [pc, #508]	; (8005f10 <_dtoa_r+0x920>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	f7fa fc6f 	bl	80005f8 <__aeabi_dmul>
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4606      	mov	r6, r0
 8005d20:	460f      	mov	r7, r1
 8005d22:	f7fa fed1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d26:	2800      	cmp	r0, #0
 8005d28:	d09b      	beq.n	8005c62 <_dtoa_r+0x672>
 8005d2a:	e7cd      	b.n	8005cc8 <_dtoa_r+0x6d8>
 8005d2c:	9a08      	ldr	r2, [sp, #32]
 8005d2e:	2a00      	cmp	r2, #0
 8005d30:	f000 80c4 	beq.w	8005ebc <_dtoa_r+0x8cc>
 8005d34:	9a05      	ldr	r2, [sp, #20]
 8005d36:	2a01      	cmp	r2, #1
 8005d38:	f300 80a8 	bgt.w	8005e8c <_dtoa_r+0x89c>
 8005d3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d3e:	2a00      	cmp	r2, #0
 8005d40:	f000 80a0 	beq.w	8005e84 <_dtoa_r+0x894>
 8005d44:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d48:	9e06      	ldr	r6, [sp, #24]
 8005d4a:	4645      	mov	r5, r8
 8005d4c:	9a04      	ldr	r2, [sp, #16]
 8005d4e:	2101      	movs	r1, #1
 8005d50:	441a      	add	r2, r3
 8005d52:	4620      	mov	r0, r4
 8005d54:	4498      	add	r8, r3
 8005d56:	9204      	str	r2, [sp, #16]
 8005d58:	f000 fc46 	bl	80065e8 <__i2b>
 8005d5c:	4607      	mov	r7, r0
 8005d5e:	2d00      	cmp	r5, #0
 8005d60:	dd0b      	ble.n	8005d7a <_dtoa_r+0x78a>
 8005d62:	9b04      	ldr	r3, [sp, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	dd08      	ble.n	8005d7a <_dtoa_r+0x78a>
 8005d68:	42ab      	cmp	r3, r5
 8005d6a:	9a04      	ldr	r2, [sp, #16]
 8005d6c:	bfa8      	it	ge
 8005d6e:	462b      	movge	r3, r5
 8005d70:	eba8 0803 	sub.w	r8, r8, r3
 8005d74:	1aed      	subs	r5, r5, r3
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	9304      	str	r3, [sp, #16]
 8005d7a:	9b06      	ldr	r3, [sp, #24]
 8005d7c:	b1fb      	cbz	r3, 8005dbe <_dtoa_r+0x7ce>
 8005d7e:	9b08      	ldr	r3, [sp, #32]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 809f 	beq.w	8005ec4 <_dtoa_r+0x8d4>
 8005d86:	2e00      	cmp	r6, #0
 8005d88:	dd11      	ble.n	8005dae <_dtoa_r+0x7be>
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	4632      	mov	r2, r6
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f000 fce6 	bl	8006760 <__pow5mult>
 8005d94:	465a      	mov	r2, fp
 8005d96:	4601      	mov	r1, r0
 8005d98:	4607      	mov	r7, r0
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f000 fc3a 	bl	8006614 <__multiply>
 8005da0:	4659      	mov	r1, fp
 8005da2:	9007      	str	r0, [sp, #28]
 8005da4:	4620      	mov	r0, r4
 8005da6:	f000 fb63 	bl	8006470 <_Bfree>
 8005daa:	9b07      	ldr	r3, [sp, #28]
 8005dac:	469b      	mov	fp, r3
 8005dae:	9b06      	ldr	r3, [sp, #24]
 8005db0:	1b9a      	subs	r2, r3, r6
 8005db2:	d004      	beq.n	8005dbe <_dtoa_r+0x7ce>
 8005db4:	4659      	mov	r1, fp
 8005db6:	4620      	mov	r0, r4
 8005db8:	f000 fcd2 	bl	8006760 <__pow5mult>
 8005dbc:	4683      	mov	fp, r0
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 fc11 	bl	80065e8 <__i2b>
 8005dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	4606      	mov	r6, r0
 8005dcc:	dd7c      	ble.n	8005ec8 <_dtoa_r+0x8d8>
 8005dce:	461a      	mov	r2, r3
 8005dd0:	4601      	mov	r1, r0
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f000 fcc4 	bl	8006760 <__pow5mult>
 8005dd8:	9b05      	ldr	r3, [sp, #20]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	4606      	mov	r6, r0
 8005dde:	dd76      	ble.n	8005ece <_dtoa_r+0x8de>
 8005de0:	2300      	movs	r3, #0
 8005de2:	9306      	str	r3, [sp, #24]
 8005de4:	6933      	ldr	r3, [r6, #16]
 8005de6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005dea:	6918      	ldr	r0, [r3, #16]
 8005dec:	f000 fbac 	bl	8006548 <__hi0bits>
 8005df0:	f1c0 0020 	rsb	r0, r0, #32
 8005df4:	9b04      	ldr	r3, [sp, #16]
 8005df6:	4418      	add	r0, r3
 8005df8:	f010 001f 	ands.w	r0, r0, #31
 8005dfc:	f000 8086 	beq.w	8005f0c <_dtoa_r+0x91c>
 8005e00:	f1c0 0320 	rsb	r3, r0, #32
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	dd7f      	ble.n	8005f08 <_dtoa_r+0x918>
 8005e08:	f1c0 001c 	rsb	r0, r0, #28
 8005e0c:	9b04      	ldr	r3, [sp, #16]
 8005e0e:	4403      	add	r3, r0
 8005e10:	4480      	add	r8, r0
 8005e12:	4405      	add	r5, r0
 8005e14:	9304      	str	r3, [sp, #16]
 8005e16:	f1b8 0f00 	cmp.w	r8, #0
 8005e1a:	dd05      	ble.n	8005e28 <_dtoa_r+0x838>
 8005e1c:	4659      	mov	r1, fp
 8005e1e:	4642      	mov	r2, r8
 8005e20:	4620      	mov	r0, r4
 8005e22:	f000 fcf7 	bl	8006814 <__lshift>
 8005e26:	4683      	mov	fp, r0
 8005e28:	9b04      	ldr	r3, [sp, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	dd05      	ble.n	8005e3a <_dtoa_r+0x84a>
 8005e2e:	4631      	mov	r1, r6
 8005e30:	461a      	mov	r2, r3
 8005e32:	4620      	mov	r0, r4
 8005e34:	f000 fcee 	bl	8006814 <__lshift>
 8005e38:	4606      	mov	r6, r0
 8005e3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d069      	beq.n	8005f14 <_dtoa_r+0x924>
 8005e40:	4631      	mov	r1, r6
 8005e42:	4658      	mov	r0, fp
 8005e44:	f000 fd52 	bl	80068ec <__mcmp>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	da63      	bge.n	8005f14 <_dtoa_r+0x924>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	4659      	mov	r1, fp
 8005e50:	220a      	movs	r2, #10
 8005e52:	4620      	mov	r0, r4
 8005e54:	f000 fb2e 	bl	80064b4 <__multadd>
 8005e58:	9b08      	ldr	r3, [sp, #32]
 8005e5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e5e:	4683      	mov	fp, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 818f 	beq.w	8006184 <_dtoa_r+0xb94>
 8005e66:	4639      	mov	r1, r7
 8005e68:	2300      	movs	r3, #0
 8005e6a:	220a      	movs	r2, #10
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f000 fb21 	bl	80064b4 <__multadd>
 8005e72:	f1b9 0f00 	cmp.w	r9, #0
 8005e76:	4607      	mov	r7, r0
 8005e78:	f300 808e 	bgt.w	8005f98 <_dtoa_r+0x9a8>
 8005e7c:	9b05      	ldr	r3, [sp, #20]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	dc50      	bgt.n	8005f24 <_dtoa_r+0x934>
 8005e82:	e089      	b.n	8005f98 <_dtoa_r+0x9a8>
 8005e84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e8a:	e75d      	b.n	8005d48 <_dtoa_r+0x758>
 8005e8c:	9b01      	ldr	r3, [sp, #4]
 8005e8e:	1e5e      	subs	r6, r3, #1
 8005e90:	9b06      	ldr	r3, [sp, #24]
 8005e92:	42b3      	cmp	r3, r6
 8005e94:	bfbf      	itttt	lt
 8005e96:	9b06      	ldrlt	r3, [sp, #24]
 8005e98:	9606      	strlt	r6, [sp, #24]
 8005e9a:	1af2      	sublt	r2, r6, r3
 8005e9c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005e9e:	bfb6      	itet	lt
 8005ea0:	189b      	addlt	r3, r3, r2
 8005ea2:	1b9e      	subge	r6, r3, r6
 8005ea4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005ea6:	9b01      	ldr	r3, [sp, #4]
 8005ea8:	bfb8      	it	lt
 8005eaa:	2600      	movlt	r6, #0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	bfb5      	itete	lt
 8005eb0:	eba8 0503 	sublt.w	r5, r8, r3
 8005eb4:	9b01      	ldrge	r3, [sp, #4]
 8005eb6:	2300      	movlt	r3, #0
 8005eb8:	4645      	movge	r5, r8
 8005eba:	e747      	b.n	8005d4c <_dtoa_r+0x75c>
 8005ebc:	9e06      	ldr	r6, [sp, #24]
 8005ebe:	9f08      	ldr	r7, [sp, #32]
 8005ec0:	4645      	mov	r5, r8
 8005ec2:	e74c      	b.n	8005d5e <_dtoa_r+0x76e>
 8005ec4:	9a06      	ldr	r2, [sp, #24]
 8005ec6:	e775      	b.n	8005db4 <_dtoa_r+0x7c4>
 8005ec8:	9b05      	ldr	r3, [sp, #20]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	dc18      	bgt.n	8005f00 <_dtoa_r+0x910>
 8005ece:	9b02      	ldr	r3, [sp, #8]
 8005ed0:	b9b3      	cbnz	r3, 8005f00 <_dtoa_r+0x910>
 8005ed2:	9b03      	ldr	r3, [sp, #12]
 8005ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ed8:	b9a3      	cbnz	r3, 8005f04 <_dtoa_r+0x914>
 8005eda:	9b03      	ldr	r3, [sp, #12]
 8005edc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ee0:	0d1b      	lsrs	r3, r3, #20
 8005ee2:	051b      	lsls	r3, r3, #20
 8005ee4:	b12b      	cbz	r3, 8005ef2 <_dtoa_r+0x902>
 8005ee6:	9b04      	ldr	r3, [sp, #16]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	9304      	str	r3, [sp, #16]
 8005eec:	f108 0801 	add.w	r8, r8, #1
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	9306      	str	r3, [sp, #24]
 8005ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f47f af74 	bne.w	8005de4 <_dtoa_r+0x7f4>
 8005efc:	2001      	movs	r0, #1
 8005efe:	e779      	b.n	8005df4 <_dtoa_r+0x804>
 8005f00:	2300      	movs	r3, #0
 8005f02:	e7f6      	b.n	8005ef2 <_dtoa_r+0x902>
 8005f04:	9b02      	ldr	r3, [sp, #8]
 8005f06:	e7f4      	b.n	8005ef2 <_dtoa_r+0x902>
 8005f08:	d085      	beq.n	8005e16 <_dtoa_r+0x826>
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	301c      	adds	r0, #28
 8005f0e:	e77d      	b.n	8005e0c <_dtoa_r+0x81c>
 8005f10:	40240000 	.word	0x40240000
 8005f14:	9b01      	ldr	r3, [sp, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	dc38      	bgt.n	8005f8c <_dtoa_r+0x99c>
 8005f1a:	9b05      	ldr	r3, [sp, #20]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	dd35      	ble.n	8005f8c <_dtoa_r+0x99c>
 8005f20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005f24:	f1b9 0f00 	cmp.w	r9, #0
 8005f28:	d10d      	bne.n	8005f46 <_dtoa_r+0x956>
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	2205      	movs	r2, #5
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 fabf 	bl	80064b4 <__multadd>
 8005f36:	4601      	mov	r1, r0
 8005f38:	4606      	mov	r6, r0
 8005f3a:	4658      	mov	r0, fp
 8005f3c:	f000 fcd6 	bl	80068ec <__mcmp>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	f73f adbd 	bgt.w	8005ac0 <_dtoa_r+0x4d0>
 8005f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f48:	9d00      	ldr	r5, [sp, #0]
 8005f4a:	ea6f 0a03 	mvn.w	sl, r3
 8005f4e:	f04f 0800 	mov.w	r8, #0
 8005f52:	4631      	mov	r1, r6
 8005f54:	4620      	mov	r0, r4
 8005f56:	f000 fa8b 	bl	8006470 <_Bfree>
 8005f5a:	2f00      	cmp	r7, #0
 8005f5c:	f43f aeb4 	beq.w	8005cc8 <_dtoa_r+0x6d8>
 8005f60:	f1b8 0f00 	cmp.w	r8, #0
 8005f64:	d005      	beq.n	8005f72 <_dtoa_r+0x982>
 8005f66:	45b8      	cmp	r8, r7
 8005f68:	d003      	beq.n	8005f72 <_dtoa_r+0x982>
 8005f6a:	4641      	mov	r1, r8
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	f000 fa7f 	bl	8006470 <_Bfree>
 8005f72:	4639      	mov	r1, r7
 8005f74:	4620      	mov	r0, r4
 8005f76:	f000 fa7b 	bl	8006470 <_Bfree>
 8005f7a:	e6a5      	b.n	8005cc8 <_dtoa_r+0x6d8>
 8005f7c:	2600      	movs	r6, #0
 8005f7e:	4637      	mov	r7, r6
 8005f80:	e7e1      	b.n	8005f46 <_dtoa_r+0x956>
 8005f82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005f84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005f88:	4637      	mov	r7, r6
 8005f8a:	e599      	b.n	8005ac0 <_dtoa_r+0x4d0>
 8005f8c:	9b08      	ldr	r3, [sp, #32]
 8005f8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 80fd 	beq.w	8006192 <_dtoa_r+0xba2>
 8005f98:	2d00      	cmp	r5, #0
 8005f9a:	dd05      	ble.n	8005fa8 <_dtoa_r+0x9b8>
 8005f9c:	4639      	mov	r1, r7
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fc37 	bl	8006814 <__lshift>
 8005fa6:	4607      	mov	r7, r0
 8005fa8:	9b06      	ldr	r3, [sp, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d05c      	beq.n	8006068 <_dtoa_r+0xa78>
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f000 fa1d 	bl	80063f0 <_Balloc>
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	b928      	cbnz	r0, 8005fc6 <_dtoa_r+0x9d6>
 8005fba:	4b80      	ldr	r3, [pc, #512]	; (80061bc <_dtoa_r+0xbcc>)
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005fc2:	f7ff bb2e 	b.w	8005622 <_dtoa_r+0x32>
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	3202      	adds	r2, #2
 8005fca:	0092      	lsls	r2, r2, #2
 8005fcc:	f107 010c 	add.w	r1, r7, #12
 8005fd0:	300c      	adds	r0, #12
 8005fd2:	f000 f9ff 	bl	80063d4 <memcpy>
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	4629      	mov	r1, r5
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 fc1a 	bl	8006814 <__lshift>
 8005fe0:	9b00      	ldr	r3, [sp, #0]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	9301      	str	r3, [sp, #4]
 8005fe6:	9b00      	ldr	r3, [sp, #0]
 8005fe8:	444b      	add	r3, r9
 8005fea:	9307      	str	r3, [sp, #28]
 8005fec:	9b02      	ldr	r3, [sp, #8]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	46b8      	mov	r8, r7
 8005ff4:	9306      	str	r3, [sp, #24]
 8005ff6:	4607      	mov	r7, r0
 8005ff8:	9b01      	ldr	r3, [sp, #4]
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	4658      	mov	r0, fp
 8006000:	9302      	str	r3, [sp, #8]
 8006002:	f7ff fa69 	bl	80054d8 <quorem>
 8006006:	4603      	mov	r3, r0
 8006008:	3330      	adds	r3, #48	; 0x30
 800600a:	9004      	str	r0, [sp, #16]
 800600c:	4641      	mov	r1, r8
 800600e:	4658      	mov	r0, fp
 8006010:	9308      	str	r3, [sp, #32]
 8006012:	f000 fc6b 	bl	80068ec <__mcmp>
 8006016:	463a      	mov	r2, r7
 8006018:	4681      	mov	r9, r0
 800601a:	4631      	mov	r1, r6
 800601c:	4620      	mov	r0, r4
 800601e:	f000 fc81 	bl	8006924 <__mdiff>
 8006022:	68c2      	ldr	r2, [r0, #12]
 8006024:	9b08      	ldr	r3, [sp, #32]
 8006026:	4605      	mov	r5, r0
 8006028:	bb02      	cbnz	r2, 800606c <_dtoa_r+0xa7c>
 800602a:	4601      	mov	r1, r0
 800602c:	4658      	mov	r0, fp
 800602e:	f000 fc5d 	bl	80068ec <__mcmp>
 8006032:	9b08      	ldr	r3, [sp, #32]
 8006034:	4602      	mov	r2, r0
 8006036:	4629      	mov	r1, r5
 8006038:	4620      	mov	r0, r4
 800603a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800603e:	f000 fa17 	bl	8006470 <_Bfree>
 8006042:	9b05      	ldr	r3, [sp, #20]
 8006044:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006046:	9d01      	ldr	r5, [sp, #4]
 8006048:	ea43 0102 	orr.w	r1, r3, r2
 800604c:	9b06      	ldr	r3, [sp, #24]
 800604e:	430b      	orrs	r3, r1
 8006050:	9b08      	ldr	r3, [sp, #32]
 8006052:	d10d      	bne.n	8006070 <_dtoa_r+0xa80>
 8006054:	2b39      	cmp	r3, #57	; 0x39
 8006056:	d029      	beq.n	80060ac <_dtoa_r+0xabc>
 8006058:	f1b9 0f00 	cmp.w	r9, #0
 800605c:	dd01      	ble.n	8006062 <_dtoa_r+0xa72>
 800605e:	9b04      	ldr	r3, [sp, #16]
 8006060:	3331      	adds	r3, #49	; 0x31
 8006062:	9a02      	ldr	r2, [sp, #8]
 8006064:	7013      	strb	r3, [r2, #0]
 8006066:	e774      	b.n	8005f52 <_dtoa_r+0x962>
 8006068:	4638      	mov	r0, r7
 800606a:	e7b9      	b.n	8005fe0 <_dtoa_r+0x9f0>
 800606c:	2201      	movs	r2, #1
 800606e:	e7e2      	b.n	8006036 <_dtoa_r+0xa46>
 8006070:	f1b9 0f00 	cmp.w	r9, #0
 8006074:	db06      	blt.n	8006084 <_dtoa_r+0xa94>
 8006076:	9905      	ldr	r1, [sp, #20]
 8006078:	ea41 0909 	orr.w	r9, r1, r9
 800607c:	9906      	ldr	r1, [sp, #24]
 800607e:	ea59 0101 	orrs.w	r1, r9, r1
 8006082:	d120      	bne.n	80060c6 <_dtoa_r+0xad6>
 8006084:	2a00      	cmp	r2, #0
 8006086:	ddec      	ble.n	8006062 <_dtoa_r+0xa72>
 8006088:	4659      	mov	r1, fp
 800608a:	2201      	movs	r2, #1
 800608c:	4620      	mov	r0, r4
 800608e:	9301      	str	r3, [sp, #4]
 8006090:	f000 fbc0 	bl	8006814 <__lshift>
 8006094:	4631      	mov	r1, r6
 8006096:	4683      	mov	fp, r0
 8006098:	f000 fc28 	bl	80068ec <__mcmp>
 800609c:	2800      	cmp	r0, #0
 800609e:	9b01      	ldr	r3, [sp, #4]
 80060a0:	dc02      	bgt.n	80060a8 <_dtoa_r+0xab8>
 80060a2:	d1de      	bne.n	8006062 <_dtoa_r+0xa72>
 80060a4:	07da      	lsls	r2, r3, #31
 80060a6:	d5dc      	bpl.n	8006062 <_dtoa_r+0xa72>
 80060a8:	2b39      	cmp	r3, #57	; 0x39
 80060aa:	d1d8      	bne.n	800605e <_dtoa_r+0xa6e>
 80060ac:	9a02      	ldr	r2, [sp, #8]
 80060ae:	2339      	movs	r3, #57	; 0x39
 80060b0:	7013      	strb	r3, [r2, #0]
 80060b2:	462b      	mov	r3, r5
 80060b4:	461d      	mov	r5, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060bc:	2a39      	cmp	r2, #57	; 0x39
 80060be:	d050      	beq.n	8006162 <_dtoa_r+0xb72>
 80060c0:	3201      	adds	r2, #1
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	e745      	b.n	8005f52 <_dtoa_r+0x962>
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	dd03      	ble.n	80060d2 <_dtoa_r+0xae2>
 80060ca:	2b39      	cmp	r3, #57	; 0x39
 80060cc:	d0ee      	beq.n	80060ac <_dtoa_r+0xabc>
 80060ce:	3301      	adds	r3, #1
 80060d0:	e7c7      	b.n	8006062 <_dtoa_r+0xa72>
 80060d2:	9a01      	ldr	r2, [sp, #4]
 80060d4:	9907      	ldr	r1, [sp, #28]
 80060d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060da:	428a      	cmp	r2, r1
 80060dc:	d02a      	beq.n	8006134 <_dtoa_r+0xb44>
 80060de:	4659      	mov	r1, fp
 80060e0:	2300      	movs	r3, #0
 80060e2:	220a      	movs	r2, #10
 80060e4:	4620      	mov	r0, r4
 80060e6:	f000 f9e5 	bl	80064b4 <__multadd>
 80060ea:	45b8      	cmp	r8, r7
 80060ec:	4683      	mov	fp, r0
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	f04f 020a 	mov.w	r2, #10
 80060f6:	4641      	mov	r1, r8
 80060f8:	4620      	mov	r0, r4
 80060fa:	d107      	bne.n	800610c <_dtoa_r+0xb1c>
 80060fc:	f000 f9da 	bl	80064b4 <__multadd>
 8006100:	4680      	mov	r8, r0
 8006102:	4607      	mov	r7, r0
 8006104:	9b01      	ldr	r3, [sp, #4]
 8006106:	3301      	adds	r3, #1
 8006108:	9301      	str	r3, [sp, #4]
 800610a:	e775      	b.n	8005ff8 <_dtoa_r+0xa08>
 800610c:	f000 f9d2 	bl	80064b4 <__multadd>
 8006110:	4639      	mov	r1, r7
 8006112:	4680      	mov	r8, r0
 8006114:	2300      	movs	r3, #0
 8006116:	220a      	movs	r2, #10
 8006118:	4620      	mov	r0, r4
 800611a:	f000 f9cb 	bl	80064b4 <__multadd>
 800611e:	4607      	mov	r7, r0
 8006120:	e7f0      	b.n	8006104 <_dtoa_r+0xb14>
 8006122:	f1b9 0f00 	cmp.w	r9, #0
 8006126:	9a00      	ldr	r2, [sp, #0]
 8006128:	bfcc      	ite	gt
 800612a:	464d      	movgt	r5, r9
 800612c:	2501      	movle	r5, #1
 800612e:	4415      	add	r5, r2
 8006130:	f04f 0800 	mov.w	r8, #0
 8006134:	4659      	mov	r1, fp
 8006136:	2201      	movs	r2, #1
 8006138:	4620      	mov	r0, r4
 800613a:	9301      	str	r3, [sp, #4]
 800613c:	f000 fb6a 	bl	8006814 <__lshift>
 8006140:	4631      	mov	r1, r6
 8006142:	4683      	mov	fp, r0
 8006144:	f000 fbd2 	bl	80068ec <__mcmp>
 8006148:	2800      	cmp	r0, #0
 800614a:	dcb2      	bgt.n	80060b2 <_dtoa_r+0xac2>
 800614c:	d102      	bne.n	8006154 <_dtoa_r+0xb64>
 800614e:	9b01      	ldr	r3, [sp, #4]
 8006150:	07db      	lsls	r3, r3, #31
 8006152:	d4ae      	bmi.n	80060b2 <_dtoa_r+0xac2>
 8006154:	462b      	mov	r3, r5
 8006156:	461d      	mov	r5, r3
 8006158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800615c:	2a30      	cmp	r2, #48	; 0x30
 800615e:	d0fa      	beq.n	8006156 <_dtoa_r+0xb66>
 8006160:	e6f7      	b.n	8005f52 <_dtoa_r+0x962>
 8006162:	9a00      	ldr	r2, [sp, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d1a5      	bne.n	80060b4 <_dtoa_r+0xac4>
 8006168:	f10a 0a01 	add.w	sl, sl, #1
 800616c:	2331      	movs	r3, #49	; 0x31
 800616e:	e779      	b.n	8006064 <_dtoa_r+0xa74>
 8006170:	4b13      	ldr	r3, [pc, #76]	; (80061c0 <_dtoa_r+0xbd0>)
 8006172:	f7ff baaf 	b.w	80056d4 <_dtoa_r+0xe4>
 8006176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006178:	2b00      	cmp	r3, #0
 800617a:	f47f aa86 	bne.w	800568a <_dtoa_r+0x9a>
 800617e:	4b11      	ldr	r3, [pc, #68]	; (80061c4 <_dtoa_r+0xbd4>)
 8006180:	f7ff baa8 	b.w	80056d4 <_dtoa_r+0xe4>
 8006184:	f1b9 0f00 	cmp.w	r9, #0
 8006188:	dc03      	bgt.n	8006192 <_dtoa_r+0xba2>
 800618a:	9b05      	ldr	r3, [sp, #20]
 800618c:	2b02      	cmp	r3, #2
 800618e:	f73f aec9 	bgt.w	8005f24 <_dtoa_r+0x934>
 8006192:	9d00      	ldr	r5, [sp, #0]
 8006194:	4631      	mov	r1, r6
 8006196:	4658      	mov	r0, fp
 8006198:	f7ff f99e 	bl	80054d8 <quorem>
 800619c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80061a0:	f805 3b01 	strb.w	r3, [r5], #1
 80061a4:	9a00      	ldr	r2, [sp, #0]
 80061a6:	1aaa      	subs	r2, r5, r2
 80061a8:	4591      	cmp	r9, r2
 80061aa:	ddba      	ble.n	8006122 <_dtoa_r+0xb32>
 80061ac:	4659      	mov	r1, fp
 80061ae:	2300      	movs	r3, #0
 80061b0:	220a      	movs	r2, #10
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 f97e 	bl	80064b4 <__multadd>
 80061b8:	4683      	mov	fp, r0
 80061ba:	e7eb      	b.n	8006194 <_dtoa_r+0xba4>
 80061bc:	080076a3 	.word	0x080076a3
 80061c0:	080075fc 	.word	0x080075fc
 80061c4:	08007620 	.word	0x08007620

080061c8 <std>:
 80061c8:	2300      	movs	r3, #0
 80061ca:	b510      	push	{r4, lr}
 80061cc:	4604      	mov	r4, r0
 80061ce:	e9c0 3300 	strd	r3, r3, [r0]
 80061d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061d6:	6083      	str	r3, [r0, #8]
 80061d8:	8181      	strh	r1, [r0, #12]
 80061da:	6643      	str	r3, [r0, #100]	; 0x64
 80061dc:	81c2      	strh	r2, [r0, #14]
 80061de:	6183      	str	r3, [r0, #24]
 80061e0:	4619      	mov	r1, r3
 80061e2:	2208      	movs	r2, #8
 80061e4:	305c      	adds	r0, #92	; 0x5c
 80061e6:	f7fe fced 	bl	8004bc4 <memset>
 80061ea:	4b05      	ldr	r3, [pc, #20]	; (8006200 <std+0x38>)
 80061ec:	6263      	str	r3, [r4, #36]	; 0x24
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <std+0x3c>)
 80061f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80061f2:	4b05      	ldr	r3, [pc, #20]	; (8006208 <std+0x40>)
 80061f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061f6:	4b05      	ldr	r3, [pc, #20]	; (800620c <std+0x44>)
 80061f8:	6224      	str	r4, [r4, #32]
 80061fa:	6323      	str	r3, [r4, #48]	; 0x30
 80061fc:	bd10      	pop	{r4, pc}
 80061fe:	bf00      	nop
 8006200:	08006f35 	.word	0x08006f35
 8006204:	08006f57 	.word	0x08006f57
 8006208:	08006f8f 	.word	0x08006f8f
 800620c:	08006fb3 	.word	0x08006fb3

08006210 <_cleanup_r>:
 8006210:	4901      	ldr	r1, [pc, #4]	; (8006218 <_cleanup_r+0x8>)
 8006212:	f000 b8af 	b.w	8006374 <_fwalk_reent>
 8006216:	bf00      	nop
 8006218:	080072c9 	.word	0x080072c9

0800621c <__sfmoreglue>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	1e4a      	subs	r2, r1, #1
 8006220:	2568      	movs	r5, #104	; 0x68
 8006222:	4355      	muls	r5, r2
 8006224:	460e      	mov	r6, r1
 8006226:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800622a:	f000 fcbf 	bl	8006bac <_malloc_r>
 800622e:	4604      	mov	r4, r0
 8006230:	b140      	cbz	r0, 8006244 <__sfmoreglue+0x28>
 8006232:	2100      	movs	r1, #0
 8006234:	e9c0 1600 	strd	r1, r6, [r0]
 8006238:	300c      	adds	r0, #12
 800623a:	60a0      	str	r0, [r4, #8]
 800623c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006240:	f7fe fcc0 	bl	8004bc4 <memset>
 8006244:	4620      	mov	r0, r4
 8006246:	bd70      	pop	{r4, r5, r6, pc}

08006248 <__sfp_lock_acquire>:
 8006248:	4801      	ldr	r0, [pc, #4]	; (8006250 <__sfp_lock_acquire+0x8>)
 800624a:	f000 b8b8 	b.w	80063be <__retarget_lock_acquire_recursive>
 800624e:	bf00      	nop
 8006250:	20000358 	.word	0x20000358

08006254 <__sfp_lock_release>:
 8006254:	4801      	ldr	r0, [pc, #4]	; (800625c <__sfp_lock_release+0x8>)
 8006256:	f000 b8b3 	b.w	80063c0 <__retarget_lock_release_recursive>
 800625a:	bf00      	nop
 800625c:	20000358 	.word	0x20000358

08006260 <__sinit_lock_acquire>:
 8006260:	4801      	ldr	r0, [pc, #4]	; (8006268 <__sinit_lock_acquire+0x8>)
 8006262:	f000 b8ac 	b.w	80063be <__retarget_lock_acquire_recursive>
 8006266:	bf00      	nop
 8006268:	20000353 	.word	0x20000353

0800626c <__sinit_lock_release>:
 800626c:	4801      	ldr	r0, [pc, #4]	; (8006274 <__sinit_lock_release+0x8>)
 800626e:	f000 b8a7 	b.w	80063c0 <__retarget_lock_release_recursive>
 8006272:	bf00      	nop
 8006274:	20000353 	.word	0x20000353

08006278 <__sinit>:
 8006278:	b510      	push	{r4, lr}
 800627a:	4604      	mov	r4, r0
 800627c:	f7ff fff0 	bl	8006260 <__sinit_lock_acquire>
 8006280:	69a3      	ldr	r3, [r4, #24]
 8006282:	b11b      	cbz	r3, 800628c <__sinit+0x14>
 8006284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006288:	f7ff bff0 	b.w	800626c <__sinit_lock_release>
 800628c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006290:	6523      	str	r3, [r4, #80]	; 0x50
 8006292:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <__sinit+0x68>)
 8006294:	4a13      	ldr	r2, [pc, #76]	; (80062e4 <__sinit+0x6c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	62a2      	str	r2, [r4, #40]	; 0x28
 800629a:	42a3      	cmp	r3, r4
 800629c:	bf04      	itt	eq
 800629e:	2301      	moveq	r3, #1
 80062a0:	61a3      	streq	r3, [r4, #24]
 80062a2:	4620      	mov	r0, r4
 80062a4:	f000 f820 	bl	80062e8 <__sfp>
 80062a8:	6060      	str	r0, [r4, #4]
 80062aa:	4620      	mov	r0, r4
 80062ac:	f000 f81c 	bl	80062e8 <__sfp>
 80062b0:	60a0      	str	r0, [r4, #8]
 80062b2:	4620      	mov	r0, r4
 80062b4:	f000 f818 	bl	80062e8 <__sfp>
 80062b8:	2200      	movs	r2, #0
 80062ba:	60e0      	str	r0, [r4, #12]
 80062bc:	2104      	movs	r1, #4
 80062be:	6860      	ldr	r0, [r4, #4]
 80062c0:	f7ff ff82 	bl	80061c8 <std>
 80062c4:	68a0      	ldr	r0, [r4, #8]
 80062c6:	2201      	movs	r2, #1
 80062c8:	2109      	movs	r1, #9
 80062ca:	f7ff ff7d 	bl	80061c8 <std>
 80062ce:	68e0      	ldr	r0, [r4, #12]
 80062d0:	2202      	movs	r2, #2
 80062d2:	2112      	movs	r1, #18
 80062d4:	f7ff ff78 	bl	80061c8 <std>
 80062d8:	2301      	movs	r3, #1
 80062da:	61a3      	str	r3, [r4, #24]
 80062dc:	e7d2      	b.n	8006284 <__sinit+0xc>
 80062de:	bf00      	nop
 80062e0:	080075e8 	.word	0x080075e8
 80062e4:	08006211 	.word	0x08006211

080062e8 <__sfp>:
 80062e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ea:	4607      	mov	r7, r0
 80062ec:	f7ff ffac 	bl	8006248 <__sfp_lock_acquire>
 80062f0:	4b1e      	ldr	r3, [pc, #120]	; (800636c <__sfp+0x84>)
 80062f2:	681e      	ldr	r6, [r3, #0]
 80062f4:	69b3      	ldr	r3, [r6, #24]
 80062f6:	b913      	cbnz	r3, 80062fe <__sfp+0x16>
 80062f8:	4630      	mov	r0, r6
 80062fa:	f7ff ffbd 	bl	8006278 <__sinit>
 80062fe:	3648      	adds	r6, #72	; 0x48
 8006300:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006304:	3b01      	subs	r3, #1
 8006306:	d503      	bpl.n	8006310 <__sfp+0x28>
 8006308:	6833      	ldr	r3, [r6, #0]
 800630a:	b30b      	cbz	r3, 8006350 <__sfp+0x68>
 800630c:	6836      	ldr	r6, [r6, #0]
 800630e:	e7f7      	b.n	8006300 <__sfp+0x18>
 8006310:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006314:	b9d5      	cbnz	r5, 800634c <__sfp+0x64>
 8006316:	4b16      	ldr	r3, [pc, #88]	; (8006370 <__sfp+0x88>)
 8006318:	60e3      	str	r3, [r4, #12]
 800631a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800631e:	6665      	str	r5, [r4, #100]	; 0x64
 8006320:	f000 f84c 	bl	80063bc <__retarget_lock_init_recursive>
 8006324:	f7ff ff96 	bl	8006254 <__sfp_lock_release>
 8006328:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800632c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006330:	6025      	str	r5, [r4, #0]
 8006332:	61a5      	str	r5, [r4, #24]
 8006334:	2208      	movs	r2, #8
 8006336:	4629      	mov	r1, r5
 8006338:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800633c:	f7fe fc42 	bl	8004bc4 <memset>
 8006340:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006344:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006348:	4620      	mov	r0, r4
 800634a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800634c:	3468      	adds	r4, #104	; 0x68
 800634e:	e7d9      	b.n	8006304 <__sfp+0x1c>
 8006350:	2104      	movs	r1, #4
 8006352:	4638      	mov	r0, r7
 8006354:	f7ff ff62 	bl	800621c <__sfmoreglue>
 8006358:	4604      	mov	r4, r0
 800635a:	6030      	str	r0, [r6, #0]
 800635c:	2800      	cmp	r0, #0
 800635e:	d1d5      	bne.n	800630c <__sfp+0x24>
 8006360:	f7ff ff78 	bl	8006254 <__sfp_lock_release>
 8006364:	230c      	movs	r3, #12
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	e7ee      	b.n	8006348 <__sfp+0x60>
 800636a:	bf00      	nop
 800636c:	080075e8 	.word	0x080075e8
 8006370:	ffff0001 	.word	0xffff0001

08006374 <_fwalk_reent>:
 8006374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006378:	4606      	mov	r6, r0
 800637a:	4688      	mov	r8, r1
 800637c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006380:	2700      	movs	r7, #0
 8006382:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006386:	f1b9 0901 	subs.w	r9, r9, #1
 800638a:	d505      	bpl.n	8006398 <_fwalk_reent+0x24>
 800638c:	6824      	ldr	r4, [r4, #0]
 800638e:	2c00      	cmp	r4, #0
 8006390:	d1f7      	bne.n	8006382 <_fwalk_reent+0xe>
 8006392:	4638      	mov	r0, r7
 8006394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006398:	89ab      	ldrh	r3, [r5, #12]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d907      	bls.n	80063ae <_fwalk_reent+0x3a>
 800639e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063a2:	3301      	adds	r3, #1
 80063a4:	d003      	beq.n	80063ae <_fwalk_reent+0x3a>
 80063a6:	4629      	mov	r1, r5
 80063a8:	4630      	mov	r0, r6
 80063aa:	47c0      	blx	r8
 80063ac:	4307      	orrs	r7, r0
 80063ae:	3568      	adds	r5, #104	; 0x68
 80063b0:	e7e9      	b.n	8006386 <_fwalk_reent+0x12>
	...

080063b4 <_localeconv_r>:
 80063b4:	4800      	ldr	r0, [pc, #0]	; (80063b8 <_localeconv_r+0x4>)
 80063b6:	4770      	bx	lr
 80063b8:	20000160 	.word	0x20000160

080063bc <__retarget_lock_init_recursive>:
 80063bc:	4770      	bx	lr

080063be <__retarget_lock_acquire_recursive>:
 80063be:	4770      	bx	lr

080063c0 <__retarget_lock_release_recursive>:
 80063c0:	4770      	bx	lr
	...

080063c4 <malloc>:
 80063c4:	4b02      	ldr	r3, [pc, #8]	; (80063d0 <malloc+0xc>)
 80063c6:	4601      	mov	r1, r0
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	f000 bbef 	b.w	8006bac <_malloc_r>
 80063ce:	bf00      	nop
 80063d0:	2000000c 	.word	0x2000000c

080063d4 <memcpy>:
 80063d4:	440a      	add	r2, r1
 80063d6:	4291      	cmp	r1, r2
 80063d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063dc:	d100      	bne.n	80063e0 <memcpy+0xc>
 80063de:	4770      	bx	lr
 80063e0:	b510      	push	{r4, lr}
 80063e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ea:	4291      	cmp	r1, r2
 80063ec:	d1f9      	bne.n	80063e2 <memcpy+0xe>
 80063ee:	bd10      	pop	{r4, pc}

080063f0 <_Balloc>:
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063f4:	4604      	mov	r4, r0
 80063f6:	460d      	mov	r5, r1
 80063f8:	b976      	cbnz	r6, 8006418 <_Balloc+0x28>
 80063fa:	2010      	movs	r0, #16
 80063fc:	f7ff ffe2 	bl	80063c4 <malloc>
 8006400:	4602      	mov	r2, r0
 8006402:	6260      	str	r0, [r4, #36]	; 0x24
 8006404:	b920      	cbnz	r0, 8006410 <_Balloc+0x20>
 8006406:	4b18      	ldr	r3, [pc, #96]	; (8006468 <_Balloc+0x78>)
 8006408:	4818      	ldr	r0, [pc, #96]	; (800646c <_Balloc+0x7c>)
 800640a:	2166      	movs	r1, #102	; 0x66
 800640c:	f000 fea8 	bl	8007160 <__assert_func>
 8006410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006414:	6006      	str	r6, [r0, #0]
 8006416:	60c6      	str	r6, [r0, #12]
 8006418:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800641a:	68f3      	ldr	r3, [r6, #12]
 800641c:	b183      	cbz	r3, 8006440 <_Balloc+0x50>
 800641e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006426:	b9b8      	cbnz	r0, 8006458 <_Balloc+0x68>
 8006428:	2101      	movs	r1, #1
 800642a:	fa01 f605 	lsl.w	r6, r1, r5
 800642e:	1d72      	adds	r2, r6, #5
 8006430:	0092      	lsls	r2, r2, #2
 8006432:	4620      	mov	r0, r4
 8006434:	f000 fb5a 	bl	8006aec <_calloc_r>
 8006438:	b160      	cbz	r0, 8006454 <_Balloc+0x64>
 800643a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800643e:	e00e      	b.n	800645e <_Balloc+0x6e>
 8006440:	2221      	movs	r2, #33	; 0x21
 8006442:	2104      	movs	r1, #4
 8006444:	4620      	mov	r0, r4
 8006446:	f000 fb51 	bl	8006aec <_calloc_r>
 800644a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800644c:	60f0      	str	r0, [r6, #12]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e4      	bne.n	800641e <_Balloc+0x2e>
 8006454:	2000      	movs	r0, #0
 8006456:	bd70      	pop	{r4, r5, r6, pc}
 8006458:	6802      	ldr	r2, [r0, #0]
 800645a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800645e:	2300      	movs	r3, #0
 8006460:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006464:	e7f7      	b.n	8006456 <_Balloc+0x66>
 8006466:	bf00      	nop
 8006468:	0800762d 	.word	0x0800762d
 800646c:	08007714 	.word	0x08007714

08006470 <_Bfree>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006474:	4605      	mov	r5, r0
 8006476:	460c      	mov	r4, r1
 8006478:	b976      	cbnz	r6, 8006498 <_Bfree+0x28>
 800647a:	2010      	movs	r0, #16
 800647c:	f7ff ffa2 	bl	80063c4 <malloc>
 8006480:	4602      	mov	r2, r0
 8006482:	6268      	str	r0, [r5, #36]	; 0x24
 8006484:	b920      	cbnz	r0, 8006490 <_Bfree+0x20>
 8006486:	4b09      	ldr	r3, [pc, #36]	; (80064ac <_Bfree+0x3c>)
 8006488:	4809      	ldr	r0, [pc, #36]	; (80064b0 <_Bfree+0x40>)
 800648a:	218a      	movs	r1, #138	; 0x8a
 800648c:	f000 fe68 	bl	8007160 <__assert_func>
 8006490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006494:	6006      	str	r6, [r0, #0]
 8006496:	60c6      	str	r6, [r0, #12]
 8006498:	b13c      	cbz	r4, 80064aa <_Bfree+0x3a>
 800649a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800649c:	6862      	ldr	r2, [r4, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064a4:	6021      	str	r1, [r4, #0]
 80064a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064aa:	bd70      	pop	{r4, r5, r6, pc}
 80064ac:	0800762d 	.word	0x0800762d
 80064b0:	08007714 	.word	0x08007714

080064b4 <__multadd>:
 80064b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b8:	690e      	ldr	r6, [r1, #16]
 80064ba:	4607      	mov	r7, r0
 80064bc:	4698      	mov	r8, r3
 80064be:	460c      	mov	r4, r1
 80064c0:	f101 0014 	add.w	r0, r1, #20
 80064c4:	2300      	movs	r3, #0
 80064c6:	6805      	ldr	r5, [r0, #0]
 80064c8:	b2a9      	uxth	r1, r5
 80064ca:	fb02 8101 	mla	r1, r2, r1, r8
 80064ce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80064d2:	0c2d      	lsrs	r5, r5, #16
 80064d4:	fb02 c505 	mla	r5, r2, r5, ip
 80064d8:	b289      	uxth	r1, r1
 80064da:	3301      	adds	r3, #1
 80064dc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80064e0:	429e      	cmp	r6, r3
 80064e2:	f840 1b04 	str.w	r1, [r0], #4
 80064e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80064ea:	dcec      	bgt.n	80064c6 <__multadd+0x12>
 80064ec:	f1b8 0f00 	cmp.w	r8, #0
 80064f0:	d022      	beq.n	8006538 <__multadd+0x84>
 80064f2:	68a3      	ldr	r3, [r4, #8]
 80064f4:	42b3      	cmp	r3, r6
 80064f6:	dc19      	bgt.n	800652c <__multadd+0x78>
 80064f8:	6861      	ldr	r1, [r4, #4]
 80064fa:	4638      	mov	r0, r7
 80064fc:	3101      	adds	r1, #1
 80064fe:	f7ff ff77 	bl	80063f0 <_Balloc>
 8006502:	4605      	mov	r5, r0
 8006504:	b928      	cbnz	r0, 8006512 <__multadd+0x5e>
 8006506:	4602      	mov	r2, r0
 8006508:	4b0d      	ldr	r3, [pc, #52]	; (8006540 <__multadd+0x8c>)
 800650a:	480e      	ldr	r0, [pc, #56]	; (8006544 <__multadd+0x90>)
 800650c:	21b5      	movs	r1, #181	; 0xb5
 800650e:	f000 fe27 	bl	8007160 <__assert_func>
 8006512:	6922      	ldr	r2, [r4, #16]
 8006514:	3202      	adds	r2, #2
 8006516:	f104 010c 	add.w	r1, r4, #12
 800651a:	0092      	lsls	r2, r2, #2
 800651c:	300c      	adds	r0, #12
 800651e:	f7ff ff59 	bl	80063d4 <memcpy>
 8006522:	4621      	mov	r1, r4
 8006524:	4638      	mov	r0, r7
 8006526:	f7ff ffa3 	bl	8006470 <_Bfree>
 800652a:	462c      	mov	r4, r5
 800652c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006530:	3601      	adds	r6, #1
 8006532:	f8c3 8014 	str.w	r8, [r3, #20]
 8006536:	6126      	str	r6, [r4, #16]
 8006538:	4620      	mov	r0, r4
 800653a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800653e:	bf00      	nop
 8006540:	080076a3 	.word	0x080076a3
 8006544:	08007714 	.word	0x08007714

08006548 <__hi0bits>:
 8006548:	0c03      	lsrs	r3, r0, #16
 800654a:	041b      	lsls	r3, r3, #16
 800654c:	b9d3      	cbnz	r3, 8006584 <__hi0bits+0x3c>
 800654e:	0400      	lsls	r0, r0, #16
 8006550:	2310      	movs	r3, #16
 8006552:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006556:	bf04      	itt	eq
 8006558:	0200      	lsleq	r0, r0, #8
 800655a:	3308      	addeq	r3, #8
 800655c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006560:	bf04      	itt	eq
 8006562:	0100      	lsleq	r0, r0, #4
 8006564:	3304      	addeq	r3, #4
 8006566:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800656a:	bf04      	itt	eq
 800656c:	0080      	lsleq	r0, r0, #2
 800656e:	3302      	addeq	r3, #2
 8006570:	2800      	cmp	r0, #0
 8006572:	db05      	blt.n	8006580 <__hi0bits+0x38>
 8006574:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006578:	f103 0301 	add.w	r3, r3, #1
 800657c:	bf08      	it	eq
 800657e:	2320      	moveq	r3, #32
 8006580:	4618      	mov	r0, r3
 8006582:	4770      	bx	lr
 8006584:	2300      	movs	r3, #0
 8006586:	e7e4      	b.n	8006552 <__hi0bits+0xa>

08006588 <__lo0bits>:
 8006588:	6803      	ldr	r3, [r0, #0]
 800658a:	f013 0207 	ands.w	r2, r3, #7
 800658e:	4601      	mov	r1, r0
 8006590:	d00b      	beq.n	80065aa <__lo0bits+0x22>
 8006592:	07da      	lsls	r2, r3, #31
 8006594:	d424      	bmi.n	80065e0 <__lo0bits+0x58>
 8006596:	0798      	lsls	r0, r3, #30
 8006598:	bf49      	itett	mi
 800659a:	085b      	lsrmi	r3, r3, #1
 800659c:	089b      	lsrpl	r3, r3, #2
 800659e:	2001      	movmi	r0, #1
 80065a0:	600b      	strmi	r3, [r1, #0]
 80065a2:	bf5c      	itt	pl
 80065a4:	600b      	strpl	r3, [r1, #0]
 80065a6:	2002      	movpl	r0, #2
 80065a8:	4770      	bx	lr
 80065aa:	b298      	uxth	r0, r3
 80065ac:	b9b0      	cbnz	r0, 80065dc <__lo0bits+0x54>
 80065ae:	0c1b      	lsrs	r3, r3, #16
 80065b0:	2010      	movs	r0, #16
 80065b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80065b6:	bf04      	itt	eq
 80065b8:	0a1b      	lsreq	r3, r3, #8
 80065ba:	3008      	addeq	r0, #8
 80065bc:	071a      	lsls	r2, r3, #28
 80065be:	bf04      	itt	eq
 80065c0:	091b      	lsreq	r3, r3, #4
 80065c2:	3004      	addeq	r0, #4
 80065c4:	079a      	lsls	r2, r3, #30
 80065c6:	bf04      	itt	eq
 80065c8:	089b      	lsreq	r3, r3, #2
 80065ca:	3002      	addeq	r0, #2
 80065cc:	07da      	lsls	r2, r3, #31
 80065ce:	d403      	bmi.n	80065d8 <__lo0bits+0x50>
 80065d0:	085b      	lsrs	r3, r3, #1
 80065d2:	f100 0001 	add.w	r0, r0, #1
 80065d6:	d005      	beq.n	80065e4 <__lo0bits+0x5c>
 80065d8:	600b      	str	r3, [r1, #0]
 80065da:	4770      	bx	lr
 80065dc:	4610      	mov	r0, r2
 80065de:	e7e8      	b.n	80065b2 <__lo0bits+0x2a>
 80065e0:	2000      	movs	r0, #0
 80065e2:	4770      	bx	lr
 80065e4:	2020      	movs	r0, #32
 80065e6:	4770      	bx	lr

080065e8 <__i2b>:
 80065e8:	b510      	push	{r4, lr}
 80065ea:	460c      	mov	r4, r1
 80065ec:	2101      	movs	r1, #1
 80065ee:	f7ff feff 	bl	80063f0 <_Balloc>
 80065f2:	4602      	mov	r2, r0
 80065f4:	b928      	cbnz	r0, 8006602 <__i2b+0x1a>
 80065f6:	4b05      	ldr	r3, [pc, #20]	; (800660c <__i2b+0x24>)
 80065f8:	4805      	ldr	r0, [pc, #20]	; (8006610 <__i2b+0x28>)
 80065fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80065fe:	f000 fdaf 	bl	8007160 <__assert_func>
 8006602:	2301      	movs	r3, #1
 8006604:	6144      	str	r4, [r0, #20]
 8006606:	6103      	str	r3, [r0, #16]
 8006608:	bd10      	pop	{r4, pc}
 800660a:	bf00      	nop
 800660c:	080076a3 	.word	0x080076a3
 8006610:	08007714 	.word	0x08007714

08006614 <__multiply>:
 8006614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006618:	4614      	mov	r4, r2
 800661a:	690a      	ldr	r2, [r1, #16]
 800661c:	6923      	ldr	r3, [r4, #16]
 800661e:	429a      	cmp	r2, r3
 8006620:	bfb8      	it	lt
 8006622:	460b      	movlt	r3, r1
 8006624:	460d      	mov	r5, r1
 8006626:	bfbc      	itt	lt
 8006628:	4625      	movlt	r5, r4
 800662a:	461c      	movlt	r4, r3
 800662c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006630:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006634:	68ab      	ldr	r3, [r5, #8]
 8006636:	6869      	ldr	r1, [r5, #4]
 8006638:	eb0a 0709 	add.w	r7, sl, r9
 800663c:	42bb      	cmp	r3, r7
 800663e:	b085      	sub	sp, #20
 8006640:	bfb8      	it	lt
 8006642:	3101      	addlt	r1, #1
 8006644:	f7ff fed4 	bl	80063f0 <_Balloc>
 8006648:	b930      	cbnz	r0, 8006658 <__multiply+0x44>
 800664a:	4602      	mov	r2, r0
 800664c:	4b42      	ldr	r3, [pc, #264]	; (8006758 <__multiply+0x144>)
 800664e:	4843      	ldr	r0, [pc, #268]	; (800675c <__multiply+0x148>)
 8006650:	f240 115d 	movw	r1, #349	; 0x15d
 8006654:	f000 fd84 	bl	8007160 <__assert_func>
 8006658:	f100 0614 	add.w	r6, r0, #20
 800665c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006660:	4633      	mov	r3, r6
 8006662:	2200      	movs	r2, #0
 8006664:	4543      	cmp	r3, r8
 8006666:	d31e      	bcc.n	80066a6 <__multiply+0x92>
 8006668:	f105 0c14 	add.w	ip, r5, #20
 800666c:	f104 0314 	add.w	r3, r4, #20
 8006670:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006674:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006678:	9202      	str	r2, [sp, #8]
 800667a:	ebac 0205 	sub.w	r2, ip, r5
 800667e:	3a15      	subs	r2, #21
 8006680:	f022 0203 	bic.w	r2, r2, #3
 8006684:	3204      	adds	r2, #4
 8006686:	f105 0115 	add.w	r1, r5, #21
 800668a:	458c      	cmp	ip, r1
 800668c:	bf38      	it	cc
 800668e:	2204      	movcc	r2, #4
 8006690:	9201      	str	r2, [sp, #4]
 8006692:	9a02      	ldr	r2, [sp, #8]
 8006694:	9303      	str	r3, [sp, #12]
 8006696:	429a      	cmp	r2, r3
 8006698:	d808      	bhi.n	80066ac <__multiply+0x98>
 800669a:	2f00      	cmp	r7, #0
 800669c:	dc55      	bgt.n	800674a <__multiply+0x136>
 800669e:	6107      	str	r7, [r0, #16]
 80066a0:	b005      	add	sp, #20
 80066a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a6:	f843 2b04 	str.w	r2, [r3], #4
 80066aa:	e7db      	b.n	8006664 <__multiply+0x50>
 80066ac:	f8b3 a000 	ldrh.w	sl, [r3]
 80066b0:	f1ba 0f00 	cmp.w	sl, #0
 80066b4:	d020      	beq.n	80066f8 <__multiply+0xe4>
 80066b6:	f105 0e14 	add.w	lr, r5, #20
 80066ba:	46b1      	mov	r9, r6
 80066bc:	2200      	movs	r2, #0
 80066be:	f85e 4b04 	ldr.w	r4, [lr], #4
 80066c2:	f8d9 b000 	ldr.w	fp, [r9]
 80066c6:	b2a1      	uxth	r1, r4
 80066c8:	fa1f fb8b 	uxth.w	fp, fp
 80066cc:	fb0a b101 	mla	r1, sl, r1, fp
 80066d0:	4411      	add	r1, r2
 80066d2:	f8d9 2000 	ldr.w	r2, [r9]
 80066d6:	0c24      	lsrs	r4, r4, #16
 80066d8:	0c12      	lsrs	r2, r2, #16
 80066da:	fb0a 2404 	mla	r4, sl, r4, r2
 80066de:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80066e2:	b289      	uxth	r1, r1
 80066e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80066e8:	45f4      	cmp	ip, lr
 80066ea:	f849 1b04 	str.w	r1, [r9], #4
 80066ee:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80066f2:	d8e4      	bhi.n	80066be <__multiply+0xaa>
 80066f4:	9901      	ldr	r1, [sp, #4]
 80066f6:	5072      	str	r2, [r6, r1]
 80066f8:	9a03      	ldr	r2, [sp, #12]
 80066fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80066fe:	3304      	adds	r3, #4
 8006700:	f1b9 0f00 	cmp.w	r9, #0
 8006704:	d01f      	beq.n	8006746 <__multiply+0x132>
 8006706:	6834      	ldr	r4, [r6, #0]
 8006708:	f105 0114 	add.w	r1, r5, #20
 800670c:	46b6      	mov	lr, r6
 800670e:	f04f 0a00 	mov.w	sl, #0
 8006712:	880a      	ldrh	r2, [r1, #0]
 8006714:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006718:	fb09 b202 	mla	r2, r9, r2, fp
 800671c:	4492      	add	sl, r2
 800671e:	b2a4      	uxth	r4, r4
 8006720:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006724:	f84e 4b04 	str.w	r4, [lr], #4
 8006728:	f851 4b04 	ldr.w	r4, [r1], #4
 800672c:	f8be 2000 	ldrh.w	r2, [lr]
 8006730:	0c24      	lsrs	r4, r4, #16
 8006732:	fb09 2404 	mla	r4, r9, r4, r2
 8006736:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800673a:	458c      	cmp	ip, r1
 800673c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006740:	d8e7      	bhi.n	8006712 <__multiply+0xfe>
 8006742:	9a01      	ldr	r2, [sp, #4]
 8006744:	50b4      	str	r4, [r6, r2]
 8006746:	3604      	adds	r6, #4
 8006748:	e7a3      	b.n	8006692 <__multiply+0x7e>
 800674a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1a5      	bne.n	800669e <__multiply+0x8a>
 8006752:	3f01      	subs	r7, #1
 8006754:	e7a1      	b.n	800669a <__multiply+0x86>
 8006756:	bf00      	nop
 8006758:	080076a3 	.word	0x080076a3
 800675c:	08007714 	.word	0x08007714

08006760 <__pow5mult>:
 8006760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006764:	4615      	mov	r5, r2
 8006766:	f012 0203 	ands.w	r2, r2, #3
 800676a:	4606      	mov	r6, r0
 800676c:	460f      	mov	r7, r1
 800676e:	d007      	beq.n	8006780 <__pow5mult+0x20>
 8006770:	4c25      	ldr	r4, [pc, #148]	; (8006808 <__pow5mult+0xa8>)
 8006772:	3a01      	subs	r2, #1
 8006774:	2300      	movs	r3, #0
 8006776:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800677a:	f7ff fe9b 	bl	80064b4 <__multadd>
 800677e:	4607      	mov	r7, r0
 8006780:	10ad      	asrs	r5, r5, #2
 8006782:	d03d      	beq.n	8006800 <__pow5mult+0xa0>
 8006784:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006786:	b97c      	cbnz	r4, 80067a8 <__pow5mult+0x48>
 8006788:	2010      	movs	r0, #16
 800678a:	f7ff fe1b 	bl	80063c4 <malloc>
 800678e:	4602      	mov	r2, r0
 8006790:	6270      	str	r0, [r6, #36]	; 0x24
 8006792:	b928      	cbnz	r0, 80067a0 <__pow5mult+0x40>
 8006794:	4b1d      	ldr	r3, [pc, #116]	; (800680c <__pow5mult+0xac>)
 8006796:	481e      	ldr	r0, [pc, #120]	; (8006810 <__pow5mult+0xb0>)
 8006798:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800679c:	f000 fce0 	bl	8007160 <__assert_func>
 80067a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067a4:	6004      	str	r4, [r0, #0]
 80067a6:	60c4      	str	r4, [r0, #12]
 80067a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067b0:	b94c      	cbnz	r4, 80067c6 <__pow5mult+0x66>
 80067b2:	f240 2171 	movw	r1, #625	; 0x271
 80067b6:	4630      	mov	r0, r6
 80067b8:	f7ff ff16 	bl	80065e8 <__i2b>
 80067bc:	2300      	movs	r3, #0
 80067be:	f8c8 0008 	str.w	r0, [r8, #8]
 80067c2:	4604      	mov	r4, r0
 80067c4:	6003      	str	r3, [r0, #0]
 80067c6:	f04f 0900 	mov.w	r9, #0
 80067ca:	07eb      	lsls	r3, r5, #31
 80067cc:	d50a      	bpl.n	80067e4 <__pow5mult+0x84>
 80067ce:	4639      	mov	r1, r7
 80067d0:	4622      	mov	r2, r4
 80067d2:	4630      	mov	r0, r6
 80067d4:	f7ff ff1e 	bl	8006614 <__multiply>
 80067d8:	4639      	mov	r1, r7
 80067da:	4680      	mov	r8, r0
 80067dc:	4630      	mov	r0, r6
 80067de:	f7ff fe47 	bl	8006470 <_Bfree>
 80067e2:	4647      	mov	r7, r8
 80067e4:	106d      	asrs	r5, r5, #1
 80067e6:	d00b      	beq.n	8006800 <__pow5mult+0xa0>
 80067e8:	6820      	ldr	r0, [r4, #0]
 80067ea:	b938      	cbnz	r0, 80067fc <__pow5mult+0x9c>
 80067ec:	4622      	mov	r2, r4
 80067ee:	4621      	mov	r1, r4
 80067f0:	4630      	mov	r0, r6
 80067f2:	f7ff ff0f 	bl	8006614 <__multiply>
 80067f6:	6020      	str	r0, [r4, #0]
 80067f8:	f8c0 9000 	str.w	r9, [r0]
 80067fc:	4604      	mov	r4, r0
 80067fe:	e7e4      	b.n	80067ca <__pow5mult+0x6a>
 8006800:	4638      	mov	r0, r7
 8006802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006806:	bf00      	nop
 8006808:	08007868 	.word	0x08007868
 800680c:	0800762d 	.word	0x0800762d
 8006810:	08007714 	.word	0x08007714

08006814 <__lshift>:
 8006814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006818:	460c      	mov	r4, r1
 800681a:	6849      	ldr	r1, [r1, #4]
 800681c:	6923      	ldr	r3, [r4, #16]
 800681e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006822:	68a3      	ldr	r3, [r4, #8]
 8006824:	4607      	mov	r7, r0
 8006826:	4691      	mov	r9, r2
 8006828:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800682c:	f108 0601 	add.w	r6, r8, #1
 8006830:	42b3      	cmp	r3, r6
 8006832:	db0b      	blt.n	800684c <__lshift+0x38>
 8006834:	4638      	mov	r0, r7
 8006836:	f7ff fddb 	bl	80063f0 <_Balloc>
 800683a:	4605      	mov	r5, r0
 800683c:	b948      	cbnz	r0, 8006852 <__lshift+0x3e>
 800683e:	4602      	mov	r2, r0
 8006840:	4b28      	ldr	r3, [pc, #160]	; (80068e4 <__lshift+0xd0>)
 8006842:	4829      	ldr	r0, [pc, #164]	; (80068e8 <__lshift+0xd4>)
 8006844:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006848:	f000 fc8a 	bl	8007160 <__assert_func>
 800684c:	3101      	adds	r1, #1
 800684e:	005b      	lsls	r3, r3, #1
 8006850:	e7ee      	b.n	8006830 <__lshift+0x1c>
 8006852:	2300      	movs	r3, #0
 8006854:	f100 0114 	add.w	r1, r0, #20
 8006858:	f100 0210 	add.w	r2, r0, #16
 800685c:	4618      	mov	r0, r3
 800685e:	4553      	cmp	r3, sl
 8006860:	db33      	blt.n	80068ca <__lshift+0xb6>
 8006862:	6920      	ldr	r0, [r4, #16]
 8006864:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006868:	f104 0314 	add.w	r3, r4, #20
 800686c:	f019 091f 	ands.w	r9, r9, #31
 8006870:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006874:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006878:	d02b      	beq.n	80068d2 <__lshift+0xbe>
 800687a:	f1c9 0e20 	rsb	lr, r9, #32
 800687e:	468a      	mov	sl, r1
 8006880:	2200      	movs	r2, #0
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	fa00 f009 	lsl.w	r0, r0, r9
 8006888:	4302      	orrs	r2, r0
 800688a:	f84a 2b04 	str.w	r2, [sl], #4
 800688e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006892:	459c      	cmp	ip, r3
 8006894:	fa22 f20e 	lsr.w	r2, r2, lr
 8006898:	d8f3      	bhi.n	8006882 <__lshift+0x6e>
 800689a:	ebac 0304 	sub.w	r3, ip, r4
 800689e:	3b15      	subs	r3, #21
 80068a0:	f023 0303 	bic.w	r3, r3, #3
 80068a4:	3304      	adds	r3, #4
 80068a6:	f104 0015 	add.w	r0, r4, #21
 80068aa:	4584      	cmp	ip, r0
 80068ac:	bf38      	it	cc
 80068ae:	2304      	movcc	r3, #4
 80068b0:	50ca      	str	r2, [r1, r3]
 80068b2:	b10a      	cbz	r2, 80068b8 <__lshift+0xa4>
 80068b4:	f108 0602 	add.w	r6, r8, #2
 80068b8:	3e01      	subs	r6, #1
 80068ba:	4638      	mov	r0, r7
 80068bc:	612e      	str	r6, [r5, #16]
 80068be:	4621      	mov	r1, r4
 80068c0:	f7ff fdd6 	bl	8006470 <_Bfree>
 80068c4:	4628      	mov	r0, r5
 80068c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80068ce:	3301      	adds	r3, #1
 80068d0:	e7c5      	b.n	800685e <__lshift+0x4a>
 80068d2:	3904      	subs	r1, #4
 80068d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80068d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80068dc:	459c      	cmp	ip, r3
 80068de:	d8f9      	bhi.n	80068d4 <__lshift+0xc0>
 80068e0:	e7ea      	b.n	80068b8 <__lshift+0xa4>
 80068e2:	bf00      	nop
 80068e4:	080076a3 	.word	0x080076a3
 80068e8:	08007714 	.word	0x08007714

080068ec <__mcmp>:
 80068ec:	b530      	push	{r4, r5, lr}
 80068ee:	6902      	ldr	r2, [r0, #16]
 80068f0:	690c      	ldr	r4, [r1, #16]
 80068f2:	1b12      	subs	r2, r2, r4
 80068f4:	d10e      	bne.n	8006914 <__mcmp+0x28>
 80068f6:	f100 0314 	add.w	r3, r0, #20
 80068fa:	3114      	adds	r1, #20
 80068fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006900:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006904:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006908:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800690c:	42a5      	cmp	r5, r4
 800690e:	d003      	beq.n	8006918 <__mcmp+0x2c>
 8006910:	d305      	bcc.n	800691e <__mcmp+0x32>
 8006912:	2201      	movs	r2, #1
 8006914:	4610      	mov	r0, r2
 8006916:	bd30      	pop	{r4, r5, pc}
 8006918:	4283      	cmp	r3, r0
 800691a:	d3f3      	bcc.n	8006904 <__mcmp+0x18>
 800691c:	e7fa      	b.n	8006914 <__mcmp+0x28>
 800691e:	f04f 32ff 	mov.w	r2, #4294967295
 8006922:	e7f7      	b.n	8006914 <__mcmp+0x28>

08006924 <__mdiff>:
 8006924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006928:	460c      	mov	r4, r1
 800692a:	4606      	mov	r6, r0
 800692c:	4611      	mov	r1, r2
 800692e:	4620      	mov	r0, r4
 8006930:	4617      	mov	r7, r2
 8006932:	f7ff ffdb 	bl	80068ec <__mcmp>
 8006936:	1e05      	subs	r5, r0, #0
 8006938:	d110      	bne.n	800695c <__mdiff+0x38>
 800693a:	4629      	mov	r1, r5
 800693c:	4630      	mov	r0, r6
 800693e:	f7ff fd57 	bl	80063f0 <_Balloc>
 8006942:	b930      	cbnz	r0, 8006952 <__mdiff+0x2e>
 8006944:	4b39      	ldr	r3, [pc, #228]	; (8006a2c <__mdiff+0x108>)
 8006946:	4602      	mov	r2, r0
 8006948:	f240 2132 	movw	r1, #562	; 0x232
 800694c:	4838      	ldr	r0, [pc, #224]	; (8006a30 <__mdiff+0x10c>)
 800694e:	f000 fc07 	bl	8007160 <__assert_func>
 8006952:	2301      	movs	r3, #1
 8006954:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695c:	bfa4      	itt	ge
 800695e:	463b      	movge	r3, r7
 8006960:	4627      	movge	r7, r4
 8006962:	4630      	mov	r0, r6
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	bfa6      	itte	ge
 8006968:	461c      	movge	r4, r3
 800696a:	2500      	movge	r5, #0
 800696c:	2501      	movlt	r5, #1
 800696e:	f7ff fd3f 	bl	80063f0 <_Balloc>
 8006972:	b920      	cbnz	r0, 800697e <__mdiff+0x5a>
 8006974:	4b2d      	ldr	r3, [pc, #180]	; (8006a2c <__mdiff+0x108>)
 8006976:	4602      	mov	r2, r0
 8006978:	f44f 7110 	mov.w	r1, #576	; 0x240
 800697c:	e7e6      	b.n	800694c <__mdiff+0x28>
 800697e:	693e      	ldr	r6, [r7, #16]
 8006980:	60c5      	str	r5, [r0, #12]
 8006982:	6925      	ldr	r5, [r4, #16]
 8006984:	f107 0114 	add.w	r1, r7, #20
 8006988:	f104 0914 	add.w	r9, r4, #20
 800698c:	f100 0e14 	add.w	lr, r0, #20
 8006990:	f107 0210 	add.w	r2, r7, #16
 8006994:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006998:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800699c:	46f2      	mov	sl, lr
 800699e:	2700      	movs	r7, #0
 80069a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80069a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80069a8:	fa1f f883 	uxth.w	r8, r3
 80069ac:	fa17 f78b 	uxtah	r7, r7, fp
 80069b0:	0c1b      	lsrs	r3, r3, #16
 80069b2:	eba7 0808 	sub.w	r8, r7, r8
 80069b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80069ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80069be:	fa1f f888 	uxth.w	r8, r8
 80069c2:	141f      	asrs	r7, r3, #16
 80069c4:	454d      	cmp	r5, r9
 80069c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80069ca:	f84a 3b04 	str.w	r3, [sl], #4
 80069ce:	d8e7      	bhi.n	80069a0 <__mdiff+0x7c>
 80069d0:	1b2b      	subs	r3, r5, r4
 80069d2:	3b15      	subs	r3, #21
 80069d4:	f023 0303 	bic.w	r3, r3, #3
 80069d8:	3304      	adds	r3, #4
 80069da:	3415      	adds	r4, #21
 80069dc:	42a5      	cmp	r5, r4
 80069de:	bf38      	it	cc
 80069e0:	2304      	movcc	r3, #4
 80069e2:	4419      	add	r1, r3
 80069e4:	4473      	add	r3, lr
 80069e6:	469e      	mov	lr, r3
 80069e8:	460d      	mov	r5, r1
 80069ea:	4565      	cmp	r5, ip
 80069ec:	d30e      	bcc.n	8006a0c <__mdiff+0xe8>
 80069ee:	f10c 0203 	add.w	r2, ip, #3
 80069f2:	1a52      	subs	r2, r2, r1
 80069f4:	f022 0203 	bic.w	r2, r2, #3
 80069f8:	3903      	subs	r1, #3
 80069fa:	458c      	cmp	ip, r1
 80069fc:	bf38      	it	cc
 80069fe:	2200      	movcc	r2, #0
 8006a00:	441a      	add	r2, r3
 8006a02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006a06:	b17b      	cbz	r3, 8006a28 <__mdiff+0x104>
 8006a08:	6106      	str	r6, [r0, #16]
 8006a0a:	e7a5      	b.n	8006958 <__mdiff+0x34>
 8006a0c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006a10:	fa17 f488 	uxtah	r4, r7, r8
 8006a14:	1422      	asrs	r2, r4, #16
 8006a16:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006a1a:	b2a4      	uxth	r4, r4
 8006a1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006a20:	f84e 4b04 	str.w	r4, [lr], #4
 8006a24:	1417      	asrs	r7, r2, #16
 8006a26:	e7e0      	b.n	80069ea <__mdiff+0xc6>
 8006a28:	3e01      	subs	r6, #1
 8006a2a:	e7ea      	b.n	8006a02 <__mdiff+0xde>
 8006a2c:	080076a3 	.word	0x080076a3
 8006a30:	08007714 	.word	0x08007714

08006a34 <__d2b>:
 8006a34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a38:	4689      	mov	r9, r1
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	ec57 6b10 	vmov	r6, r7, d0
 8006a40:	4690      	mov	r8, r2
 8006a42:	f7ff fcd5 	bl	80063f0 <_Balloc>
 8006a46:	4604      	mov	r4, r0
 8006a48:	b930      	cbnz	r0, 8006a58 <__d2b+0x24>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	4b25      	ldr	r3, [pc, #148]	; (8006ae4 <__d2b+0xb0>)
 8006a4e:	4826      	ldr	r0, [pc, #152]	; (8006ae8 <__d2b+0xb4>)
 8006a50:	f240 310a 	movw	r1, #778	; 0x30a
 8006a54:	f000 fb84 	bl	8007160 <__assert_func>
 8006a58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006a5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a60:	bb35      	cbnz	r5, 8006ab0 <__d2b+0x7c>
 8006a62:	2e00      	cmp	r6, #0
 8006a64:	9301      	str	r3, [sp, #4]
 8006a66:	d028      	beq.n	8006aba <__d2b+0x86>
 8006a68:	4668      	mov	r0, sp
 8006a6a:	9600      	str	r6, [sp, #0]
 8006a6c:	f7ff fd8c 	bl	8006588 <__lo0bits>
 8006a70:	9900      	ldr	r1, [sp, #0]
 8006a72:	b300      	cbz	r0, 8006ab6 <__d2b+0x82>
 8006a74:	9a01      	ldr	r2, [sp, #4]
 8006a76:	f1c0 0320 	rsb	r3, r0, #32
 8006a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7e:	430b      	orrs	r3, r1
 8006a80:	40c2      	lsrs	r2, r0
 8006a82:	6163      	str	r3, [r4, #20]
 8006a84:	9201      	str	r2, [sp, #4]
 8006a86:	9b01      	ldr	r3, [sp, #4]
 8006a88:	61a3      	str	r3, [r4, #24]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	bf14      	ite	ne
 8006a8e:	2202      	movne	r2, #2
 8006a90:	2201      	moveq	r2, #1
 8006a92:	6122      	str	r2, [r4, #16]
 8006a94:	b1d5      	cbz	r5, 8006acc <__d2b+0x98>
 8006a96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a9a:	4405      	add	r5, r0
 8006a9c:	f8c9 5000 	str.w	r5, [r9]
 8006aa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006aa4:	f8c8 0000 	str.w	r0, [r8]
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	b003      	add	sp, #12
 8006aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ab4:	e7d5      	b.n	8006a62 <__d2b+0x2e>
 8006ab6:	6161      	str	r1, [r4, #20]
 8006ab8:	e7e5      	b.n	8006a86 <__d2b+0x52>
 8006aba:	a801      	add	r0, sp, #4
 8006abc:	f7ff fd64 	bl	8006588 <__lo0bits>
 8006ac0:	9b01      	ldr	r3, [sp, #4]
 8006ac2:	6163      	str	r3, [r4, #20]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	6122      	str	r2, [r4, #16]
 8006ac8:	3020      	adds	r0, #32
 8006aca:	e7e3      	b.n	8006a94 <__d2b+0x60>
 8006acc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ad0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ad4:	f8c9 0000 	str.w	r0, [r9]
 8006ad8:	6918      	ldr	r0, [r3, #16]
 8006ada:	f7ff fd35 	bl	8006548 <__hi0bits>
 8006ade:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ae2:	e7df      	b.n	8006aa4 <__d2b+0x70>
 8006ae4:	080076a3 	.word	0x080076a3
 8006ae8:	08007714 	.word	0x08007714

08006aec <_calloc_r>:
 8006aec:	b513      	push	{r0, r1, r4, lr}
 8006aee:	434a      	muls	r2, r1
 8006af0:	4611      	mov	r1, r2
 8006af2:	9201      	str	r2, [sp, #4]
 8006af4:	f000 f85a 	bl	8006bac <_malloc_r>
 8006af8:	4604      	mov	r4, r0
 8006afa:	b118      	cbz	r0, 8006b04 <_calloc_r+0x18>
 8006afc:	9a01      	ldr	r2, [sp, #4]
 8006afe:	2100      	movs	r1, #0
 8006b00:	f7fe f860 	bl	8004bc4 <memset>
 8006b04:	4620      	mov	r0, r4
 8006b06:	b002      	add	sp, #8
 8006b08:	bd10      	pop	{r4, pc}
	...

08006b0c <_free_r>:
 8006b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b0e:	2900      	cmp	r1, #0
 8006b10:	d048      	beq.n	8006ba4 <_free_r+0x98>
 8006b12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b16:	9001      	str	r0, [sp, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b1e:	bfb8      	it	lt
 8006b20:	18e4      	addlt	r4, r4, r3
 8006b22:	f000 fca7 	bl	8007474 <__malloc_lock>
 8006b26:	4a20      	ldr	r2, [pc, #128]	; (8006ba8 <_free_r+0x9c>)
 8006b28:	9801      	ldr	r0, [sp, #4]
 8006b2a:	6813      	ldr	r3, [r2, #0]
 8006b2c:	4615      	mov	r5, r2
 8006b2e:	b933      	cbnz	r3, 8006b3e <_free_r+0x32>
 8006b30:	6063      	str	r3, [r4, #4]
 8006b32:	6014      	str	r4, [r2, #0]
 8006b34:	b003      	add	sp, #12
 8006b36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b3a:	f000 bca1 	b.w	8007480 <__malloc_unlock>
 8006b3e:	42a3      	cmp	r3, r4
 8006b40:	d90b      	bls.n	8006b5a <_free_r+0x4e>
 8006b42:	6821      	ldr	r1, [r4, #0]
 8006b44:	1862      	adds	r2, r4, r1
 8006b46:	4293      	cmp	r3, r2
 8006b48:	bf04      	itt	eq
 8006b4a:	681a      	ldreq	r2, [r3, #0]
 8006b4c:	685b      	ldreq	r3, [r3, #4]
 8006b4e:	6063      	str	r3, [r4, #4]
 8006b50:	bf04      	itt	eq
 8006b52:	1852      	addeq	r2, r2, r1
 8006b54:	6022      	streq	r2, [r4, #0]
 8006b56:	602c      	str	r4, [r5, #0]
 8006b58:	e7ec      	b.n	8006b34 <_free_r+0x28>
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b10b      	cbz	r3, 8006b64 <_free_r+0x58>
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	d9fa      	bls.n	8006b5a <_free_r+0x4e>
 8006b64:	6811      	ldr	r1, [r2, #0]
 8006b66:	1855      	adds	r5, r2, r1
 8006b68:	42a5      	cmp	r5, r4
 8006b6a:	d10b      	bne.n	8006b84 <_free_r+0x78>
 8006b6c:	6824      	ldr	r4, [r4, #0]
 8006b6e:	4421      	add	r1, r4
 8006b70:	1854      	adds	r4, r2, r1
 8006b72:	42a3      	cmp	r3, r4
 8006b74:	6011      	str	r1, [r2, #0]
 8006b76:	d1dd      	bne.n	8006b34 <_free_r+0x28>
 8006b78:	681c      	ldr	r4, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	6053      	str	r3, [r2, #4]
 8006b7e:	4421      	add	r1, r4
 8006b80:	6011      	str	r1, [r2, #0]
 8006b82:	e7d7      	b.n	8006b34 <_free_r+0x28>
 8006b84:	d902      	bls.n	8006b8c <_free_r+0x80>
 8006b86:	230c      	movs	r3, #12
 8006b88:	6003      	str	r3, [r0, #0]
 8006b8a:	e7d3      	b.n	8006b34 <_free_r+0x28>
 8006b8c:	6825      	ldr	r5, [r4, #0]
 8006b8e:	1961      	adds	r1, r4, r5
 8006b90:	428b      	cmp	r3, r1
 8006b92:	bf04      	itt	eq
 8006b94:	6819      	ldreq	r1, [r3, #0]
 8006b96:	685b      	ldreq	r3, [r3, #4]
 8006b98:	6063      	str	r3, [r4, #4]
 8006b9a:	bf04      	itt	eq
 8006b9c:	1949      	addeq	r1, r1, r5
 8006b9e:	6021      	streq	r1, [r4, #0]
 8006ba0:	6054      	str	r4, [r2, #4]
 8006ba2:	e7c7      	b.n	8006b34 <_free_r+0x28>
 8006ba4:	b003      	add	sp, #12
 8006ba6:	bd30      	pop	{r4, r5, pc}
 8006ba8:	20000210 	.word	0x20000210

08006bac <_malloc_r>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	1ccd      	adds	r5, r1, #3
 8006bb0:	f025 0503 	bic.w	r5, r5, #3
 8006bb4:	3508      	adds	r5, #8
 8006bb6:	2d0c      	cmp	r5, #12
 8006bb8:	bf38      	it	cc
 8006bba:	250c      	movcc	r5, #12
 8006bbc:	2d00      	cmp	r5, #0
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	db01      	blt.n	8006bc6 <_malloc_r+0x1a>
 8006bc2:	42a9      	cmp	r1, r5
 8006bc4:	d903      	bls.n	8006bce <_malloc_r+0x22>
 8006bc6:	230c      	movs	r3, #12
 8006bc8:	6033      	str	r3, [r6, #0]
 8006bca:	2000      	movs	r0, #0
 8006bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bce:	f000 fc51 	bl	8007474 <__malloc_lock>
 8006bd2:	4921      	ldr	r1, [pc, #132]	; (8006c58 <_malloc_r+0xac>)
 8006bd4:	680a      	ldr	r2, [r1, #0]
 8006bd6:	4614      	mov	r4, r2
 8006bd8:	b99c      	cbnz	r4, 8006c02 <_malloc_r+0x56>
 8006bda:	4f20      	ldr	r7, [pc, #128]	; (8006c5c <_malloc_r+0xb0>)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	b923      	cbnz	r3, 8006bea <_malloc_r+0x3e>
 8006be0:	4621      	mov	r1, r4
 8006be2:	4630      	mov	r0, r6
 8006be4:	f000 f996 	bl	8006f14 <_sbrk_r>
 8006be8:	6038      	str	r0, [r7, #0]
 8006bea:	4629      	mov	r1, r5
 8006bec:	4630      	mov	r0, r6
 8006bee:	f000 f991 	bl	8006f14 <_sbrk_r>
 8006bf2:	1c43      	adds	r3, r0, #1
 8006bf4:	d123      	bne.n	8006c3e <_malloc_r+0x92>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	6033      	str	r3, [r6, #0]
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f000 fc40 	bl	8007480 <__malloc_unlock>
 8006c00:	e7e3      	b.n	8006bca <_malloc_r+0x1e>
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	1b5b      	subs	r3, r3, r5
 8006c06:	d417      	bmi.n	8006c38 <_malloc_r+0x8c>
 8006c08:	2b0b      	cmp	r3, #11
 8006c0a:	d903      	bls.n	8006c14 <_malloc_r+0x68>
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	441c      	add	r4, r3
 8006c10:	6025      	str	r5, [r4, #0]
 8006c12:	e004      	b.n	8006c1e <_malloc_r+0x72>
 8006c14:	6863      	ldr	r3, [r4, #4]
 8006c16:	42a2      	cmp	r2, r4
 8006c18:	bf0c      	ite	eq
 8006c1a:	600b      	streq	r3, [r1, #0]
 8006c1c:	6053      	strne	r3, [r2, #4]
 8006c1e:	4630      	mov	r0, r6
 8006c20:	f000 fc2e 	bl	8007480 <__malloc_unlock>
 8006c24:	f104 000b 	add.w	r0, r4, #11
 8006c28:	1d23      	adds	r3, r4, #4
 8006c2a:	f020 0007 	bic.w	r0, r0, #7
 8006c2e:	1ac2      	subs	r2, r0, r3
 8006c30:	d0cc      	beq.n	8006bcc <_malloc_r+0x20>
 8006c32:	1a1b      	subs	r3, r3, r0
 8006c34:	50a3      	str	r3, [r4, r2]
 8006c36:	e7c9      	b.n	8006bcc <_malloc_r+0x20>
 8006c38:	4622      	mov	r2, r4
 8006c3a:	6864      	ldr	r4, [r4, #4]
 8006c3c:	e7cc      	b.n	8006bd8 <_malloc_r+0x2c>
 8006c3e:	1cc4      	adds	r4, r0, #3
 8006c40:	f024 0403 	bic.w	r4, r4, #3
 8006c44:	42a0      	cmp	r0, r4
 8006c46:	d0e3      	beq.n	8006c10 <_malloc_r+0x64>
 8006c48:	1a21      	subs	r1, r4, r0
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f000 f962 	bl	8006f14 <_sbrk_r>
 8006c50:	3001      	adds	r0, #1
 8006c52:	d1dd      	bne.n	8006c10 <_malloc_r+0x64>
 8006c54:	e7cf      	b.n	8006bf6 <_malloc_r+0x4a>
 8006c56:	bf00      	nop
 8006c58:	20000210 	.word	0x20000210
 8006c5c:	20000214 	.word	0x20000214

08006c60 <__sfputc_r>:
 8006c60:	6893      	ldr	r3, [r2, #8]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	b410      	push	{r4}
 8006c68:	6093      	str	r3, [r2, #8]
 8006c6a:	da08      	bge.n	8006c7e <__sfputc_r+0x1e>
 8006c6c:	6994      	ldr	r4, [r2, #24]
 8006c6e:	42a3      	cmp	r3, r4
 8006c70:	db01      	blt.n	8006c76 <__sfputc_r+0x16>
 8006c72:	290a      	cmp	r1, #10
 8006c74:	d103      	bne.n	8006c7e <__sfputc_r+0x1e>
 8006c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c7a:	f000 b99f 	b.w	8006fbc <__swbuf_r>
 8006c7e:	6813      	ldr	r3, [r2, #0]
 8006c80:	1c58      	adds	r0, r3, #1
 8006c82:	6010      	str	r0, [r2, #0]
 8006c84:	7019      	strb	r1, [r3, #0]
 8006c86:	4608      	mov	r0, r1
 8006c88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <__sfputs_r>:
 8006c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c90:	4606      	mov	r6, r0
 8006c92:	460f      	mov	r7, r1
 8006c94:	4614      	mov	r4, r2
 8006c96:	18d5      	adds	r5, r2, r3
 8006c98:	42ac      	cmp	r4, r5
 8006c9a:	d101      	bne.n	8006ca0 <__sfputs_r+0x12>
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	e007      	b.n	8006cb0 <__sfputs_r+0x22>
 8006ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ca4:	463a      	mov	r2, r7
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f7ff ffda 	bl	8006c60 <__sfputc_r>
 8006cac:	1c43      	adds	r3, r0, #1
 8006cae:	d1f3      	bne.n	8006c98 <__sfputs_r+0xa>
 8006cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cb4 <_vfiprintf_r>:
 8006cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb8:	460d      	mov	r5, r1
 8006cba:	b09d      	sub	sp, #116	; 0x74
 8006cbc:	4614      	mov	r4, r2
 8006cbe:	4698      	mov	r8, r3
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	b118      	cbz	r0, 8006ccc <_vfiprintf_r+0x18>
 8006cc4:	6983      	ldr	r3, [r0, #24]
 8006cc6:	b90b      	cbnz	r3, 8006ccc <_vfiprintf_r+0x18>
 8006cc8:	f7ff fad6 	bl	8006278 <__sinit>
 8006ccc:	4b89      	ldr	r3, [pc, #548]	; (8006ef4 <_vfiprintf_r+0x240>)
 8006cce:	429d      	cmp	r5, r3
 8006cd0:	d11b      	bne.n	8006d0a <_vfiprintf_r+0x56>
 8006cd2:	6875      	ldr	r5, [r6, #4]
 8006cd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cd6:	07d9      	lsls	r1, r3, #31
 8006cd8:	d405      	bmi.n	8006ce6 <_vfiprintf_r+0x32>
 8006cda:	89ab      	ldrh	r3, [r5, #12]
 8006cdc:	059a      	lsls	r2, r3, #22
 8006cde:	d402      	bmi.n	8006ce6 <_vfiprintf_r+0x32>
 8006ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ce2:	f7ff fb6c 	bl	80063be <__retarget_lock_acquire_recursive>
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	071b      	lsls	r3, r3, #28
 8006cea:	d501      	bpl.n	8006cf0 <_vfiprintf_r+0x3c>
 8006cec:	692b      	ldr	r3, [r5, #16]
 8006cee:	b9eb      	cbnz	r3, 8006d2c <_vfiprintf_r+0x78>
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f000 f9c6 	bl	8007084 <__swsetup_r>
 8006cf8:	b1c0      	cbz	r0, 8006d2c <_vfiprintf_r+0x78>
 8006cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cfc:	07dc      	lsls	r4, r3, #31
 8006cfe:	d50e      	bpl.n	8006d1e <_vfiprintf_r+0x6a>
 8006d00:	f04f 30ff 	mov.w	r0, #4294967295
 8006d04:	b01d      	add	sp, #116	; 0x74
 8006d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0a:	4b7b      	ldr	r3, [pc, #492]	; (8006ef8 <_vfiprintf_r+0x244>)
 8006d0c:	429d      	cmp	r5, r3
 8006d0e:	d101      	bne.n	8006d14 <_vfiprintf_r+0x60>
 8006d10:	68b5      	ldr	r5, [r6, #8]
 8006d12:	e7df      	b.n	8006cd4 <_vfiprintf_r+0x20>
 8006d14:	4b79      	ldr	r3, [pc, #484]	; (8006efc <_vfiprintf_r+0x248>)
 8006d16:	429d      	cmp	r5, r3
 8006d18:	bf08      	it	eq
 8006d1a:	68f5      	ldreq	r5, [r6, #12]
 8006d1c:	e7da      	b.n	8006cd4 <_vfiprintf_r+0x20>
 8006d1e:	89ab      	ldrh	r3, [r5, #12]
 8006d20:	0598      	lsls	r0, r3, #22
 8006d22:	d4ed      	bmi.n	8006d00 <_vfiprintf_r+0x4c>
 8006d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d26:	f7ff fb4b 	bl	80063c0 <__retarget_lock_release_recursive>
 8006d2a:	e7e9      	b.n	8006d00 <_vfiprintf_r+0x4c>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d30:	2320      	movs	r3, #32
 8006d32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d3a:	2330      	movs	r3, #48	; 0x30
 8006d3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006f00 <_vfiprintf_r+0x24c>
 8006d40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d44:	f04f 0901 	mov.w	r9, #1
 8006d48:	4623      	mov	r3, r4
 8006d4a:	469a      	mov	sl, r3
 8006d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d50:	b10a      	cbz	r2, 8006d56 <_vfiprintf_r+0xa2>
 8006d52:	2a25      	cmp	r2, #37	; 0x25
 8006d54:	d1f9      	bne.n	8006d4a <_vfiprintf_r+0x96>
 8006d56:	ebba 0b04 	subs.w	fp, sl, r4
 8006d5a:	d00b      	beq.n	8006d74 <_vfiprintf_r+0xc0>
 8006d5c:	465b      	mov	r3, fp
 8006d5e:	4622      	mov	r2, r4
 8006d60:	4629      	mov	r1, r5
 8006d62:	4630      	mov	r0, r6
 8006d64:	f7ff ff93 	bl	8006c8e <__sfputs_r>
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f000 80aa 	beq.w	8006ec2 <_vfiprintf_r+0x20e>
 8006d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d70:	445a      	add	r2, fp
 8006d72:	9209      	str	r2, [sp, #36]	; 0x24
 8006d74:	f89a 3000 	ldrb.w	r3, [sl]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 80a2 	beq.w	8006ec2 <_vfiprintf_r+0x20e>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f04f 32ff 	mov.w	r2, #4294967295
 8006d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d88:	f10a 0a01 	add.w	sl, sl, #1
 8006d8c:	9304      	str	r3, [sp, #16]
 8006d8e:	9307      	str	r3, [sp, #28]
 8006d90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d94:	931a      	str	r3, [sp, #104]	; 0x68
 8006d96:	4654      	mov	r4, sl
 8006d98:	2205      	movs	r2, #5
 8006d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d9e:	4858      	ldr	r0, [pc, #352]	; (8006f00 <_vfiprintf_r+0x24c>)
 8006da0:	f7f9 fa1e 	bl	80001e0 <memchr>
 8006da4:	9a04      	ldr	r2, [sp, #16]
 8006da6:	b9d8      	cbnz	r0, 8006de0 <_vfiprintf_r+0x12c>
 8006da8:	06d1      	lsls	r1, r2, #27
 8006daa:	bf44      	itt	mi
 8006dac:	2320      	movmi	r3, #32
 8006dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006db2:	0713      	lsls	r3, r2, #28
 8006db4:	bf44      	itt	mi
 8006db6:	232b      	movmi	r3, #43	; 0x2b
 8006db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8006dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8006dc2:	d015      	beq.n	8006df0 <_vfiprintf_r+0x13c>
 8006dc4:	9a07      	ldr	r2, [sp, #28]
 8006dc6:	4654      	mov	r4, sl
 8006dc8:	2000      	movs	r0, #0
 8006dca:	f04f 0c0a 	mov.w	ip, #10
 8006dce:	4621      	mov	r1, r4
 8006dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dd4:	3b30      	subs	r3, #48	; 0x30
 8006dd6:	2b09      	cmp	r3, #9
 8006dd8:	d94e      	bls.n	8006e78 <_vfiprintf_r+0x1c4>
 8006dda:	b1b0      	cbz	r0, 8006e0a <_vfiprintf_r+0x156>
 8006ddc:	9207      	str	r2, [sp, #28]
 8006dde:	e014      	b.n	8006e0a <_vfiprintf_r+0x156>
 8006de0:	eba0 0308 	sub.w	r3, r0, r8
 8006de4:	fa09 f303 	lsl.w	r3, r9, r3
 8006de8:	4313      	orrs	r3, r2
 8006dea:	9304      	str	r3, [sp, #16]
 8006dec:	46a2      	mov	sl, r4
 8006dee:	e7d2      	b.n	8006d96 <_vfiprintf_r+0xe2>
 8006df0:	9b03      	ldr	r3, [sp, #12]
 8006df2:	1d19      	adds	r1, r3, #4
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	9103      	str	r1, [sp, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	bfbb      	ittet	lt
 8006dfc:	425b      	neglt	r3, r3
 8006dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8006e02:	9307      	strge	r3, [sp, #28]
 8006e04:	9307      	strlt	r3, [sp, #28]
 8006e06:	bfb8      	it	lt
 8006e08:	9204      	strlt	r2, [sp, #16]
 8006e0a:	7823      	ldrb	r3, [r4, #0]
 8006e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e0e:	d10c      	bne.n	8006e2a <_vfiprintf_r+0x176>
 8006e10:	7863      	ldrb	r3, [r4, #1]
 8006e12:	2b2a      	cmp	r3, #42	; 0x2a
 8006e14:	d135      	bne.n	8006e82 <_vfiprintf_r+0x1ce>
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	1d1a      	adds	r2, r3, #4
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	9203      	str	r2, [sp, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	bfb8      	it	lt
 8006e22:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e26:	3402      	adds	r4, #2
 8006e28:	9305      	str	r3, [sp, #20]
 8006e2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f10 <_vfiprintf_r+0x25c>
 8006e2e:	7821      	ldrb	r1, [r4, #0]
 8006e30:	2203      	movs	r2, #3
 8006e32:	4650      	mov	r0, sl
 8006e34:	f7f9 f9d4 	bl	80001e0 <memchr>
 8006e38:	b140      	cbz	r0, 8006e4c <_vfiprintf_r+0x198>
 8006e3a:	2340      	movs	r3, #64	; 0x40
 8006e3c:	eba0 000a 	sub.w	r0, r0, sl
 8006e40:	fa03 f000 	lsl.w	r0, r3, r0
 8006e44:	9b04      	ldr	r3, [sp, #16]
 8006e46:	4303      	orrs	r3, r0
 8006e48:	3401      	adds	r4, #1
 8006e4a:	9304      	str	r3, [sp, #16]
 8006e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e50:	482c      	ldr	r0, [pc, #176]	; (8006f04 <_vfiprintf_r+0x250>)
 8006e52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e56:	2206      	movs	r2, #6
 8006e58:	f7f9 f9c2 	bl	80001e0 <memchr>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d03f      	beq.n	8006ee0 <_vfiprintf_r+0x22c>
 8006e60:	4b29      	ldr	r3, [pc, #164]	; (8006f08 <_vfiprintf_r+0x254>)
 8006e62:	bb1b      	cbnz	r3, 8006eac <_vfiprintf_r+0x1f8>
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	3307      	adds	r3, #7
 8006e68:	f023 0307 	bic.w	r3, r3, #7
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	9303      	str	r3, [sp, #12]
 8006e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e72:	443b      	add	r3, r7
 8006e74:	9309      	str	r3, [sp, #36]	; 0x24
 8006e76:	e767      	b.n	8006d48 <_vfiprintf_r+0x94>
 8006e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	2001      	movs	r0, #1
 8006e80:	e7a5      	b.n	8006dce <_vfiprintf_r+0x11a>
 8006e82:	2300      	movs	r3, #0
 8006e84:	3401      	adds	r4, #1
 8006e86:	9305      	str	r3, [sp, #20]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	f04f 0c0a 	mov.w	ip, #10
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e94:	3a30      	subs	r2, #48	; 0x30
 8006e96:	2a09      	cmp	r2, #9
 8006e98:	d903      	bls.n	8006ea2 <_vfiprintf_r+0x1ee>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0c5      	beq.n	8006e2a <_vfiprintf_r+0x176>
 8006e9e:	9105      	str	r1, [sp, #20]
 8006ea0:	e7c3      	b.n	8006e2a <_vfiprintf_r+0x176>
 8006ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e7f0      	b.n	8006e8e <_vfiprintf_r+0x1da>
 8006eac:	ab03      	add	r3, sp, #12
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	462a      	mov	r2, r5
 8006eb2:	4b16      	ldr	r3, [pc, #88]	; (8006f0c <_vfiprintf_r+0x258>)
 8006eb4:	a904      	add	r1, sp, #16
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7fd ff2c 	bl	8004d14 <_printf_float>
 8006ebc:	4607      	mov	r7, r0
 8006ebe:	1c78      	adds	r0, r7, #1
 8006ec0:	d1d6      	bne.n	8006e70 <_vfiprintf_r+0x1bc>
 8006ec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ec4:	07d9      	lsls	r1, r3, #31
 8006ec6:	d405      	bmi.n	8006ed4 <_vfiprintf_r+0x220>
 8006ec8:	89ab      	ldrh	r3, [r5, #12]
 8006eca:	059a      	lsls	r2, r3, #22
 8006ecc:	d402      	bmi.n	8006ed4 <_vfiprintf_r+0x220>
 8006ece:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ed0:	f7ff fa76 	bl	80063c0 <__retarget_lock_release_recursive>
 8006ed4:	89ab      	ldrh	r3, [r5, #12]
 8006ed6:	065b      	lsls	r3, r3, #25
 8006ed8:	f53f af12 	bmi.w	8006d00 <_vfiprintf_r+0x4c>
 8006edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ede:	e711      	b.n	8006d04 <_vfiprintf_r+0x50>
 8006ee0:	ab03      	add	r3, sp, #12
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	462a      	mov	r2, r5
 8006ee6:	4b09      	ldr	r3, [pc, #36]	; (8006f0c <_vfiprintf_r+0x258>)
 8006ee8:	a904      	add	r1, sp, #16
 8006eea:	4630      	mov	r0, r6
 8006eec:	f7fe f9b6 	bl	800525c <_printf_i>
 8006ef0:	e7e4      	b.n	8006ebc <_vfiprintf_r+0x208>
 8006ef2:	bf00      	nop
 8006ef4:	080076d4 	.word	0x080076d4
 8006ef8:	080076f4 	.word	0x080076f4
 8006efc:	080076b4 	.word	0x080076b4
 8006f00:	08007874 	.word	0x08007874
 8006f04:	0800787e 	.word	0x0800787e
 8006f08:	08004d15 	.word	0x08004d15
 8006f0c:	08006c8f 	.word	0x08006c8f
 8006f10:	0800787a 	.word	0x0800787a

08006f14 <_sbrk_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	4d06      	ldr	r5, [pc, #24]	; (8006f30 <_sbrk_r+0x1c>)
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	602b      	str	r3, [r5, #0]
 8006f20:	f7fa fb3e 	bl	80015a0 <_sbrk>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d102      	bne.n	8006f2e <_sbrk_r+0x1a>
 8006f28:	682b      	ldr	r3, [r5, #0]
 8006f2a:	b103      	cbz	r3, 8006f2e <_sbrk_r+0x1a>
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	bd38      	pop	{r3, r4, r5, pc}
 8006f30:	2000035c 	.word	0x2000035c

08006f34 <__sread>:
 8006f34:	b510      	push	{r4, lr}
 8006f36:	460c      	mov	r4, r1
 8006f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f3c:	f000 faa6 	bl	800748c <_read_r>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	bfab      	itete	ge
 8006f44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f46:	89a3      	ldrhlt	r3, [r4, #12]
 8006f48:	181b      	addge	r3, r3, r0
 8006f4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f4e:	bfac      	ite	ge
 8006f50:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f52:	81a3      	strhlt	r3, [r4, #12]
 8006f54:	bd10      	pop	{r4, pc}

08006f56 <__swrite>:
 8006f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5a:	461f      	mov	r7, r3
 8006f5c:	898b      	ldrh	r3, [r1, #12]
 8006f5e:	05db      	lsls	r3, r3, #23
 8006f60:	4605      	mov	r5, r0
 8006f62:	460c      	mov	r4, r1
 8006f64:	4616      	mov	r6, r2
 8006f66:	d505      	bpl.n	8006f74 <__swrite+0x1e>
 8006f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f000 f9f8 	bl	8007364 <_lseek_r>
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f7e:	81a3      	strh	r3, [r4, #12]
 8006f80:	4632      	mov	r2, r6
 8006f82:	463b      	mov	r3, r7
 8006f84:	4628      	mov	r0, r5
 8006f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8a:	f000 b869 	b.w	8007060 <_write_r>

08006f8e <__sseek>:
 8006f8e:	b510      	push	{r4, lr}
 8006f90:	460c      	mov	r4, r1
 8006f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f96:	f000 f9e5 	bl	8007364 <_lseek_r>
 8006f9a:	1c43      	adds	r3, r0, #1
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	bf15      	itete	ne
 8006fa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006faa:	81a3      	strheq	r3, [r4, #12]
 8006fac:	bf18      	it	ne
 8006fae:	81a3      	strhne	r3, [r4, #12]
 8006fb0:	bd10      	pop	{r4, pc}

08006fb2 <__sclose>:
 8006fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb6:	f000 b8f1 	b.w	800719c <_close_r>
	...

08006fbc <__swbuf_r>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	460e      	mov	r6, r1
 8006fc0:	4614      	mov	r4, r2
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	b118      	cbz	r0, 8006fce <__swbuf_r+0x12>
 8006fc6:	6983      	ldr	r3, [r0, #24]
 8006fc8:	b90b      	cbnz	r3, 8006fce <__swbuf_r+0x12>
 8006fca:	f7ff f955 	bl	8006278 <__sinit>
 8006fce:	4b21      	ldr	r3, [pc, #132]	; (8007054 <__swbuf_r+0x98>)
 8006fd0:	429c      	cmp	r4, r3
 8006fd2:	d12b      	bne.n	800702c <__swbuf_r+0x70>
 8006fd4:	686c      	ldr	r4, [r5, #4]
 8006fd6:	69a3      	ldr	r3, [r4, #24]
 8006fd8:	60a3      	str	r3, [r4, #8]
 8006fda:	89a3      	ldrh	r3, [r4, #12]
 8006fdc:	071a      	lsls	r2, r3, #28
 8006fde:	d52f      	bpl.n	8007040 <__swbuf_r+0x84>
 8006fe0:	6923      	ldr	r3, [r4, #16]
 8006fe2:	b36b      	cbz	r3, 8007040 <__swbuf_r+0x84>
 8006fe4:	6923      	ldr	r3, [r4, #16]
 8006fe6:	6820      	ldr	r0, [r4, #0]
 8006fe8:	1ac0      	subs	r0, r0, r3
 8006fea:	6963      	ldr	r3, [r4, #20]
 8006fec:	b2f6      	uxtb	r6, r6
 8006fee:	4283      	cmp	r3, r0
 8006ff0:	4637      	mov	r7, r6
 8006ff2:	dc04      	bgt.n	8006ffe <__swbuf_r+0x42>
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f000 f966 	bl	80072c8 <_fflush_r>
 8006ffc:	bb30      	cbnz	r0, 800704c <__swbuf_r+0x90>
 8006ffe:	68a3      	ldr	r3, [r4, #8]
 8007000:	3b01      	subs	r3, #1
 8007002:	60a3      	str	r3, [r4, #8]
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	6022      	str	r2, [r4, #0]
 800700a:	701e      	strb	r6, [r3, #0]
 800700c:	6963      	ldr	r3, [r4, #20]
 800700e:	3001      	adds	r0, #1
 8007010:	4283      	cmp	r3, r0
 8007012:	d004      	beq.n	800701e <__swbuf_r+0x62>
 8007014:	89a3      	ldrh	r3, [r4, #12]
 8007016:	07db      	lsls	r3, r3, #31
 8007018:	d506      	bpl.n	8007028 <__swbuf_r+0x6c>
 800701a:	2e0a      	cmp	r6, #10
 800701c:	d104      	bne.n	8007028 <__swbuf_r+0x6c>
 800701e:	4621      	mov	r1, r4
 8007020:	4628      	mov	r0, r5
 8007022:	f000 f951 	bl	80072c8 <_fflush_r>
 8007026:	b988      	cbnz	r0, 800704c <__swbuf_r+0x90>
 8007028:	4638      	mov	r0, r7
 800702a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800702c:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <__swbuf_r+0x9c>)
 800702e:	429c      	cmp	r4, r3
 8007030:	d101      	bne.n	8007036 <__swbuf_r+0x7a>
 8007032:	68ac      	ldr	r4, [r5, #8]
 8007034:	e7cf      	b.n	8006fd6 <__swbuf_r+0x1a>
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <__swbuf_r+0xa0>)
 8007038:	429c      	cmp	r4, r3
 800703a:	bf08      	it	eq
 800703c:	68ec      	ldreq	r4, [r5, #12]
 800703e:	e7ca      	b.n	8006fd6 <__swbuf_r+0x1a>
 8007040:	4621      	mov	r1, r4
 8007042:	4628      	mov	r0, r5
 8007044:	f000 f81e 	bl	8007084 <__swsetup_r>
 8007048:	2800      	cmp	r0, #0
 800704a:	d0cb      	beq.n	8006fe4 <__swbuf_r+0x28>
 800704c:	f04f 37ff 	mov.w	r7, #4294967295
 8007050:	e7ea      	b.n	8007028 <__swbuf_r+0x6c>
 8007052:	bf00      	nop
 8007054:	080076d4 	.word	0x080076d4
 8007058:	080076f4 	.word	0x080076f4
 800705c:	080076b4 	.word	0x080076b4

08007060 <_write_r>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	4d07      	ldr	r5, [pc, #28]	; (8007080 <_write_r+0x20>)
 8007064:	4604      	mov	r4, r0
 8007066:	4608      	mov	r0, r1
 8007068:	4611      	mov	r1, r2
 800706a:	2200      	movs	r2, #0
 800706c:	602a      	str	r2, [r5, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	f7fa fa45 	bl	80014fe <_write>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d102      	bne.n	800707e <_write_r+0x1e>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	b103      	cbz	r3, 800707e <_write_r+0x1e>
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	2000035c 	.word	0x2000035c

08007084 <__swsetup_r>:
 8007084:	4b32      	ldr	r3, [pc, #200]	; (8007150 <__swsetup_r+0xcc>)
 8007086:	b570      	push	{r4, r5, r6, lr}
 8007088:	681d      	ldr	r5, [r3, #0]
 800708a:	4606      	mov	r6, r0
 800708c:	460c      	mov	r4, r1
 800708e:	b125      	cbz	r5, 800709a <__swsetup_r+0x16>
 8007090:	69ab      	ldr	r3, [r5, #24]
 8007092:	b913      	cbnz	r3, 800709a <__swsetup_r+0x16>
 8007094:	4628      	mov	r0, r5
 8007096:	f7ff f8ef 	bl	8006278 <__sinit>
 800709a:	4b2e      	ldr	r3, [pc, #184]	; (8007154 <__swsetup_r+0xd0>)
 800709c:	429c      	cmp	r4, r3
 800709e:	d10f      	bne.n	80070c0 <__swsetup_r+0x3c>
 80070a0:	686c      	ldr	r4, [r5, #4]
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070a8:	0719      	lsls	r1, r3, #28
 80070aa:	d42c      	bmi.n	8007106 <__swsetup_r+0x82>
 80070ac:	06dd      	lsls	r5, r3, #27
 80070ae:	d411      	bmi.n	80070d4 <__swsetup_r+0x50>
 80070b0:	2309      	movs	r3, #9
 80070b2:	6033      	str	r3, [r6, #0]
 80070b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070b8:	81a3      	strh	r3, [r4, #12]
 80070ba:	f04f 30ff 	mov.w	r0, #4294967295
 80070be:	e03e      	b.n	800713e <__swsetup_r+0xba>
 80070c0:	4b25      	ldr	r3, [pc, #148]	; (8007158 <__swsetup_r+0xd4>)
 80070c2:	429c      	cmp	r4, r3
 80070c4:	d101      	bne.n	80070ca <__swsetup_r+0x46>
 80070c6:	68ac      	ldr	r4, [r5, #8]
 80070c8:	e7eb      	b.n	80070a2 <__swsetup_r+0x1e>
 80070ca:	4b24      	ldr	r3, [pc, #144]	; (800715c <__swsetup_r+0xd8>)
 80070cc:	429c      	cmp	r4, r3
 80070ce:	bf08      	it	eq
 80070d0:	68ec      	ldreq	r4, [r5, #12]
 80070d2:	e7e6      	b.n	80070a2 <__swsetup_r+0x1e>
 80070d4:	0758      	lsls	r0, r3, #29
 80070d6:	d512      	bpl.n	80070fe <__swsetup_r+0x7a>
 80070d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070da:	b141      	cbz	r1, 80070ee <__swsetup_r+0x6a>
 80070dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070e0:	4299      	cmp	r1, r3
 80070e2:	d002      	beq.n	80070ea <__swsetup_r+0x66>
 80070e4:	4630      	mov	r0, r6
 80070e6:	f7ff fd11 	bl	8006b0c <_free_r>
 80070ea:	2300      	movs	r3, #0
 80070ec:	6363      	str	r3, [r4, #52]	; 0x34
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070f4:	81a3      	strh	r3, [r4, #12]
 80070f6:	2300      	movs	r3, #0
 80070f8:	6063      	str	r3, [r4, #4]
 80070fa:	6923      	ldr	r3, [r4, #16]
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	89a3      	ldrh	r3, [r4, #12]
 8007100:	f043 0308 	orr.w	r3, r3, #8
 8007104:	81a3      	strh	r3, [r4, #12]
 8007106:	6923      	ldr	r3, [r4, #16]
 8007108:	b94b      	cbnz	r3, 800711e <__swsetup_r+0x9a>
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007114:	d003      	beq.n	800711e <__swsetup_r+0x9a>
 8007116:	4621      	mov	r1, r4
 8007118:	4630      	mov	r0, r6
 800711a:	f000 f959 	bl	80073d0 <__smakebuf_r>
 800711e:	89a0      	ldrh	r0, [r4, #12]
 8007120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007124:	f010 0301 	ands.w	r3, r0, #1
 8007128:	d00a      	beq.n	8007140 <__swsetup_r+0xbc>
 800712a:	2300      	movs	r3, #0
 800712c:	60a3      	str	r3, [r4, #8]
 800712e:	6963      	ldr	r3, [r4, #20]
 8007130:	425b      	negs	r3, r3
 8007132:	61a3      	str	r3, [r4, #24]
 8007134:	6923      	ldr	r3, [r4, #16]
 8007136:	b943      	cbnz	r3, 800714a <__swsetup_r+0xc6>
 8007138:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800713c:	d1ba      	bne.n	80070b4 <__swsetup_r+0x30>
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	0781      	lsls	r1, r0, #30
 8007142:	bf58      	it	pl
 8007144:	6963      	ldrpl	r3, [r4, #20]
 8007146:	60a3      	str	r3, [r4, #8]
 8007148:	e7f4      	b.n	8007134 <__swsetup_r+0xb0>
 800714a:	2000      	movs	r0, #0
 800714c:	e7f7      	b.n	800713e <__swsetup_r+0xba>
 800714e:	bf00      	nop
 8007150:	2000000c 	.word	0x2000000c
 8007154:	080076d4 	.word	0x080076d4
 8007158:	080076f4 	.word	0x080076f4
 800715c:	080076b4 	.word	0x080076b4

08007160 <__assert_func>:
 8007160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007162:	4614      	mov	r4, r2
 8007164:	461a      	mov	r2, r3
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <__assert_func+0x2c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4605      	mov	r5, r0
 800716c:	68d8      	ldr	r0, [r3, #12]
 800716e:	b14c      	cbz	r4, 8007184 <__assert_func+0x24>
 8007170:	4b07      	ldr	r3, [pc, #28]	; (8007190 <__assert_func+0x30>)
 8007172:	9100      	str	r1, [sp, #0]
 8007174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007178:	4906      	ldr	r1, [pc, #24]	; (8007194 <__assert_func+0x34>)
 800717a:	462b      	mov	r3, r5
 800717c:	f000 f8e0 	bl	8007340 <fiprintf>
 8007180:	f000 f9a3 	bl	80074ca <abort>
 8007184:	4b04      	ldr	r3, [pc, #16]	; (8007198 <__assert_func+0x38>)
 8007186:	461c      	mov	r4, r3
 8007188:	e7f3      	b.n	8007172 <__assert_func+0x12>
 800718a:	bf00      	nop
 800718c:	2000000c 	.word	0x2000000c
 8007190:	08007885 	.word	0x08007885
 8007194:	08007892 	.word	0x08007892
 8007198:	080078c0 	.word	0x080078c0

0800719c <_close_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	4d06      	ldr	r5, [pc, #24]	; (80071b8 <_close_r+0x1c>)
 80071a0:	2300      	movs	r3, #0
 80071a2:	4604      	mov	r4, r0
 80071a4:	4608      	mov	r0, r1
 80071a6:	602b      	str	r3, [r5, #0]
 80071a8:	f7fa f9c5 	bl	8001536 <_close>
 80071ac:	1c43      	adds	r3, r0, #1
 80071ae:	d102      	bne.n	80071b6 <_close_r+0x1a>
 80071b0:	682b      	ldr	r3, [r5, #0]
 80071b2:	b103      	cbz	r3, 80071b6 <_close_r+0x1a>
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	bd38      	pop	{r3, r4, r5, pc}
 80071b8:	2000035c 	.word	0x2000035c

080071bc <__sflush_r>:
 80071bc:	898a      	ldrh	r2, [r1, #12]
 80071be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c2:	4605      	mov	r5, r0
 80071c4:	0710      	lsls	r0, r2, #28
 80071c6:	460c      	mov	r4, r1
 80071c8:	d458      	bmi.n	800727c <__sflush_r+0xc0>
 80071ca:	684b      	ldr	r3, [r1, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	dc05      	bgt.n	80071dc <__sflush_r+0x20>
 80071d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	dc02      	bgt.n	80071dc <__sflush_r+0x20>
 80071d6:	2000      	movs	r0, #0
 80071d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071de:	2e00      	cmp	r6, #0
 80071e0:	d0f9      	beq.n	80071d6 <__sflush_r+0x1a>
 80071e2:	2300      	movs	r3, #0
 80071e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071e8:	682f      	ldr	r7, [r5, #0]
 80071ea:	602b      	str	r3, [r5, #0]
 80071ec:	d032      	beq.n	8007254 <__sflush_r+0x98>
 80071ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	075a      	lsls	r2, r3, #29
 80071f4:	d505      	bpl.n	8007202 <__sflush_r+0x46>
 80071f6:	6863      	ldr	r3, [r4, #4]
 80071f8:	1ac0      	subs	r0, r0, r3
 80071fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071fc:	b10b      	cbz	r3, 8007202 <__sflush_r+0x46>
 80071fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007200:	1ac0      	subs	r0, r0, r3
 8007202:	2300      	movs	r3, #0
 8007204:	4602      	mov	r2, r0
 8007206:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007208:	6a21      	ldr	r1, [r4, #32]
 800720a:	4628      	mov	r0, r5
 800720c:	47b0      	blx	r6
 800720e:	1c43      	adds	r3, r0, #1
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	d106      	bne.n	8007222 <__sflush_r+0x66>
 8007214:	6829      	ldr	r1, [r5, #0]
 8007216:	291d      	cmp	r1, #29
 8007218:	d82c      	bhi.n	8007274 <__sflush_r+0xb8>
 800721a:	4a2a      	ldr	r2, [pc, #168]	; (80072c4 <__sflush_r+0x108>)
 800721c:	40ca      	lsrs	r2, r1
 800721e:	07d6      	lsls	r6, r2, #31
 8007220:	d528      	bpl.n	8007274 <__sflush_r+0xb8>
 8007222:	2200      	movs	r2, #0
 8007224:	6062      	str	r2, [r4, #4]
 8007226:	04d9      	lsls	r1, r3, #19
 8007228:	6922      	ldr	r2, [r4, #16]
 800722a:	6022      	str	r2, [r4, #0]
 800722c:	d504      	bpl.n	8007238 <__sflush_r+0x7c>
 800722e:	1c42      	adds	r2, r0, #1
 8007230:	d101      	bne.n	8007236 <__sflush_r+0x7a>
 8007232:	682b      	ldr	r3, [r5, #0]
 8007234:	b903      	cbnz	r3, 8007238 <__sflush_r+0x7c>
 8007236:	6560      	str	r0, [r4, #84]	; 0x54
 8007238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800723a:	602f      	str	r7, [r5, #0]
 800723c:	2900      	cmp	r1, #0
 800723e:	d0ca      	beq.n	80071d6 <__sflush_r+0x1a>
 8007240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007244:	4299      	cmp	r1, r3
 8007246:	d002      	beq.n	800724e <__sflush_r+0x92>
 8007248:	4628      	mov	r0, r5
 800724a:	f7ff fc5f 	bl	8006b0c <_free_r>
 800724e:	2000      	movs	r0, #0
 8007250:	6360      	str	r0, [r4, #52]	; 0x34
 8007252:	e7c1      	b.n	80071d8 <__sflush_r+0x1c>
 8007254:	6a21      	ldr	r1, [r4, #32]
 8007256:	2301      	movs	r3, #1
 8007258:	4628      	mov	r0, r5
 800725a:	47b0      	blx	r6
 800725c:	1c41      	adds	r1, r0, #1
 800725e:	d1c7      	bne.n	80071f0 <__sflush_r+0x34>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0c4      	beq.n	80071f0 <__sflush_r+0x34>
 8007266:	2b1d      	cmp	r3, #29
 8007268:	d001      	beq.n	800726e <__sflush_r+0xb2>
 800726a:	2b16      	cmp	r3, #22
 800726c:	d101      	bne.n	8007272 <__sflush_r+0xb6>
 800726e:	602f      	str	r7, [r5, #0]
 8007270:	e7b1      	b.n	80071d6 <__sflush_r+0x1a>
 8007272:	89a3      	ldrh	r3, [r4, #12]
 8007274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007278:	81a3      	strh	r3, [r4, #12]
 800727a:	e7ad      	b.n	80071d8 <__sflush_r+0x1c>
 800727c:	690f      	ldr	r7, [r1, #16]
 800727e:	2f00      	cmp	r7, #0
 8007280:	d0a9      	beq.n	80071d6 <__sflush_r+0x1a>
 8007282:	0793      	lsls	r3, r2, #30
 8007284:	680e      	ldr	r6, [r1, #0]
 8007286:	bf08      	it	eq
 8007288:	694b      	ldreq	r3, [r1, #20]
 800728a:	600f      	str	r7, [r1, #0]
 800728c:	bf18      	it	ne
 800728e:	2300      	movne	r3, #0
 8007290:	eba6 0807 	sub.w	r8, r6, r7
 8007294:	608b      	str	r3, [r1, #8]
 8007296:	f1b8 0f00 	cmp.w	r8, #0
 800729a:	dd9c      	ble.n	80071d6 <__sflush_r+0x1a>
 800729c:	6a21      	ldr	r1, [r4, #32]
 800729e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072a0:	4643      	mov	r3, r8
 80072a2:	463a      	mov	r2, r7
 80072a4:	4628      	mov	r0, r5
 80072a6:	47b0      	blx	r6
 80072a8:	2800      	cmp	r0, #0
 80072aa:	dc06      	bgt.n	80072ba <__sflush_r+0xfe>
 80072ac:	89a3      	ldrh	r3, [r4, #12]
 80072ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072b2:	81a3      	strh	r3, [r4, #12]
 80072b4:	f04f 30ff 	mov.w	r0, #4294967295
 80072b8:	e78e      	b.n	80071d8 <__sflush_r+0x1c>
 80072ba:	4407      	add	r7, r0
 80072bc:	eba8 0800 	sub.w	r8, r8, r0
 80072c0:	e7e9      	b.n	8007296 <__sflush_r+0xda>
 80072c2:	bf00      	nop
 80072c4:	20400001 	.word	0x20400001

080072c8 <_fflush_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	690b      	ldr	r3, [r1, #16]
 80072cc:	4605      	mov	r5, r0
 80072ce:	460c      	mov	r4, r1
 80072d0:	b913      	cbnz	r3, 80072d8 <_fflush_r+0x10>
 80072d2:	2500      	movs	r5, #0
 80072d4:	4628      	mov	r0, r5
 80072d6:	bd38      	pop	{r3, r4, r5, pc}
 80072d8:	b118      	cbz	r0, 80072e2 <_fflush_r+0x1a>
 80072da:	6983      	ldr	r3, [r0, #24]
 80072dc:	b90b      	cbnz	r3, 80072e2 <_fflush_r+0x1a>
 80072de:	f7fe ffcb 	bl	8006278 <__sinit>
 80072e2:	4b14      	ldr	r3, [pc, #80]	; (8007334 <_fflush_r+0x6c>)
 80072e4:	429c      	cmp	r4, r3
 80072e6:	d11b      	bne.n	8007320 <_fflush_r+0x58>
 80072e8:	686c      	ldr	r4, [r5, #4]
 80072ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0ef      	beq.n	80072d2 <_fflush_r+0xa>
 80072f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072f4:	07d0      	lsls	r0, r2, #31
 80072f6:	d404      	bmi.n	8007302 <_fflush_r+0x3a>
 80072f8:	0599      	lsls	r1, r3, #22
 80072fa:	d402      	bmi.n	8007302 <_fflush_r+0x3a>
 80072fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072fe:	f7ff f85e 	bl	80063be <__retarget_lock_acquire_recursive>
 8007302:	4628      	mov	r0, r5
 8007304:	4621      	mov	r1, r4
 8007306:	f7ff ff59 	bl	80071bc <__sflush_r>
 800730a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800730c:	07da      	lsls	r2, r3, #31
 800730e:	4605      	mov	r5, r0
 8007310:	d4e0      	bmi.n	80072d4 <_fflush_r+0xc>
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	059b      	lsls	r3, r3, #22
 8007316:	d4dd      	bmi.n	80072d4 <_fflush_r+0xc>
 8007318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800731a:	f7ff f851 	bl	80063c0 <__retarget_lock_release_recursive>
 800731e:	e7d9      	b.n	80072d4 <_fflush_r+0xc>
 8007320:	4b05      	ldr	r3, [pc, #20]	; (8007338 <_fflush_r+0x70>)
 8007322:	429c      	cmp	r4, r3
 8007324:	d101      	bne.n	800732a <_fflush_r+0x62>
 8007326:	68ac      	ldr	r4, [r5, #8]
 8007328:	e7df      	b.n	80072ea <_fflush_r+0x22>
 800732a:	4b04      	ldr	r3, [pc, #16]	; (800733c <_fflush_r+0x74>)
 800732c:	429c      	cmp	r4, r3
 800732e:	bf08      	it	eq
 8007330:	68ec      	ldreq	r4, [r5, #12]
 8007332:	e7da      	b.n	80072ea <_fflush_r+0x22>
 8007334:	080076d4 	.word	0x080076d4
 8007338:	080076f4 	.word	0x080076f4
 800733c:	080076b4 	.word	0x080076b4

08007340 <fiprintf>:
 8007340:	b40e      	push	{r1, r2, r3}
 8007342:	b503      	push	{r0, r1, lr}
 8007344:	4601      	mov	r1, r0
 8007346:	ab03      	add	r3, sp, #12
 8007348:	4805      	ldr	r0, [pc, #20]	; (8007360 <fiprintf+0x20>)
 800734a:	f853 2b04 	ldr.w	r2, [r3], #4
 800734e:	6800      	ldr	r0, [r0, #0]
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	f7ff fcaf 	bl	8006cb4 <_vfiprintf_r>
 8007356:	b002      	add	sp, #8
 8007358:	f85d eb04 	ldr.w	lr, [sp], #4
 800735c:	b003      	add	sp, #12
 800735e:	4770      	bx	lr
 8007360:	2000000c 	.word	0x2000000c

08007364 <_lseek_r>:
 8007364:	b538      	push	{r3, r4, r5, lr}
 8007366:	4d07      	ldr	r5, [pc, #28]	; (8007384 <_lseek_r+0x20>)
 8007368:	4604      	mov	r4, r0
 800736a:	4608      	mov	r0, r1
 800736c:	4611      	mov	r1, r2
 800736e:	2200      	movs	r2, #0
 8007370:	602a      	str	r2, [r5, #0]
 8007372:	461a      	mov	r2, r3
 8007374:	f7fa f906 	bl	8001584 <_lseek>
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	d102      	bne.n	8007382 <_lseek_r+0x1e>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	b103      	cbz	r3, 8007382 <_lseek_r+0x1e>
 8007380:	6023      	str	r3, [r4, #0]
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	2000035c 	.word	0x2000035c

08007388 <__swhatbuf_r>:
 8007388:	b570      	push	{r4, r5, r6, lr}
 800738a:	460e      	mov	r6, r1
 800738c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007390:	2900      	cmp	r1, #0
 8007392:	b096      	sub	sp, #88	; 0x58
 8007394:	4614      	mov	r4, r2
 8007396:	461d      	mov	r5, r3
 8007398:	da07      	bge.n	80073aa <__swhatbuf_r+0x22>
 800739a:	2300      	movs	r3, #0
 800739c:	602b      	str	r3, [r5, #0]
 800739e:	89b3      	ldrh	r3, [r6, #12]
 80073a0:	061a      	lsls	r2, r3, #24
 80073a2:	d410      	bmi.n	80073c6 <__swhatbuf_r+0x3e>
 80073a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073a8:	e00e      	b.n	80073c8 <__swhatbuf_r+0x40>
 80073aa:	466a      	mov	r2, sp
 80073ac:	f000 f894 	bl	80074d8 <_fstat_r>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	dbf2      	blt.n	800739a <__swhatbuf_r+0x12>
 80073b4:	9a01      	ldr	r2, [sp, #4]
 80073b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80073ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073be:	425a      	negs	r2, r3
 80073c0:	415a      	adcs	r2, r3
 80073c2:	602a      	str	r2, [r5, #0]
 80073c4:	e7ee      	b.n	80073a4 <__swhatbuf_r+0x1c>
 80073c6:	2340      	movs	r3, #64	; 0x40
 80073c8:	2000      	movs	r0, #0
 80073ca:	6023      	str	r3, [r4, #0]
 80073cc:	b016      	add	sp, #88	; 0x58
 80073ce:	bd70      	pop	{r4, r5, r6, pc}

080073d0 <__smakebuf_r>:
 80073d0:	898b      	ldrh	r3, [r1, #12]
 80073d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073d4:	079d      	lsls	r5, r3, #30
 80073d6:	4606      	mov	r6, r0
 80073d8:	460c      	mov	r4, r1
 80073da:	d507      	bpl.n	80073ec <__smakebuf_r+0x1c>
 80073dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	6123      	str	r3, [r4, #16]
 80073e4:	2301      	movs	r3, #1
 80073e6:	6163      	str	r3, [r4, #20]
 80073e8:	b002      	add	sp, #8
 80073ea:	bd70      	pop	{r4, r5, r6, pc}
 80073ec:	ab01      	add	r3, sp, #4
 80073ee:	466a      	mov	r2, sp
 80073f0:	f7ff ffca 	bl	8007388 <__swhatbuf_r>
 80073f4:	9900      	ldr	r1, [sp, #0]
 80073f6:	4605      	mov	r5, r0
 80073f8:	4630      	mov	r0, r6
 80073fa:	f7ff fbd7 	bl	8006bac <_malloc_r>
 80073fe:	b948      	cbnz	r0, 8007414 <__smakebuf_r+0x44>
 8007400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007404:	059a      	lsls	r2, r3, #22
 8007406:	d4ef      	bmi.n	80073e8 <__smakebuf_r+0x18>
 8007408:	f023 0303 	bic.w	r3, r3, #3
 800740c:	f043 0302 	orr.w	r3, r3, #2
 8007410:	81a3      	strh	r3, [r4, #12]
 8007412:	e7e3      	b.n	80073dc <__smakebuf_r+0xc>
 8007414:	4b0d      	ldr	r3, [pc, #52]	; (800744c <__smakebuf_r+0x7c>)
 8007416:	62b3      	str	r3, [r6, #40]	; 0x28
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	6020      	str	r0, [r4, #0]
 800741c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007420:	81a3      	strh	r3, [r4, #12]
 8007422:	9b00      	ldr	r3, [sp, #0]
 8007424:	6163      	str	r3, [r4, #20]
 8007426:	9b01      	ldr	r3, [sp, #4]
 8007428:	6120      	str	r0, [r4, #16]
 800742a:	b15b      	cbz	r3, 8007444 <__smakebuf_r+0x74>
 800742c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007430:	4630      	mov	r0, r6
 8007432:	f000 f863 	bl	80074fc <_isatty_r>
 8007436:	b128      	cbz	r0, 8007444 <__smakebuf_r+0x74>
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	f023 0303 	bic.w	r3, r3, #3
 800743e:	f043 0301 	orr.w	r3, r3, #1
 8007442:	81a3      	strh	r3, [r4, #12]
 8007444:	89a0      	ldrh	r0, [r4, #12]
 8007446:	4305      	orrs	r5, r0
 8007448:	81a5      	strh	r5, [r4, #12]
 800744a:	e7cd      	b.n	80073e8 <__smakebuf_r+0x18>
 800744c:	08006211 	.word	0x08006211

08007450 <__ascii_mbtowc>:
 8007450:	b082      	sub	sp, #8
 8007452:	b901      	cbnz	r1, 8007456 <__ascii_mbtowc+0x6>
 8007454:	a901      	add	r1, sp, #4
 8007456:	b142      	cbz	r2, 800746a <__ascii_mbtowc+0x1a>
 8007458:	b14b      	cbz	r3, 800746e <__ascii_mbtowc+0x1e>
 800745a:	7813      	ldrb	r3, [r2, #0]
 800745c:	600b      	str	r3, [r1, #0]
 800745e:	7812      	ldrb	r2, [r2, #0]
 8007460:	1e10      	subs	r0, r2, #0
 8007462:	bf18      	it	ne
 8007464:	2001      	movne	r0, #1
 8007466:	b002      	add	sp, #8
 8007468:	4770      	bx	lr
 800746a:	4610      	mov	r0, r2
 800746c:	e7fb      	b.n	8007466 <__ascii_mbtowc+0x16>
 800746e:	f06f 0001 	mvn.w	r0, #1
 8007472:	e7f8      	b.n	8007466 <__ascii_mbtowc+0x16>

08007474 <__malloc_lock>:
 8007474:	4801      	ldr	r0, [pc, #4]	; (800747c <__malloc_lock+0x8>)
 8007476:	f7fe bfa2 	b.w	80063be <__retarget_lock_acquire_recursive>
 800747a:	bf00      	nop
 800747c:	20000354 	.word	0x20000354

08007480 <__malloc_unlock>:
 8007480:	4801      	ldr	r0, [pc, #4]	; (8007488 <__malloc_unlock+0x8>)
 8007482:	f7fe bf9d 	b.w	80063c0 <__retarget_lock_release_recursive>
 8007486:	bf00      	nop
 8007488:	20000354 	.word	0x20000354

0800748c <_read_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4d07      	ldr	r5, [pc, #28]	; (80074ac <_read_r+0x20>)
 8007490:	4604      	mov	r4, r0
 8007492:	4608      	mov	r0, r1
 8007494:	4611      	mov	r1, r2
 8007496:	2200      	movs	r2, #0
 8007498:	602a      	str	r2, [r5, #0]
 800749a:	461a      	mov	r2, r3
 800749c:	f7fa f812 	bl	80014c4 <_read>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d102      	bne.n	80074aa <_read_r+0x1e>
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	b103      	cbz	r3, 80074aa <_read_r+0x1e>
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	2000035c 	.word	0x2000035c

080074b0 <__ascii_wctomb>:
 80074b0:	b149      	cbz	r1, 80074c6 <__ascii_wctomb+0x16>
 80074b2:	2aff      	cmp	r2, #255	; 0xff
 80074b4:	bf85      	ittet	hi
 80074b6:	238a      	movhi	r3, #138	; 0x8a
 80074b8:	6003      	strhi	r3, [r0, #0]
 80074ba:	700a      	strbls	r2, [r1, #0]
 80074bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80074c0:	bf98      	it	ls
 80074c2:	2001      	movls	r0, #1
 80074c4:	4770      	bx	lr
 80074c6:	4608      	mov	r0, r1
 80074c8:	4770      	bx	lr

080074ca <abort>:
 80074ca:	b508      	push	{r3, lr}
 80074cc:	2006      	movs	r0, #6
 80074ce:	f000 f84d 	bl	800756c <raise>
 80074d2:	2001      	movs	r0, #1
 80074d4:	f7f9 ffec 	bl	80014b0 <_exit>

080074d8 <_fstat_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4d07      	ldr	r5, [pc, #28]	; (80074f8 <_fstat_r+0x20>)
 80074dc:	2300      	movs	r3, #0
 80074de:	4604      	mov	r4, r0
 80074e0:	4608      	mov	r0, r1
 80074e2:	4611      	mov	r1, r2
 80074e4:	602b      	str	r3, [r5, #0]
 80074e6:	f7fa f832 	bl	800154e <_fstat>
 80074ea:	1c43      	adds	r3, r0, #1
 80074ec:	d102      	bne.n	80074f4 <_fstat_r+0x1c>
 80074ee:	682b      	ldr	r3, [r5, #0]
 80074f0:	b103      	cbz	r3, 80074f4 <_fstat_r+0x1c>
 80074f2:	6023      	str	r3, [r4, #0]
 80074f4:	bd38      	pop	{r3, r4, r5, pc}
 80074f6:	bf00      	nop
 80074f8:	2000035c 	.word	0x2000035c

080074fc <_isatty_r>:
 80074fc:	b538      	push	{r3, r4, r5, lr}
 80074fe:	4d06      	ldr	r5, [pc, #24]	; (8007518 <_isatty_r+0x1c>)
 8007500:	2300      	movs	r3, #0
 8007502:	4604      	mov	r4, r0
 8007504:	4608      	mov	r0, r1
 8007506:	602b      	str	r3, [r5, #0]
 8007508:	f7fa f831 	bl	800156e <_isatty>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	d102      	bne.n	8007516 <_isatty_r+0x1a>
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	b103      	cbz	r3, 8007516 <_isatty_r+0x1a>
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	bd38      	pop	{r3, r4, r5, pc}
 8007518:	2000035c 	.word	0x2000035c

0800751c <_raise_r>:
 800751c:	291f      	cmp	r1, #31
 800751e:	b538      	push	{r3, r4, r5, lr}
 8007520:	4604      	mov	r4, r0
 8007522:	460d      	mov	r5, r1
 8007524:	d904      	bls.n	8007530 <_raise_r+0x14>
 8007526:	2316      	movs	r3, #22
 8007528:	6003      	str	r3, [r0, #0]
 800752a:	f04f 30ff 	mov.w	r0, #4294967295
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007532:	b112      	cbz	r2, 800753a <_raise_r+0x1e>
 8007534:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007538:	b94b      	cbnz	r3, 800754e <_raise_r+0x32>
 800753a:	4620      	mov	r0, r4
 800753c:	f000 f830 	bl	80075a0 <_getpid_r>
 8007540:	462a      	mov	r2, r5
 8007542:	4601      	mov	r1, r0
 8007544:	4620      	mov	r0, r4
 8007546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800754a:	f000 b817 	b.w	800757c <_kill_r>
 800754e:	2b01      	cmp	r3, #1
 8007550:	d00a      	beq.n	8007568 <_raise_r+0x4c>
 8007552:	1c59      	adds	r1, r3, #1
 8007554:	d103      	bne.n	800755e <_raise_r+0x42>
 8007556:	2316      	movs	r3, #22
 8007558:	6003      	str	r3, [r0, #0]
 800755a:	2001      	movs	r0, #1
 800755c:	e7e7      	b.n	800752e <_raise_r+0x12>
 800755e:	2400      	movs	r4, #0
 8007560:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007564:	4628      	mov	r0, r5
 8007566:	4798      	blx	r3
 8007568:	2000      	movs	r0, #0
 800756a:	e7e0      	b.n	800752e <_raise_r+0x12>

0800756c <raise>:
 800756c:	4b02      	ldr	r3, [pc, #8]	; (8007578 <raise+0xc>)
 800756e:	4601      	mov	r1, r0
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	f7ff bfd3 	b.w	800751c <_raise_r>
 8007576:	bf00      	nop
 8007578:	2000000c 	.word	0x2000000c

0800757c <_kill_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4d07      	ldr	r5, [pc, #28]	; (800759c <_kill_r+0x20>)
 8007580:	2300      	movs	r3, #0
 8007582:	4604      	mov	r4, r0
 8007584:	4608      	mov	r0, r1
 8007586:	4611      	mov	r1, r2
 8007588:	602b      	str	r3, [r5, #0]
 800758a:	f7f9 ff81 	bl	8001490 <_kill>
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	d102      	bne.n	8007598 <_kill_r+0x1c>
 8007592:	682b      	ldr	r3, [r5, #0]
 8007594:	b103      	cbz	r3, 8007598 <_kill_r+0x1c>
 8007596:	6023      	str	r3, [r4, #0]
 8007598:	bd38      	pop	{r3, r4, r5, pc}
 800759a:	bf00      	nop
 800759c:	2000035c 	.word	0x2000035c

080075a0 <_getpid_r>:
 80075a0:	f7f9 bf6e 	b.w	8001480 <_getpid>

080075a4 <_init>:
 80075a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a6:	bf00      	nop
 80075a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075aa:	bc08      	pop	{r3}
 80075ac:	469e      	mov	lr, r3
 80075ae:	4770      	bx	lr

080075b0 <_fini>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	bf00      	nop
 80075b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b6:	bc08      	pop	{r3}
 80075b8:	469e      	mov	lr, r3
 80075ba:	4770      	bx	lr
